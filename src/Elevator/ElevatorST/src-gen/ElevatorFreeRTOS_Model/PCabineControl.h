/**
 * @author generated by eTrice
 *
 * Header File of ProtocolClass PCabineControl
 * 
 */

#ifndef _ELEVATORFREERTOS_MODEL_PCABINECONTROL_H_
#define _ELEVATORFREERTOS_MODEL_PCABINECONTROL_H_

#include "etDatatypes.h"
#include "modelbase/etPort.h"




/* message IDs */
enum PCabineControl_msg_ids {
	PCabineControl_MSG_MIN = 0,
	PCabineControl_OUT_floorRequest = 1,
	PCabineControl_OUT_doorRequest = 2,
	PCabineControl_OUT_done = 3,
	PCabineControl_IN_set7seg = 4,
	PCabineControl_IN_openDoor = 5,
	PCabineControl_IN_closeDoor = 6,
	PCabineControl_IN_floorRequestAck = 7,
	PCabineControl_IN_floorRequestClear = 8,
	PCabineControl_IN_startIndicateFloors = 9,
	PCabineControl_IN_stopIndicateFloors = 10,
	PCabineControl_MSG_MAX = 11
};

/*--------------------- port structs and methods */
typedef etPort PCabineControlPort;
typedef etReplPort PCabineControlReplPort;


void PCabineControlPort_floorRequest(const PCabineControlPort* self, uint8 data);
void PCabineControlReplPort_floorRequest_broadcast(const PCabineControlReplPort* self, uint8 data);
void PCabineControlReplPort_floorRequest(const PCabineControlReplPort* self, int idx, uint8 data);
void PCabineControlPort_doorRequest(const PCabineControlPort* self);
void PCabineControlReplPort_doorRequest_broadcast(const PCabineControlReplPort* self);
void PCabineControlReplPort_doorRequest(const PCabineControlReplPort* self, int idx);
void PCabineControlPort_done(const PCabineControlPort* self);
void PCabineControlReplPort_done_broadcast(const PCabineControlReplPort* self);
void PCabineControlReplPort_done(const PCabineControlReplPort* self, int idx);


etInt32 PCabineControlReplPort_getReplication(const PCabineControlReplPort* self);
typedef etPort PCabineControlConjPort;
typedef etReplPort PCabineControlConjReplPort;


void PCabineControlConjPort_set7seg(const PCabineControlConjPort* self, uint8 data);
void PCabineControlConjReplPort_set7seg_broadcast(const PCabineControlConjReplPort* self, uint8 data);
void PCabineControlConjReplPort_set7seg(const PCabineControlConjReplPort* self, int idx, uint8 data);
void PCabineControlConjPort_openDoor(const PCabineControlConjPort* self);
void PCabineControlConjReplPort_openDoor_broadcast(const PCabineControlConjReplPort* self);
void PCabineControlConjReplPort_openDoor(const PCabineControlConjReplPort* self, int idx);
void PCabineControlConjPort_closeDoor(const PCabineControlConjPort* self);
void PCabineControlConjReplPort_closeDoor_broadcast(const PCabineControlConjReplPort* self);
void PCabineControlConjReplPort_closeDoor(const PCabineControlConjReplPort* self, int idx);
void PCabineControlConjPort_floorRequestAck(const PCabineControlConjPort* self, uint8 data);
void PCabineControlConjReplPort_floorRequestAck_broadcast(const PCabineControlConjReplPort* self, uint8 data);
void PCabineControlConjReplPort_floorRequestAck(const PCabineControlConjReplPort* self, int idx, uint8 data);
void PCabineControlConjPort_floorRequestClear(const PCabineControlConjPort* self, uint8 data);
void PCabineControlConjReplPort_floorRequestClear_broadcast(const PCabineControlConjReplPort* self, uint8 data);
void PCabineControlConjReplPort_floorRequestClear(const PCabineControlConjReplPort* self, int idx, uint8 data);
void PCabineControlConjPort_startIndicateFloors(const PCabineControlConjPort* self, uint8 data);
void PCabineControlConjReplPort_startIndicateFloors_broadcast(const PCabineControlConjReplPort* self, uint8 data);
void PCabineControlConjReplPort_startIndicateFloors(const PCabineControlConjReplPort* self, int idx, uint8 data);
void PCabineControlConjPort_stopIndicateFloors(const PCabineControlConjPort* self);
void PCabineControlConjReplPort_stopIndicateFloors_broadcast(const PCabineControlConjReplPort* self);
void PCabineControlConjReplPort_stopIndicateFloors(const PCabineControlConjReplPort* self, int idx);


etInt32 PCabineControlConjReplPort_getReplication(const PCabineControlConjReplPort* self);



#endif /* _ELEVATORFREERTOS_MODEL_PCABINECONTROL_H_ */

