RoomModel room.basic.service.serial {
	
	import room.basic.types.* from "Types.room"

	async ActorClass ASerialService {
		Interface {
			SPP com: PSerial
		}
		Structure {
			usercode1{"//uc1"}
			usercode2{"//uc2"}			
			usercode3{"//uc3
				#include \"etPlatform.h\"
			"}
			ServiceImplementation of com
			Attribute sData:DSerialData
			Attribute chnls[20]:uint8["array to map channel to port index"]
			}
			Behavior {
			Operation getChnlFromPortindex(idx:uint8):uint8{
					"
					uint8 i;
					for (i=0;i<20;i++){
						if (chnls[i]==idx) break;
						}
					return i;
					"
				}
			StateMachine {
				Transition init: initial -> state0 {
					action {
						"uint8 i;"
						"for (i=0;i<20;i++){"
						"\tchnls[i]=0xFF;"
						"}"
					}
				}
				Transition tr2: state0 -> state0 {
					triggers {
						<sendData: com>
					}
					action {
						"data->chnl = getChnlFromPortindex(((etReplSubPort*)ifitem)->index);"
						"if ((chnls[data->chnl]) != 0xFF){"
						"\tdata->len+=1;"
						"\tetSendSerialData(data->len,data->chnl,data->data);}"
					}
				}
				Transition tr0: state0 -> state0 {
					triggers {
						<openChnl: com>
					}
					action {
						"if (chnl < 20){"
						"\tif (chnls[chnl]==0xFF){\t"
						"\t\tchnls[chnl]=((etReplSubPort*)ifitem)->index;}"
						"\t}"
					}
				}
				Transition tr1: state0 -> state0 {
					triggers {
						<closeChnl: com>
					}
					action {
						"uint8 chnl = getChnlFromPortindex(((etReplSubPort*)ifitem)->index);"
						"if (chnl < 20){"
						"\tchnls[chnl]=0xFF;"
						"}"
					}
				}
				State state0 {
					do {
						"DSerialData *d;"
						""
						"if (etSerialDataReceived){"
						"\tetSerialDataReceived = 0;"
						"\td=(DSerialData*) etSerialRxBuffer;"
						"\tif (chnls[d->chnl] != 0xFF){ "
						"\t\tcom[chnls[d->chnl]].dataReceived(d);}"
						"\t}"
					}
				}
			}
		}
	}

	ProtocolClass PSerial {
		usercode1 {"//uc1"}
		usercode2 {"//uc2"}
		incoming {			
			Message openChnl(chnl: uint8)
			Message closeChnl()
			Message sendData(data:DSerialData)
			Message sendString(str:uint8 ref)
		}
		outgoing {
			Message dataReceived(data:DSerialData)
			Message ack()
			Message failed()
		}
	}

	DataClass DSerialData {
		Attribute len: uint8
		Attribute chnl:uint8
		Attribute data[20]:uint8		
	}
}