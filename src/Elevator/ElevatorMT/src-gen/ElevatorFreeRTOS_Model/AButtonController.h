/**
 * @author generated by eTrice
 *
 * Header File of ActorClass AButtonController
 * 
 */

#ifndef _ELEVATORFREERTOS_MODEL_ABUTTONCONTROLLER_H_
#define _ELEVATORFREERTOS_MODEL_ABUTTONCONTROLLER_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

#include "ElevatorFreeRTOS_Model/PButtonControl.h"
#include "room/basic/service/timing/PTimer.h"

/*--------------------- begin user code ---------------------*/
#include "etPlatform.h"
/*--------------------- end user code ---------------------*/

typedef struct AButtonController AButtonController;

/* const part of ActorClass (ROM) */
typedef struct AButtonController_const {
	/* simple ports */
	const PButtonControlPort ControlPort;
	
	/* data receive ports */

	/* saps */
	const PTimerConjPort timer;
	
	/* replicated ports */
	
	/* services */
} AButtonController_const;


/* constant for state machine data */
#define ABUTTONCONTROLLER_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct AButtonController {
	const AButtonController_const* const constData;
	
	/* data send ports */
	
	/*--------------------- attributes ---------------------*/
	uint8 buttonId;
	uint8 ledId;
	uint8 floor;
	
	
	/* state machine variables */
	etInt16 state;
	etInt16 history[ABUTTONCONTROLLER_HISTORY_SIZE];
};

void AButtonController_init(AButtonController* self);

void AButtonController_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- operations ---------------------*/
void AButtonController_repeatPressed(AButtonController* self);


#endif /* _ELEVATORFREERTOS_MODEL_ABUTTONCONTROLLER_H_ */

