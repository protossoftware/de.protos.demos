/**
 * @author generated by eTrice
 *
 * Header File of ProtocolClass PMainControllerStatus
 * 
 */

#ifndef _ELEVATORFREERTOS_MODEL_PMAINCONTROLLERSTATUS_H_
#define _ELEVATORFREERTOS_MODEL_PMAINCONTROLLERSTATUS_H_

#include "etDatatypes.h"
#include "modelbase/etPort.h"




/* message IDs */
enum PMainControllerStatus_msg_ids {
	PMainControllerStatus_MSG_MIN = 0,
	PMainControllerStatus_OUT_status = 1,
	PMainControllerStatus_OUT_idle = 2,
	PMainControllerStatus_OUT_floor = 3,
	PMainControllerStatus_IN_getStatus = 4,
	PMainControllerStatus_IN_setIdleFloor = 5,
	PMainControllerStatus_IN_setIdleTime = 6,
	PMainControllerStatus_IN_requestIdle = 7,
	PMainControllerStatus_IN_requestFloor = 8,
	PMainControllerStatus_MSG_MAX = 9
};

/*--------------------- port structs and methods */
typedef etPort PMainControllerStatusPort;
typedef etReplPort PMainControllerStatusReplPort;


void PMainControllerStatusPort_status(const PMainControllerStatusPort* self, uint32 data);
void PMainControllerStatusReplPort_status_broadcast(const PMainControllerStatusReplPort* self, uint32 data);
void PMainControllerStatusReplPort_status(const PMainControllerStatusReplPort* self, int idx, uint32 data);
void PMainControllerStatusPort_idle(const PMainControllerStatusPort* self);
void PMainControllerStatusReplPort_idle_broadcast(const PMainControllerStatusReplPort* self);
void PMainControllerStatusReplPort_idle(const PMainControllerStatusReplPort* self, int idx);
void PMainControllerStatusPort_floor(const PMainControllerStatusPort* self, uint8 data);
void PMainControllerStatusReplPort_floor_broadcast(const PMainControllerStatusReplPort* self, uint8 data);
void PMainControllerStatusReplPort_floor(const PMainControllerStatusReplPort* self, int idx, uint8 data);


etInt32 PMainControllerStatusReplPort_getReplication(const PMainControllerStatusReplPort* self);
typedef etPort PMainControllerStatusConjPort;
typedef etReplPort PMainControllerStatusConjReplPort;


void PMainControllerStatusConjPort_getStatus(const PMainControllerStatusConjPort* self);
void PMainControllerStatusConjReplPort_getStatus_broadcast(const PMainControllerStatusConjReplPort* self);
void PMainControllerStatusConjReplPort_getStatus(const PMainControllerStatusConjReplPort* self, int idx);
void PMainControllerStatusConjPort_setIdleFloor(const PMainControllerStatusConjPort* self, uint8 data);
void PMainControllerStatusConjReplPort_setIdleFloor_broadcast(const PMainControllerStatusConjReplPort* self, uint8 data);
void PMainControllerStatusConjReplPort_setIdleFloor(const PMainControllerStatusConjReplPort* self, int idx, uint8 data);
void PMainControllerStatusConjPort_setIdleTime(const PMainControllerStatusConjPort* self, uint8 data);
void PMainControllerStatusConjReplPort_setIdleTime_broadcast(const PMainControllerStatusConjReplPort* self, uint8 data);
void PMainControllerStatusConjReplPort_setIdleTime(const PMainControllerStatusConjReplPort* self, int idx, uint8 data);
void PMainControllerStatusConjPort_requestIdle(const PMainControllerStatusConjPort* self);
void PMainControllerStatusConjReplPort_requestIdle_broadcast(const PMainControllerStatusConjReplPort* self);
void PMainControllerStatusConjReplPort_requestIdle(const PMainControllerStatusConjReplPort* self, int idx);
void PMainControllerStatusConjPort_requestFloor(const PMainControllerStatusConjPort* self);
void PMainControllerStatusConjReplPort_requestFloor_broadcast(const PMainControllerStatusConjReplPort* self);
void PMainControllerStatusConjReplPort_requestFloor(const PMainControllerStatusConjReplPort* self, int idx);


etInt32 PMainControllerStatusConjReplPort_getReplication(const PMainControllerStatusConjReplPort* self);



#endif /* _ELEVATORFREERTOS_MODEL_PMAINCONTROLLERSTATUS_H_ */

