/**
 * @author generated by eTrice
 *
 * Header File of ActorClass AElevatorMainController
 * 
 */

#ifndef _ELEVATORFREERTOS_MODEL_AELEVATORMAINCONTROLLER_H_
#define _ELEVATORFREERTOS_MODEL_AELEVATORMAINCONTROLLER_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

#include "ElevatorFreeRTOS_Model/PCabineControl.h"
#include "ElevatorFreeRTOS_Model/PFloorControl.h"
#include "ElevatorFreeRTOS_Model/PMainControllerStatus.h"
#include "ElevatorFreeRTOS_Model/PMotorControl.h"
#include "ElevatorFreeRTOS_Model/PStartGenerator.h"
#include "room/basic/service/timing/PTimer.h"


typedef struct AElevatorMainController AElevatorMainController;

/* const part of ActorClass (ROM) */
typedef struct AElevatorMainController_const {
	/* simple ports */
	const PCabineControlConjPort CabinePort;
	const PMotorControlConjPort MotorPort;
	const PMainControllerStatusPort controlPort;
	const PStartGeneratorConjPort HelperPort;
	
	/* data receive ports */

	/* saps */
	const PTimerConjPort timer;
	
	/* replicated ports */
	const etReplPort FloorPort;
	
	/* services */
} AElevatorMainController_const;


/* constant for state machine data */
#define AELEVATORMAINCONTROLLER_HISTORY_SIZE 5

/* variable part of ActorClass (RAM) */
struct AElevatorMainController {
	const AElevatorMainController_const* const constData;
	
	/* data send ports */
	
	/*--------------------- attributes ---------------------*/
	uint8 floor;
	uint8 doorStatus;
	uint8 upRequests[5];
	uint8 downRequests[5];
	uint8 idleTime;
	uint8 idleFloor;
	uint8 reportState;
	uint8 idleRequest;
	uint8 floorRequest;
	
	
	/* state machine variables */
	etInt16 state;
	etInt16 history[AELEVATORMAINCONTROLLER_HISTORY_SIZE];
};

void AElevatorMainController_init(AElevatorMainController* self);

void AElevatorMainController_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- operations ---------------------*/
void AElevatorMainController_clearFloorRequests(AElevatorMainController* self);
void AElevatorMainController_clearAllRequests(AElevatorMainController* self);
uint8 AElevatorMainController_isRequestHere(AElevatorMainController* self);
uint8 AElevatorMainController_isRequestAbove(AElevatorMainController* self);
uint8 AElevatorMainController_isRequestBelow(AElevatorMainController* self);


#endif /* _ELEVATORFREERTOS_MODEL_AELEVATORMAINCONTROLLER_H_ */

