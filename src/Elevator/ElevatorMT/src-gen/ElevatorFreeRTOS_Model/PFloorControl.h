/**
 * @author generated by eTrice
 *
 * Header File of ProtocolClass PFloorControl
 * 
 */

#ifndef _ELEVATORFREERTOS_MODEL_PFLOORCONTROL_H_
#define _ELEVATORFREERTOS_MODEL_PFLOORCONTROL_H_

#include "etDatatypes.h"
#include "modelbase/etPort.h"




/* message IDs */
enum PFloorControl_msg_ids {
	PFloorControl_MSG_MIN = 0,
	PFloorControl_OUT_requestUp = 1,
	PFloorControl_OUT_requestDown = 2,
	PFloorControl_OUT_done = 3,
	PFloorControl_IN_setFloor = 4,
	PFloorControl_IN_openDoor = 5,
	PFloorControl_IN_closeDoor = 6,
	PFloorControl_IN_requestUpAck = 7,
	PFloorControl_IN_requestDownAck = 8,
	PFloorControl_IN_requestsClear = 9,
	PFloorControl_MSG_MAX = 10
};

/*--------------------- port structs and methods */
typedef etPort PFloorControlPort;
typedef etReplPort PFloorControlReplPort;


void PFloorControlPort_requestUp(const PFloorControlPort* self);
void PFloorControlReplPort_requestUp_broadcast(const PFloorControlReplPort* self);
void PFloorControlReplPort_requestUp(const PFloorControlReplPort* self, int idx);
void PFloorControlPort_requestDown(const PFloorControlPort* self);
void PFloorControlReplPort_requestDown_broadcast(const PFloorControlReplPort* self);
void PFloorControlReplPort_requestDown(const PFloorControlReplPort* self, int idx);
void PFloorControlPort_done(const PFloorControlPort* self);
void PFloorControlReplPort_done_broadcast(const PFloorControlReplPort* self);
void PFloorControlReplPort_done(const PFloorControlReplPort* self, int idx);


etInt32 PFloorControlReplPort_getReplication(const PFloorControlReplPort* self);
typedef etPort PFloorControlConjPort;
typedef etReplPort PFloorControlConjReplPort;


void PFloorControlConjPort_setFloor(const PFloorControlConjPort* self, uint8 data);
void PFloorControlConjReplPort_setFloor_broadcast(const PFloorControlConjReplPort* self, uint8 data);
void PFloorControlConjReplPort_setFloor(const PFloorControlConjReplPort* self, int idx, uint8 data);
void PFloorControlConjPort_openDoor(const PFloorControlConjPort* self);
void PFloorControlConjReplPort_openDoor_broadcast(const PFloorControlConjReplPort* self);
void PFloorControlConjReplPort_openDoor(const PFloorControlConjReplPort* self, int idx);
void PFloorControlConjPort_closeDoor(const PFloorControlConjPort* self);
void PFloorControlConjReplPort_closeDoor_broadcast(const PFloorControlConjReplPort* self);
void PFloorControlConjReplPort_closeDoor(const PFloorControlConjReplPort* self, int idx);
void PFloorControlConjPort_requestUpAck(const PFloorControlConjPort* self);
void PFloorControlConjReplPort_requestUpAck_broadcast(const PFloorControlConjReplPort* self);
void PFloorControlConjReplPort_requestUpAck(const PFloorControlConjReplPort* self, int idx);
void PFloorControlConjPort_requestDownAck(const PFloorControlConjPort* self);
void PFloorControlConjReplPort_requestDownAck_broadcast(const PFloorControlConjReplPort* self);
void PFloorControlConjReplPort_requestDownAck(const PFloorControlConjReplPort* self, int idx);
void PFloorControlConjPort_requestsClear(const PFloorControlConjPort* self);
void PFloorControlConjReplPort_requestsClear_broadcast(const PFloorControlConjReplPort* self);
void PFloorControlConjReplPort_requestsClear(const PFloorControlConjReplPort* self, int idx);


etInt32 PFloorControlConjReplPort_getReplication(const PFloorControlConjReplPort* self);



#endif /* _ELEVATORFREERTOS_MODEL_PFLOORCONTROL_H_ */

