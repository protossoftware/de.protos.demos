package CodeGenerator;

import java.util.*;
import com.ifx.davex.appjetinteract.App2JetInterface;

public class adcglob001c_template
{
  protected static String nl;
  public static synchronized adcglob001c_template create(String lineSeparator)
  {
    nl = lineSeparator;
    adcglob001c_template result = new adcglob001c_template();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*******************************************************************************" + NL + " Copyright (c) 2014, Infineon Technologies AG                                 **" + NL + " All rights reserved.                                                         **" + NL + "                                                                              **" + NL + " Redistribution and use in source and binary forms, with or without           **" + NL + " modification,are permitted provided that the following conditions are met:   **" + NL + "                                                                              **" + NL + " *Redistributions of source code must retain the above copyright notice,      **" + NL + " this list of conditions and the following disclaimer.                        **" + NL + " *Redistributions in binary form must reproduce the above copyright notice,   **" + NL + " this list of conditions and the following disclaimer in the documentation    **" + NL + " and/or other materials provided with the distribution.                       **" + NL + " *Neither the name of the copyright holders nor the names of its contributors **" + NL + " may be used to endorse or promote products derived from this software without**" + NL + " specific prior written permission.                                           **" + NL + "                                                                              **" + NL + " THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"  **" + NL + " AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **" + NL + " IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **" + NL + " ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **" + NL + " LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **" + NL + " CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **" + NL + " SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **" + NL + " INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **" + NL + " CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **" + NL + " ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **" + NL + " POSSIBILITY OF SUCH DAMAGE.                                                  **" + NL + "                                                                              **" + NL + " To improve the quality of the software, users are encouraged to share        **" + NL + " modifications, enhancements or bug fixes with Infineon Technologies AG       **" + NL + " dave@infineon.com).                                                          **" + NL + "                                                                              **" + NL + " *******************************************************************************" + NL + " **                                                                           **" + NL + " **                                                                           **" + NL + " ** PLATFORM : Infineon XMC4000/XMC1000 Series                                **" + NL + " **                                                                           **" + NL + " ** COMPILER : Compiler Independent                                           **" + NL + " **                                                                           **" + NL + " ** AUTHOR : App Developer                                                    **" + NL + " **                                                                           **" + NL + " ** MAY BE CHANGED BY USER [yes/no]: Yes                                      **" + NL + " **                                                                           **" + NL + " ** MODIFICATION DATE : Apr 25, 2014                                          **" + NL + " **                                                                           **" + NL + " ******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + " **                       Author(s) Identity                                  **" + NL + " *******************************************************************************" + NL + " **                                                                           **" + NL + " ** Initials           Name                                                   **" + NL + " ** --------------------------------------------------------------------------**" + NL + " ** Neelakanta        App Developer                                           **" + NL + " ** SSAM              Sridhar Sampath                                         **" + NL + " ******************************************************************************/" + NL + "" + NL + "/**" + NL + " * @file ADCGLOB001.c" + NL + " *" + NL + " * @brief" + NL + " * This is global ADC App which allows the sharing of global ADC resources." + NL + " *" + NL + " * Change History:" + NL + " * Date       version       Details" + NL + " * 12-Dec-2012   1.0.5    Initial code added for XMC1000" + NL + " * 18-Jan-2013   1.0.6    Merging with XMC1000 done" + NL + " * 24-Apr-2013   1.0.12   Ported to XMC4500 step AB and" + NL + " *                        Source Result selection Feature added" + NL + " * 10-Jun-2013   1.0.14   1. Supported for XMC1100 device," + NL + " *                        2. Comment in header section - the Device series name is" + NL + " *                           made as XMC1000" + NL + " * 27-Jun-2013   1.0.16   Global limits made unavailable for adc004 app" + NL + " * 29-Aug-2013   1.0.18   XMC1200/XMC1300 New Sofware IDS added." + NL + " *                        Unused code removed" + NL + " * 31-Oct-2013   1.0.20   1. The macro name ADCGLOB001_DBG002_FUNCTION_ENTRY is" + NL + " *                        corrected as ADCGLOB001_FUNCTION_ENTRY" + NL + " *                        2. Analog Clock divider value minimum 1 was generated" + NL + " *                        and now it is made as 0 for XMC1000 devices." + NL + " * 14-Nov-2013   1.0.22   CLK001_Init() for XMC4000 devices CLK002_Init() for" + NL + " *                        XMC1000 devices is removed in ADCGLOB001_Init()" + NL + " *                        function, since this CLK00x_Init() function is called" + NL + " *                        at the beginning  of the DAVE_Init() function." + NL + " * 29-Jan-2014   1.0.24   Error codes are added in various functions, that can" + NL + " *                        be logged with DBG002 App." + NL + " * 25-Apr-2014   1.0.28   Double clock for MSB conversion option removed," + NL + " *                        Sampling time calculation for XMC1 devices modified with accelerated mode," + NL + " *                        Startup calibration API Modified." + NL + " */" + NL + "" + NL + "/*******************************************************************************" + NL + " ** INCLUDE FILES                                                             **" + NL + " ******************************************************************************/" + NL + "" + NL + "#include <DAVE3.h>" + NL;
  protected final String TEXT_2 = NL;
  protected final String TEXT_3 = NL + "/*****************************************************************************" + NL + "              DUMMY DEFINTIONS OF DEBUG LOG MACROS" + NL + "*****************************************************************************/" + NL + "/*These definitions are included here to avoid compilation errors," + NL + " since the DBG002 app is not part of the project. All the macros are defined" + NL + " as empty*/" + NL + "#ifndef _DBG002_H_" + NL + "" + NL + "#define DBG002_RegisterCallBack(A,B,C)" + NL + "#define DBG002_I(e)" + NL + "#define DBG002_IG(e,g)" + NL + "#define DBG002_IH(e,h)" + NL + "#define DBG002_IP(e,p)" + NL + "#define DBG002_IGH(e,g,h)" + NL + "#define DBG002_IGP(e,g,p)" + NL + "#define DBG002_IHP(e,h,p)" + NL + "#define DBG002_IGHP(e,g,h,p)" + NL + "#define DBG002_N(e)" + NL + "#define DBG002_NG(e,g)" + NL + "#define DBG002_NH(e,h)" + NL + "#define DBG002_NP(e,p)" + NL + "#define DBG002_NGH(e,g,h)" + NL + "#define DBG002_NGP(e,g,p)" + NL + "#define DBG002_NHP(e,h,p)" + NL + "#define DBG002_NGHP(e,g,h,p)" + NL + "#define DBG002_ID(e)" + NL + "#define DBG002_IS(e)" + NL + "#define DBG002_ISG(e,g)" + NL + "#define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)" + NL + "#define DBG002_CRITICAL(groupid,messageid,length,value)" + NL + "#define DBG002_ERROR(groupid,messageid,length,value)" + NL + "#define DBG002_WARNING(groupid,messageid,length,value)" + NL + "#define DBG002_INFO(groupid,messageid,length,value)" + NL + "#define DBG002_TRACE(groupid,messageid,length,value)" + NL + "#define DBG002_FUNCTION_ENTRY(GID, Status)" + NL + "#define DBG002_FUNCTION_EXIT(GID, Status)" + NL + "" + NL + "#define DBG002_MESSAGEID_LITERAL" + NL + "" + NL + "#endif/* End of defintions of dummy Debug Log macros*/";
  protected final String TEXT_4 = NL + NL + NL + "/*******************************************************************************" + NL + "**                      Private Macro Definitions                             **" + NL + "*******************************************************************************/" + NL + "#define APP_GID DBG002_GID_ADCGLOB001";
  protected final String TEXT_5 = NL + "#define CALIB00 0x480340E0" + NL + "#define CALIB01 0x480340E4";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = NL + "/**" + NL + " * @cond INTERNAL_DOCS" + NL + " */" + NL + "/*******************************************************************************" + NL + " **                              API DEFINITION" + NL + " *******************************************************************************/" + NL + "" + NL + "/**" + NL + " *This function initialize all VADC Global registers based on GUI configuration." + NL + " */" + NL + "void ADCGLOB001_Init(void)" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if(ADCGLOB001_Handle0.kDynamicDataPtr->StateType == ADCGLOB001_UNINITIALIZED )" + NL + "    {    ";
  protected final String TEXT_8 = NL + "        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);" + NL + "        SCU_GENERAL->PASSWD = 0x000000C0U;";
  protected final String TEXT_9 = NL + "        /* Disables the gating for VADC kernel This line of code is not applicable for XMC4500. */" + NL + "        SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_VADC_Pos);";
  protected final String TEXT_10 = NL + "        SCU_GENERAL->PASSWD = 0x000000C3UL;" + NL + "        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))" + NL + "        {};";
  protected final String TEXT_11 = " ";
  protected final String TEXT_12 = "    ";
  protected final String TEXT_13 = NL + "        /* Bring ADC Module Out of Reset" + NL + "         *  This is not applicable for XMC1000" + NL + "         */" + NL + "        RESET001_DeassertReset(PER0_VADC);";
  protected final String TEXT_14 = NL + "        /* Enable Out of range Comparator for ADC channels pins P2.2to P2.9," + NL + "         * this code is applicable only for XMC1xxx devices  */" + NL + "            COMPARATOR->ORCCTRL = 0XFFU;";
  protected final String TEXT_15 = NL + "         /* Enable Out of range Comparator for ADC channels pins P2.2to P2.9," + NL + "          * this code is applicable only for XMC1100 devices  */" + NL + "            *(uint32_t *)0x40010500 = 0X00FF;  //Enables the adc channels in analog comparator";
  protected final String TEXT_16 = NL + "        /* Bring the module out of disabled state.*/" + NL + "        CLR_BIT( ADCGLOB001_Handle0.kGlobalPtr->CLC, VADC_CLC_DISR_Pos);" + NL + "        /**" + NL + "         * Make divider bit fields writable." + NL + "         * Configure Divider Factor for the Analog Internal Clock." + NL + "         * Configure Divider Factor for the Arbiter Clock." + NL + "         * Configure Double Clock for the MSB Conversion." + NL + "         */" + NL + "        ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG = \\" + NL + "                (uint32_t)(((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kArbiterClkDivider <<VADC_GLOBCFG_DIVD_Pos) & VADC_GLOBCFG_DIVD_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kAnalogClkDivider <<VADC_GLOBCFG_DIVA_Pos)&VADC_GLOBCFG_DIVA_Msk));" + NL + "        /* Make the divider bit fields write protected */" + NL + "        CLR_BIT( ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG, VADC_GLOBCFG_DIVWC_Pos);" + NL;
  protected final String TEXT_17 = NL + "        /**" + NL + "         * Configure Class0 Sample Time Control for Standard Conversion." + NL + "         * Configure Class0 Sample Time Control for EMUX Conversion." + NL + "         * Configure Class0 Conversion Mode for Standard Conversion." + NL + "         * Configure Class0 Conversion Mode for EMUX Conversion." + NL + "         */" + NL + "        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \\" + NL + "                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass0 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass0 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass0 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass0 <<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));" + NL + "        /**" + NL + "         * Configure Class1 Sample Time Control for Standard Conversion." + NL + "         * Configure Class1 Sample Time Control for EMUX Conversion." + NL + "         * Configure Class1 Conversion Mode for Standard Conversion." + NL + "         * Configure Class1 Conversion Mode for EMUX Conversion." + NL + "         */" + NL + "        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \\" + NL + "                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass1 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass1 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass1 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass1<<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));" + NL + "" + NL + "        /* Configure the lower and upper boundary based on the GUI configuration.*/" + NL + "        ADCGLOB001_Handle0.kGlobalPtr->GLOBBOUND = \\" + NL + "                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.KGlobBoundary1 <<VADC_GLOBBOUND_BOUNDARY1_Pos)&VADC_GLOBBOUND_BOUNDARY1_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.KGlobBoundary0 <<VADC_GLOBBOUND_BOUNDARY0_Pos)&VADC_GLOBBOUND_BOUNDARY0_Msk));";
  protected final String TEXT_18 = NL + "        /**" + NL + "         * Configure Class0 Sample Time Control for Standard Conversion." + NL + "         * Configure Class0 Conversion Mode for Standard Conversion." + NL + "         */" + NL + "        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \\" + NL + "                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kConversionModeClass0 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass0 <<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));" + NL + "        /**" + NL + "         * Configure Class1 Sample Time Control for Standard Conversion." + NL + "         * Configure Class1 Conversion Mode for Standard Conversion." + NL + "         */" + NL + "        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \\" + NL + "                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kConversionModeClass1 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \\" + NL + "                        (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass1<<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));" + NL;
  protected final String TEXT_19 = NL + "        ADCGLOB001_Handle0.kDynamicDataPtr->StateType = ADCGLOB001_INITIALIZED;" + NL + "        Status &= (uint32_t)DAVEApp_SUCCESS;" + NL + "    } else {" + NL + "      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function will de-initialize VADC Global registers." + NL + " */" + NL + "status_t ADCGLOB001_DeInit(const ADCGLOB001_HandleType * HandlePtr)" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if(HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED )" + NL + "    {";
  protected final String TEXT_20 = NL + "        /* Enable the VADC clock gating" + NL + "         * This line of code is not applicable for XMC4500." + NL + "         */" + NL + "" + NL + "        SET_BIT(SCU_CLK->CGATSET0, SCU_CLK_CGATSET0_VADC_Pos);";
  protected final String TEXT_21 = NL + "        /* Bring the module out of disabled state */" + NL + "        CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);" + NL + "" + NL + "        /* Make divider bit fields writable and deconfigure Analog Internal Clock," + NL + "     Arbiter Clock & MSB Conversion bits.*/" + NL + "        HandlePtr->kGlobalPtr->GLOBCFG = \\" + NL + "                (((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)|((~(VADC_GLOBCFG_DIVD_Msk))& \\" + NL + "                        (~(VADC_GLOBCFG_DCMSB_Msk)) & (~(VADC_GLOBCFG_DIVA_Msk))));" + NL + "" + NL + "        /* Again make the divider bit fields write protected */" + NL + "        CLR_BIT( HandlePtr->kGlobalPtr->GLOBCFG, VADC_GLOBCFG_DIVWC_Pos);" + NL;
  protected final String TEXT_22 = NL + "        /*" + NL + "         * Configure Class0 Sample Time Control for Standard Conversion into default" + NL + "         *  mode." + NL + "         * Configure Class0 Conversion Mode for Standard Conversion into default mode." + NL + "         * Configure Class0 Sample Time Control for EMUX Conversion into default mode." + NL + "         * Configure Class0  Conversion Mode for EMUX Conversion into default mode." + NL + "         */" + NL + "        HandlePtr->kGlobalPtr->GLOBICLASS[0] = \\" + NL + "                ((~(VADC_GLOBICLASS_CME_Msk))&(~(VADC_GLOBICLASS_STCE_Msk))& \\" + NL + "                        (~(VADC_GLOBICLASS_CMS_Msk))&(~(VADC_GLOBICLASS_STCS_Msk)));" + NL + "        /*" + NL + "         * Configure Class1 Sample Time Control for Standard Conversion into default" + NL + "         *  mode." + NL + "         * Configure Class1 Conversion Mode for Standard Conversion into default mode." + NL + "         * Configure Class1 Sample Time Control for EMUX Conversion into default mode." + NL + "         * Configure Class1  Conversion Mode for EMUX Conversion into default mode." + NL + "         */" + NL + "        HandlePtr->kGlobalPtr->GLOBICLASS[1] = \\" + NL + "                ((~(VADC_GLOBICLASS_CME_Msk))&(~(VADC_GLOBICLASS_STCE_Msk))& \\" + NL + "                        (~(VADC_GLOBICLASS_CMS_Msk))&(~(VADC_GLOBICLASS_STCS_Msk)));" + NL + "" + NL + "        /* Configure global lower and upper boundary value into default value.*/" + NL + "        HandlePtr->kGlobalPtr->GLOBBOUND = \\" + NL + "                ((~(VADC_GLOBBOUND_BOUNDARY1_Msk))&(~(VADC_GLOBBOUND_BOUNDARY0_Msk)));";
  protected final String TEXT_23 = NL + "        /*" + NL + "         * Configure Class0 Sample Time Control for Standard Conversion into default" + NL + "         *  mode." + NL + "         * Configure Class0 Conversion Mode for Standard Conversion into default mode." + NL + "         */" + NL + "        HandlePtr->kGlobalPtr->GLOBICLASS[0] = ((~(VADC_GLOBICLASS_CMS_Msk))&(~(VADC_GLOBICLASS_STCS_Msk)));" + NL + "        /*" + NL + "         * Configure Class1 Sample Time Control for Standard Conversion into default" + NL + "         *  mode." + NL + "         * Configure Class1 Conversion Mode for Standard Conversion into default mode." + NL + "         */" + NL + "        HandlePtr->kGlobalPtr->GLOBICLASS[1] = ((~(VADC_GLOBICLASS_CMS_Msk))&(~(VADC_GLOBICLASS_STCS_Msk)));";
  protected final String TEXT_24 = NL + NL + "        HandlePtr->kDynamicDataPtr->StateType = ADCGLOB001_UNINITIALIZED;" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    } else {" + NL + "      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function disable the control of the module." + NL + " */" + NL + "status_t ADCGLOB001_CLKRequestDisable(const ADCGLOB001_HandleType * HandlePtr)" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "" + NL + "        /* Bring the module in disabled state" + NL + "         * Module Disable Request Bit" + NL + "         * 0 : enable the module clock" + NL + "         * 1 : stop the module clock */" + NL + "" + NL + "        SET_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);" + NL + "" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "/**" + NL + " * This function enable the control of the module." + NL + " */" + NL + "status_t ADCGLOB001_CLKRequestEnable(const ADCGLOB001_HandleType * HandlePtr)" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        /* Bring the module out of disabled state */" + NL + "" + NL + "        CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);" + NL + "" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "/**" + NL + " * This function Initiate the start-up calibration phase." + NL + " */" + NL + "" + NL + "status_t ADCGLOB001_SetStartUpCalibration(" + NL + "        const ADCGLOB001_HandleType *HandlePtr" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        /* Initiate Start-Up Calibration */" + NL + "" + NL + "        SET_BIT( HandlePtr->kGlobalPtr->GLOBCFG, VADC_GLOBCFG_SUCAL_Pos);" + NL + "" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "/**" + NL + " * This function Initialise the calibration based on GUI configuration." + NL + " */" + NL + "status_t ADCGLOB001_StartUpCalibrationInit(void)" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if(ADCGLOB001_Handle0.kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED )" + NL + "    {" + NL + "        /* Initialise Calibration */" + NL + "" + NL + "        if(ADCGLOB001_Handle0.keStartCalib == (uint8_t)1)" + NL + "        {" + NL + "            /* Initiate Start-Up Calibration */" + NL + "            SET_BIT( ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG, VADC_GLOBCFG_SUCAL_Pos);" + NL + "            " + NL + "        }" + NL + "" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function Enables Sleep Mode Control.Which is used to control module?s" + NL + " * reaction to sleep mode." + NL + " */" + NL + "status_t ADCGLOB001_EnableSleepModeControl(" + NL + "        const ADCGLOB001_HandleType * HandlePtr" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        /* Reset  Sleep Mode Enable Control bit*/" + NL + "        CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_EDIS_Pos);" + NL + "" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "/**" + NL + " * This function disregards Sleep Mode Control." + NL + " */" + NL + "status_t ADCGLOB001_DisregardSleepModeControl(" + NL + "        const ADCGLOB001_HandleType * HandlePtr" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        /* set  Sleep Mode Enable Control bit*/" + NL + "        SET_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_EDIS_Pos);" + NL + "" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the class 0 conversion mode for standard conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass0ConvMode(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        ADCGLOB001_ConversionMode ConversionModeVal" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||" + NL + "                (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {" + NL + "            /* Set the global class0 conversion mode */" + NL + "            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0]," + NL + "                    VADC_GLOBICLASS_CMS_Msk," + NL + "                    VADC_GLOBICLASS_CMS_Pos," + NL + "                    (uint32_t)ConversionModeVal" + NL + "            );" + NL + "" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "            DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "/**" + NL + " * This function configure the class 0 Sample Time Control for Standard" + NL + " * Conversions." + NL + " */" + NL + "" + NL + "status_t ADCGLOB001_SetGlobClass0SampleTime(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        uint8_t SampleTime" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        if(SampleTime < (uint8_t)32){" + NL + "            /* Set the global class0 Sample Time */" + NL + "            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0]," + NL + "                    VADC_GLOBICLASS_STCS_Msk," + NL + "                    VADC_GLOBICLASS_STCS_Pos," + NL + "                    (uint32_t)SampleTime" + NL + "            );" + NL + "" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "" + NL + "}";
  protected final String TEXT_25 = NL + "/**" + NL + " * This function configure the class 0 Conversion Mode for EMUX Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass0EmuxConvMode(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        ADCGLOB001_ConversionMode ConversionModeVal" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||" + NL + "                (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {" + NL + "            /* Set the global class0 External Multiplexer conversion mode*/" + NL + "            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0]," + NL + "                    VADC_GLOBICLASS_CME_Msk," + NL + "                    VADC_GLOBICLASS_CME_Pos," + NL + "                    (uint32_t)ConversionModeVal" + NL + "            );" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "            DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the class 0 Sample Time Control for EMUX Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass0EmuxSampleTime(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        uint8_t SampleTime" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        if(SampleTime < (uint8_t)32){" + NL + "" + NL + "            /* Set the global class0 External Multiplexer Sample Time */" + NL + "            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0]," + NL + "                    VADC_GLOBICLASS_STCE_Msk," + NL + "                    VADC_GLOBICLASS_STCE_Pos," + NL + "                    (uint32_t)SampleTime" + NL + "            );" + NL + "" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "            DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}";
  protected final String TEXT_26 = NL + "/**" + NL + " * This function configure the class 1 conversion mode for standard conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass1ConvMode(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        ADCGLOB001_ConversionMode ConversionModeVal" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||" + NL + "                (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {" + NL + "            /* Set the global class 1 conversion mode */" + NL + "            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1]," + NL + "                    VADC_GLOBICLASS_CMS_Msk," + NL + "                    VADC_GLOBICLASS_CMS_Pos," + NL + "                    (uint32_t)ConversionModeVal" + NL + "            );" + NL + "" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "            DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "/**" + NL + " * This function configure the class 1 Sample Time Control for Standard" + NL + " * Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass1SampleTime(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        uint8_t SampleTime" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "" + NL + "        if(SampleTime < (uint8_t)32){" + NL + "            /* Write the global class 1 Sample Time */" + NL + "            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1]," + NL + "                    VADC_GLOBICLASS_STCS_Msk," + NL + "                    VADC_GLOBICLASS_STCS_Pos," + NL + "                    (uint32_t)SampleTime" + NL + "            );" + NL + "" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "            DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL;
  protected final String TEXT_27 = NL + "/**" + NL + " * This function configure the class 1 Conversion Mode for EMUX Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass1EmuxConvMode(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        ADCGLOB001_ConversionMode ConversionModeVal" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||" + NL + "                (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {" + NL + "            /* Write the global class1 External Multiplexer conversion mode */" + NL + "" + NL + "            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1]," + NL + "                    VADC_GLOBICLASS_CME_Msk," + NL + "                    VADC_GLOBICLASS_CME_Pos," + NL + "                    (uint32_t)ConversionModeVal" + NL + "            );" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "            DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the class 1 Sample Time Control for EMUX Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass1EmuxSampleTime(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        uint8_t SampleTime" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        if(SampleTime < (uint8_t)32){" + NL + "            /* Write the global class1 External Multiplexer Sample Time */" + NL + "            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1]," + NL + "                    VADC_GLOBICLASS_STCE_Msk," + NL + "                    VADC_GLOBICLASS_STCE_Pos," + NL + "                    (uint32_t)SampleTime" + NL + "            );" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "            DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}";
  protected final String TEXT_28 = NL + "/**" + NL + " * This function gives the status of Module Disable bit." + NL + " */" + NL + "status_t ADCGLOB001_GetDisableBitStatus(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        uint8_t *StatusValue" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        /*Read the status value */" + NL + "" + NL + "        *StatusValue = (uint8_t) RD_REG( HandlePtr->kGlobalPtr->CLC," + NL + "                VADC_CLC_DISS_Msk," + NL + "                VADC_CLC_DISS_Pos" + NL + "        );" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "/**" + NL + " * This function gives the Id Value." + NL + " */" + NL + "" + NL + "status_t ADCGLOB001_GetIdValue(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        uint32_t *IDValue" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        /*Read the ID value */" + NL + "        *IDValue =(uint32_t)HandlePtr->kGlobalPtr->ID;" + NL + "" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}";
  protected final String TEXT_29 = NL + "/* By default all Vadc registers are writable." + NL + " * EnableWritetoVadcRegisters function is called to write to registers, this function can be called" + NL + " * only if the vadc registers disabled for writing by calling the function DisableWritetoVadcRegisters() */" + NL + "" + NL + "void EnableWritetoVadcRegisters(void)" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    SCU_GENERAL->PASSWD = 0x000000C0U;" + NL + "    if (((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk)==0)" + NL + "    {" + NL + "        /*Channel control registers*/" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC0_Msk, VADC_ACCPROT0_APC0_Pos, 0U);" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC1_Msk, VADC_ACCPROT0_APC1_Pos, 0U);" + NL + "" + NL + "        /*    Enable write to External multiplexer control registers*/" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APEM_Msk, VADC_ACCPROT0_APEM_Pos, 0U);" + NL + "" + NL + "        /*    Initialization control registers */" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API0_Msk, VADC_ACCPROT0_API0_Pos, 0U);" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API1_Msk, VADC_ACCPROT0_API1_Pos, 0U);" + NL + "" + NL + "        /*    Enable write to Gobal configuration registers */" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APGC_Msk, VADC_ACCPROT0_APGC_Pos, 0U);" + NL + "" + NL + "        /*    Enable write to Service request control registers*/" + NL + "        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS1_Msk, VADC_ACCPROT1_APS0_Pos, 0U);" + NL + "        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS1_Msk, VADC_ACCPROT1_APS1_Pos, 0U);" + NL + "" + NL + "        /*Enable write to Result control registers*/" + NL + "        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR0_Msk, VADC_ACCPROT1_APR0_Pos, 0U);" + NL + "        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR1_Msk, VADC_ACCPROT1_APR1_Pos, 0U);" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    SCU_GENERAL->PASSWD = 0x000000C3UL;" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "}" + NL + "" + NL + "/* DisableWritetoVadcRegisters function is called to disable write to vadc registers, this function can" + NL + " * be called only if the user wants to disable writing to vadc registers. To enable writing to registers" + NL + " * EnableWritetoVadcRegisters() function needs to be called. */" + NL + "" + NL + "" + NL + "void DisableWritetoVadcRegisters(void)" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    SCU_GENERAL->PASSWD = 0x000000C0U;" + NL + "    if (((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk)==0)" + NL + "    {" + NL + "        /*Channel control registers*/" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC0_Msk, VADC_ACCPROT0_APC0_Pos, 1U);" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC1_Msk, VADC_ACCPROT0_APC1_Pos, 1U);" + NL + "" + NL + "        /*Enable write to External multiplexer control registers*/" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APEM_Msk, VADC_ACCPROT0_APEM_Pos, 1U);" + NL + "" + NL + "        /*Initialization control registers*/" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API0_Msk, VADC_ACCPROT0_API0_Pos, 1U);" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API1_Msk, VADC_ACCPROT0_API1_Pos, 1U);" + NL + "" + NL + "        /*Enable write to Gobal configuration registers*/" + NL + "        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APGC_Msk, VADC_ACCPROT0_APGC_Pos, 1U);" + NL + "" + NL + "        /*Enable write to Service request control registers*/" + NL + "        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS0_Msk, VADC_ACCPROT1_APS0_Pos, 1U);" + NL + "        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS1_Msk, VADC_ACCPROT1_APS1_Pos, 1U);" + NL + "" + NL + "        /*Enable write to Result control registers*/" + NL + "        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR0_Msk, VADC_ACCPROT1_APR0_Pos, 1U);" + NL + "        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR1_Msk, VADC_ACCPROT1_APR1_Pos, 1U);" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    SCU_GENERAL->PASSWD = 0x000000C3UL;" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "}";
  protected final String TEXT_30 = NL + "/**" + NL + " * This function configure the group number to be used for converter diagnostics" + NL + " * conversions." + NL + " */" + NL + "" + NL + "status_t ADCGLOB001_GTFRConvtrDiagnoGrp(const ADCGLOB001_HandleType * HandlePtr," + NL + "        uint8_t GroupValue" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        if(GroupValue < (uint8_t)16){" + NL + "            /*clear the group number.*/" + NL + "            HandlePtr->kGlobalPtr->GLOBTF = (VADC_GLOBTF_CDWC_Msk|" + NL + "                    ((HandlePtr->kGlobalPtr->GLOBTF)& (~(VADC_GLOBTF_CDGR_Msk))));" + NL + "            /*Write the group number to be used for converter diagnostics conversions.*/" + NL + "            HandlePtr->kGlobalPtr->GLOBTF |= (VADC_GLOBTF_CDWC_Msk |" + NL + "                    (((uint32_t)GroupValue << VADC_GLOBTF_CDGR_Pos) & VADC_GLOBTF_CDGR_Msk));" + NL + "" + NL + "            /*Clear the Write Control for Conversion Diagnostics*/" + NL + "            CLR_BIT(HandlePtr->kGlobalPtr->GLOBTF, VADC_GLOBTF_CDWC_Pos);" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "            DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "/**" + NL + " * This function configure the Converter Diagnostics pull devices connected as" + NL + " * selected by bitfield CDSEL." + NL + " */" + NL + "status_t ADCGLOB001_GTFRConvtrDiagnoEnable(" + NL + "        const ADCGLOB001_HandleType * HandlePtr" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        /*Enable the Converter Diagnostics*/" + NL + "        HandlePtr->kGlobalPtr->GLOBTF |=" + NL + "                (VADC_GLOBTF_CDWC_Msk | VADC_GLOBTF_CDEN_Msk);" + NL + "        /*Clear the Write Control for Conversion Diagnostics*/" + NL + "        CLR_BIT(HandlePtr->kGlobalPtr->GLOBTF, VADC_GLOBTF_CDWC_Pos);" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "/**" + NL + " * This function configure the Converter Diagnostics Pull-Devices Select value." + NL + " */" + NL + "status_t ADCGLOB001_GTFRConvtrDiagnoPullDevicesSelect(" + NL + "        const ADCGLOB001_HandleType * HandlePtr," + NL + "        uint8_t SelectValue" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        if(SelectValue < (uint8_t)4){" + NL + "            /*Clear Converter Diagnostics Pull-Devices Select value  */" + NL + "            HandlePtr->kGlobalPtr->GLOBTF = (VADC_GLOBTF_CDWC_Msk|" + NL + "                    ((HandlePtr->kGlobalPtr->GLOBTF)& (~(VADC_GLOBTF_CDSEL_Msk))));" + NL + "" + NL + "            /* Write the Converter Diagnostics Pull-Devices Select value */" + NL + "            HandlePtr->kGlobalPtr->GLOBTF |= (VADC_GLOBTF_CDWC_Msk |" + NL + "                    (((uint32_t)SelectValue << VADC_GLOBTF_CDSEL_Pos) & VADC_GLOBTF_CDSEL_Msk));" + NL + "            /*Clear the Write Control for Conversion Diagnostics*/" + NL + "" + NL + "            CLR_BIT(HandlePtr->kGlobalPtr->GLOBTF, VADC_GLOBTF_CDWC_Pos);" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "        }" + NL + "        else" + NL + "        {" + NL + "            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "            DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "        }" + NL + "    }" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the Pull-Down Diagnostics Enable register." + NL + " */" + NL + "status_t ADCGLOB001_GTFRPullDwnDiagnoEnable(" + NL + "        const ADCGLOB001_HandleType * HandlePtr" + NL + ")" + NL + "{" + NL + "    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "    {" + NL + "        /*Enable the Pull-Down Diagnostics */" + NL + "        HandlePtr->kGlobalPtr->GLOBTF |=" + NL + "                (VADC_GLOBTF_MDWC_Msk | VADC_GLOBTF_PDD_Msk);" + NL + "        /*Clear the Write Control for Multiplexer Diagnostics*/" + NL + "        CLR_BIT(HandlePtr->kGlobalPtr->GLOBTF, VADC_GLOBTF_MDWC_Pos);" + NL + "" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "" + NL + "    if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);" + NL + "    }" + NL + "" + NL + "    return Status;" + NL + "}";
  protected final String TEXT_31 = NL + "/**" + NL + " * @endcond" + NL + " */";
  protected final String TEXT_32 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     App2JetInterface app = (App2JetInterface) argument; 
     int Is44Device = -1; 
     int Is42Device = -1; 
     int Is45Device = -1; 
     int Is11Device = -1; 
     int Is1xDevice = -1; 
     Is44Device = ((app.getSoftwareId().substring(0,2).compareTo("44")==0)?1:0); 
     Is42Device = ((app.getSoftwareId().substring(0,2).compareTo("42")==0)?1:0); 
     Is45Device = ((app.getSoftwareId().substring(0,2).compareTo("45")==0)?1:0); 
     Is11Device = ((app.getSoftwareId().substring(0,2).compareTo("11")==0)?1:0); 
     Is1xDevice = ((app.getSoftwareId().substring(0,1).compareTo("1")==0)?1:0); 
    stringBuffer.append(TEXT_1);
     String TempApps = null;
   String MyAppName = null;
   ArrayList<String> apps;
   String TempLowerApps = null;
   boolean DBGApp = false;
   apps=(ArrayList<String>)(app.getApps());
        for (int k = 0; k < apps.size(); k++) {
              TempApps = apps.get(k);
//            if(app.isAppInitProvider(apps.get(k)) == true) {
              MyAppName = TempApps.substring(TempApps.indexOf("/app/") + 5, TempApps.lastIndexOf("/"));
              TempLowerApps = MyAppName.toLowerCase();
              if (TempLowerApps.equalsIgnoreCase("dbg002")) {DBGApp = true;}
//   }
  } 
    stringBuffer.append(TEXT_2);
     if (!DBGApp) { 
    stringBuffer.append(TEXT_3);
     } 
    stringBuffer.append(TEXT_4);
     if(Is1xDevice == 1){
    stringBuffer.append(TEXT_5);
    }
    stringBuffer.append(TEXT_6);
     String AppBaseuri = "app/adcglob001/"; 
    stringBuffer.append(TEXT_7);
    if (Is45Device!=1) {
    if (Is44Device!=1 && Is42Device!=1)    {
    stringBuffer.append(TEXT_8);
    }
    stringBuffer.append(TEXT_9);
    if (Is44Device!=1 && Is42Device!=1)    {
    stringBuffer.append(TEXT_10);
    }
    stringBuffer.append(TEXT_11);
    }
    stringBuffer.append(TEXT_12);
    if (Is45Device==1 || Is44Device==1 || Is42Device==1)    {
    stringBuffer.append(TEXT_13);
    } else {
     if(Is11Device != 1){
    stringBuffer.append(TEXT_14);
    } else{
    stringBuffer.append(TEXT_15);
     } 
    }
    stringBuffer.append(TEXT_16);
     if(Is11Device != 1){
    stringBuffer.append(TEXT_17);
     } else {
    stringBuffer.append(TEXT_18);
     } 
    stringBuffer.append(TEXT_19);
    if (Is45Device!=1) {
    stringBuffer.append(TEXT_20);
    }
    stringBuffer.append(TEXT_21);
     if(Is11Device != 1){
    stringBuffer.append(TEXT_22);
    } else {
    stringBuffer.append(TEXT_23);
     } 
    stringBuffer.append(TEXT_24);
     if(Is11Device != 1) {
    stringBuffer.append(TEXT_25);
    }
    stringBuffer.append(TEXT_26);
     if(Is11Device != 1) {
    stringBuffer.append(TEXT_27);
    }
    stringBuffer.append(TEXT_28);
    if (Is45Device!=1 && Is44Device!=1 && Is42Device!=1 && Is11Device!=1) {
    stringBuffer.append(TEXT_29);
    }
    if (Is45Device==1 || Is44Device==1 || Is42Device==1 )
{
    stringBuffer.append(TEXT_30);
     } 
    stringBuffer.append(TEXT_31);
    stringBuffer.append(TEXT_32);
    return stringBuffer.toString();
  }
}
