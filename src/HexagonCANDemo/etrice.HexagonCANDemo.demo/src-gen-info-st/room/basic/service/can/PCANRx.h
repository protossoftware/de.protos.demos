/**
 * @author generated by eTrice
 *
 * Header File of ProtocolClass PCANRx
 * 
 */

#ifndef _ROOM_BASIC_SERVICE_CAN_PCANRX_H_
#define _ROOM_BASIC_SERVICE_CAN_PCANRX_H_

#include "etDatatypes.h"
#include "modelbase/etPort.h"

/*--------------------- begin user code ---------------------*/
#include "pclCANService.h"
#define ET_CAN_CHANNEL_NOT_DEFINED			0xFFFFFFFF
/*--------------------- end user code ---------------------*/



/* message IDs */
enum PCANRx_msg_ids {
	PCANRx_MSG_MIN = 0,
	PCANRx_OUT_msgReceived = 1,
	PCANRx_IN_init = 2,
	PCANRx_IN_readMsg = 3,
	PCANRx_IN_listenOnMsg = 4,
	PCANRx_IN_transmitRequest = 5,
	PCANRx_MSG_MAX = 6
};

/*--------------------- port structs and methods */
typedef etPort PCANRxPort;
typedef etReplPort PCANRxReplPort;


void PCANRxPort_msgReceived(const PCANRxPort* self, pclCANMsg* data);
void PCANRxReplPort_msgReceived_broadcast(const PCANRxReplPort* self, pclCANMsg* data);
void PCANRxReplPort_msgReceived(const PCANRxReplPort* self, int idx, pclCANMsg* data);


etInt32 PCANRxReplPort_getReplication(const PCANRxReplPort* self);
typedef etPort PCANRxConjPort;
typedef etReplPort PCANRxConjReplPort;

/* variable part of PortClass (RAM) */
typedef struct PCANRxConjPort_var PCANRxConjPort_var; 
struct PCANRxConjPort_var {
	/*--------------------- attributes ---------------------*/
	uint32 pChannel;
};

void PCANRxConjPort_init(const PCANRxConjPort* self, uint32 data);
void PCANRxConjReplPort_init_broadcast(const PCANRxConjReplPort* self, uint32 data);
void PCANRxConjReplPort_init(const PCANRxConjReplPort* self, int idx, uint32 data);
void PCANRxConjPort_readMsg(const PCANRxConjPort* self);
void PCANRxConjReplPort_readMsg_broadcast(const PCANRxConjReplPort* self);
void PCANRxConjReplPort_readMsg(const PCANRxConjReplPort* self, int idx);
void PCANRxConjPort_listenOnMsg(const PCANRxConjPort* self, pclCANMsg* data);
void PCANRxConjReplPort_listenOnMsg_broadcast(const PCANRxConjReplPort* self, pclCANMsg* data);
void PCANRxConjReplPort_listenOnMsg(const PCANRxConjReplPort* self, int idx, pclCANMsg* data);
void PCANRxConjPort_transmitRequest(const PCANRxConjPort* self);
void PCANRxConjReplPort_transmitRequest_broadcast(const PCANRxConjReplPort* self);
void PCANRxConjReplPort_transmitRequest(const PCANRxConjReplPort* self, int idx);

/*--------------------- operations ---------------------*/

etInt32 PCANRxConjReplPort_getReplication(const PCANRxConjReplPort* self);



#endif /* _ROOM_BASIC_SERVICE_CAN_PCANRX_H_ */

