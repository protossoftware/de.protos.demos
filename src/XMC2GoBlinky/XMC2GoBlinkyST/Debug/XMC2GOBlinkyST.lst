
XMC2GOBlinkyST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007db8  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  10008db8  10008db8  00008db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00000500  10008dc8  10008dc8  00008dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000110  2000000c  100092d0  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   00000004  2000011c  00000000  0000011c  2**0
                  ALLOC
  5 Stack         00000800  20000120  00000000  00000120  2**0
                  ALLOC
  6 .bss          000007f8  20000920  20000920  00018920  2**2
                  ALLOC
  7 .data         00000078  20001120  100093e0  00011120  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000cb0  00000000  00000000  00011198  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001167e  00000000  00000000  00011e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002fe3  00000000  00000000  000234c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016d62  00000000  00000000  000264a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000028fc  00000000  00000000  0003d20c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0002caef  00000000  00000000  0003fb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003b8e  00000000  00000000  0006c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a08  00000000  00000000  00070188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00000ba3  00000000  00000000  00070b90  2**0
                  CONTENTS, READONLY
 17 .debug_macro  0000c531  00000000  00000000  00071733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1100_interrupt_vector_cortex_m>:
10001000:	20 09 00 20 19 10 00 10 7d 30 00 10 7f 30 00 10      .. ....}0...0..
10001010:	00 04 00 00 00 00 00 00                             ........

10001018 <__Xmc1100_reset_cortex_m>:
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001018:	4802      	ldr	r0, [pc, #8]	; (10001024 <__Xmc1100_reset_cortex_m+0xc>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
1000101c:	4802      	ldr	r0, [pc, #8]	; (10001028 <__Xmc1100_reset_cortex_m+0x10>)
    BLX R0
1000101e:	4780      	blx	r0

    /* Branch to the program loader now */
    B       __Xmc1100_Program_Loader 
10001020:	e012      	b.n	10001048 <__Xmc1100_Program_Loader>
10001022:	0000      	.short	0x0000
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001024:	20000920 	.word	0x20000920
    MOV SP,R0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
10001028:	100010d1 	.word	0x100010d1

1000102c <__COPY_FLASH2RAM>:
   to C land is given */
   .section .Xmc1100.postreset,"x",%progbits
 __COPY_FLASH2RAM:
   .fnstart:
   /* Is there anything to be copied? */
   CMP R2,#0
1000102c:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000102e:	d00a      	beq.n	10001046 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
10001030:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001032:	d200      	bcs.n	10001036 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001034:	2204      	movs	r2, #4

10001036 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001036:	0892      	lsrs	r2, r2, #2

10001038 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001038:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000103a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000103c:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000103e:	d002      	beq.n	10001046 <SKIPCOPY>
   ADDS R0,#4
10001040:	3004      	adds	r0, #4
   ADDS R1,#4
10001042:	3104      	adds	r1, #4
   B COPYLOOP
10001044:	e7f8      	b.n	10001038 <COPYLOOP>

10001046 <SKIPCOPY>:
    
SKIPCOPY:
   BX LR
10001046:	4770      	bx	lr

10001048 <__Xmc1100_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001048:	4811      	ldr	r0, [pc, #68]	; (10001090 <SKIPCLEAR+0x14>)
   LDR R1, =__Xmc1100_sData
1000104a:	4912      	ldr	r1, [pc, #72]	; (10001094 <SKIPCLEAR+0x18>)
   LDR R2, =__Xmc1100_Data_Size
1000104c:	4a12      	ldr	r2, [pc, #72]	; (10001098 <SKIPCLEAR+0x1c>)
   BL __COPY_FLASH2RAM
1000104e:	f7ff ffed 	bl	1000102c <__COPY_FLASH2RAM>

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
10001052:	4812      	ldr	r0, [pc, #72]	; (1000109c <SKIPCLEAR+0x20>)
   LDR R1, =__ram_code_start
10001054:	4912      	ldr	r1, [pc, #72]	; (100010a0 <SKIPCLEAR+0x24>)
   LDR R2, =__ram_code_size
10001056:	4a13      	ldr	r2, [pc, #76]	; (100010a4 <SKIPCLEAR+0x28>)
   BL __COPY_FLASH2RAM
10001058:	f7ff ffe8 	bl	1000102c <__COPY_FLASH2RAM>

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000105c:	4812      	ldr	r0, [pc, #72]	; (100010a8 <SKIPCLEAR+0x2c>)
   LDR R1, =VeneerStart
1000105e:	4913      	ldr	r1, [pc, #76]	; (100010ac <SKIPCLEAR+0x30>)
   LDR R2, =VeneerSize
10001060:	4a13      	ldr	r2, [pc, #76]	; (100010b0 <SKIPCLEAR+0x34>)
   BL __COPY_FLASH2RAM
10001062:	f7ff ffe3 	bl	1000102c <__COPY_FLASH2RAM>

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
10001066:	4813      	ldr	r0, [pc, #76]	; (100010b4 <SKIPCLEAR+0x38>)
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
10001068:	4913      	ldr	r1, [pc, #76]	; (100010b8 <SKIPCLEAR+0x3c>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
1000106a:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000106c:	d006      	beq.n	1000107c <SKIPCLEAR>

1000106e <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
1000106e:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001070:	2200      	movs	r2, #0

10001072 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001072:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001074:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
10001076:	d001      	beq.n	1000107c <SKIPCLEAR>
   ADDS R0,#4
10001078:	3004      	adds	r0, #4
   B CLEARLOOP
1000107a:	e7fa      	b.n	10001072 <CLEARLOOP>

1000107c <SKIPCLEAR>:
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
1000107c:	480f      	ldr	r0, [pc, #60]	; (100010bc <SKIPCLEAR+0x40>)
   MOV SP,R0
1000107e:	4685      	mov	sp, r0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
10001080:	480f      	ldr	r0, [pc, #60]	; (100010c0 <SKIPCLEAR+0x44>)
   BLX R0
10001082:	4780      	blx	r0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
10001084:	480f      	ldr	r0, [pc, #60]	; (100010c4 <SKIPCLEAR+0x48>)
   BLX R0
10001086:	4780      	blx	r0

   MOVS R0,#0
10001088:	2000      	movs	r0, #0
   MOVS R1,#0
1000108a:	2100      	movs	r1, #0
   LDR R2, =main
1000108c:	4a0e      	ldr	r2, [pc, #56]	; (100010c8 <SKIPCLEAR+0x4c>)
   MOV PC,R2
1000108e:	4697      	mov	pc, r2
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001090:	100093e0 	.word	0x100093e0
   LDR R1, =__Xmc1100_sData
10001094:	20001120 	.word	0x20001120
   LDR R2, =__Xmc1100_Data_Size
10001098:	00000078 	.word	0x00000078
   BL __COPY_FLASH2RAM

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
1000109c:	10009458 	.word	0x10009458
   LDR R1, =__ram_code_start
100010a0:	20001198 	.word	0x20001198
   LDR R2, =__ram_code_size
100010a4:	00000000 	.word	0x00000000
   BL __COPY_FLASH2RAM

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010a8:	100092d0 	.word	0x100092d0
   LDR R1, =VeneerStart
100010ac:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b0:	00000110 	.word	0x00000110
   BL __COPY_FLASH2RAM

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
100010b4:	20000920 	.word	0x20000920
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
100010b8:	000007f8 	.word	0x000007f8
   B CLEARLOOP
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
100010bc:	20000920 	.word	0x20000920
   MOV SP,R0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
100010c0:	100030ad 	.word	0x100030ad
   BLX R0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
100010c4:	100010cd 	.word	0x100010cd
   BLX R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c8:	10002c41 	.word	0x10002c41

100010cc <software_init_hook>:
   has not been started.
 */
     .weak software_init_hook
     .type software_init_hook, %function
software_init_hook:
     NOP
100010cc:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ce:	4770      	bx	lr

100010d0 <hardware_init_hook>:
     .size software_init_hook, . - software_init_hook

     .weak hardware_init_hook
     .type hardware_init_hook, %function
hardware_init_hook:
     NOP
100010d0:	46c0      	nop			; (mov r8, r8)
     BX LR
100010d2:	4770      	bx	lr

100010d4 <setState>:
	TRIG_timer__startTimeout = IFITEM_timer + EVT_SHIFT*PTimer_IN_startTimeout,
	TRIG_timer__kill = IFITEM_timer + EVT_SHIFT*PTimer_IN_kill
};


static void setState(ATimingService* self, etInt16 new_state) {
100010d4:	b580      	push	{r7, lr}
100010d6:	b082      	sub	sp, #8
100010d8:	af00      	add	r7, sp, #0
100010da:	6078      	str	r0, [r7, #4]
100010dc:	1c0a      	adds	r2, r1, #0
100010de:	1cbb      	adds	r3, r7, #2
100010e0:	801a      	strh	r2, [r3, #0]
	self->state = new_state;
100010e2:	687b      	ldr	r3, [r7, #4]
100010e4:	1cba      	adds	r2, r7, #2
100010e6:	8812      	ldrh	r2, [r2, #0]
100010e8:	809a      	strh	r2, [r3, #4]
}
100010ea:	46bd      	mov	sp, r7
100010ec:	b002      	add	sp, #8
100010ee:	bd80      	pop	{r7, pc}

100010f0 <getState>:

static etInt16 getState(ATimingService* self) {
100010f0:	b580      	push	{r7, lr}
100010f2:	b082      	sub	sp, #8
100010f4:	af00      	add	r7, sp, #0
100010f6:	6078      	str	r0, [r7, #4]
	return self->state;
100010f8:	687b      	ldr	r3, [r7, #4]
100010fa:	889b      	ldrh	r3, [r3, #4]
100010fc:	b21b      	sxth	r3, r3
}
100010fe:	1c18      	adds	r0, r3, #0
10001100:	46bd      	mov	sp, r7
10001102:	b002      	add	sp, #8
10001104:	bd80      	pop	{r7, pc}
10001106:	46c0      	nop			; (mov r8, r8)

10001108 <entry_Operational>:

/* Entry and Exit Codes */
static void entry_Operational(ATimingService* self) {
10001108:	b580      	push	{r7, lr}
1000110a:	b082      	sub	sp, #8
1000110c:	af00      	add	r7, sp, #0
1000110e:	6078      	str	r0, [r7, #4]
	/* prepare */
}
10001110:	46bd      	mov	sp, r7
10001112:	b002      	add	sp, #8
10001114:	bd80      	pop	{r7, pc}
10001116:	46c0      	nop			; (mov r8, r8)

10001118 <do_Operational>:
static  void do_Operational(ATimingService* self) {
10001118:	b580      	push	{r7, lr}
1000111a:	b086      	sub	sp, #24
1000111c:	af00      	add	r7, sp, #0
1000111e:	6078      	str	r0, [r7, #4]
	/* maintain timers */
	etTimerControlBlock* temp;
	etTime t;
	
	getTimeFromTarget(&t);
10001120:	1c3b      	adds	r3, r7, #0
10001122:	330c      	adds	r3, #12
10001124:	1c18      	adds	r0, r3, #0
10001126:	f005 fafb 	bl	10006720 <getTimeFromTarget>
	while (usedTcbsRoot !=0 ){
1000112a:	e03c      	b.n	100011a6 <do_Operational+0x8e>
		if (isTimeGreater(&t,&(usedTcbsRoot->expTime))){
1000112c:	4b22      	ldr	r3, [pc, #136]	; (100011b8 <do_Operational+0xa0>)
1000112e:	681b      	ldr	r3, [r3, #0]
10001130:	6879      	ldr	r1, [r7, #4]
10001132:	1c3a      	adds	r2, r7, #0
10001134:	320c      	adds	r2, #12
10001136:	1c08      	adds	r0, r1, #0
10001138:	1c11      	adds	r1, r2, #0
1000113a:	1c1a      	adds	r2, r3, #0
1000113c:	f000 fb6a 	bl	10001814 <ATimingService_isTimeGreater>
10001140:	1c03      	adds	r3, r0, #0
10001142:	2b00      	cmp	r3, #0
10001144:	d034      	beq.n	100011b0 <do_Operational+0x98>
			timer_timeout(usedTcbsRoot->portIdx);
10001146:	687b      	ldr	r3, [r7, #4]
10001148:	681b      	ldr	r3, [r3, #0]
1000114a:	1c1a      	adds	r2, r3, #0
1000114c:	4b1a      	ldr	r3, [pc, #104]	; (100011b8 <do_Operational+0xa0>)
1000114e:	681b      	ldr	r3, [r3, #0]
10001150:	691b      	ldr	r3, [r3, #16]
10001152:	1c10      	adds	r0, r2, #0
10001154:	1c19      	adds	r1, r3, #0
10001156:	f000 fbd9 	bl	1000190c <PTimerReplPort_timeout>
			temp=usedTcbsRoot;
1000115a:	4b17      	ldr	r3, [pc, #92]	; (100011b8 <do_Operational+0xa0>)
1000115c:	681b      	ldr	r3, [r3, #0]
1000115e:	617b      	str	r3, [r7, #20]
			usedTcbsRoot=usedTcbsRoot->next;
10001160:	4b15      	ldr	r3, [pc, #84]	; (100011b8 <do_Operational+0xa0>)
10001162:	681b      	ldr	r3, [r3, #0]
10001164:	695a      	ldr	r2, [r3, #20]
10001166:	4b14      	ldr	r3, [pc, #80]	; (100011b8 <do_Operational+0xa0>)
10001168:	601a      	str	r2, [r3, #0]
			if((temp->pTime.sec==0)&&(temp->pTime.nSec==0)){
1000116a:	697b      	ldr	r3, [r7, #20]
1000116c:	689b      	ldr	r3, [r3, #8]
1000116e:	2b00      	cmp	r3, #0
10001170:	d10a      	bne.n	10001188 <do_Operational+0x70>
10001172:	697b      	ldr	r3, [r7, #20]
10001174:	68db      	ldr	r3, [r3, #12]
10001176:	2b00      	cmp	r3, #0
10001178:	d106      	bne.n	10001188 <do_Operational+0x70>
				/* single shot timer */
				returnTcb(temp);
1000117a:	687a      	ldr	r2, [r7, #4]
1000117c:	697b      	ldr	r3, [r7, #20]
1000117e:	1c10      	adds	r0, r2, #0
10001180:	1c19      	adds	r1, r3, #0
10001182:	f000 faab 	bl	100016dc <ATimingService_returnTcb>
10001186:	e00e      	b.n	100011a6 <do_Operational+0x8e>
			}else{
				/* periodic timer */
				addTime(&temp->expTime,&temp->pTime);
10001188:	697a      	ldr	r2, [r7, #20]
1000118a:	697b      	ldr	r3, [r7, #20]
1000118c:	3308      	adds	r3, #8
1000118e:	6879      	ldr	r1, [r7, #4]
10001190:	1c08      	adds	r0, r1, #0
10001192:	1c11      	adds	r1, r2, #0
10001194:	1c1a      	adds	r2, r3, #0
10001196:	f000 fb61 	bl	1000185c <ATimingService_addTime>
				putTcbToUsedList(temp);
1000119a:	687a      	ldr	r2, [r7, #4]
1000119c:	697b      	ldr	r3, [r7, #20]
1000119e:	1c10      	adds	r0, r2, #0
100011a0:	1c19      	adds	r1, r3, #0
100011a2:	f000 faf1 	bl	10001788 <ATimingService_putTcbToUsedList>
	/* maintain timers */
	etTimerControlBlock* temp;
	etTime t;
	
	getTimeFromTarget(&t);
	while (usedTcbsRoot !=0 ){
100011a6:	4b04      	ldr	r3, [pc, #16]	; (100011b8 <do_Operational+0xa0>)
100011a8:	681b      	ldr	r3, [r3, #0]
100011aa:	2b00      	cmp	r3, #0
100011ac:	d1be      	bne.n	1000112c <do_Operational+0x14>
100011ae:	e000      	b.n	100011b2 <do_Operational+0x9a>
				/* periodic timer */
				addTime(&temp->expTime,&temp->pTime);
				putTcbToUsedList(temp);
				}
			}else{
				break;
100011b0:	46c0      	nop			; (mov r8, r8)
				}
		}
}
100011b2:	46bd      	mov	sp, r7
100011b4:	b006      	add	sp, #24
100011b6:	bd80      	pop	{r7, pc}
100011b8:	20000d00 	.word	0x20000d00

100011bc <action_TRANS_INITIAL_TO__Operational>:

/* Action Codes */
static void action_TRANS_INITIAL_TO__Operational(ATimingService* self) {
100011bc:	b580      	push	{r7, lr}
100011be:	b084      	sub	sp, #16
100011c0:	af00      	add	r7, sp, #0
100011c2:	6078      	str	r0, [r7, #4]
	int i;
	usedTcbsRoot=0;
100011c4:	4b13      	ldr	r3, [pc, #76]	; (10001214 <action_TRANS_INITIAL_TO__Operational+0x58>)
100011c6:	2200      	movs	r2, #0
100011c8:	601a      	str	r2, [r3, #0]
	freeTcbsRoot=&tcbs[0];
100011ca:	4b13      	ldr	r3, [pc, #76]	; (10001218 <action_TRANS_INITIAL_TO__Operational+0x5c>)
100011cc:	4a13      	ldr	r2, [pc, #76]	; (1000121c <action_TRANS_INITIAL_TO__Operational+0x60>)
100011ce:	601a      	str	r2, [r3, #0]
	tcbs[ET_NB_OF_TCBS-1].next=0;
100011d0:	4a12      	ldr	r2, [pc, #72]	; (1000121c <action_TRANS_INITIAL_TO__Operational+0x60>)
100011d2:	23ee      	movs	r3, #238	; 0xee
100011d4:	005b      	lsls	r3, r3, #1
100011d6:	2100      	movs	r1, #0
100011d8:	50d1      	str	r1, [r2, r3]
	for (i=0;i<ET_NB_OF_TCBS-1;i++){
100011da:	2300      	movs	r3, #0
100011dc:	60fb      	str	r3, [r7, #12]
100011de:	e013      	b.n	10001208 <action_TRANS_INITIAL_TO__Operational+0x4c>
		tcbs[i].next=&tcbs[i+1];
100011e0:	68fb      	ldr	r3, [r7, #12]
100011e2:	1c5a      	adds	r2, r3, #1
100011e4:	1c13      	adds	r3, r2, #0
100011e6:	005b      	lsls	r3, r3, #1
100011e8:	189b      	adds	r3, r3, r2
100011ea:	00db      	lsls	r3, r3, #3
100011ec:	4a0b      	ldr	r2, [pc, #44]	; (1000121c <action_TRANS_INITIAL_TO__Operational+0x60>)
100011ee:	1899      	adds	r1, r3, r2
100011f0:	480a      	ldr	r0, [pc, #40]	; (1000121c <action_TRANS_INITIAL_TO__Operational+0x60>)
100011f2:	68fa      	ldr	r2, [r7, #12]
100011f4:	1c13      	adds	r3, r2, #0
100011f6:	005b      	lsls	r3, r3, #1
100011f8:	189b      	adds	r3, r3, r2
100011fa:	00db      	lsls	r3, r3, #3
100011fc:	18c3      	adds	r3, r0, r3
100011fe:	3314      	adds	r3, #20
10001200:	6019      	str	r1, [r3, #0]
static void action_TRANS_INITIAL_TO__Operational(ATimingService* self) {
	int i;
	usedTcbsRoot=0;
	freeTcbsRoot=&tcbs[0];
	tcbs[ET_NB_OF_TCBS-1].next=0;
	for (i=0;i<ET_NB_OF_TCBS-1;i++){
10001202:	68fb      	ldr	r3, [r7, #12]
10001204:	3301      	adds	r3, #1
10001206:	60fb      	str	r3, [r7, #12]
10001208:	68fb      	ldr	r3, [r7, #12]
1000120a:	2b12      	cmp	r3, #18
1000120c:	dde8      	ble.n	100011e0 <action_TRANS_INITIAL_TO__Operational+0x24>
		tcbs[i].next=&tcbs[i+1];
		}
}
1000120e:	46bd      	mov	sp, r7
10001210:	b004      	add	sp, #16
10001212:	bd80      	pop	{r7, pc}
10001214:	20000d00 	.word	0x20000d00
10001218:	20000d04 	.word	0x20000d04
1000121c:	20000b20 	.word	0x20000b20

10001220 <action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1>:
static void action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1(ATimingService* self, const InterfaceItemBase* ifitem, uint32 time) {
10001220:	b580      	push	{r7, lr}
10001222:	b088      	sub	sp, #32
10001224:	af00      	add	r7, sp, #0
10001226:	60f8      	str	r0, [r7, #12]
10001228:	60b9      	str	r1, [r7, #8]
1000122a:	607a      	str	r2, [r7, #4]
	etTimerControlBlock* timer = getTcb();
1000122c:	68fb      	ldr	r3, [r7, #12]
1000122e:	1c18      	adds	r0, r3, #0
10001230:	f000 fa3a 	bl	100016a8 <ATimingService_getTcb>
10001234:	1c03      	adds	r3, r0, #0
10001236:	61fb      	str	r3, [r7, #28]
	etTime t;
	if (timer!= 0){
10001238:	69fb      	ldr	r3, [r7, #28]
1000123a:	2b00      	cmp	r3, #0
1000123c:	d035      	beq.n	100012aa <action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1+0x8a>
		t.sec=time/1000;
1000123e:	687b      	ldr	r3, [r7, #4]
10001240:	1c18      	adds	r0, r3, #0
10001242:	23fa      	movs	r3, #250	; 0xfa
10001244:	0099      	lsls	r1, r3, #2
10001246:	f005 ff03 	bl	10007050 <__aeabi_uidiv>
1000124a:	1c03      	adds	r3, r0, #0
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	1c3b      	adds	r3, r7, #0
10001250:	3314      	adds	r3, #20
10001252:	601a      	str	r2, [r3, #0]
		t.nSec=(time%1000)*1000000L;
10001254:	687b      	ldr	r3, [r7, #4]
10001256:	1c18      	adds	r0, r3, #0
10001258:	23fa      	movs	r3, #250	; 0xfa
1000125a:	0099      	lsls	r1, r3, #2
1000125c:	f005 ff3c 	bl	100070d8 <__aeabi_uidivmod>
10001260:	1c0b      	adds	r3, r1, #0
10001262:	4a13      	ldr	r2, [pc, #76]	; (100012b0 <action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1+0x90>)
10001264:	4353      	muls	r3, r2
10001266:	1c1a      	adds	r2, r3, #0
10001268:	1c3b      	adds	r3, r7, #0
1000126a:	3314      	adds	r3, #20
1000126c:	605a      	str	r2, [r3, #4]
		timer->pTime.sec = 0;
1000126e:	69fb      	ldr	r3, [r7, #28]
10001270:	2200      	movs	r2, #0
10001272:	609a      	str	r2, [r3, #8]
		timer->pTime.nSec = 0;
10001274:	69fb      	ldr	r3, [r7, #28]
10001276:	2200      	movs	r2, #0
10001278:	60da      	str	r2, [r3, #12]
		timer->portIdx=((etReplSubPort*)ifitem)->index;
1000127a:	68bb      	ldr	r3, [r7, #8]
1000127c:	7b1b      	ldrb	r3, [r3, #12]
1000127e:	1c1a      	adds	r2, r3, #0
10001280:	69fb      	ldr	r3, [r7, #28]
10001282:	611a      	str	r2, [r3, #16]
		getTimeFromTarget(&(timer->expTime));
10001284:	69fb      	ldr	r3, [r7, #28]
10001286:	1c18      	adds	r0, r3, #0
10001288:	f005 fa4a 	bl	10006720 <getTimeFromTarget>
		addTime(&(timer->expTime),&t);
1000128c:	69fa      	ldr	r2, [r7, #28]
1000128e:	68f9      	ldr	r1, [r7, #12]
10001290:	1c3b      	adds	r3, r7, #0
10001292:	3314      	adds	r3, #20
10001294:	1c08      	adds	r0, r1, #0
10001296:	1c11      	adds	r1, r2, #0
10001298:	1c1a      	adds	r2, r3, #0
1000129a:	f000 fadf 	bl	1000185c <ATimingService_addTime>
		putTcbToUsedList(timer);
1000129e:	68fa      	ldr	r2, [r7, #12]
100012a0:	69fb      	ldr	r3, [r7, #28]
100012a2:	1c10      	adds	r0, r2, #0
100012a4:	1c19      	adds	r1, r3, #0
100012a6:	f000 fa6f 	bl	10001788 <ATimingService_putTcbToUsedList>
		}
}
100012aa:	46bd      	mov	sp, r7
100012ac:	b008      	add	sp, #32
100012ae:	bd80      	pop	{r7, pc}
100012b0:	000f4240 	.word	0x000f4240

100012b4 <action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3>:
static void action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3(ATimingService* self, const InterfaceItemBase* ifitem, uint32 time) {
100012b4:	b580      	push	{r7, lr}
100012b6:	b088      	sub	sp, #32
100012b8:	af00      	add	r7, sp, #0
100012ba:	60f8      	str	r0, [r7, #12]
100012bc:	60b9      	str	r1, [r7, #8]
100012be:	607a      	str	r2, [r7, #4]
	etTimerControlBlock* timer = getTcb();
100012c0:	68fb      	ldr	r3, [r7, #12]
100012c2:	1c18      	adds	r0, r3, #0
100012c4:	f000 f9f0 	bl	100016a8 <ATimingService_getTcb>
100012c8:	1c03      	adds	r3, r0, #0
100012ca:	61fb      	str	r3, [r7, #28]
	etTime t;
	if (timer!= 0){
100012cc:	69fb      	ldr	r3, [r7, #28]
100012ce:	2b00      	cmp	r3, #0
100012d0:	d035      	beq.n	1000133e <action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3+0x8a>
		t.sec=time/1000;
100012d2:	687b      	ldr	r3, [r7, #4]
100012d4:	1c18      	adds	r0, r3, #0
100012d6:	23fa      	movs	r3, #250	; 0xfa
100012d8:	0099      	lsls	r1, r3, #2
100012da:	f005 feb9 	bl	10007050 <__aeabi_uidiv>
100012de:	1c03      	adds	r3, r0, #0
100012e0:	1c1a      	adds	r2, r3, #0
100012e2:	1c3b      	adds	r3, r7, #0
100012e4:	3314      	adds	r3, #20
100012e6:	601a      	str	r2, [r3, #0]
		t.nSec=(time%1000)*1000000L;
100012e8:	687b      	ldr	r3, [r7, #4]
100012ea:	1c18      	adds	r0, r3, #0
100012ec:	23fa      	movs	r3, #250	; 0xfa
100012ee:	0099      	lsls	r1, r3, #2
100012f0:	f005 fef2 	bl	100070d8 <__aeabi_uidivmod>
100012f4:	1c0b      	adds	r3, r1, #0
100012f6:	4a13      	ldr	r2, [pc, #76]	; (10001344 <action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3+0x90>)
100012f8:	4353      	muls	r3, r2
100012fa:	1c1a      	adds	r2, r3, #0
100012fc:	1c3b      	adds	r3, r7, #0
100012fe:	3314      	adds	r3, #20
10001300:	605a      	str	r2, [r3, #4]
		timer->pTime = t;
10001302:	69fb      	ldr	r3, [r7, #28]
10001304:	1c3a      	adds	r2, r7, #0
10001306:	3214      	adds	r2, #20
10001308:	3308      	adds	r3, #8
1000130a:	ca03      	ldmia	r2!, {r0, r1}
1000130c:	c303      	stmia	r3!, {r0, r1}
		timer->portIdx=((etReplSubPort*)ifitem)->index;
1000130e:	68bb      	ldr	r3, [r7, #8]
10001310:	7b1b      	ldrb	r3, [r3, #12]
10001312:	1c1a      	adds	r2, r3, #0
10001314:	69fb      	ldr	r3, [r7, #28]
10001316:	611a      	str	r2, [r3, #16]
		getTimeFromTarget(&(timer->expTime));
10001318:	69fb      	ldr	r3, [r7, #28]
1000131a:	1c18      	adds	r0, r3, #0
1000131c:	f005 fa00 	bl	10006720 <getTimeFromTarget>
		addTime(&(timer->expTime),&t);
10001320:	69fa      	ldr	r2, [r7, #28]
10001322:	68f9      	ldr	r1, [r7, #12]
10001324:	1c3b      	adds	r3, r7, #0
10001326:	3314      	adds	r3, #20
10001328:	1c08      	adds	r0, r1, #0
1000132a:	1c11      	adds	r1, r2, #0
1000132c:	1c1a      	adds	r2, r3, #0
1000132e:	f000 fa95 	bl	1000185c <ATimingService_addTime>
		putTcbToUsedList(timer);
10001332:	68fa      	ldr	r2, [r7, #12]
10001334:	69fb      	ldr	r3, [r7, #28]
10001336:	1c10      	adds	r0, r2, #0
10001338:	1c19      	adds	r1, r3, #0
1000133a:	f000 fa25 	bl	10001788 <ATimingService_putTcbToUsedList>
		}
}
1000133e:	46bd      	mov	sp, r7
10001340:	b008      	add	sp, #32
10001342:	bd80      	pop	{r7, pc}
10001344:	000f4240 	.word	0x000f4240

10001348 <action_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4>:
static void action_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4(ATimingService* self, const InterfaceItemBase* ifitem) {
10001348:	b580      	push	{r7, lr}
1000134a:	b082      	sub	sp, #8
1000134c:	af00      	add	r7, sp, #0
1000134e:	6078      	str	r0, [r7, #4]
10001350:	6039      	str	r1, [r7, #0]
	removeTcbFromUsedList(((etReplSubPort*)ifitem)->index);
10001352:	683b      	ldr	r3, [r7, #0]
10001354:	7b1b      	ldrb	r3, [r3, #12]
10001356:	687a      	ldr	r2, [r7, #4]
10001358:	1c10      	adds	r0, r2, #0
1000135a:	1c19      	adds	r1, r3, #0
1000135c:	f000 f9d0 	bl	10001700 <ATimingService_removeTcbFromUsedList>
}
10001360:	46bd      	mov	sp, r7
10001362:	b002      	add	sp, #8
10001364:	bd80      	pop	{r7, pc}
10001366:	46c0      	nop			; (mov r8, r8)

10001368 <exitTo>:
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ATimingService* self, etInt16 current__et, etInt16 to) {
10001368:	b580      	push	{r7, lr}
1000136a:	b082      	sub	sp, #8
1000136c:	af00      	add	r7, sp, #0
1000136e:	6078      	str	r0, [r7, #4]
10001370:	1cbb      	adds	r3, r7, #2
10001372:	8019      	strh	r1, [r3, #0]
10001374:	1c3b      	adds	r3, r7, #0
10001376:	801a      	strh	r2, [r3, #0]
	while (current__et!=to) {
10001378:	e010      	b.n	1000139c <exitTo+0x34>
		switch (current__et) {
1000137a:	1cbb      	adds	r3, r7, #2
1000137c:	2100      	movs	r1, #0
1000137e:	5e5b      	ldrsh	r3, [r3, r1]
10001380:	2b02      	cmp	r3, #2
10001382:	d106      	bne.n	10001392 <exitTo+0x2a>
			case STATE_Operational:
				self->history[STATE_TOP] = STATE_Operational;
10001384:	687b      	ldr	r3, [r7, #4]
10001386:	2202      	movs	r2, #2
10001388:	811a      	strh	r2, [r3, #8]
				current__et = STATE_TOP;
1000138a:	1cbb      	adds	r3, r7, #2
1000138c:	2201      	movs	r2, #1
1000138e:	801a      	strh	r2, [r3, #0]
				break;
10001390:	e004      	b.n	1000139c <exitTo+0x34>
10001392:	1cbb      	adds	r3, r7, #2
10001394:	1cba      	adds	r2, r7, #2
10001396:	8812      	ldrh	r2, [r2, #0]
10001398:	801a      	strh	r2, [r3, #0]
			default:
				/* should not occur */
				break;
1000139a:	46c0      	nop			; (mov r8, r8)
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ATimingService* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
1000139c:	1cba      	adds	r2, r7, #2
1000139e:	1c3b      	adds	r3, r7, #0
100013a0:	2100      	movs	r1, #0
100013a2:	5e52      	ldrsh	r2, [r2, r1]
100013a4:	2100      	movs	r1, #0
100013a6:	5e5b      	ldrsh	r3, [r3, r1]
100013a8:	429a      	cmp	r2, r3
100013aa:	d1e6      	bne.n	1000137a <exitTo+0x12>
			default:
				/* should not occur */
				break;
		}
	}
}
100013ac:	46bd      	mov	sp, r7
100013ae:	b002      	add	sp, #8
100013b0:	bd80      	pop	{r7, pc}
100013b2:	46c0      	nop			; (mov r8, r8)

100013b4 <executeTransitionChain>:
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(ATimingService* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
100013b4:	b580      	push	{r7, lr}
100013b6:	b086      	sub	sp, #24
100013b8:	af00      	add	r7, sp, #0
100013ba:	60f8      	str	r0, [r7, #12]
100013bc:	60b9      	str	r1, [r7, #8]
100013be:	607a      	str	r2, [r7, #4]
100013c0:	603b      	str	r3, [r7, #0]
	switch (chain__et) {
100013c2:	68bb      	ldr	r3, [r7, #8]
100013c4:	2b02      	cmp	r3, #2
100013c6:	d00e      	beq.n	100013e6 <executeTransitionChain+0x32>
100013c8:	dc02      	bgt.n	100013d0 <executeTransitionChain+0x1c>
100013ca:	2b01      	cmp	r3, #1
100013cc:	d005      	beq.n	100013da <executeTransitionChain+0x26>
100013ce:	e02c      	b.n	1000142a <executeTransitionChain+0x76>
100013d0:	2b03      	cmp	r3, #3
100013d2:	d015      	beq.n	10001400 <executeTransitionChain+0x4c>
100013d4:	2b04      	cmp	r3, #4
100013d6:	d020      	beq.n	1000141a <executeTransitionChain+0x66>
100013d8:	e027      	b.n	1000142a <executeTransitionChain+0x76>
		case CHAIN_TRANS_INITIAL_TO__Operational:
		{
			action_TRANS_INITIAL_TO__Operational(self);
100013da:	68fb      	ldr	r3, [r7, #12]
100013dc:	1c18      	adds	r0, r3, #0
100013de:	f7ff feed 	bl	100011bc <action_TRANS_INITIAL_TO__Operational>
			return STATE_Operational;
100013e2:	2302      	movs	r3, #2
100013e4:	e023      	b.n	1000142e <executeTransitionChain+0x7a>
		}
		case CHAIN_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1:
		{
			uint32 time = *((uint32*) generic_data__et);
100013e6:	683b      	ldr	r3, [r7, #0]
100013e8:	681b      	ldr	r3, [r3, #0]
100013ea:	617b      	str	r3, [r7, #20]
			action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1(self, ifitem, time);
100013ec:	68f9      	ldr	r1, [r7, #12]
100013ee:	687a      	ldr	r2, [r7, #4]
100013f0:	697b      	ldr	r3, [r7, #20]
100013f2:	1c08      	adds	r0, r1, #0
100013f4:	1c11      	adds	r1, r2, #0
100013f6:	1c1a      	adds	r2, r3, #0
100013f8:	f7ff ff12 	bl	10001220 <action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1>
			return STATE_Operational;
100013fc:	2302      	movs	r3, #2
100013fe:	e016      	b.n	1000142e <executeTransitionChain+0x7a>
		}
		case CHAIN_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3:
		{
			uint32 time = *((uint32*) generic_data__et);
10001400:	683b      	ldr	r3, [r7, #0]
10001402:	681b      	ldr	r3, [r3, #0]
10001404:	613b      	str	r3, [r7, #16]
			action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3(self, ifitem, time);
10001406:	68f9      	ldr	r1, [r7, #12]
10001408:	687a      	ldr	r2, [r7, #4]
1000140a:	693b      	ldr	r3, [r7, #16]
1000140c:	1c08      	adds	r0, r1, #0
1000140e:	1c11      	adds	r1, r2, #0
10001410:	1c1a      	adds	r2, r3, #0
10001412:	f7ff ff4f 	bl	100012b4 <action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3>
			return STATE_Operational;
10001416:	2302      	movs	r3, #2
10001418:	e009      	b.n	1000142e <executeTransitionChain+0x7a>
		}
		case CHAIN_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4:
		{
			action_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4(self, ifitem);
1000141a:	68fa      	ldr	r2, [r7, #12]
1000141c:	687b      	ldr	r3, [r7, #4]
1000141e:	1c10      	adds	r0, r2, #0
10001420:	1c19      	adds	r1, r3, #0
10001422:	f7ff ff91 	bl	10001348 <action_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4>
			return STATE_Operational;
10001426:	2302      	movs	r3, #2
10001428:	e001      	b.n	1000142e <executeTransitionChain+0x7a>
		}
			default:
				/* should not occur */
				break;
1000142a:	46c0      	nop			; (mov r8, r8)
	}
	return NO_STATE;
1000142c:	2300      	movs	r3, #0
1000142e:	b21b      	sxth	r3, r3
}
10001430:	1c18      	adds	r0, r3, #0
10001432:	46bd      	mov	sp, r7
10001434:	b006      	add	sp, #24
10001436:	bd80      	pop	{r7, pc}

10001438 <enterHistory>:
/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(ATimingService* self, etInt16 state__et) {
10001438:	b580      	push	{r7, lr}
1000143a:	b084      	sub	sp, #16
1000143c:	af00      	add	r7, sp, #0
1000143e:	6078      	str	r0, [r7, #4]
10001440:	1c0a      	adds	r2, r1, #0
10001442:	1cbb      	adds	r3, r7, #2
10001444:	801a      	strh	r2, [r3, #0]
	boolean skip_entry__et = ET_FALSE;
10001446:	1c3b      	adds	r3, r7, #0
10001448:	330f      	adds	r3, #15
1000144a:	2200      	movs	r2, #0
1000144c:	701a      	strb	r2, [r3, #0]
	if (state__et >= STATE_MAX) {
1000144e:	1cbb      	adds	r3, r7, #2
10001450:	2200      	movs	r2, #0
10001452:	5e9b      	ldrsh	r3, [r3, r2]
10001454:	2b02      	cmp	r3, #2
10001456:	dd09      	ble.n	1000146c <enterHistory+0x34>
		state__et = (etInt16) (state__et - STATE_MAX);
10001458:	1cbb      	adds	r3, r7, #2
1000145a:	881b      	ldrh	r3, [r3, #0]
1000145c:	3b03      	subs	r3, #3
1000145e:	b29a      	uxth	r2, r3
10001460:	1cbb      	adds	r3, r7, #2
10001462:	801a      	strh	r2, [r3, #0]
		skip_entry__et = ET_TRUE;
10001464:	1c3b      	adds	r3, r7, #0
10001466:	330f      	adds	r3, #15
10001468:	2201      	movs	r2, #1
1000146a:	701a      	strb	r2, [r3, #0]
	}
	while (ET_TRUE) {
		switch (state__et) {
1000146c:	1cbb      	adds	r3, r7, #2
1000146e:	2200      	movs	r2, #0
10001470:	5e9b      	ldrsh	r3, [r3, r2]
10001472:	2b01      	cmp	r3, #1
10001474:	d00d      	beq.n	10001492 <enterHistory+0x5a>
10001476:	2b02      	cmp	r3, #2
10001478:	d110      	bne.n	1000149c <enterHistory+0x64>
			case STATE_Operational:
				if (!(skip_entry__et)) entry_Operational(self);
1000147a:	1c3b      	adds	r3, r7, #0
1000147c:	330f      	adds	r3, #15
1000147e:	781b      	ldrb	r3, [r3, #0]
10001480:	2b00      	cmp	r3, #0
10001482:	d103      	bne.n	1000148c <enterHistory+0x54>
10001484:	687b      	ldr	r3, [r7, #4]
10001486:	1c18      	adds	r0, r3, #0
10001488:	f7ff fe3e 	bl	10001108 <entry_Operational>
				/* in leaf state: return state id */
				return STATE_Operational;
1000148c:	2302      	movs	r3, #2
1000148e:	b21b      	sxth	r3, r3
10001490:	e00a      	b.n	100014a8 <enterHistory+0x70>
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
10001492:	1cbb      	adds	r3, r7, #2
10001494:	687a      	ldr	r2, [r7, #4]
10001496:	8912      	ldrh	r2, [r2, #8]
10001498:	801a      	strh	r2, [r3, #0]
				break;
1000149a:	e000      	b.n	1000149e <enterHistory+0x66>
			default:
				/* should not occur */
				break;
1000149c:	46c0      	nop			; (mov r8, r8)
		}
		skip_entry__et = ET_FALSE;
1000149e:	1c3b      	adds	r3, r7, #0
100014a0:	330f      	adds	r3, #15
100014a2:	2200      	movs	r2, #0
100014a4:	701a      	strb	r2, [r3, #0]
	}
100014a6:	e7e1      	b.n	1000146c <enterHistory+0x34>
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}
100014a8:	1c18      	adds	r0, r3, #0
100014aa:	46bd      	mov	sp, r7
100014ac:	b004      	add	sp, #16
100014ae:	bd80      	pop	{r7, pc}

100014b0 <ATimingService_executeInitTransition>:

static void ATimingService_executeInitTransition(ATimingService* self) {
100014b0:	b590      	push	{r4, r7, lr}
100014b2:	b085      	sub	sp, #20
100014b4:	af00      	add	r7, sp, #0
100014b6:	6078      	str	r0, [r7, #4]
	int chain__et = CHAIN_TRANS_INITIAL_TO__Operational;
100014b8:	2301      	movs	r3, #1
100014ba:	60fb      	str	r3, [r7, #12]
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
100014bc:	1c3c      	adds	r4, r7, #0
100014be:	340a      	adds	r4, #10
100014c0:	687a      	ldr	r2, [r7, #4]
100014c2:	68fb      	ldr	r3, [r7, #12]
100014c4:	1c10      	adds	r0, r2, #0
100014c6:	1c19      	adds	r1, r3, #0
100014c8:	2200      	movs	r2, #0
100014ca:	2300      	movs	r3, #0
100014cc:	f7ff ff72 	bl	100013b4 <executeTransitionChain>
100014d0:	1c03      	adds	r3, r0, #0
100014d2:	8023      	strh	r3, [r4, #0]
	next__et = enterHistory(self, next__et);
100014d4:	1c3c      	adds	r4, r7, #0
100014d6:	340a      	adds	r4, #10
100014d8:	687a      	ldr	r2, [r7, #4]
100014da:	1c3b      	adds	r3, r7, #0
100014dc:	330a      	adds	r3, #10
100014de:	2100      	movs	r1, #0
100014e0:	5e5b      	ldrsh	r3, [r3, r1]
100014e2:	1c10      	adds	r0, r2, #0
100014e4:	1c19      	adds	r1, r3, #0
100014e6:	f7ff ffa7 	bl	10001438 <enterHistory>
100014ea:	1c03      	adds	r3, r0, #0
100014ec:	8023      	strh	r3, [r4, #0]
	setState(self, next__et);
100014ee:	687a      	ldr	r2, [r7, #4]
100014f0:	1c3b      	adds	r3, r7, #0
100014f2:	330a      	adds	r3, #10
100014f4:	2100      	movs	r1, #0
100014f6:	5e5b      	ldrsh	r3, [r3, r1]
100014f8:	1c10      	adds	r0, r2, #0
100014fa:	1c19      	adds	r1, r3, #0
100014fc:	f7ff fdea 	bl	100010d4 <setState>
}
10001500:	46bd      	mov	sp, r7
10001502:	b005      	add	sp, #20
10001504:	bd90      	pop	{r4, r7, pc}
10001506:	46c0      	nop			; (mov r8, r8)

10001508 <ATimingService_receiveEvent>:

/* receiveEvent contains the main implementation of the FSM */
static void ATimingService_receiveEvent(ATimingService* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
10001508:	b590      	push	{r4, r7, lr}
1000150a:	b089      	sub	sp, #36	; 0x24
1000150c:	af00      	add	r7, sp, #0
1000150e:	60f8      	str	r0, [r7, #12]
10001510:	60b9      	str	r1, [r7, #8]
10001512:	607a      	str	r2, [r7, #4]
10001514:	603b      	str	r3, [r7, #0]
	int trigger__et = (ifitem==NULL)? POLLING : ifitem->localId + EVT_SHIFT*evt;
10001516:	68bb      	ldr	r3, [r7, #8]
10001518:	2b00      	cmp	r3, #0
1000151a:	d007      	beq.n	1000152c <ATimingService_receiveEvent+0x24>
1000151c:	68bb      	ldr	r3, [r7, #8]
1000151e:	7a5b      	ldrb	r3, [r3, #9]
10001520:	1c1a      	adds	r2, r3, #0
10001522:	687b      	ldr	r3, [r7, #4]
10001524:	2164      	movs	r1, #100	; 0x64
10001526:	434b      	muls	r3, r1
10001528:	18d3      	adds	r3, r2, r3
1000152a:	e000      	b.n	1000152e <ATimingService_receiveEvent+0x26>
1000152c:	2300      	movs	r3, #0
1000152e:	617b      	str	r3, [r7, #20]
	int chain__et = NOT_CAUGHT;
10001530:	2300      	movs	r3, #0
10001532:	61fb      	str	r3, [r7, #28]
	etInt16 catching_state__et = NO_STATE;
10001534:	1c3b      	adds	r3, r7, #0
10001536:	331a      	adds	r3, #26
10001538:	2200      	movs	r2, #0
1000153a:	801a      	strh	r2, [r3, #0]
	((void)trigger__et);	/* avoids unused warning */
	
	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
1000153c:	68b9      	ldr	r1, [r7, #8]
1000153e:	687a      	ldr	r2, [r7, #4]
10001540:	683b      	ldr	r3, [r7, #0]
10001542:	1c08      	adds	r0, r1, #0
10001544:	1c11      	adds	r1, r2, #0
10001546:	1c1a      	adds	r2, r3, #0
10001548:	f005 f91c 	bl	10006784 <handleSystemEvent>
1000154c:	1c03      	adds	r3, r0, #0
1000154e:	2b00      	cmp	r3, #0
10001550:	d131      	bne.n	100015b6 <ATimingService_receiveEvent+0xae>
		switch (getState(self)) {
10001552:	68fb      	ldr	r3, [r7, #12]
10001554:	1c18      	adds	r0, r3, #0
10001556:	f7ff fdcb 	bl	100010f0 <getState>
1000155a:	1c03      	adds	r3, r0, #0
1000155c:	2b02      	cmp	r3, #2
1000155e:	d129      	bne.n	100015b4 <ATimingService_receiveEvent+0xac>
			case STATE_Operational:
				switch(trigger__et) {
10001560:	697b      	ldr	r3, [r7, #20]
10001562:	2bc9      	cmp	r3, #201	; 0xc9
10001564:	d016      	beq.n	10001594 <ATimingService_receiveEvent+0x8c>
10001566:	dc02      	bgt.n	1000156e <ATimingService_receiveEvent+0x66>
10001568:	2b00      	cmp	r3, #0
1000156a:	d007      	beq.n	1000157c <ATimingService_receiveEvent+0x74>
1000156c:	e020      	b.n	100015b0 <ATimingService_receiveEvent+0xa8>
1000156e:	4a2d      	ldr	r2, [pc, #180]	; (10001624 <ATimingService_receiveEvent+0x11c>)
10001570:	4293      	cmp	r3, r2
10001572:	d008      	beq.n	10001586 <ATimingService_receiveEvent+0x7e>
10001574:	4a2c      	ldr	r2, [pc, #176]	; (10001628 <ATimingService_receiveEvent+0x120>)
10001576:	4293      	cmp	r3, r2
10001578:	d013      	beq.n	100015a2 <ATimingService_receiveEvent+0x9a>
1000157a:	e019      	b.n	100015b0 <ATimingService_receiveEvent+0xa8>
					case POLLING:
						do_Operational(self);
1000157c:	68fb      	ldr	r3, [r7, #12]
1000157e:	1c18      	adds	r0, r3, #0
10001580:	f7ff fdca 	bl	10001118 <do_Operational>
						break;
10001584:	e015      	b.n	100015b2 <ATimingService_receiveEvent+0xaa>
					case TRIG_timer__startTimeout:
						{
							chain__et = CHAIN_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1;
10001586:	2302      	movs	r3, #2
10001588:	61fb      	str	r3, [r7, #28]
							catching_state__et = STATE_TOP;
1000158a:	1c3b      	adds	r3, r7, #0
1000158c:	331a      	adds	r3, #26
1000158e:	2201      	movs	r2, #1
10001590:	801a      	strh	r2, [r3, #0]
						}
					break;
10001592:	e00e      	b.n	100015b2 <ATimingService_receiveEvent+0xaa>
					case TRIG_timer__startTimer:
						{
							chain__et = CHAIN_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3;
10001594:	2303      	movs	r3, #3
10001596:	61fb      	str	r3, [r7, #28]
							catching_state__et = STATE_TOP;
10001598:	1c3b      	adds	r3, r7, #0
1000159a:	331a      	adds	r3, #26
1000159c:	2201      	movs	r2, #1
1000159e:	801a      	strh	r2, [r3, #0]
						}
					break;
100015a0:	e007      	b.n	100015b2 <ATimingService_receiveEvent+0xaa>
					case TRIG_timer__kill:
						{
							chain__et = CHAIN_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4;
100015a2:	2304      	movs	r3, #4
100015a4:	61fb      	str	r3, [r7, #28]
							catching_state__et = STATE_TOP;
100015a6:	1c3b      	adds	r3, r7, #0
100015a8:	331a      	adds	r3, #26
100015aa:	2201      	movs	r2, #1
100015ac:	801a      	strh	r2, [r3, #0]
						}
					break;
100015ae:	e000      	b.n	100015b2 <ATimingService_receiveEvent+0xaa>
					default:
						/* should not occur */
						break;
100015b0:	46c0      	nop			; (mov r8, r8)
				}
				break;
100015b2:	e000      	b.n	100015b6 <ATimingService_receiveEvent+0xae>
			default:
				/* should not occur */
				break;
100015b4:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (chain__et != NOT_CAUGHT) {
100015b6:	69fb      	ldr	r3, [r7, #28]
100015b8:	2b00      	cmp	r3, #0
100015ba:	d02f      	beq.n	1000161c <ATimingService_receiveEvent+0x114>
		exitTo(self, getState(self), catching_state__et);
100015bc:	68fb      	ldr	r3, [r7, #12]
100015be:	1c18      	adds	r0, r3, #0
100015c0:	f7ff fd96 	bl	100010f0 <getState>
100015c4:	1c03      	adds	r3, r0, #0
100015c6:	1c1a      	adds	r2, r3, #0
100015c8:	68f9      	ldr	r1, [r7, #12]
100015ca:	1c3b      	adds	r3, r7, #0
100015cc:	331a      	adds	r3, #26
100015ce:	2000      	movs	r0, #0
100015d0:	5e1b      	ldrsh	r3, [r3, r0]
100015d2:	1c08      	adds	r0, r1, #0
100015d4:	1c11      	adds	r1, r2, #0
100015d6:	1c1a      	adds	r2, r3, #0
100015d8:	f7ff fec6 	bl	10001368 <exitTo>
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
100015dc:	1c3c      	adds	r4, r7, #0
100015de:	3412      	adds	r4, #18
100015e0:	68f8      	ldr	r0, [r7, #12]
100015e2:	69f9      	ldr	r1, [r7, #28]
100015e4:	68ba      	ldr	r2, [r7, #8]
100015e6:	683b      	ldr	r3, [r7, #0]
100015e8:	f7ff fee4 	bl	100013b4 <executeTransitionChain>
100015ec:	1c03      	adds	r3, r0, #0
100015ee:	8023      	strh	r3, [r4, #0]
			next__et = enterHistory(self, next__et);
100015f0:	1c3c      	adds	r4, r7, #0
100015f2:	3412      	adds	r4, #18
100015f4:	68fa      	ldr	r2, [r7, #12]
100015f6:	1c3b      	adds	r3, r7, #0
100015f8:	3312      	adds	r3, #18
100015fa:	2100      	movs	r1, #0
100015fc:	5e5b      	ldrsh	r3, [r3, r1]
100015fe:	1c10      	adds	r0, r2, #0
10001600:	1c19      	adds	r1, r3, #0
10001602:	f7ff ff19 	bl	10001438 <enterHistory>
10001606:	1c03      	adds	r3, r0, #0
10001608:	8023      	strh	r3, [r4, #0]
			setState(self, next__et);
1000160a:	68fa      	ldr	r2, [r7, #12]
1000160c:	1c3b      	adds	r3, r7, #0
1000160e:	3312      	adds	r3, #18
10001610:	2000      	movs	r0, #0
10001612:	5e1b      	ldrsh	r3, [r3, r0]
10001614:	1c10      	adds	r0, r2, #0
10001616:	1c19      	adds	r1, r3, #0
10001618:	f7ff fd5c 	bl	100010d4 <setState>
		}
	}
}
1000161c:	46bd      	mov	sp, r7
1000161e:	b009      	add	sp, #36	; 0x24
10001620:	bd90      	pop	{r4, r7, pc}
10001622:	46c0      	nop			; (mov r8, r8)
10001624:	0000012d 	.word	0x0000012d
10001628:	00000191 	.word	0x00000191

1000162c <ATimingService_init>:

void ATimingService_init(ATimingService* self){
1000162c:	b580      	push	{r7, lr}
1000162e:	b084      	sub	sp, #16
10001630:	af00      	add	r7, sp, #0
10001632:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ATimingService", "init")
	self->state = STATE_TOP;
10001634:	687b      	ldr	r3, [r7, #4]
10001636:	2201      	movs	r2, #1
10001638:	809a      	strh	r2, [r3, #4]
	{
		int i;
		for (i=0; i<ATIMINGSERVICE_HISTORY_SIZE; ++i)
1000163a:	2300      	movs	r3, #0
1000163c:	60fb      	str	r3, [r7, #12]
1000163e:	e008      	b.n	10001652 <ATimingService_init+0x26>
			self->history[i] = NO_STATE;
10001640:	687a      	ldr	r2, [r7, #4]
10001642:	68fb      	ldr	r3, [r7, #12]
10001644:	005b      	lsls	r3, r3, #1
10001646:	18d3      	adds	r3, r2, r3
10001648:	2200      	movs	r2, #0
1000164a:	80da      	strh	r2, [r3, #6]
void ATimingService_init(ATimingService* self){
	ET_MSC_LOGGER_SYNC_ENTRY("ATimingService", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<ATIMINGSERVICE_HISTORY_SIZE; ++i)
1000164c:	68fb      	ldr	r3, [r7, #12]
1000164e:	3301      	adds	r3, #1
10001650:	60fb      	str	r3, [r7, #12]
10001652:	68fb      	ldr	r3, [r7, #12]
10001654:	2b01      	cmp	r3, #1
10001656:	ddf3      	ble.n	10001640 <ATimingService_init+0x14>
			self->history[i] = NO_STATE;
	}
	ATimingService_executeInitTransition(self);
10001658:	687b      	ldr	r3, [r7, #4]
1000165a:	1c18      	adds	r0, r3, #0
1000165c:	f7ff ff28 	bl	100014b0 <ATimingService_executeInitTransition>
	ET_MSC_LOGGER_SYNC_EXIT
}
10001660:	46bd      	mov	sp, r7
10001662:	b004      	add	sp, #16
10001664:	bd80      	pop	{r7, pc}
10001666:	46c0      	nop			; (mov r8, r8)

10001668 <ATimingService_receiveMessage>:


void ATimingService_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
10001668:	b580      	push	{r7, lr}
1000166a:	b084      	sub	sp, #16
1000166c:	af00      	add	r7, sp, #0
1000166e:	60f8      	str	r0, [r7, #12]
10001670:	60b9      	str	r1, [r7, #8]
10001672:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ATimingService", "_receiveMessage")
	
	ATimingService_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));
10001674:	687b      	ldr	r3, [r7, #4]
10001676:	88db      	ldrh	r3, [r3, #6]
10001678:	b21a      	sxth	r2, r3
1000167a:	687b      	ldr	r3, [r7, #4]
1000167c:	3308      	adds	r3, #8
1000167e:	68f8      	ldr	r0, [r7, #12]
10001680:	68b9      	ldr	r1, [r7, #8]
10001682:	f7ff ff41 	bl	10001508 <ATimingService_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10001686:	46bd      	mov	sp, r7
10001688:	b004      	add	sp, #16
1000168a:	bd80      	pop	{r7, pc}

1000168c <ATimingService_execute>:

void ATimingService_execute(ATimingService* self) {
1000168c:	b580      	push	{r7, lr}
1000168e:	b082      	sub	sp, #8
10001690:	af00      	add	r7, sp, #0
10001692:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ATimingService", "_execute")
	
	ATimingService_receiveEvent(self, NULL, 0, NULL);
10001694:	687b      	ldr	r3, [r7, #4]
10001696:	1c18      	adds	r0, r3, #0
10001698:	2100      	movs	r1, #0
1000169a:	2200      	movs	r2, #0
1000169c:	2300      	movs	r3, #0
1000169e:	f7ff ff33 	bl	10001508 <ATimingService_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
100016a2:	46bd      	mov	sp, r7
100016a4:	b002      	add	sp, #8
100016a6:	bd80      	pop	{r7, pc}

100016a8 <ATimingService_getTcb>:

/*--------------------- operations ---------------------*/
etTimerControlBlock* ATimingService_getTcb(ATimingService* self) {
100016a8:	b580      	push	{r7, lr}
100016aa:	b084      	sub	sp, #16
100016ac:	af00      	add	r7, sp, #0
100016ae:	6078      	str	r0, [r7, #4]
	
				etTimerControlBlock* temp = freeTcbsRoot;
100016b0:	4b09      	ldr	r3, [pc, #36]	; (100016d8 <ATimingService_getTcb+0x30>)
100016b2:	681b      	ldr	r3, [r3, #0]
100016b4:	60fb      	str	r3, [r7, #12]
				
				if(freeTcbsRoot!=0) {
100016b6:	4b08      	ldr	r3, [pc, #32]	; (100016d8 <ATimingService_getTcb+0x30>)
100016b8:	681b      	ldr	r3, [r3, #0]
100016ba:	2b00      	cmp	r3, #0
100016bc:	d007      	beq.n	100016ce <ATimingService_getTcb+0x26>
					freeTcbsRoot=freeTcbsRoot->next;
100016be:	4b06      	ldr	r3, [pc, #24]	; (100016d8 <ATimingService_getTcb+0x30>)
100016c0:	681b      	ldr	r3, [r3, #0]
100016c2:	695a      	ldr	r2, [r3, #20]
100016c4:	4b04      	ldr	r3, [pc, #16]	; (100016d8 <ATimingService_getTcb+0x30>)
100016c6:	601a      	str	r2, [r3, #0]
					temp->next=0;
100016c8:	68fb      	ldr	r3, [r7, #12]
100016ca:	2200      	movs	r2, #0
100016cc:	615a      	str	r2, [r3, #20]
					}
				return temp;
100016ce:	68fb      	ldr	r3, [r7, #12]
}
100016d0:	1c18      	adds	r0, r3, #0
100016d2:	46bd      	mov	sp, r7
100016d4:	b004      	add	sp, #16
100016d6:	bd80      	pop	{r7, pc}
100016d8:	20000d04 	.word	0x20000d04

100016dc <ATimingService_returnTcb>:
void ATimingService_returnTcb(ATimingService* self, etTimerControlBlock* block) {
100016dc:	b580      	push	{r7, lr}
100016de:	b082      	sub	sp, #8
100016e0:	af00      	add	r7, sp, #0
100016e2:	6078      	str	r0, [r7, #4]
100016e4:	6039      	str	r1, [r7, #0]
	
				block->next=freeTcbsRoot;
100016e6:	4b05      	ldr	r3, [pc, #20]	; (100016fc <ATimingService_returnTcb+0x20>)
100016e8:	681a      	ldr	r2, [r3, #0]
100016ea:	683b      	ldr	r3, [r7, #0]
100016ec:	615a      	str	r2, [r3, #20]
				freeTcbsRoot=block;
100016ee:	4b03      	ldr	r3, [pc, #12]	; (100016fc <ATimingService_returnTcb+0x20>)
100016f0:	683a      	ldr	r2, [r7, #0]
100016f2:	601a      	str	r2, [r3, #0]
}
100016f4:	46bd      	mov	sp, r7
100016f6:	b002      	add	sp, #8
100016f8:	bd80      	pop	{r7, pc}
100016fa:	46c0      	nop			; (mov r8, r8)
100016fc:	20000d04 	.word	0x20000d04

10001700 <ATimingService_removeTcbFromUsedList>:
void ATimingService_removeTcbFromUsedList(ATimingService* self, int32 idx) {
10001700:	b580      	push	{r7, lr}
10001702:	b084      	sub	sp, #16
10001704:	af00      	add	r7, sp, #0
10001706:	6078      	str	r0, [r7, #4]
10001708:	6039      	str	r1, [r7, #0]
	
				etTimerControlBlock* temp=usedTcbsRoot;
1000170a:	4b1e      	ldr	r3, [pc, #120]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
1000170c:	681b      	ldr	r3, [r3, #0]
1000170e:	60fb      	str	r3, [r7, #12]
				etTimerControlBlock* temp2=usedTcbsRoot;
10001710:	4b1c      	ldr	r3, [pc, #112]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
10001712:	681b      	ldr	r3, [r3, #0]
10001714:	60bb      	str	r3, [r7, #8]
				
				if (temp==0) return;
10001716:	68fb      	ldr	r3, [r7, #12]
10001718:	2b00      	cmp	r3, #0
1000171a:	d02e      	beq.n	1000177a <ATimingService_removeTcbFromUsedList+0x7a>
	
				if (usedTcbsRoot->portIdx == idx){
1000171c:	4b19      	ldr	r3, [pc, #100]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
1000171e:	681b      	ldr	r3, [r3, #0]
10001720:	691a      	ldr	r2, [r3, #16]
10001722:	683b      	ldr	r3, [r7, #0]
10001724:	429a      	cmp	r2, r3
10001726:	d10b      	bne.n	10001740 <ATimingService_removeTcbFromUsedList+0x40>
					/* element found, the first one */
					usedTcbsRoot = usedTcbsRoot->next;
10001728:	4b16      	ldr	r3, [pc, #88]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
1000172a:	681b      	ldr	r3, [r3, #0]
1000172c:	695a      	ldr	r2, [r3, #20]
1000172e:	4b15      	ldr	r3, [pc, #84]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
10001730:	601a      	str	r2, [r3, #0]
					returnTcb(temp);
10001732:	687a      	ldr	r2, [r7, #4]
10001734:	68fb      	ldr	r3, [r7, #12]
10001736:	1c10      	adds	r0, r2, #0
10001738:	1c19      	adds	r1, r3, #0
1000173a:	f7ff ffcf 	bl	100016dc <ATimingService_returnTcb>
					return;
1000173e:	e01d      	b.n	1000177c <ATimingService_removeTcbFromUsedList+0x7c>
					}
	
				temp=temp->next;
10001740:	68fb      	ldr	r3, [r7, #12]
10001742:	695b      	ldr	r3, [r3, #20]
10001744:	60fb      	str	r3, [r7, #12]
				while(temp!=0){
10001746:	e014      	b.n	10001772 <ATimingService_removeTcbFromUsedList+0x72>
					if(temp->portIdx==idx){
10001748:	68fb      	ldr	r3, [r7, #12]
1000174a:	691a      	ldr	r2, [r3, #16]
1000174c:	683b      	ldr	r3, [r7, #0]
1000174e:	429a      	cmp	r2, r3
10001750:	d10a      	bne.n	10001768 <ATimingService_removeTcbFromUsedList+0x68>
						temp2->next=temp->next;
10001752:	68fb      	ldr	r3, [r7, #12]
10001754:	695a      	ldr	r2, [r3, #20]
10001756:	68bb      	ldr	r3, [r7, #8]
10001758:	615a      	str	r2, [r3, #20]
						returnTcb(temp);
1000175a:	687a      	ldr	r2, [r7, #4]
1000175c:	68fb      	ldr	r3, [r7, #12]
1000175e:	1c10      	adds	r0, r2, #0
10001760:	1c19      	adds	r1, r3, #0
10001762:	f7ff ffbb 	bl	100016dc <ATimingService_returnTcb>
						return;			
10001766:	e009      	b.n	1000177c <ATimingService_removeTcbFromUsedList+0x7c>
					}else{
						/* try next */
						temp2=temp;
10001768:	68fb      	ldr	r3, [r7, #12]
1000176a:	60bb      	str	r3, [r7, #8]
						temp=temp->next;
1000176c:	68fb      	ldr	r3, [r7, #12]
1000176e:	695b      	ldr	r3, [r3, #20]
10001770:	60fb      	str	r3, [r7, #12]
					returnTcb(temp);
					return;
					}
	
				temp=temp->next;
				while(temp!=0){
10001772:	68fb      	ldr	r3, [r7, #12]
10001774:	2b00      	cmp	r3, #0
10001776:	d1e7      	bne.n	10001748 <ATimingService_removeTcbFromUsedList+0x48>
10001778:	e000      	b.n	1000177c <ATimingService_removeTcbFromUsedList+0x7c>
void ATimingService_removeTcbFromUsedList(ATimingService* self, int32 idx) {
	
				etTimerControlBlock* temp=usedTcbsRoot;
				etTimerControlBlock* temp2=usedTcbsRoot;
				
				if (temp==0) return;
1000177a:	46c0      	nop			; (mov r8, r8)
						/* try next */
						temp2=temp;
						temp=temp->next;
						}
					}
}
1000177c:	46bd      	mov	sp, r7
1000177e:	b004      	add	sp, #16
10001780:	bd80      	pop	{r7, pc}
10001782:	46c0      	nop			; (mov r8, r8)
10001784:	20000d00 	.word	0x20000d00

10001788 <ATimingService_putTcbToUsedList>:
void ATimingService_putTcbToUsedList(ATimingService* self, etTimerControlBlock* block) {
10001788:	b580      	push	{r7, lr}
1000178a:	b084      	sub	sp, #16
1000178c:	af00      	add	r7, sp, #0
1000178e:	6078      	str	r0, [r7, #4]
10001790:	6039      	str	r1, [r7, #0]
	
				etTimerControlBlock* temp=usedTcbsRoot;
10001792:	4b1f      	ldr	r3, [pc, #124]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
10001794:	681b      	ldr	r3, [r3, #0]
10001796:	60fb      	str	r3, [r7, #12]
				etTimerControlBlock* temp2=usedTcbsRoot;
10001798:	4b1d      	ldr	r3, [pc, #116]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
1000179a:	681b      	ldr	r3, [r3, #0]
1000179c:	60bb      	str	r3, [r7, #8]
	
				if (temp==0){
1000179e:	68fb      	ldr	r3, [r7, #12]
100017a0:	2b00      	cmp	r3, #0
100017a2:	d106      	bne.n	100017b2 <ATimingService_putTcbToUsedList+0x2a>
					/* list empty put new block to root */
					block->next=0;
100017a4:	683b      	ldr	r3, [r7, #0]
100017a6:	2200      	movs	r2, #0
100017a8:	615a      	str	r2, [r3, #20]
					usedTcbsRoot=block;
100017aa:	4b19      	ldr	r3, [pc, #100]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
100017ac:	683a      	ldr	r2, [r7, #0]
100017ae:	601a      	str	r2, [r3, #0]
					return;
100017b0:	e02a      	b.n	10001808 <ATimingService_putTcbToUsedList+0x80>
					}
				
				while(1){
					if (temp != 0){
100017b2:	68fb      	ldr	r3, [r7, #12]
100017b4:	2b00      	cmp	r3, #0
100017b6:	d020      	beq.n	100017fa <ATimingService_putTcbToUsedList+0x72>
						if (isTimeGreater(&block->expTime,&temp->expTime)){
100017b8:	683a      	ldr	r2, [r7, #0]
100017ba:	68fb      	ldr	r3, [r7, #12]
100017bc:	6879      	ldr	r1, [r7, #4]
100017be:	1c08      	adds	r0, r1, #0
100017c0:	1c11      	adds	r1, r2, #0
100017c2:	1c1a      	adds	r2, r3, #0
100017c4:	f000 f826 	bl	10001814 <ATimingService_isTimeGreater>
100017c8:	1c03      	adds	r3, r0, #0
100017ca:	2b00      	cmp	r3, #0
100017cc:	d005      	beq.n	100017da <ATimingService_putTcbToUsedList+0x52>
							/* try next position */
							temp2=temp;	
100017ce:	68fb      	ldr	r3, [r7, #12]
100017d0:	60bb      	str	r3, [r7, #8]
							temp=temp->next;
100017d2:	68fb      	ldr	r3, [r7, #12]
100017d4:	695b      	ldr	r3, [r3, #20]
100017d6:	60fb      	str	r3, [r7, #12]
						/* end of list reached */
						block->next=0;
						temp2->next=block;
						return;
					}
				}
100017d8:	e7eb      	b.n	100017b2 <ATimingService_putTcbToUsedList+0x2a>
							/* try next position */
							temp2=temp;	
							temp=temp->next;
							}else{
							/* right position found */
							block->next=temp;
100017da:	683b      	ldr	r3, [r7, #0]
100017dc:	68fa      	ldr	r2, [r7, #12]
100017de:	615a      	str	r2, [r3, #20]
							if(temp==usedTcbsRoot){
100017e0:	4b0b      	ldr	r3, [pc, #44]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
100017e2:	681b      	ldr	r3, [r3, #0]
100017e4:	68fa      	ldr	r2, [r7, #12]
100017e6:	429a      	cmp	r2, r3
100017e8:	d103      	bne.n	100017f2 <ATimingService_putTcbToUsedList+0x6a>
								usedTcbsRoot=block;
100017ea:	4b09      	ldr	r3, [pc, #36]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
100017ec:	683a      	ldr	r2, [r7, #0]
100017ee:	601a      	str	r2, [r3, #0]
								}else{
								temp2->next=block;
								}
							return;
100017f0:	e00a      	b.n	10001808 <ATimingService_putTcbToUsedList+0x80>
							/* right position found */
							block->next=temp;
							if(temp==usedTcbsRoot){
								usedTcbsRoot=block;
								}else{
								temp2->next=block;
100017f2:	68bb      	ldr	r3, [r7, #8]
100017f4:	683a      	ldr	r2, [r7, #0]
100017f6:	615a      	str	r2, [r3, #20]
								}
							return;
100017f8:	e006      	b.n	10001808 <ATimingService_putTcbToUsedList+0x80>
							}
						}else{
						/* end of list reached */
						block->next=0;
100017fa:	683b      	ldr	r3, [r7, #0]
100017fc:	2200      	movs	r2, #0
100017fe:	615a      	str	r2, [r3, #20]
						temp2->next=block;
10001800:	68bb      	ldr	r3, [r7, #8]
10001802:	683a      	ldr	r2, [r7, #0]
10001804:	615a      	str	r2, [r3, #20]
						return;
10001806:	46c0      	nop			; (mov r8, r8)
					}
				}
}
10001808:	46bd      	mov	sp, r7
1000180a:	b004      	add	sp, #16
1000180c:	bd80      	pop	{r7, pc}
1000180e:	46c0      	nop			; (mov r8, r8)
10001810:	20000d00 	.word	0x20000d00

10001814 <ATimingService_isTimeGreater>:
boolean ATimingService_isTimeGreater(ATimingService* self, etTime* t1, etTime* t2) {
10001814:	b580      	push	{r7, lr}
10001816:	b084      	sub	sp, #16
10001818:	af00      	add	r7, sp, #0
1000181a:	60f8      	str	r0, [r7, #12]
1000181c:	60b9      	str	r1, [r7, #8]
1000181e:	607a      	str	r2, [r7, #4]
	
					if (t1->sec > t2->sec) return ET_TRUE;
10001820:	68bb      	ldr	r3, [r7, #8]
10001822:	681a      	ldr	r2, [r3, #0]
10001824:	687b      	ldr	r3, [r7, #4]
10001826:	681b      	ldr	r3, [r3, #0]
10001828:	429a      	cmp	r2, r3
1000182a:	dd01      	ble.n	10001830 <ATimingService_isTimeGreater+0x1c>
1000182c:	2301      	movs	r3, #1
1000182e:	e010      	b.n	10001852 <ATimingService_isTimeGreater+0x3e>
					if (t1->sec < t2->sec) return ET_FALSE;
10001830:	68bb      	ldr	r3, [r7, #8]
10001832:	681a      	ldr	r2, [r3, #0]
10001834:	687b      	ldr	r3, [r7, #4]
10001836:	681b      	ldr	r3, [r3, #0]
10001838:	429a      	cmp	r2, r3
1000183a:	da01      	bge.n	10001840 <ATimingService_isTimeGreater+0x2c>
1000183c:	2300      	movs	r3, #0
1000183e:	e008      	b.n	10001852 <ATimingService_isTimeGreater+0x3e>
					if (t1->nSec > t2->nSec) return ET_TRUE;
10001840:	68bb      	ldr	r3, [r7, #8]
10001842:	685a      	ldr	r2, [r3, #4]
10001844:	687b      	ldr	r3, [r7, #4]
10001846:	685b      	ldr	r3, [r3, #4]
10001848:	429a      	cmp	r2, r3
1000184a:	dd01      	ble.n	10001850 <ATimingService_isTimeGreater+0x3c>
1000184c:	2301      	movs	r3, #1
1000184e:	e000      	b.n	10001852 <ATimingService_isTimeGreater+0x3e>
					return ET_FALSE;
10001850:	2300      	movs	r3, #0
}
10001852:	1c18      	adds	r0, r3, #0
10001854:	46bd      	mov	sp, r7
10001856:	b004      	add	sp, #16
10001858:	bd80      	pop	{r7, pc}
1000185a:	46c0      	nop			; (mov r8, r8)

1000185c <ATimingService_addTime>:
void ATimingService_addTime(ATimingService* self, etTime* t1, etTime* t2) {
1000185c:	b580      	push	{r7, lr}
1000185e:	b084      	sub	sp, #16
10001860:	af00      	add	r7, sp, #0
10001862:	60f8      	str	r0, [r7, #12]
10001864:	60b9      	str	r1, [r7, #8]
10001866:	607a      	str	r2, [r7, #4]
	
					t1->sec += t2->sec;
10001868:	68bb      	ldr	r3, [r7, #8]
1000186a:	681a      	ldr	r2, [r3, #0]
1000186c:	687b      	ldr	r3, [r7, #4]
1000186e:	681b      	ldr	r3, [r3, #0]
10001870:	18d2      	adds	r2, r2, r3
10001872:	68bb      	ldr	r3, [r7, #8]
10001874:	601a      	str	r2, [r3, #0]
					t1->nSec += t2->nSec;
10001876:	68bb      	ldr	r3, [r7, #8]
10001878:	685a      	ldr	r2, [r3, #4]
1000187a:	687b      	ldr	r3, [r7, #4]
1000187c:	685b      	ldr	r3, [r3, #4]
1000187e:	18d2      	adds	r2, r2, r3
10001880:	68bb      	ldr	r3, [r7, #8]
10001882:	605a      	str	r2, [r3, #4]
					while(t1->nSec >= 1000000000L){
10001884:	e00a      	b.n	1000189c <ATimingService_addTime+0x40>
						t1->sec++;
10001886:	68bb      	ldr	r3, [r7, #8]
10001888:	681b      	ldr	r3, [r3, #0]
1000188a:	1c5a      	adds	r2, r3, #1
1000188c:	68bb      	ldr	r3, [r7, #8]
1000188e:	601a      	str	r2, [r3, #0]
						t1->nSec-=1000000000L;
10001890:	68bb      	ldr	r3, [r7, #8]
10001892:	685b      	ldr	r3, [r3, #4]
10001894:	4905      	ldr	r1, [pc, #20]	; (100018ac <ATimingService_addTime+0x50>)
10001896:	185a      	adds	r2, r3, r1
10001898:	68bb      	ldr	r3, [r7, #8]
1000189a:	605a      	str	r2, [r3, #4]
}
void ATimingService_addTime(ATimingService* self, etTime* t1, etTime* t2) {
	
					t1->sec += t2->sec;
					t1->nSec += t2->nSec;
					while(t1->nSec >= 1000000000L){
1000189c:	68bb      	ldr	r3, [r7, #8]
1000189e:	685a      	ldr	r2, [r3, #4]
100018a0:	4b03      	ldr	r3, [pc, #12]	; (100018b0 <ATimingService_addTime+0x54>)
100018a2:	429a      	cmp	r2, r3
100018a4:	dcef      	bgt.n	10001886 <ATimingService_addTime+0x2a>
						t1->sec++;
						t1->nSec-=1000000000L;
						}
}
100018a6:	46bd      	mov	sp, r7
100018a8:	b004      	add	sp, #16
100018aa:	bd80      	pop	{r7, pc}
100018ac:	c4653600 	.word	0xc4653600
100018b0:	3b9ac9ff 	.word	0x3b9ac9ff

100018b4 <PTimerPort_timeout>:
#include "PTimer_Utils.h"


/*--------------------- port methods */

void PTimerPort_timeout(const PTimerPort* self) {
100018b4:	b580      	push	{r7, lr}
100018b6:	b082      	sub	sp, #8
100018b8:	af00      	add	r7, sp, #0
100018ba:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PTimerPort", "timeout")
		etPort_sendMessage(self, PTimer_OUT_timeout, 0, NULL);
100018bc:	687b      	ldr	r3, [r7, #4]
100018be:	1c18      	adds	r0, r3, #0
100018c0:	2101      	movs	r1, #1
100018c2:	2200      	movs	r2, #0
100018c4:	2300      	movs	r3, #0
100018c6:	f004 ff69 	bl	1000679c <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
100018ca:	46bd      	mov	sp, r7
100018cc:	b002      	add	sp, #8
100018ce:	bd80      	pop	{r7, pc}

100018d0 <PTimerReplPort_timeout_broadcast>:

void PTimerReplPort_timeout_broadcast(const PTimerReplPort* self) {
100018d0:	b580      	push	{r7, lr}
100018d2:	b084      	sub	sp, #16
100018d4:	af00      	add	r7, sp, #0
100018d6:	6078      	str	r0, [r7, #4]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PTimerReplPort", "timeout")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100018d8:	2300      	movs	r3, #0
100018da:	60fb      	str	r3, [r7, #12]
100018dc:	e00d      	b.n	100018fa <PTimerReplPort_timeout_broadcast+0x2a>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PTimer_OUT_timeout, 0, NULL);
100018de:	687b      	ldr	r3, [r7, #4]
100018e0:	685a      	ldr	r2, [r3, #4]
100018e2:	68fb      	ldr	r3, [r7, #12]
100018e4:	011b      	lsls	r3, r3, #4
100018e6:	18d3      	adds	r3, r2, r3
100018e8:	1c18      	adds	r0, r3, #0
100018ea:	2101      	movs	r1, #1
100018ec:	2200      	movs	r2, #0
100018ee:	2300      	movs	r3, #0
100018f0:	f004 ff54 	bl	1000679c <etPort_sendMessage>
}

void PTimerReplPort_timeout_broadcast(const PTimerReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PTimerReplPort", "timeout")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100018f4:	68fb      	ldr	r3, [r7, #12]
100018f6:	3301      	adds	r3, #1
100018f8:	60fb      	str	r3, [r7, #12]
100018fa:	687b      	ldr	r3, [r7, #4]
100018fc:	881b      	ldrh	r3, [r3, #0]
100018fe:	b21a      	sxth	r2, r3
10001900:	68fb      	ldr	r3, [r7, #12]
10001902:	429a      	cmp	r2, r3
10001904:	dceb      	bgt.n	100018de <PTimerReplPort_timeout_broadcast+0xe>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PTimer_OUT_timeout, 0, NULL);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10001906:	46bd      	mov	sp, r7
10001908:	b004      	add	sp, #16
1000190a:	bd80      	pop	{r7, pc}

1000190c <PTimerReplPort_timeout>:

void PTimerReplPort_timeout(const PTimerReplPort* self, int idx__et) {
1000190c:	b580      	push	{r7, lr}
1000190e:	b082      	sub	sp, #8
10001910:	af00      	add	r7, sp, #0
10001912:	6078      	str	r0, [r7, #4]
10001914:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("PTimerReplPort", "timeout")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
10001916:	683b      	ldr	r3, [r7, #0]
10001918:	2b00      	cmp	r3, #0
1000191a:	db10      	blt.n	1000193e <PTimerReplPort_timeout+0x32>
1000191c:	687b      	ldr	r3, [r7, #4]
1000191e:	881b      	ldrh	r3, [r3, #0]
10001920:	b21a      	sxth	r2, r3
10001922:	683b      	ldr	r3, [r7, #0]
10001924:	429a      	cmp	r2, r3
10001926:	dd0a      	ble.n	1000193e <PTimerReplPort_timeout+0x32>
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PTimer_OUT_timeout, 0, NULL);
10001928:	687b      	ldr	r3, [r7, #4]
1000192a:	685a      	ldr	r2, [r3, #4]
1000192c:	683b      	ldr	r3, [r7, #0]
1000192e:	011b      	lsls	r3, r3, #4
10001930:	18d3      	adds	r3, r2, r3
10001932:	1c18      	adds	r0, r3, #0
10001934:	2101      	movs	r1, #1
10001936:	2200      	movs	r2, #0
10001938:	2300      	movs	r3, #0
1000193a:	f004 ff2f 	bl	1000679c <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000193e:	46bd      	mov	sp, r7
10001940:	b002      	add	sp, #8
10001942:	bd80      	pop	{r7, pc}

10001944 <PTimerReplPort_getReplication>:

etInt32 PTimerReplPort_getReplication(const PTimerReplPort* self) {
10001944:	b580      	push	{r7, lr}
10001946:	b082      	sub	sp, #8
10001948:	af00      	add	r7, sp, #0
1000194a:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
1000194c:	687b      	ldr	r3, [r7, #4]
1000194e:	881b      	ldrh	r3, [r3, #0]
10001950:	b21b      	sxth	r3, r3
}
10001952:	1c18      	adds	r0, r3, #0
10001954:	46bd      	mov	sp, r7
10001956:	b002      	add	sp, #8
10001958:	bd80      	pop	{r7, pc}
1000195a:	46c0      	nop			; (mov r8, r8)

1000195c <PTimerConjPort_startTimer>:



void PTimerConjPort_startTimer(const PTimerConjPort* self, uint32 data__et) {
1000195c:	b580      	push	{r7, lr}
1000195e:	b082      	sub	sp, #8
10001960:	af00      	add	r7, sp, #0
10001962:	6078      	str	r0, [r7, #4]
10001964:	6039      	str	r1, [r7, #0]
	if (status==0){
10001966:	687b      	ldr	r3, [r7, #4]
10001968:	681b      	ldr	r3, [r3, #0]
1000196a:	781b      	ldrb	r3, [r3, #0]
1000196c:	2b00      	cmp	r3, #0
1000196e:	d10a      	bne.n	10001986 <PTimerConjPort_startTimer+0x2a>
					status=ET_TIMER_RUNNING | ET_TIMER_PERIODIC;
10001970:	687b      	ldr	r3, [r7, #4]
10001972:	681b      	ldr	r3, [r3, #0]
10001974:	2203      	movs	r2, #3
10001976:	701a      	strb	r2, [r3, #0]
					etPort_sendMessage(self, PTimer_IN_startTimer, sizeof(int32), &data__et);
10001978:	687a      	ldr	r2, [r7, #4]
1000197a:	1c3b      	adds	r3, r7, #0
1000197c:	1c10      	adds	r0, r2, #0
1000197e:	2102      	movs	r1, #2
10001980:	2204      	movs	r2, #4
10001982:	f004 ff0b 	bl	1000679c <etPort_sendMessage>
					}
}
10001986:	46bd      	mov	sp, r7
10001988:	b002      	add	sp, #8
1000198a:	bd80      	pop	{r7, pc}

1000198c <PTimerConjReplPort_startTimer_broadcast>:

void PTimerConjReplPort_startTimer_broadcast(const PTimerConjReplPort* self, uint32 data__et) {
1000198c:	b580      	push	{r7, lr}
1000198e:	b084      	sub	sp, #16
10001990:	af00      	add	r7, sp, #0
10001992:	6078      	str	r0, [r7, #4]
10001994:	6039      	str	r1, [r7, #0]
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001996:	2300      	movs	r3, #0
10001998:	60fb      	str	r3, [r7, #12]
1000199a:	e00d      	b.n	100019b8 <PTimerConjReplPort_startTimer_broadcast+0x2c>
		PTimerConjPort_startTimer(&((etReplPort*)self)->ports[i].port, data__et);
1000199c:	687b      	ldr	r3, [r7, #4]
1000199e:	685a      	ldr	r2, [r3, #4]
100019a0:	68fb      	ldr	r3, [r7, #12]
100019a2:	011b      	lsls	r3, r3, #4
100019a4:	18d3      	adds	r3, r2, r3
100019a6:	1c1a      	adds	r2, r3, #0
100019a8:	683b      	ldr	r3, [r7, #0]
100019aa:	1c10      	adds	r0, r2, #0
100019ac:	1c19      	adds	r1, r3, #0
100019ae:	f7ff ffd5 	bl	1000195c <PTimerConjPort_startTimer>
					}
}

void PTimerConjReplPort_startTimer_broadcast(const PTimerConjReplPort* self, uint32 data__et) {
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100019b2:	68fb      	ldr	r3, [r7, #12]
100019b4:	3301      	adds	r3, #1
100019b6:	60fb      	str	r3, [r7, #12]
100019b8:	687b      	ldr	r3, [r7, #4]
100019ba:	881b      	ldrh	r3, [r3, #0]
100019bc:	b21a      	sxth	r2, r3
100019be:	68fb      	ldr	r3, [r7, #12]
100019c0:	429a      	cmp	r2, r3
100019c2:	dceb      	bgt.n	1000199c <PTimerConjReplPort_startTimer_broadcast+0x10>
		PTimerConjPort_startTimer(&((etReplPort*)self)->ports[i].port, data__et);
	}					
}
100019c4:	46bd      	mov	sp, r7
100019c6:	b004      	add	sp, #16
100019c8:	bd80      	pop	{r7, pc}
100019ca:	46c0      	nop			; (mov r8, r8)

100019cc <PTimerConjReplPort_startTimer>:

void PTimerConjReplPort_startTimer(const PTimerConjReplPort* self, int idx__et, uint32 data__et) {
100019cc:	b580      	push	{r7, lr}
100019ce:	b084      	sub	sp, #16
100019d0:	af00      	add	r7, sp, #0
100019d2:	60f8      	str	r0, [r7, #12]
100019d4:	60b9      	str	r1, [r7, #8]
100019d6:	607a      	str	r2, [r7, #4]
	PTimerConjPort_startTimer(&((etReplPort*)self)->ports[idx__et].port, data__et);
100019d8:	68fb      	ldr	r3, [r7, #12]
100019da:	685a      	ldr	r2, [r3, #4]
100019dc:	68bb      	ldr	r3, [r7, #8]
100019de:	011b      	lsls	r3, r3, #4
100019e0:	18d3      	adds	r3, r2, r3
100019e2:	1c1a      	adds	r2, r3, #0
100019e4:	687b      	ldr	r3, [r7, #4]
100019e6:	1c10      	adds	r0, r2, #0
100019e8:	1c19      	adds	r1, r3, #0
100019ea:	f7ff ffb7 	bl	1000195c <PTimerConjPort_startTimer>
}
100019ee:	46bd      	mov	sp, r7
100019f0:	b004      	add	sp, #16
100019f2:	bd80      	pop	{r7, pc}

100019f4 <PTimerConjPort_startTimeout>:


void PTimerConjPort_startTimeout(const PTimerConjPort* self, uint32 data__et) {
100019f4:	b580      	push	{r7, lr}
100019f6:	b082      	sub	sp, #8
100019f8:	af00      	add	r7, sp, #0
100019fa:	6078      	str	r0, [r7, #4]
100019fc:	6039      	str	r1, [r7, #0]
	if (status==0){
100019fe:	687b      	ldr	r3, [r7, #4]
10001a00:	681b      	ldr	r3, [r3, #0]
10001a02:	781b      	ldrb	r3, [r3, #0]
10001a04:	2b00      	cmp	r3, #0
10001a06:	d10a      	bne.n	10001a1e <PTimerConjPort_startTimeout+0x2a>
					status = ET_TIMER_RUNNING;
10001a08:	687b      	ldr	r3, [r7, #4]
10001a0a:	681b      	ldr	r3, [r3, #0]
10001a0c:	2201      	movs	r2, #1
10001a0e:	701a      	strb	r2, [r3, #0]
					etPort_sendMessage(self, PTimer_IN_startTimeout, sizeof(int32), &data__et);
10001a10:	687a      	ldr	r2, [r7, #4]
10001a12:	1c3b      	adds	r3, r7, #0
10001a14:	1c10      	adds	r0, r2, #0
10001a16:	2103      	movs	r1, #3
10001a18:	2204      	movs	r2, #4
10001a1a:	f004 febf 	bl	1000679c <etPort_sendMessage>
					}
}
10001a1e:	46bd      	mov	sp, r7
10001a20:	b002      	add	sp, #8
10001a22:	bd80      	pop	{r7, pc}

10001a24 <PTimerConjReplPort_startTimeout_broadcast>:

void PTimerConjReplPort_startTimeout_broadcast(const PTimerConjReplPort* self, uint32 data__et) {
10001a24:	b580      	push	{r7, lr}
10001a26:	b084      	sub	sp, #16
10001a28:	af00      	add	r7, sp, #0
10001a2a:	6078      	str	r0, [r7, #4]
10001a2c:	6039      	str	r1, [r7, #0]
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001a2e:	2300      	movs	r3, #0
10001a30:	60fb      	str	r3, [r7, #12]
10001a32:	e00d      	b.n	10001a50 <PTimerConjReplPort_startTimeout_broadcast+0x2c>
		PTimerConjPort_startTimeout(&((etReplPort*)self)->ports[i].port, data__et);
10001a34:	687b      	ldr	r3, [r7, #4]
10001a36:	685a      	ldr	r2, [r3, #4]
10001a38:	68fb      	ldr	r3, [r7, #12]
10001a3a:	011b      	lsls	r3, r3, #4
10001a3c:	18d3      	adds	r3, r2, r3
10001a3e:	1c1a      	adds	r2, r3, #0
10001a40:	683b      	ldr	r3, [r7, #0]
10001a42:	1c10      	adds	r0, r2, #0
10001a44:	1c19      	adds	r1, r3, #0
10001a46:	f7ff ffd5 	bl	100019f4 <PTimerConjPort_startTimeout>
					}
}

void PTimerConjReplPort_startTimeout_broadcast(const PTimerConjReplPort* self, uint32 data__et) {
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001a4a:	68fb      	ldr	r3, [r7, #12]
10001a4c:	3301      	adds	r3, #1
10001a4e:	60fb      	str	r3, [r7, #12]
10001a50:	687b      	ldr	r3, [r7, #4]
10001a52:	881b      	ldrh	r3, [r3, #0]
10001a54:	b21a      	sxth	r2, r3
10001a56:	68fb      	ldr	r3, [r7, #12]
10001a58:	429a      	cmp	r2, r3
10001a5a:	dceb      	bgt.n	10001a34 <PTimerConjReplPort_startTimeout_broadcast+0x10>
		PTimerConjPort_startTimeout(&((etReplPort*)self)->ports[i].port, data__et);
	}					
}
10001a5c:	46bd      	mov	sp, r7
10001a5e:	b004      	add	sp, #16
10001a60:	bd80      	pop	{r7, pc}
10001a62:	46c0      	nop			; (mov r8, r8)

10001a64 <PTimerConjReplPort_startTimeout>:

void PTimerConjReplPort_startTimeout(const PTimerConjReplPort* self, int idx__et, uint32 data__et) {
10001a64:	b580      	push	{r7, lr}
10001a66:	b084      	sub	sp, #16
10001a68:	af00      	add	r7, sp, #0
10001a6a:	60f8      	str	r0, [r7, #12]
10001a6c:	60b9      	str	r1, [r7, #8]
10001a6e:	607a      	str	r2, [r7, #4]
	PTimerConjPort_startTimeout(&((etReplPort*)self)->ports[idx__et].port, data__et);
10001a70:	68fb      	ldr	r3, [r7, #12]
10001a72:	685a      	ldr	r2, [r3, #4]
10001a74:	68bb      	ldr	r3, [r7, #8]
10001a76:	011b      	lsls	r3, r3, #4
10001a78:	18d3      	adds	r3, r2, r3
10001a7a:	1c1a      	adds	r2, r3, #0
10001a7c:	687b      	ldr	r3, [r7, #4]
10001a7e:	1c10      	adds	r0, r2, #0
10001a80:	1c19      	adds	r1, r3, #0
10001a82:	f7ff ffb7 	bl	100019f4 <PTimerConjPort_startTimeout>
}
10001a86:	46bd      	mov	sp, r7
10001a88:	b004      	add	sp, #16
10001a8a:	bd80      	pop	{r7, pc}

10001a8c <PTimerConjPort_kill>:


void PTimerConjPort_kill(const PTimerConjPort* self) {
10001a8c:	b580      	push	{r7, lr}
10001a8e:	b082      	sub	sp, #8
10001a90:	af00      	add	r7, sp, #0
10001a92:	6078      	str	r0, [r7, #4]
	
				if (status!=0){
10001a94:	687b      	ldr	r3, [r7, #4]
10001a96:	681b      	ldr	r3, [r3, #0]
10001a98:	781b      	ldrb	r3, [r3, #0]
10001a9a:	2b00      	cmp	r3, #0
10001a9c:	d00a      	beq.n	10001ab4 <PTimerConjPort_kill+0x28>
					status=0;
10001a9e:	687b      	ldr	r3, [r7, #4]
10001aa0:	681b      	ldr	r3, [r3, #0]
10001aa2:	2200      	movs	r2, #0
10001aa4:	701a      	strb	r2, [r3, #0]
					etPort_sendMessage(self, PTimer_IN_kill, 0,NULL);
10001aa6:	687b      	ldr	r3, [r7, #4]
10001aa8:	1c18      	adds	r0, r3, #0
10001aaa:	2104      	movs	r1, #4
10001aac:	2200      	movs	r2, #0
10001aae:	2300      	movs	r3, #0
10001ab0:	f004 fe74 	bl	1000679c <etPort_sendMessage>
					}
}
10001ab4:	46bd      	mov	sp, r7
10001ab6:	b002      	add	sp, #8
10001ab8:	bd80      	pop	{r7, pc}
10001aba:	46c0      	nop			; (mov r8, r8)

10001abc <PTimerConjReplPort_kill_broadcast>:

void PTimerConjReplPort_kill_broadcast(const PTimerConjReplPort* self) {
10001abc:	b580      	push	{r7, lr}
10001abe:	b084      	sub	sp, #16
10001ac0:	af00      	add	r7, sp, #0
10001ac2:	6078      	str	r0, [r7, #4]
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001ac4:	2300      	movs	r3, #0
10001ac6:	60fb      	str	r3, [r7, #12]
10001ac8:	e00a      	b.n	10001ae0 <PTimerConjReplPort_kill_broadcast+0x24>
		PTimerConjPort_kill(&((etReplPort*)self)->ports[i].port);
10001aca:	687b      	ldr	r3, [r7, #4]
10001acc:	685a      	ldr	r2, [r3, #4]
10001ace:	68fb      	ldr	r3, [r7, #12]
10001ad0:	011b      	lsls	r3, r3, #4
10001ad2:	18d3      	adds	r3, r2, r3
10001ad4:	1c18      	adds	r0, r3, #0
10001ad6:	f7ff ffd9 	bl	10001a8c <PTimerConjPort_kill>
					}
}

void PTimerConjReplPort_kill_broadcast(const PTimerConjReplPort* self) {
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001ada:	68fb      	ldr	r3, [r7, #12]
10001adc:	3301      	adds	r3, #1
10001ade:	60fb      	str	r3, [r7, #12]
10001ae0:	687b      	ldr	r3, [r7, #4]
10001ae2:	881b      	ldrh	r3, [r3, #0]
10001ae4:	b21a      	sxth	r2, r3
10001ae6:	68fb      	ldr	r3, [r7, #12]
10001ae8:	429a      	cmp	r2, r3
10001aea:	dcee      	bgt.n	10001aca <PTimerConjReplPort_kill_broadcast+0xe>
		PTimerConjPort_kill(&((etReplPort*)self)->ports[i].port);
	}					
}
10001aec:	46bd      	mov	sp, r7
10001aee:	b004      	add	sp, #16
10001af0:	bd80      	pop	{r7, pc}
10001af2:	46c0      	nop			; (mov r8, r8)

10001af4 <PTimerConjReplPort_kill>:

void PTimerConjReplPort_kill(const PTimerConjReplPort* self, int idx__et) {
10001af4:	b580      	push	{r7, lr}
10001af6:	b082      	sub	sp, #8
10001af8:	af00      	add	r7, sp, #0
10001afa:	6078      	str	r0, [r7, #4]
10001afc:	6039      	str	r1, [r7, #0]
	PTimerConjPort_kill(&((etReplPort*)self)->ports[idx__et].port);
10001afe:	687b      	ldr	r3, [r7, #4]
10001b00:	685a      	ldr	r2, [r3, #4]
10001b02:	683b      	ldr	r3, [r7, #0]
10001b04:	011b      	lsls	r3, r3, #4
10001b06:	18d3      	adds	r3, r2, r3
10001b08:	1c18      	adds	r0, r3, #0
10001b0a:	f7ff ffbf 	bl	10001a8c <PTimerConjPort_kill>
}
10001b0e:	46bd      	mov	sp, r7
10001b10:	b002      	add	sp, #8
10001b12:	bd80      	pop	{r7, pc}

10001b14 <PTimerConjReplPort_getReplication>:
/* begin PTimerConjPort specific */

/*--------------------- operations ---------------------*/
/* end PTimerConjPort specific */

etInt32 PTimerConjReplPort_getReplication(const PTimerConjReplPort* self) {
10001b14:	b580      	push	{r7, lr}
10001b16:	b082      	sub	sp, #8
10001b18:	af00      	add	r7, sp, #0
10001b1a:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10001b1c:	687b      	ldr	r3, [r7, #4]
10001b1e:	881b      	ldrh	r3, [r3, #0]
10001b20:	b21b      	sxth	r3, r3
}
10001b22:	1c18      	adds	r0, r3, #0
10001b24:	46bd      	mov	sp, r7
10001b26:	b002      	add	sp, #8
10001b28:	bd80      	pop	{r7, pc}
10001b2a:	46c0      	nop			; (mov r8, r8)

10001b2c <PTimerConjPort_timeout_receiveHandler>:

/* receiver handlers */
void PTimerConjPort_timeout_receiveHandler(PTimerConjPort* self, const etMessage* msg, void * actor, etActorReceiveMessage receiveMessageFunc){
10001b2c:	b580      	push	{r7, lr}
10001b2e:	b084      	sub	sp, #16
10001b30:	af00      	add	r7, sp, #0
10001b32:	60f8      	str	r0, [r7, #12]
10001b34:	60b9      	str	r1, [r7, #8]
10001b36:	607a      	str	r2, [r7, #4]
10001b38:	603b      	str	r3, [r7, #0]
	/* TODO: clear active bit in case of single shot timer */
				if (status!=0){
10001b3a:	68fb      	ldr	r3, [r7, #12]
10001b3c:	681b      	ldr	r3, [r3, #0]
10001b3e:	781b      	ldrb	r3, [r3, #0]
10001b40:	2b00      	cmp	r3, #0
10001b42:	d00d      	beq.n	10001b60 <PTimerConjPort_timeout_receiveHandler+0x34>
					if (status==ET_TIMER_RUNNING){
10001b44:	68fb      	ldr	r3, [r7, #12]
10001b46:	681b      	ldr	r3, [r3, #0]
10001b48:	781b      	ldrb	r3, [r3, #0]
10001b4a:	2b01      	cmp	r3, #1
10001b4c:	d103      	bne.n	10001b56 <PTimerConjPort_timeout_receiveHandler+0x2a>
						/* single shot timer */
						status=0;
10001b4e:	68fb      	ldr	r3, [r7, #12]
10001b50:	681b      	ldr	r3, [r3, #0]
10001b52:	2200      	movs	r2, #0
10001b54:	701a      	strb	r2, [r3, #0]
						}
					/* msg to fsm */
					(*receiveMessageFunc)(actor, self, msg);
10001b56:	6878      	ldr	r0, [r7, #4]
10001b58:	68f9      	ldr	r1, [r7, #12]
10001b5a:	68ba      	ldr	r2, [r7, #8]
10001b5c:	683b      	ldr	r3, [r7, #0]
10001b5e:	4798      	blx	r3
					}
	/* hand over the message to the actor:      */
	/* (*receiveMessageFunc)(actor, self, msg); */
}
10001b60:	46bd      	mov	sp, r7
10001b62:	b004      	add	sp, #16
10001b64:	bd80      	pop	{r7, pc}
10001b66:	46c0      	nop			; (mov r8, r8)

10001b68 <setState>:
	POLLING = 0,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};


static void setState(ADimmer* self, etInt16 new_state) {
10001b68:	b580      	push	{r7, lr}
10001b6a:	b082      	sub	sp, #8
10001b6c:	af00      	add	r7, sp, #0
10001b6e:	6078      	str	r0, [r7, #4]
10001b70:	1c0a      	adds	r2, r1, #0
10001b72:	1cbb      	adds	r3, r7, #2
10001b74:	801a      	strh	r2, [r3, #0]
	self->state = new_state;
10001b76:	687b      	ldr	r3, [r7, #4]
10001b78:	1cba      	adds	r2, r7, #2
10001b7a:	8812      	ldrh	r2, [r2, #0]
10001b7c:	819a      	strh	r2, [r3, #12]
}
10001b7e:	46bd      	mov	sp, r7
10001b80:	b002      	add	sp, #8
10001b82:	bd80      	pop	{r7, pc}

10001b84 <getState>:

static etInt16 getState(ADimmer* self) {
10001b84:	b580      	push	{r7, lr}
10001b86:	b082      	sub	sp, #8
10001b88:	af00      	add	r7, sp, #0
10001b8a:	6078      	str	r0, [r7, #4]
	return self->state;
10001b8c:	687b      	ldr	r3, [r7, #4]
10001b8e:	899b      	ldrh	r3, [r3, #12]
10001b90:	b21b      	sxth	r3, r3
}
10001b92:	1c18      	adds	r0, r3, #0
10001b94:	46bd      	mov	sp, r7
10001b96:	b002      	add	sp, #8
10001b98:	bd80      	pop	{r7, pc}
10001b9a:	46c0      	nop			; (mov r8, r8)

10001b9c <action_TRANS_INITIAL_TO__goingOn>:

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_INITIAL_TO__goingOn(ADimmer* self) {
10001b9c:	b580      	push	{r7, lr}
10001b9e:	b082      	sub	sp, #8
10001ba0:	af00      	add	r7, sp, #0
10001ba2:	6078      	str	r0, [r7, #4]
	pwm_setInstance(instance);
10001ba4:	687b      	ldr	r3, [r7, #4]
10001ba6:	681b      	ldr	r3, [r3, #0]
10001ba8:	1c1a      	adds	r2, r3, #0
10001baa:	687b      	ldr	r3, [r7, #4]
10001bac:	689b      	ldr	r3, [r3, #8]
10001bae:	1c10      	adds	r0, r2, #0
10001bb0:	1c19      	adds	r1, r3, #0
10001bb2:	f001 fa21 	bl	10002ff8 <PWMSP001ConjPort_setInstance>
	//PWMSP001ConjPort_setInstance(&self->constData->pwm,0);
	timer_startTimer(10);
10001bb6:	687b      	ldr	r3, [r7, #4]
10001bb8:	681b      	ldr	r3, [r3, #0]
10001bba:	330c      	adds	r3, #12
10001bbc:	1c18      	adds	r0, r3, #0
10001bbe:	210a      	movs	r1, #10
10001bc0:	f7ff fecc 	bl	1000195c <PTimerConjPort_startTimer>
	counter=0;
10001bc4:	687b      	ldr	r3, [r7, #4]
10001bc6:	2200      	movs	r2, #0
10001bc8:	711a      	strb	r2, [r3, #4]
}
10001bca:	46bd      	mov	sp, r7
10001bcc:	b002      	add	sp, #8
10001bce:	bd80      	pop	{r7, pc}

10001bd0 <action_TRANS_tr2_FROM_cp0_TO_goingOn_COND_tr2>:
static void action_TRANS_tr2_FROM_cp0_TO_goingOn_COND_tr2(ADimmer* self, const InterfaceItemBase* ifitem) {
10001bd0:	b580      	push	{r7, lr}
10001bd2:	b082      	sub	sp, #8
10001bd4:	af00      	add	r7, sp, #0
10001bd6:	6078      	str	r0, [r7, #4]
10001bd8:	6039      	str	r1, [r7, #0]
	pwm_setDutyCycle(counter);
10001bda:	687b      	ldr	r3, [r7, #4]
10001bdc:	681b      	ldr	r3, [r3, #0]
10001bde:	1c1a      	adds	r2, r3, #0
10001be0:	687b      	ldr	r3, [r7, #4]
10001be2:	791b      	ldrb	r3, [r3, #4]
10001be4:	1c10      	adds	r0, r2, #0
10001be6:	1c19      	adds	r1, r3, #0
10001be8:	f001 fa24 	bl	10003034 <PWMSP001ConjPort_setDutyCycle>
	//PWMSP001ConjPort_setDutyCycle(&self->constData->pwm,counter);
}
10001bec:	46bd      	mov	sp, r7
10001bee:	b002      	add	sp, #8
10001bf0:	bd80      	pop	{r7, pc}
10001bf2:	46c0      	nop			; (mov r8, r8)

10001bf4 <action_TRANS_tr4_FROM_cp1_TO_off>:
static void action_TRANS_tr4_FROM_cp1_TO_off(ADimmer* self, const InterfaceItemBase* ifitem) {
10001bf4:	b580      	push	{r7, lr}
10001bf6:	b082      	sub	sp, #8
10001bf8:	af00      	add	r7, sp, #0
10001bfa:	6078      	str	r0, [r7, #4]
10001bfc:	6039      	str	r1, [r7, #0]
	pwm_setDutyCycle(counter);
10001bfe:	687b      	ldr	r3, [r7, #4]
10001c00:	681b      	ldr	r3, [r3, #0]
10001c02:	1c1a      	adds	r2, r3, #0
10001c04:	687b      	ldr	r3, [r7, #4]
10001c06:	791b      	ldrb	r3, [r3, #4]
10001c08:	1c10      	adds	r0, r2, #0
10001c0a:	1c19      	adds	r1, r3, #0
10001c0c:	f001 fa12 	bl	10003034 <PWMSP001ConjPort_setDutyCycle>
	//PWMSP001ConjPort_setDutyCycle(&self->constData->pwm,0);
	
	counter = 200;
10001c10:	687b      	ldr	r3, [r7, #4]
10001c12:	22c8      	movs	r2, #200	; 0xc8
10001c14:	711a      	strb	r2, [r3, #4]
}
10001c16:	46bd      	mov	sp, r7
10001c18:	b002      	add	sp, #8
10001c1a:	bd80      	pop	{r7, pc}

10001c1c <action_TRANS_tr5_FROM_cp1_TO_goingOff_COND_tr5>:
static void action_TRANS_tr5_FROM_cp1_TO_goingOff_COND_tr5(ADimmer* self, const InterfaceItemBase* ifitem) {
10001c1c:	b580      	push	{r7, lr}
10001c1e:	b082      	sub	sp, #8
10001c20:	af00      	add	r7, sp, #0
10001c22:	6078      	str	r0, [r7, #4]
10001c24:	6039      	str	r1, [r7, #0]
	pwm_setDutyCycle(counter);
10001c26:	687b      	ldr	r3, [r7, #4]
10001c28:	681b      	ldr	r3, [r3, #0]
10001c2a:	1c1a      	adds	r2, r3, #0
10001c2c:	687b      	ldr	r3, [r7, #4]
10001c2e:	791b      	ldrb	r3, [r3, #4]
10001c30:	1c10      	adds	r0, r2, #0
10001c32:	1c19      	adds	r1, r3, #0
10001c34:	f001 f9fe 	bl	10003034 <PWMSP001ConjPort_setDutyCycle>
	//PWMSP001ConjPort_setDutyCycle(&self->constData->pwm,counter);
}
10001c38:	46bd      	mov	sp, r7
10001c3a:	b002      	add	sp, #8
10001c3c:	bd80      	pop	{r7, pc}
10001c3e:	46c0      	nop			; (mov r8, r8)

10001c40 <exitTo>:
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ADimmer* self, etInt16 current__et, etInt16 to) {
10001c40:	b580      	push	{r7, lr}
10001c42:	b082      	sub	sp, #8
10001c44:	af00      	add	r7, sp, #0
10001c46:	6078      	str	r0, [r7, #4]
10001c48:	1cbb      	adds	r3, r7, #2
10001c4a:	8019      	strh	r1, [r3, #0]
10001c4c:	1c3b      	adds	r3, r7, #0
10001c4e:	801a      	strh	r2, [r3, #0]
	while (current__et!=to) {
10001c50:	e022      	b.n	10001c98 <exitTo+0x58>
		switch (current__et) {
10001c52:	1cbb      	adds	r3, r7, #2
10001c54:	2100      	movs	r1, #0
10001c56:	5e5b      	ldrsh	r3, [r3, r1]
10001c58:	2b03      	cmp	r3, #3
10001c5a:	d00a      	beq.n	10001c72 <exitTo+0x32>
10001c5c:	2b04      	cmp	r3, #4
10001c5e:	d00f      	beq.n	10001c80 <exitTo+0x40>
10001c60:	2b02      	cmp	r3, #2
10001c62:	d114      	bne.n	10001c8e <exitTo+0x4e>
			case STATE_goingOn:
				self->history[STATE_TOP] = STATE_goingOn;
10001c64:	687b      	ldr	r3, [r7, #4]
10001c66:	2202      	movs	r2, #2
10001c68:	821a      	strh	r2, [r3, #16]
				current__et = STATE_TOP;
10001c6a:	1cbb      	adds	r3, r7, #2
10001c6c:	2201      	movs	r2, #1
10001c6e:	801a      	strh	r2, [r3, #0]
				break;
10001c70:	e012      	b.n	10001c98 <exitTo+0x58>
			case STATE_goingOff:
				self->history[STATE_TOP] = STATE_goingOff;
10001c72:	687b      	ldr	r3, [r7, #4]
10001c74:	2203      	movs	r2, #3
10001c76:	821a      	strh	r2, [r3, #16]
				current__et = STATE_TOP;
10001c78:	1cbb      	adds	r3, r7, #2
10001c7a:	2201      	movs	r2, #1
10001c7c:	801a      	strh	r2, [r3, #0]
				break;
10001c7e:	e00b      	b.n	10001c98 <exitTo+0x58>
			case STATE_off:
				self->history[STATE_TOP] = STATE_off;
10001c80:	687b      	ldr	r3, [r7, #4]
10001c82:	2204      	movs	r2, #4
10001c84:	821a      	strh	r2, [r3, #16]
				current__et = STATE_TOP;
10001c86:	1cbb      	adds	r3, r7, #2
10001c88:	2201      	movs	r2, #1
10001c8a:	801a      	strh	r2, [r3, #0]
				break;
10001c8c:	e004      	b.n	10001c98 <exitTo+0x58>
10001c8e:	1cbb      	adds	r3, r7, #2
10001c90:	1cba      	adds	r2, r7, #2
10001c92:	8812      	ldrh	r2, [r2, #0]
10001c94:	801a      	strh	r2, [r3, #0]
			default:
				/* should not occur */
				break;
10001c96:	46c0      	nop			; (mov r8, r8)
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ADimmer* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
10001c98:	1cba      	adds	r2, r7, #2
10001c9a:	1c3b      	adds	r3, r7, #0
10001c9c:	2100      	movs	r1, #0
10001c9e:	5e52      	ldrsh	r2, [r2, r1]
10001ca0:	2100      	movs	r1, #0
10001ca2:	5e5b      	ldrsh	r3, [r3, r1]
10001ca4:	429a      	cmp	r2, r3
10001ca6:	d1d4      	bne.n	10001c52 <exitTo+0x12>
			default:
				/* should not occur */
				break;
		}
	}
}
10001ca8:	46bd      	mov	sp, r7
10001caa:	b002      	add	sp, #8
10001cac:	bd80      	pop	{r7, pc}
10001cae:	46c0      	nop			; (mov r8, r8)

10001cb0 <executeTransitionChain>:
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(ADimmer* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
10001cb0:	b580      	push	{r7, lr}
10001cb2:	b084      	sub	sp, #16
10001cb4:	af00      	add	r7, sp, #0
10001cb6:	60f8      	str	r0, [r7, #12]
10001cb8:	60b9      	str	r1, [r7, #8]
10001cba:	607a      	str	r2, [r7, #4]
10001cbc:	603b      	str	r3, [r7, #0]
	switch (chain__et) {
10001cbe:	68bb      	ldr	r3, [r7, #8]
10001cc0:	2b02      	cmp	r3, #2
10001cc2:	d00e      	beq.n	10001ce2 <executeTransitionChain+0x32>
10001cc4:	dc02      	bgt.n	10001ccc <executeTransitionChain+0x1c>
10001cc6:	2b01      	cmp	r3, #1
10001cc8:	d005      	beq.n	10001cd6 <executeTransitionChain+0x26>
10001cca:	e046      	b.n	10001d5a <executeTransitionChain+0xaa>
10001ccc:	2b03      	cmp	r3, #3
10001cce:	d01c      	beq.n	10001d0a <executeTransitionChain+0x5a>
10001cd0:	2b04      	cmp	r3, #4
10001cd2:	d034      	beq.n	10001d3e <executeTransitionChain+0x8e>
10001cd4:	e041      	b.n	10001d5a <executeTransitionChain+0xaa>
		case CHAIN_TRANS_INITIAL_TO__goingOn:
		{
			action_TRANS_INITIAL_TO__goingOn(self);
10001cd6:	68fb      	ldr	r3, [r7, #12]
10001cd8:	1c18      	adds	r0, r3, #0
10001cda:	f7ff ff5f 	bl	10001b9c <action_TRANS_INITIAL_TO__goingOn>
			return STATE_goingOn;
10001cde:	2302      	movs	r3, #2
10001ce0:	e03d      	b.n	10001d5e <executeTransitionChain+0xae>
		}
		case CHAIN_TRANS_tr1_FROM_goingOn_TO_cp0_BY_timeouttimer:
		{
			if (++counter<100) {
10001ce2:	68fb      	ldr	r3, [r7, #12]
10001ce4:	791b      	ldrb	r3, [r3, #4]
10001ce6:	3301      	adds	r3, #1
10001ce8:	b2da      	uxtb	r2, r3
10001cea:	68fb      	ldr	r3, [r7, #12]
10001cec:	711a      	strb	r2, [r3, #4]
10001cee:	68fb      	ldr	r3, [r7, #12]
10001cf0:	791b      	ldrb	r3, [r3, #4]
10001cf2:	2b63      	cmp	r3, #99	; 0x63
10001cf4:	d807      	bhi.n	10001d06 <executeTransitionChain+0x56>
			action_TRANS_tr2_FROM_cp0_TO_goingOn_COND_tr2(self, ifitem);
10001cf6:	68fa      	ldr	r2, [r7, #12]
10001cf8:	687b      	ldr	r3, [r7, #4]
10001cfa:	1c10      	adds	r0, r2, #0
10001cfc:	1c19      	adds	r1, r3, #0
10001cfe:	f7ff ff67 	bl	10001bd0 <action_TRANS_tr2_FROM_cp0_TO_goingOn_COND_tr2>
			return STATE_goingOn;}
10001d02:	2302      	movs	r3, #2
10001d04:	e02b      	b.n	10001d5e <executeTransitionChain+0xae>
			else {
			return STATE_goingOff;}
10001d06:	2303      	movs	r3, #3
10001d08:	e029      	b.n	10001d5e <executeTransitionChain+0xae>
		}
		case CHAIN_TRANS_tr3_FROM_goingOff_TO_cp1_BY_timeouttimer:
		{
			if (--counter>0) {
10001d0a:	68fb      	ldr	r3, [r7, #12]
10001d0c:	791b      	ldrb	r3, [r3, #4]
10001d0e:	3b01      	subs	r3, #1
10001d10:	b2da      	uxtb	r2, r3
10001d12:	68fb      	ldr	r3, [r7, #12]
10001d14:	711a      	strb	r2, [r3, #4]
10001d16:	68fb      	ldr	r3, [r7, #12]
10001d18:	791b      	ldrb	r3, [r3, #4]
10001d1a:	2b00      	cmp	r3, #0
10001d1c:	d007      	beq.n	10001d2e <executeTransitionChain+0x7e>
			action_TRANS_tr5_FROM_cp1_TO_goingOff_COND_tr5(self, ifitem);
10001d1e:	68fa      	ldr	r2, [r7, #12]
10001d20:	687b      	ldr	r3, [r7, #4]
10001d22:	1c10      	adds	r0, r2, #0
10001d24:	1c19      	adds	r1, r3, #0
10001d26:	f7ff ff79 	bl	10001c1c <action_TRANS_tr5_FROM_cp1_TO_goingOff_COND_tr5>
			return STATE_goingOff;}
10001d2a:	2303      	movs	r3, #3
10001d2c:	e017      	b.n	10001d5e <executeTransitionChain+0xae>
			else {
			action_TRANS_tr4_FROM_cp1_TO_off(self, ifitem);
10001d2e:	68fa      	ldr	r2, [r7, #12]
10001d30:	687b      	ldr	r3, [r7, #4]
10001d32:	1c10      	adds	r0, r2, #0
10001d34:	1c19      	adds	r1, r3, #0
10001d36:	f7ff ff5d 	bl	10001bf4 <action_TRANS_tr4_FROM_cp1_TO_off>
			return STATE_off;}
10001d3a:	2304      	movs	r3, #4
10001d3c:	e00f      	b.n	10001d5e <executeTransitionChain+0xae>
		}
		case CHAIN_TRANS_tr7_FROM_off_TO_cp2_BY_timeouttimer:
		{
			if (--counter > 0) {
10001d3e:	68fb      	ldr	r3, [r7, #12]
10001d40:	791b      	ldrb	r3, [r3, #4]
10001d42:	3b01      	subs	r3, #1
10001d44:	b2da      	uxtb	r2, r3
10001d46:	68fb      	ldr	r3, [r7, #12]
10001d48:	711a      	strb	r2, [r3, #4]
10001d4a:	68fb      	ldr	r3, [r7, #12]
10001d4c:	791b      	ldrb	r3, [r3, #4]
10001d4e:	2b00      	cmp	r3, #0
10001d50:	d001      	beq.n	10001d56 <executeTransitionChain+0xa6>
			return STATE_off;}
10001d52:	2304      	movs	r3, #4
10001d54:	e003      	b.n	10001d5e <executeTransitionChain+0xae>
			else {
			return STATE_goingOn;}
10001d56:	2302      	movs	r3, #2
10001d58:	e001      	b.n	10001d5e <executeTransitionChain+0xae>
		}
			default:
				/* should not occur */
				break;
10001d5a:	46c0      	nop			; (mov r8, r8)
	}
	return NO_STATE;
10001d5c:	2300      	movs	r3, #0
10001d5e:	b21b      	sxth	r3, r3
}
10001d60:	1c18      	adds	r0, r3, #0
10001d62:	46bd      	mov	sp, r7
10001d64:	b004      	add	sp, #16
10001d66:	bd80      	pop	{r7, pc}

10001d68 <enterHistory>:
/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(ADimmer* self, etInt16 state__et) {
10001d68:	b580      	push	{r7, lr}
10001d6a:	b084      	sub	sp, #16
10001d6c:	af00      	add	r7, sp, #0
10001d6e:	6078      	str	r0, [r7, #4]
10001d70:	1c0a      	adds	r2, r1, #0
10001d72:	1cbb      	adds	r3, r7, #2
10001d74:	801a      	strh	r2, [r3, #0]
	boolean skip_entry__et = ET_FALSE;
10001d76:	1c3b      	adds	r3, r7, #0
10001d78:	330f      	adds	r3, #15
10001d7a:	2200      	movs	r2, #0
10001d7c:	701a      	strb	r2, [r3, #0]
	if (state__et >= STATE_MAX) {
10001d7e:	1cbb      	adds	r3, r7, #2
10001d80:	2200      	movs	r2, #0
10001d82:	5e9b      	ldrsh	r3, [r3, r2]
10001d84:	2b04      	cmp	r3, #4
10001d86:	dd09      	ble.n	10001d9c <enterHistory+0x34>
		state__et = (etInt16) (state__et - STATE_MAX);
10001d88:	1cbb      	adds	r3, r7, #2
10001d8a:	881b      	ldrh	r3, [r3, #0]
10001d8c:	3b05      	subs	r3, #5
10001d8e:	b29a      	uxth	r2, r3
10001d90:	1cbb      	adds	r3, r7, #2
10001d92:	801a      	strh	r2, [r3, #0]
		skip_entry__et = ET_TRUE;
10001d94:	1c3b      	adds	r3, r7, #0
10001d96:	330f      	adds	r3, #15
10001d98:	2201      	movs	r2, #1
10001d9a:	701a      	strb	r2, [r3, #0]
	}
	while (ET_TRUE) {
		switch (state__et) {
10001d9c:	1cbb      	adds	r3, r7, #2
10001d9e:	2200      	movs	r2, #0
10001da0:	5e9b      	ldrsh	r3, [r3, r2]
10001da2:	2b02      	cmp	r3, #2
10001da4:	d008      	beq.n	10001db8 <enterHistory+0x50>
10001da6:	dc02      	bgt.n	10001dae <enterHistory+0x46>
10001da8:	2b01      	cmp	r3, #1
10001daa:	d00b      	beq.n	10001dc4 <enterHistory+0x5c>
10001dac:	e00f      	b.n	10001dce <enterHistory+0x66>
10001dae:	2b03      	cmp	r3, #3
10001db0:	d004      	beq.n	10001dbc <enterHistory+0x54>
10001db2:	2b04      	cmp	r3, #4
10001db4:	d004      	beq.n	10001dc0 <enterHistory+0x58>
10001db6:	e00a      	b.n	10001dce <enterHistory+0x66>
			case STATE_goingOn:
				/* in leaf state: return state id */
				return STATE_goingOn;
10001db8:	2302      	movs	r3, #2
10001dba:	e00e      	b.n	10001dda <enterHistory+0x72>
			case STATE_goingOff:
				/* in leaf state: return state id */
				return STATE_goingOff;
10001dbc:	2303      	movs	r3, #3
10001dbe:	e00c      	b.n	10001dda <enterHistory+0x72>
			case STATE_off:
				/* in leaf state: return state id */
				return STATE_off;
10001dc0:	2304      	movs	r3, #4
10001dc2:	e00a      	b.n	10001dda <enterHistory+0x72>
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
10001dc4:	1cbb      	adds	r3, r7, #2
10001dc6:	687a      	ldr	r2, [r7, #4]
10001dc8:	8a12      	ldrh	r2, [r2, #16]
10001dca:	801a      	strh	r2, [r3, #0]
				break;
10001dcc:	e000      	b.n	10001dd0 <enterHistory+0x68>
			default:
				/* should not occur */
				break;
10001dce:	46c0      	nop			; (mov r8, r8)
		}
		skip_entry__et = ET_FALSE;
10001dd0:	1c3b      	adds	r3, r7, #0
10001dd2:	330f      	adds	r3, #15
10001dd4:	2200      	movs	r2, #0
10001dd6:	701a      	strb	r2, [r3, #0]
	}
10001dd8:	e7e0      	b.n	10001d9c <enterHistory+0x34>
10001dda:	b21b      	sxth	r3, r3
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}
10001ddc:	1c18      	adds	r0, r3, #0
10001dde:	46bd      	mov	sp, r7
10001de0:	b004      	add	sp, #16
10001de2:	bd80      	pop	{r7, pc}

10001de4 <ADimmer_executeInitTransition>:

static void ADimmer_executeInitTransition(ADimmer* self) {
10001de4:	b590      	push	{r4, r7, lr}
10001de6:	b085      	sub	sp, #20
10001de8:	af00      	add	r7, sp, #0
10001dea:	6078      	str	r0, [r7, #4]
	int chain__et = CHAIN_TRANS_INITIAL_TO__goingOn;
10001dec:	2301      	movs	r3, #1
10001dee:	60fb      	str	r3, [r7, #12]
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
10001df0:	1c3c      	adds	r4, r7, #0
10001df2:	340a      	adds	r4, #10
10001df4:	687a      	ldr	r2, [r7, #4]
10001df6:	68fb      	ldr	r3, [r7, #12]
10001df8:	1c10      	adds	r0, r2, #0
10001dfa:	1c19      	adds	r1, r3, #0
10001dfc:	2200      	movs	r2, #0
10001dfe:	2300      	movs	r3, #0
10001e00:	f7ff ff56 	bl	10001cb0 <executeTransitionChain>
10001e04:	1c03      	adds	r3, r0, #0
10001e06:	8023      	strh	r3, [r4, #0]
	next__et = enterHistory(self, next__et);
10001e08:	1c3c      	adds	r4, r7, #0
10001e0a:	340a      	adds	r4, #10
10001e0c:	687a      	ldr	r2, [r7, #4]
10001e0e:	1c3b      	adds	r3, r7, #0
10001e10:	330a      	adds	r3, #10
10001e12:	2100      	movs	r1, #0
10001e14:	5e5b      	ldrsh	r3, [r3, r1]
10001e16:	1c10      	adds	r0, r2, #0
10001e18:	1c19      	adds	r1, r3, #0
10001e1a:	f7ff ffa5 	bl	10001d68 <enterHistory>
10001e1e:	1c03      	adds	r3, r0, #0
10001e20:	8023      	strh	r3, [r4, #0]
	setState(self, next__et);
10001e22:	687a      	ldr	r2, [r7, #4]
10001e24:	1c3b      	adds	r3, r7, #0
10001e26:	330a      	adds	r3, #10
10001e28:	2100      	movs	r1, #0
10001e2a:	5e5b      	ldrsh	r3, [r3, r1]
10001e2c:	1c10      	adds	r0, r2, #0
10001e2e:	1c19      	adds	r1, r3, #0
10001e30:	f7ff fe9a 	bl	10001b68 <setState>
}
10001e34:	46bd      	mov	sp, r7
10001e36:	b005      	add	sp, #20
10001e38:	bd90      	pop	{r4, r7, pc}
10001e3a:	46c0      	nop			; (mov r8, r8)

10001e3c <ADimmer_receiveEvent>:

/* receiveEvent contains the main implementation of the FSM */
static void ADimmer_receiveEvent(ADimmer* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
10001e3c:	b590      	push	{r4, r7, lr}
10001e3e:	b089      	sub	sp, #36	; 0x24
10001e40:	af00      	add	r7, sp, #0
10001e42:	60f8      	str	r0, [r7, #12]
10001e44:	60b9      	str	r1, [r7, #8]
10001e46:	607a      	str	r2, [r7, #4]
10001e48:	603b      	str	r3, [r7, #0]
	int trigger__et = ifitem->localId + EVT_SHIFT*evt;
10001e4a:	68bb      	ldr	r3, [r7, #8]
10001e4c:	7a5b      	ldrb	r3, [r3, #9]
10001e4e:	1c1a      	adds	r2, r3, #0
10001e50:	687b      	ldr	r3, [r7, #4]
10001e52:	2164      	movs	r1, #100	; 0x64
10001e54:	434b      	muls	r3, r1
10001e56:	18d3      	adds	r3, r2, r3
10001e58:	617b      	str	r3, [r7, #20]
	int chain__et = NOT_CAUGHT;
10001e5a:	2300      	movs	r3, #0
10001e5c:	61fb      	str	r3, [r7, #28]
	etInt16 catching_state__et = NO_STATE;
10001e5e:	1c3b      	adds	r3, r7, #0
10001e60:	331a      	adds	r3, #26
10001e62:	2200      	movs	r2, #0
10001e64:	801a      	strh	r2, [r3, #0]
	((void)trigger__et);	/* avoids unused warning */
	
	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
10001e66:	68b9      	ldr	r1, [r7, #8]
10001e68:	687a      	ldr	r2, [r7, #4]
10001e6a:	683b      	ldr	r3, [r7, #0]
10001e6c:	1c08      	adds	r0, r1, #0
10001e6e:	1c11      	adds	r1, r2, #0
10001e70:	1c1a      	adds	r2, r3, #0
10001e72:	f004 fc87 	bl	10006784 <handleSystemEvent>
10001e76:	1c03      	adds	r3, r0, #0
10001e78:	2b00      	cmp	r3, #0
10001e7a:	d12f      	bne.n	10001edc <ADimmer_receiveEvent+0xa0>
		switch (getState(self)) {
10001e7c:	68fb      	ldr	r3, [r7, #12]
10001e7e:	1c18      	adds	r0, r3, #0
10001e80:	f7ff fe80 	bl	10001b84 <getState>
10001e84:	1c03      	adds	r3, r0, #0
10001e86:	2b03      	cmp	r3, #3
10001e88:	d00f      	beq.n	10001eaa <ADimmer_receiveEvent+0x6e>
10001e8a:	2b04      	cmp	r3, #4
10001e8c:	d019      	beq.n	10001ec2 <ADimmer_receiveEvent+0x86>
10001e8e:	2b02      	cmp	r3, #2
10001e90:	d123      	bne.n	10001eda <ADimmer_receiveEvent+0x9e>
			case STATE_goingOn:
				switch(trigger__et) {
10001e92:	697b      	ldr	r3, [r7, #20]
10001e94:	2b66      	cmp	r3, #102	; 0x66
10001e96:	d106      	bne.n	10001ea6 <ADimmer_receiveEvent+0x6a>
						case TRIG_timer__timeout:
							{
								chain__et = CHAIN_TRANS_tr1_FROM_goingOn_TO_cp0_BY_timeouttimer;
10001e98:	2302      	movs	r3, #2
10001e9a:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
10001e9c:	1c3b      	adds	r3, r7, #0
10001e9e:	331a      	adds	r3, #26
10001ea0:	2201      	movs	r2, #1
10001ea2:	801a      	strh	r2, [r3, #0]
							}
						break;
10001ea4:	e000      	b.n	10001ea8 <ADimmer_receiveEvent+0x6c>
						default:
							/* should not occur */
							break;
10001ea6:	46c0      	nop			; (mov r8, r8)
				}
				break;
10001ea8:	e018      	b.n	10001edc <ADimmer_receiveEvent+0xa0>
			case STATE_goingOff:
				switch(trigger__et) {
10001eaa:	697b      	ldr	r3, [r7, #20]
10001eac:	2b66      	cmp	r3, #102	; 0x66
10001eae:	d106      	bne.n	10001ebe <ADimmer_receiveEvent+0x82>
						case TRIG_timer__timeout:
							{
								chain__et = CHAIN_TRANS_tr3_FROM_goingOff_TO_cp1_BY_timeouttimer;
10001eb0:	2303      	movs	r3, #3
10001eb2:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
10001eb4:	1c3b      	adds	r3, r7, #0
10001eb6:	331a      	adds	r3, #26
10001eb8:	2201      	movs	r2, #1
10001eba:	801a      	strh	r2, [r3, #0]
							}
						break;
10001ebc:	e000      	b.n	10001ec0 <ADimmer_receiveEvent+0x84>
						default:
							/* should not occur */
							break;
10001ebe:	46c0      	nop			; (mov r8, r8)
				}
				break;
10001ec0:	e00c      	b.n	10001edc <ADimmer_receiveEvent+0xa0>
			case STATE_off:
				switch(trigger__et) {
10001ec2:	697b      	ldr	r3, [r7, #20]
10001ec4:	2b66      	cmp	r3, #102	; 0x66
10001ec6:	d106      	bne.n	10001ed6 <ADimmer_receiveEvent+0x9a>
						case TRIG_timer__timeout:
							{
								chain__et = CHAIN_TRANS_tr7_FROM_off_TO_cp2_BY_timeouttimer;
10001ec8:	2304      	movs	r3, #4
10001eca:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
10001ecc:	1c3b      	adds	r3, r7, #0
10001ece:	331a      	adds	r3, #26
10001ed0:	2201      	movs	r2, #1
10001ed2:	801a      	strh	r2, [r3, #0]
							}
						break;
10001ed4:	e000      	b.n	10001ed8 <ADimmer_receiveEvent+0x9c>
						default:
							/* should not occur */
							break;
10001ed6:	46c0      	nop			; (mov r8, r8)
				}
				break;
10001ed8:	e000      	b.n	10001edc <ADimmer_receiveEvent+0xa0>
			default:
				/* should not occur */
				break;
10001eda:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (chain__et != NOT_CAUGHT) {
10001edc:	69fb      	ldr	r3, [r7, #28]
10001ede:	2b00      	cmp	r3, #0
10001ee0:	d02f      	beq.n	10001f42 <ADimmer_receiveEvent+0x106>
		exitTo(self, getState(self), catching_state__et);
10001ee2:	68fb      	ldr	r3, [r7, #12]
10001ee4:	1c18      	adds	r0, r3, #0
10001ee6:	f7ff fe4d 	bl	10001b84 <getState>
10001eea:	1c03      	adds	r3, r0, #0
10001eec:	1c1a      	adds	r2, r3, #0
10001eee:	68f9      	ldr	r1, [r7, #12]
10001ef0:	1c3b      	adds	r3, r7, #0
10001ef2:	331a      	adds	r3, #26
10001ef4:	2000      	movs	r0, #0
10001ef6:	5e1b      	ldrsh	r3, [r3, r0]
10001ef8:	1c08      	adds	r0, r1, #0
10001efa:	1c11      	adds	r1, r2, #0
10001efc:	1c1a      	adds	r2, r3, #0
10001efe:	f7ff fe9f 	bl	10001c40 <exitTo>
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
10001f02:	1c3c      	adds	r4, r7, #0
10001f04:	3412      	adds	r4, #18
10001f06:	68f8      	ldr	r0, [r7, #12]
10001f08:	69f9      	ldr	r1, [r7, #28]
10001f0a:	68ba      	ldr	r2, [r7, #8]
10001f0c:	683b      	ldr	r3, [r7, #0]
10001f0e:	f7ff fecf 	bl	10001cb0 <executeTransitionChain>
10001f12:	1c03      	adds	r3, r0, #0
10001f14:	8023      	strh	r3, [r4, #0]
			next__et = enterHistory(self, next__et);
10001f16:	1c3c      	adds	r4, r7, #0
10001f18:	3412      	adds	r4, #18
10001f1a:	68fa      	ldr	r2, [r7, #12]
10001f1c:	1c3b      	adds	r3, r7, #0
10001f1e:	3312      	adds	r3, #18
10001f20:	2100      	movs	r1, #0
10001f22:	5e5b      	ldrsh	r3, [r3, r1]
10001f24:	1c10      	adds	r0, r2, #0
10001f26:	1c19      	adds	r1, r3, #0
10001f28:	f7ff ff1e 	bl	10001d68 <enterHistory>
10001f2c:	1c03      	adds	r3, r0, #0
10001f2e:	8023      	strh	r3, [r4, #0]
			setState(self, next__et);
10001f30:	68fa      	ldr	r2, [r7, #12]
10001f32:	1c3b      	adds	r3, r7, #0
10001f34:	3312      	adds	r3, #18
10001f36:	2000      	movs	r0, #0
10001f38:	5e1b      	ldrsh	r3, [r3, r0]
10001f3a:	1c10      	adds	r0, r2, #0
10001f3c:	1c19      	adds	r1, r3, #0
10001f3e:	f7ff fe13 	bl	10001b68 <setState>
		}
	}
}
10001f42:	46bd      	mov	sp, r7
10001f44:	b009      	add	sp, #36	; 0x24
10001f46:	bd90      	pop	{r4, r7, pc}

10001f48 <ADimmer_init>:

void ADimmer_init(ADimmer* self){
10001f48:	b580      	push	{r7, lr}
10001f4a:	b084      	sub	sp, #16
10001f4c:	af00      	add	r7, sp, #0
10001f4e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ADimmer", "init")
	self->state = STATE_TOP;
10001f50:	687b      	ldr	r3, [r7, #4]
10001f52:	2201      	movs	r2, #1
10001f54:	819a      	strh	r2, [r3, #12]
	{
		int i;
		for (i=0; i<ADIMMER_HISTORY_SIZE; ++i)
10001f56:	2300      	movs	r3, #0
10001f58:	60fb      	str	r3, [r7, #12]
10001f5a:	e009      	b.n	10001f70 <ADimmer_init+0x28>
			self->history[i] = NO_STATE;
10001f5c:	687a      	ldr	r2, [r7, #4]
10001f5e:	68fb      	ldr	r3, [r7, #12]
10001f60:	3304      	adds	r3, #4
10001f62:	005b      	lsls	r3, r3, #1
10001f64:	18d3      	adds	r3, r2, r3
10001f66:	2200      	movs	r2, #0
10001f68:	80da      	strh	r2, [r3, #6]
void ADimmer_init(ADimmer* self){
	ET_MSC_LOGGER_SYNC_ENTRY("ADimmer", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<ADIMMER_HISTORY_SIZE; ++i)
10001f6a:	68fb      	ldr	r3, [r7, #12]
10001f6c:	3301      	adds	r3, #1
10001f6e:	60fb      	str	r3, [r7, #12]
10001f70:	68fb      	ldr	r3, [r7, #12]
10001f72:	2b01      	cmp	r3, #1
10001f74:	ddf2      	ble.n	10001f5c <ADimmer_init+0x14>
			self->history[i] = NO_STATE;
	}
	ADimmer_executeInitTransition(self);
10001f76:	687b      	ldr	r3, [r7, #4]
10001f78:	1c18      	adds	r0, r3, #0
10001f7a:	f7ff ff33 	bl	10001de4 <ADimmer_executeInitTransition>
	ET_MSC_LOGGER_SYNC_EXIT
}
10001f7e:	46bd      	mov	sp, r7
10001f80:	b004      	add	sp, #16
10001f82:	bd80      	pop	{r7, pc}

10001f84 <ADimmer_receiveMessage>:


void ADimmer_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
10001f84:	b580      	push	{r7, lr}
10001f86:	b084      	sub	sp, #16
10001f88:	af00      	add	r7, sp, #0
10001f8a:	60f8      	str	r0, [r7, #12]
10001f8c:	60b9      	str	r1, [r7, #8]
10001f8e:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ADimmer", "_receiveMessage")
	
	ADimmer_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));
10001f90:	687b      	ldr	r3, [r7, #4]
10001f92:	88db      	ldrh	r3, [r3, #6]
10001f94:	b21a      	sxth	r2, r3
10001f96:	687b      	ldr	r3, [r7, #4]
10001f98:	3308      	adds	r3, #8
10001f9a:	68f8      	ldr	r0, [r7, #12]
10001f9c:	68b9      	ldr	r1, [r7, #8]
10001f9e:	f7ff ff4d 	bl	10001e3c <ADimmer_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10001fa2:	46bd      	mov	sp, r7
10001fa4:	b004      	add	sp, #16
10001fa6:	bd80      	pop	{r7, pc}

10001fa8 <setState>:
	TRIG_p0__pong = IFITEM_p0 + EVT_SHIFT*PingPongProtocol_OUT_pong,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};


static void setState(MrPing* self, etInt16 new_state) {
10001fa8:	b580      	push	{r7, lr}
10001faa:	b082      	sub	sp, #8
10001fac:	af00      	add	r7, sp, #0
10001fae:	6078      	str	r0, [r7, #4]
10001fb0:	1c0a      	adds	r2, r1, #0
10001fb2:	1cbb      	adds	r3, r7, #2
10001fb4:	801a      	strh	r2, [r3, #0]
	self->state = new_state;
10001fb6:	687b      	ldr	r3, [r7, #4]
10001fb8:	1cba      	adds	r2, r7, #2
10001fba:	8812      	ldrh	r2, [r2, #0]
10001fbc:	841a      	strh	r2, [r3, #32]
}
10001fbe:	46bd      	mov	sp, r7
10001fc0:	b002      	add	sp, #8
10001fc2:	bd80      	pop	{r7, pc}

10001fc4 <getState>:

static etInt16 getState(MrPing* self) {
10001fc4:	b580      	push	{r7, lr}
10001fc6:	b082      	sub	sp, #8
10001fc8:	af00      	add	r7, sp, #0
10001fca:	6078      	str	r0, [r7, #4]
	return self->state;
10001fcc:	687b      	ldr	r3, [r7, #4]
10001fce:	8c1b      	ldrh	r3, [r3, #32]
10001fd0:	b21b      	sxth	r3, r3
}
10001fd2:	1c18      	adds	r0, r3, #0
10001fd4:	46bd      	mov	sp, r7
10001fd6:	b002      	add	sp, #8
10001fd8:	bd80      	pop	{r7, pc}
10001fda:	46c0      	nop			; (mov r8, r8)

10001fdc <action_TRANS_INITIAL_TO__running>:

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_INITIAL_TO__running(MrPing* self) {
10001fdc:	b580      	push	{r7, lr}
10001fde:	b082      	sub	sp, #8
10001fe0:	af00      	add	r7, sp, #0
10001fe2:	6078      	str	r0, [r7, #4]
	counter=0;
10001fe4:	687b      	ldr	r3, [r7, #4]
10001fe6:	2200      	movs	r2, #0
10001fe8:	605a      	str	r2, [r3, #4]
	PingPongData_initData(&myData);
10001fea:	687b      	ldr	r3, [r7, #4]
10001fec:	3308      	adds	r3, #8
10001fee:	1c18      	adds	r0, r3, #0
10001ff0:	f000 fb5a 	bl	100026a8 <PingPongData_initData>
	
	timer_startTimeout(500);
10001ff4:	687b      	ldr	r3, [r7, #4]
10001ff6:	681b      	ldr	r3, [r3, #0]
10001ff8:	1c1a      	adds	r2, r3, #0
10001ffa:	3230      	adds	r2, #48	; 0x30
10001ffc:	23fa      	movs	r3, #250	; 0xfa
10001ffe:	005b      	lsls	r3, r3, #1
10002000:	1c10      	adds	r0, r2, #0
10002002:	1c19      	adds	r1, r3, #0
10002004:	f7ff fcf6 	bl	100019f4 <PTimerConjPort_startTimeout>
	
	//uart.setInstance(0);
	PUART001ConjPort_setInstance(&self->constData->uart,0);
10002008:	687b      	ldr	r3, [r7, #4]
1000200a:	681b      	ldr	r3, [r3, #0]
1000200c:	3324      	adds	r3, #36	; 0x24
1000200e:	1c18      	adds	r0, r3, #0
10002010:	2100      	movs	r1, #0
10002012:	f000 ff8f 	bl	10002f34 <PUART001ConjPort_setInstance>
	
	// Led0.setInstance(0);
	PIO004ConjPort_setInstance(&self->constData->Led0,0);  
10002016:	687b      	ldr	r3, [r7, #4]
10002018:	681b      	ldr	r3, [r3, #0]
1000201a:	330c      	adds	r3, #12
1000201c:	1c18      	adds	r0, r3, #0
1000201e:	2100      	movs	r1, #0
10002020:	f000 fe72 	bl	10002d08 <PIO004ConjPort_setInstance>
	
	// Led1.setInstance(1);
	PIO004ConjPort_setInstance(&self->constData->Led1,1);  
10002024:	687b      	ldr	r3, [r7, #4]
10002026:	681b      	ldr	r3, [r3, #0]
10002028:	3318      	adds	r3, #24
1000202a:	1c18      	adds	r0, r3, #0
1000202c:	2101      	movs	r1, #1
1000202e:	f000 fe6b 	bl	10002d08 <PIO004ConjPort_setInstance>
	
	// Led0.setPin();
	PIO004ConjPort_setPin(&self->constData->Led0);  
10002032:	687b      	ldr	r3, [r7, #4]
10002034:	681b      	ldr	r3, [r3, #0]
10002036:	330c      	adds	r3, #12
10002038:	1c18      	adds	r0, r3, #0
1000203a:	f000 fe97 	bl	10002d6c <PIO004ConjPort_setPin>
	
	// Led1.resetPin();
	PIO004ConjPort_resetPin(&self->constData->Led1);  
1000203e:	687b      	ldr	r3, [r7, #4]
10002040:	681b      	ldr	r3, [r3, #0]
10002042:	3318      	adds	r3, #24
10002044:	1c18      	adds	r0, r3, #0
10002046:	f000 fec5 	bl	10002dd4 <PIO004ConjPort_resetPin>
}
1000204a:	46bd      	mov	sp, r7
1000204c:	b002      	add	sp, #8
1000204e:	bd80      	pop	{r7, pc}

10002050 <action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0>:
static void action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0(MrPing* self, const InterfaceItemBase* ifitem, PingPongData* data) {
10002050:	b580      	push	{r7, lr}
10002052:	b084      	sub	sp, #16
10002054:	af00      	add	r7, sp, #0
10002056:	60f8      	str	r0, [r7, #12]
10002058:	60b9      	str	r1, [r7, #8]
1000205a:	607a      	str	r2, [r7, #4]
	timer_startTimeout(200);
1000205c:	68fb      	ldr	r3, [r7, #12]
1000205e:	681b      	ldr	r3, [r3, #0]
10002060:	3330      	adds	r3, #48	; 0x30
10002062:	1c18      	adds	r0, r3, #0
10002064:	21c8      	movs	r1, #200	; 0xc8
10002066:	f7ff fcc5 	bl	100019f4 <PTimerConjPort_startTimeout>
	
	counter++;
1000206a:	68fb      	ldr	r3, [r7, #12]
1000206c:	685b      	ldr	r3, [r3, #4]
1000206e:	1c5a      	adds	r2, r3, #1
10002070:	68fb      	ldr	r3, [r7, #12]
10002072:	605a      	str	r2, [r3, #4]
	//toggleLED0();
	
	// Led1.togglePin();
	PIO004ConjPort_togglePin(&self->constData->Led1);
10002074:	68fb      	ldr	r3, [r7, #12]
10002076:	681b      	ldr	r3, [r3, #0]
10002078:	3318      	adds	r3, #24
1000207a:	1c18      	adds	r0, r3, #0
1000207c:	f000 febe 	bl	10002dfc <PIO004ConjPort_togglePin>
	
	// Led0.togglePin();
	PIO004ConjPort_togglePin(&self->constData->Led0);   
10002080:	68fb      	ldr	r3, [r7, #12]
10002082:	681b      	ldr	r3, [r3, #0]
10002084:	330c      	adds	r3, #12
10002086:	1c18      	adds	r0, r3, #0
10002088:	f000 feb8 	bl	10002dfc <PIO004ConjPort_togglePin>
	
	//uart.writeDataBytes("Das ist ein Test\n", 17);
	PUART001ConjPort_writeDataBytes(&self->constData->uart,"Das ist ein Test!\n",18);
1000208c:	68fb      	ldr	r3, [r7, #12]
1000208e:	681b      	ldr	r3, [r3, #0]
10002090:	1c1a      	adds	r2, r3, #0
10002092:	3224      	adds	r2, #36	; 0x24
10002094:	4b04      	ldr	r3, [pc, #16]	; (100020a8 <action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0+0x58>)
10002096:	1c10      	adds	r0, r2, #0
10002098:	1c19      	adds	r1, r3, #0
1000209a:	2212      	movs	r2, #18
1000209c:	f000 ff78 	bl	10002f90 <PUART001ConjPort_writeDataBytes>
}
100020a0:	46bd      	mov	sp, r7
100020a2:	b004      	add	sp, #16
100020a4:	bd80      	pop	{r7, pc}
100020a6:	46c0      	nop			; (mov r8, r8)
100020a8:	10008dc8 	.word	0x10008dc8

100020ac <action_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1>:
static void action_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1(MrPing* self, const InterfaceItemBase* ifitem) {
100020ac:	b580      	push	{r7, lr}
100020ae:	b082      	sub	sp, #8
100020b0:	af00      	add	r7, sp, #0
100020b2:	6078      	str	r0, [r7, #4]
100020b4:	6039      	str	r1, [r7, #0]
	p0_ping(&myData);
100020b6:	687b      	ldr	r3, [r7, #4]
100020b8:	681b      	ldr	r3, [r3, #0]
100020ba:	1c1a      	adds	r2, r3, #0
100020bc:	687b      	ldr	r3, [r7, #4]
100020be:	3308      	adds	r3, #8
100020c0:	1c10      	adds	r0, r2, #0
100020c2:	1c19      	adds	r1, r3, #0
100020c4:	f000 fb70 	bl	100027a8 <PingPongProtocolConjPort_ping>
}
100020c8:	46bd      	mov	sp, r7
100020ca:	b002      	add	sp, #8
100020cc:	bd80      	pop	{r7, pc}
100020ce:	46c0      	nop			; (mov r8, r8)

100020d0 <exitTo>:
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(MrPing* self, etInt16 current__et, etInt16 to) {
100020d0:	b580      	push	{r7, lr}
100020d2:	b082      	sub	sp, #8
100020d4:	af00      	add	r7, sp, #0
100020d6:	6078      	str	r0, [r7, #4]
100020d8:	1cbb      	adds	r3, r7, #2
100020da:	8019      	strh	r1, [r3, #0]
100020dc:	1c3b      	adds	r3, r7, #0
100020de:	801a      	strh	r2, [r3, #0]
	while (current__et!=to) {
100020e0:	e010      	b.n	10002104 <exitTo+0x34>
		switch (current__et) {
100020e2:	1cbb      	adds	r3, r7, #2
100020e4:	2100      	movs	r1, #0
100020e6:	5e5b      	ldrsh	r3, [r3, r1]
100020e8:	2b02      	cmp	r3, #2
100020ea:	d106      	bne.n	100020fa <exitTo+0x2a>
			case STATE_running:
				self->history[STATE_TOP] = STATE_running;
100020ec:	687b      	ldr	r3, [r7, #4]
100020ee:	2202      	movs	r2, #2
100020f0:	849a      	strh	r2, [r3, #36]	; 0x24
				current__et = STATE_TOP;
100020f2:	1cbb      	adds	r3, r7, #2
100020f4:	2201      	movs	r2, #1
100020f6:	801a      	strh	r2, [r3, #0]
				break;
100020f8:	e004      	b.n	10002104 <exitTo+0x34>
100020fa:	1cbb      	adds	r3, r7, #2
100020fc:	1cba      	adds	r2, r7, #2
100020fe:	8812      	ldrh	r2, [r2, #0]
10002100:	801a      	strh	r2, [r3, #0]
			default:
				/* should not occur */
				break;
10002102:	46c0      	nop			; (mov r8, r8)
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(MrPing* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
10002104:	1cba      	adds	r2, r7, #2
10002106:	1c3b      	adds	r3, r7, #0
10002108:	2100      	movs	r1, #0
1000210a:	5e52      	ldrsh	r2, [r2, r1]
1000210c:	2100      	movs	r1, #0
1000210e:	5e5b      	ldrsh	r3, [r3, r1]
10002110:	429a      	cmp	r2, r3
10002112:	d1e6      	bne.n	100020e2 <exitTo+0x12>
			default:
				/* should not occur */
				break;
		}
	}
}
10002114:	46bd      	mov	sp, r7
10002116:	b002      	add	sp, #8
10002118:	bd80      	pop	{r7, pc}
1000211a:	46c0      	nop			; (mov r8, r8)

1000211c <executeTransitionChain>:
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(MrPing* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
1000211c:	b580      	push	{r7, lr}
1000211e:	b086      	sub	sp, #24
10002120:	af00      	add	r7, sp, #0
10002122:	60f8      	str	r0, [r7, #12]
10002124:	60b9      	str	r1, [r7, #8]
10002126:	607a      	str	r2, [r7, #4]
10002128:	603b      	str	r3, [r7, #0]
	switch (chain__et) {
1000212a:	68bb      	ldr	r3, [r7, #8]
1000212c:	2b02      	cmp	r3, #2
1000212e:	d009      	beq.n	10002144 <executeTransitionChain+0x28>
10002130:	2b03      	cmp	r3, #3
10002132:	d013      	beq.n	1000215c <executeTransitionChain+0x40>
10002134:	2b01      	cmp	r3, #1
10002136:	d119      	bne.n	1000216c <executeTransitionChain+0x50>
		case CHAIN_TRANS_INITIAL_TO__running:
		{
			action_TRANS_INITIAL_TO__running(self);
10002138:	68fb      	ldr	r3, [r7, #12]
1000213a:	1c18      	adds	r0, r3, #0
1000213c:	f7ff ff4e 	bl	10001fdc <action_TRANS_INITIAL_TO__running>
			return STATE_running;
10002140:	2302      	movs	r3, #2
10002142:	e015      	b.n	10002170 <executeTransitionChain+0x54>
		}
		case CHAIN_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0:
		{
			PingPongData* data = ((PingPongData*) generic_data__et);
10002144:	683b      	ldr	r3, [r7, #0]
10002146:	617b      	str	r3, [r7, #20]
			action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0(self, ifitem, data);
10002148:	68f9      	ldr	r1, [r7, #12]
1000214a:	687a      	ldr	r2, [r7, #4]
1000214c:	697b      	ldr	r3, [r7, #20]
1000214e:	1c08      	adds	r0, r1, #0
10002150:	1c11      	adds	r1, r2, #0
10002152:	1c1a      	adds	r2, r3, #0
10002154:	f7ff ff7c 	bl	10002050 <action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0>
			return STATE_running;
10002158:	2302      	movs	r3, #2
1000215a:	e009      	b.n	10002170 <executeTransitionChain+0x54>
		}
		case CHAIN_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1:
		{
			action_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1(self, ifitem);
1000215c:	68fa      	ldr	r2, [r7, #12]
1000215e:	687b      	ldr	r3, [r7, #4]
10002160:	1c10      	adds	r0, r2, #0
10002162:	1c19      	adds	r1, r3, #0
10002164:	f7ff ffa2 	bl	100020ac <action_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1>
			return STATE_running;
10002168:	2302      	movs	r3, #2
1000216a:	e001      	b.n	10002170 <executeTransitionChain+0x54>
		}
			default:
				/* should not occur */
				break;
1000216c:	46c0      	nop			; (mov r8, r8)
	}
	return NO_STATE;
1000216e:	2300      	movs	r3, #0
10002170:	b21b      	sxth	r3, r3
}
10002172:	1c18      	adds	r0, r3, #0
10002174:	46bd      	mov	sp, r7
10002176:	b006      	add	sp, #24
10002178:	bd80      	pop	{r7, pc}
1000217a:	46c0      	nop			; (mov r8, r8)

1000217c <enterHistory>:
/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(MrPing* self, etInt16 state__et) {
1000217c:	b580      	push	{r7, lr}
1000217e:	b084      	sub	sp, #16
10002180:	af00      	add	r7, sp, #0
10002182:	6078      	str	r0, [r7, #4]
10002184:	1c0a      	adds	r2, r1, #0
10002186:	1cbb      	adds	r3, r7, #2
10002188:	801a      	strh	r2, [r3, #0]
	boolean skip_entry__et = ET_FALSE;
1000218a:	1c3b      	adds	r3, r7, #0
1000218c:	330f      	adds	r3, #15
1000218e:	2200      	movs	r2, #0
10002190:	701a      	strb	r2, [r3, #0]
	if (state__et >= STATE_MAX) {
10002192:	1cbb      	adds	r3, r7, #2
10002194:	2200      	movs	r2, #0
10002196:	5e9b      	ldrsh	r3, [r3, r2]
10002198:	2b02      	cmp	r3, #2
1000219a:	dd09      	ble.n	100021b0 <enterHistory+0x34>
		state__et = (etInt16) (state__et - STATE_MAX);
1000219c:	1cbb      	adds	r3, r7, #2
1000219e:	881b      	ldrh	r3, [r3, #0]
100021a0:	3b03      	subs	r3, #3
100021a2:	b29a      	uxth	r2, r3
100021a4:	1cbb      	adds	r3, r7, #2
100021a6:	801a      	strh	r2, [r3, #0]
		skip_entry__et = ET_TRUE;
100021a8:	1c3b      	adds	r3, r7, #0
100021aa:	330f      	adds	r3, #15
100021ac:	2201      	movs	r2, #1
100021ae:	701a      	strb	r2, [r3, #0]
	}
	while (ET_TRUE) {
		switch (state__et) {
100021b0:	1cbb      	adds	r3, r7, #2
100021b2:	2200      	movs	r2, #0
100021b4:	5e9b      	ldrsh	r3, [r3, r2]
100021b6:	2b01      	cmp	r3, #1
100021b8:	d004      	beq.n	100021c4 <enterHistory+0x48>
100021ba:	2b02      	cmp	r3, #2
100021bc:	d107      	bne.n	100021ce <enterHistory+0x52>
			case STATE_running:
				/* in leaf state: return state id */
				return STATE_running;
100021be:	2302      	movs	r3, #2
100021c0:	b21b      	sxth	r3, r3
100021c2:	e00a      	b.n	100021da <enterHistory+0x5e>
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
100021c4:	1cbb      	adds	r3, r7, #2
100021c6:	687a      	ldr	r2, [r7, #4]
100021c8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
100021ca:	801a      	strh	r2, [r3, #0]
				break;
100021cc:	e000      	b.n	100021d0 <enterHistory+0x54>
			default:
				/* should not occur */
				break;
100021ce:	46c0      	nop			; (mov r8, r8)
		}
		skip_entry__et = ET_FALSE;
100021d0:	1c3b      	adds	r3, r7, #0
100021d2:	330f      	adds	r3, #15
100021d4:	2200      	movs	r2, #0
100021d6:	701a      	strb	r2, [r3, #0]
	}
100021d8:	e7ea      	b.n	100021b0 <enterHistory+0x34>
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}
100021da:	1c18      	adds	r0, r3, #0
100021dc:	46bd      	mov	sp, r7
100021de:	b004      	add	sp, #16
100021e0:	bd80      	pop	{r7, pc}
100021e2:	46c0      	nop			; (mov r8, r8)

100021e4 <MrPing_executeInitTransition>:

static void MrPing_executeInitTransition(MrPing* self) {
100021e4:	b590      	push	{r4, r7, lr}
100021e6:	b085      	sub	sp, #20
100021e8:	af00      	add	r7, sp, #0
100021ea:	6078      	str	r0, [r7, #4]
	int chain__et = CHAIN_TRANS_INITIAL_TO__running;
100021ec:	2301      	movs	r3, #1
100021ee:	60fb      	str	r3, [r7, #12]
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
100021f0:	1c3c      	adds	r4, r7, #0
100021f2:	340a      	adds	r4, #10
100021f4:	687a      	ldr	r2, [r7, #4]
100021f6:	68fb      	ldr	r3, [r7, #12]
100021f8:	1c10      	adds	r0, r2, #0
100021fa:	1c19      	adds	r1, r3, #0
100021fc:	2200      	movs	r2, #0
100021fe:	2300      	movs	r3, #0
10002200:	f7ff ff8c 	bl	1000211c <executeTransitionChain>
10002204:	1c03      	adds	r3, r0, #0
10002206:	8023      	strh	r3, [r4, #0]
	next__et = enterHistory(self, next__et);
10002208:	1c3c      	adds	r4, r7, #0
1000220a:	340a      	adds	r4, #10
1000220c:	687a      	ldr	r2, [r7, #4]
1000220e:	1c3b      	adds	r3, r7, #0
10002210:	330a      	adds	r3, #10
10002212:	2100      	movs	r1, #0
10002214:	5e5b      	ldrsh	r3, [r3, r1]
10002216:	1c10      	adds	r0, r2, #0
10002218:	1c19      	adds	r1, r3, #0
1000221a:	f7ff ffaf 	bl	1000217c <enterHistory>
1000221e:	1c03      	adds	r3, r0, #0
10002220:	8023      	strh	r3, [r4, #0]
	setState(self, next__et);
10002222:	687a      	ldr	r2, [r7, #4]
10002224:	1c3b      	adds	r3, r7, #0
10002226:	330a      	adds	r3, #10
10002228:	2100      	movs	r1, #0
1000222a:	5e5b      	ldrsh	r3, [r3, r1]
1000222c:	1c10      	adds	r0, r2, #0
1000222e:	1c19      	adds	r1, r3, #0
10002230:	f7ff feba 	bl	10001fa8 <setState>
}
10002234:	46bd      	mov	sp, r7
10002236:	b005      	add	sp, #20
10002238:	bd90      	pop	{r4, r7, pc}
1000223a:	46c0      	nop			; (mov r8, r8)

1000223c <MrPing_receiveEvent>:

/* receiveEvent contains the main implementation of the FSM */
static void MrPing_receiveEvent(MrPing* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
1000223c:	b590      	push	{r4, r7, lr}
1000223e:	b089      	sub	sp, #36	; 0x24
10002240:	af00      	add	r7, sp, #0
10002242:	60f8      	str	r0, [r7, #12]
10002244:	60b9      	str	r1, [r7, #8]
10002246:	607a      	str	r2, [r7, #4]
10002248:	603b      	str	r3, [r7, #0]
	int trigger__et = ifitem->localId + EVT_SHIFT*evt;
1000224a:	68bb      	ldr	r3, [r7, #8]
1000224c:	7a5b      	ldrb	r3, [r3, #9]
1000224e:	1c1a      	adds	r2, r3, #0
10002250:	687b      	ldr	r3, [r7, #4]
10002252:	2164      	movs	r1, #100	; 0x64
10002254:	434b      	muls	r3, r1
10002256:	18d3      	adds	r3, r2, r3
10002258:	617b      	str	r3, [r7, #20]
	int chain__et = NOT_CAUGHT;
1000225a:	2300      	movs	r3, #0
1000225c:	61fb      	str	r3, [r7, #28]
	etInt16 catching_state__et = NO_STATE;
1000225e:	1c3b      	adds	r3, r7, #0
10002260:	331a      	adds	r3, #26
10002262:	2200      	movs	r2, #0
10002264:	801a      	strh	r2, [r3, #0]
	((void)trigger__et);	/* avoids unused warning */
	
	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
10002266:	68b9      	ldr	r1, [r7, #8]
10002268:	687a      	ldr	r2, [r7, #4]
1000226a:	683b      	ldr	r3, [r7, #0]
1000226c:	1c08      	adds	r0, r1, #0
1000226e:	1c11      	adds	r1, r2, #0
10002270:	1c1a      	adds	r2, r3, #0
10002272:	f004 fa87 	bl	10006784 <handleSystemEvent>
10002276:	1c03      	adds	r3, r0, #0
10002278:	2b00      	cmp	r3, #0
1000227a:	d11d      	bne.n	100022b8 <MrPing_receiveEvent+0x7c>
		switch (getState(self)) {
1000227c:	68fb      	ldr	r3, [r7, #12]
1000227e:	1c18      	adds	r0, r3, #0
10002280:	f7ff fea0 	bl	10001fc4 <getState>
10002284:	1c03      	adds	r3, r0, #0
10002286:	2b02      	cmp	r3, #2
10002288:	d115      	bne.n	100022b6 <MrPing_receiveEvent+0x7a>
			case STATE_running:
				switch(trigger__et) {
1000228a:	697b      	ldr	r3, [r7, #20]
1000228c:	2b68      	cmp	r3, #104	; 0x68
1000228e:	d002      	beq.n	10002296 <MrPing_receiveEvent+0x5a>
10002290:	2b69      	cmp	r3, #105	; 0x69
10002292:	d007      	beq.n	100022a4 <MrPing_receiveEvent+0x68>
10002294:	e00d      	b.n	100022b2 <MrPing_receiveEvent+0x76>
						case TRIG_p0__pong:
							{
								chain__et = CHAIN_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0;
10002296:	2302      	movs	r3, #2
10002298:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
1000229a:	1c3b      	adds	r3, r7, #0
1000229c:	331a      	adds	r3, #26
1000229e:	2201      	movs	r2, #1
100022a0:	801a      	strh	r2, [r3, #0]
							}
						break;
100022a2:	e007      	b.n	100022b4 <MrPing_receiveEvent+0x78>
						case TRIG_timer__timeout:
							{
								chain__et = CHAIN_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1;
100022a4:	2303      	movs	r3, #3
100022a6:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
100022a8:	1c3b      	adds	r3, r7, #0
100022aa:	331a      	adds	r3, #26
100022ac:	2201      	movs	r2, #1
100022ae:	801a      	strh	r2, [r3, #0]
							}
						break;
100022b0:	e000      	b.n	100022b4 <MrPing_receiveEvent+0x78>
						default:
							/* should not occur */
							break;
100022b2:	46c0      	nop			; (mov r8, r8)
				}
				break;
100022b4:	e000      	b.n	100022b8 <MrPing_receiveEvent+0x7c>
			default:
				/* should not occur */
				break;
100022b6:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (chain__et != NOT_CAUGHT) {
100022b8:	69fb      	ldr	r3, [r7, #28]
100022ba:	2b00      	cmp	r3, #0
100022bc:	d02f      	beq.n	1000231e <MrPing_receiveEvent+0xe2>
		exitTo(self, getState(self), catching_state__et);
100022be:	68fb      	ldr	r3, [r7, #12]
100022c0:	1c18      	adds	r0, r3, #0
100022c2:	f7ff fe7f 	bl	10001fc4 <getState>
100022c6:	1c03      	adds	r3, r0, #0
100022c8:	1c1a      	adds	r2, r3, #0
100022ca:	68f9      	ldr	r1, [r7, #12]
100022cc:	1c3b      	adds	r3, r7, #0
100022ce:	331a      	adds	r3, #26
100022d0:	2000      	movs	r0, #0
100022d2:	5e1b      	ldrsh	r3, [r3, r0]
100022d4:	1c08      	adds	r0, r1, #0
100022d6:	1c11      	adds	r1, r2, #0
100022d8:	1c1a      	adds	r2, r3, #0
100022da:	f7ff fef9 	bl	100020d0 <exitTo>
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
100022de:	1c3c      	adds	r4, r7, #0
100022e0:	3412      	adds	r4, #18
100022e2:	68f8      	ldr	r0, [r7, #12]
100022e4:	69f9      	ldr	r1, [r7, #28]
100022e6:	68ba      	ldr	r2, [r7, #8]
100022e8:	683b      	ldr	r3, [r7, #0]
100022ea:	f7ff ff17 	bl	1000211c <executeTransitionChain>
100022ee:	1c03      	adds	r3, r0, #0
100022f0:	8023      	strh	r3, [r4, #0]
			next__et = enterHistory(self, next__et);
100022f2:	1c3c      	adds	r4, r7, #0
100022f4:	3412      	adds	r4, #18
100022f6:	68fa      	ldr	r2, [r7, #12]
100022f8:	1c3b      	adds	r3, r7, #0
100022fa:	3312      	adds	r3, #18
100022fc:	2100      	movs	r1, #0
100022fe:	5e5b      	ldrsh	r3, [r3, r1]
10002300:	1c10      	adds	r0, r2, #0
10002302:	1c19      	adds	r1, r3, #0
10002304:	f7ff ff3a 	bl	1000217c <enterHistory>
10002308:	1c03      	adds	r3, r0, #0
1000230a:	8023      	strh	r3, [r4, #0]
			setState(self, next__et);
1000230c:	68fa      	ldr	r2, [r7, #12]
1000230e:	1c3b      	adds	r3, r7, #0
10002310:	3312      	adds	r3, #18
10002312:	2000      	movs	r0, #0
10002314:	5e1b      	ldrsh	r3, [r3, r0]
10002316:	1c10      	adds	r0, r2, #0
10002318:	1c19      	adds	r1, r3, #0
1000231a:	f7ff fe45 	bl	10001fa8 <setState>
		}
	}
}
1000231e:	46bd      	mov	sp, r7
10002320:	b009      	add	sp, #36	; 0x24
10002322:	bd90      	pop	{r4, r7, pc}

10002324 <MrPing_init>:

void MrPing_init(MrPing* self){
10002324:	b580      	push	{r7, lr}
10002326:	b084      	sub	sp, #16
10002328:	af00      	add	r7, sp, #0
1000232a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MrPing", "init")
	self->state = STATE_TOP;
1000232c:	687b      	ldr	r3, [r7, #4]
1000232e:	2201      	movs	r2, #1
10002330:	841a      	strh	r2, [r3, #32]
	{
		int i;
		for (i=0; i<MRPING_HISTORY_SIZE; ++i)
10002332:	2300      	movs	r3, #0
10002334:	60fb      	str	r3, [r7, #12]
10002336:	e009      	b.n	1000234c <MrPing_init+0x28>
			self->history[i] = NO_STATE;
10002338:	687a      	ldr	r2, [r7, #4]
1000233a:	68fb      	ldr	r3, [r7, #12]
1000233c:	3310      	adds	r3, #16
1000233e:	005b      	lsls	r3, r3, #1
10002340:	18d3      	adds	r3, r2, r3
10002342:	2200      	movs	r2, #0
10002344:	805a      	strh	r2, [r3, #2]
void MrPing_init(MrPing* self){
	ET_MSC_LOGGER_SYNC_ENTRY("MrPing", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<MRPING_HISTORY_SIZE; ++i)
10002346:	68fb      	ldr	r3, [r7, #12]
10002348:	3301      	adds	r3, #1
1000234a:	60fb      	str	r3, [r7, #12]
1000234c:	68fb      	ldr	r3, [r7, #12]
1000234e:	2b01      	cmp	r3, #1
10002350:	ddf2      	ble.n	10002338 <MrPing_init+0x14>
			self->history[i] = NO_STATE;
	}
	MrPing_executeInitTransition(self);
10002352:	687b      	ldr	r3, [r7, #4]
10002354:	1c18      	adds	r0, r3, #0
10002356:	f7ff ff45 	bl	100021e4 <MrPing_executeInitTransition>
	ET_MSC_LOGGER_SYNC_EXIT
}
1000235a:	46bd      	mov	sp, r7
1000235c:	b004      	add	sp, #16
1000235e:	bd80      	pop	{r7, pc}

10002360 <MrPing_receiveMessage>:


void MrPing_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
10002360:	b580      	push	{r7, lr}
10002362:	b084      	sub	sp, #16
10002364:	af00      	add	r7, sp, #0
10002366:	60f8      	str	r0, [r7, #12]
10002368:	60b9      	str	r1, [r7, #8]
1000236a:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MrPing", "_receiveMessage")
	
	MrPing_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));
1000236c:	687b      	ldr	r3, [r7, #4]
1000236e:	88db      	ldrh	r3, [r3, #6]
10002370:	b21a      	sxth	r2, r3
10002372:	687b      	ldr	r3, [r7, #4]
10002374:	3308      	adds	r3, #8
10002376:	68f8      	ldr	r0, [r7, #12]
10002378:	68b9      	ldr	r1, [r7, #8]
1000237a:	f7ff ff5f 	bl	1000223c <MrPing_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
1000237e:	46bd      	mov	sp, r7
10002380:	b004      	add	sp, #16
10002382:	bd80      	pop	{r7, pc}

10002384 <setState>:
	POLLING = 0,
	TRIG_p0__ping = IFITEM_p0 + EVT_SHIFT*PingPongProtocol_IN_ping
};


static void setState(MrPong* self, etInt16 new_state) {
10002384:	b580      	push	{r7, lr}
10002386:	b082      	sub	sp, #8
10002388:	af00      	add	r7, sp, #0
1000238a:	6078      	str	r0, [r7, #4]
1000238c:	1c0a      	adds	r2, r1, #0
1000238e:	1cbb      	adds	r3, r7, #2
10002390:	801a      	strh	r2, [r3, #0]
	self->state = new_state;
10002392:	687b      	ldr	r3, [r7, #4]
10002394:	1cba      	adds	r2, r7, #2
10002396:	8812      	ldrh	r2, [r2, #0]
10002398:	809a      	strh	r2, [r3, #4]
}
1000239a:	46bd      	mov	sp, r7
1000239c:	b002      	add	sp, #8
1000239e:	bd80      	pop	{r7, pc}

100023a0 <getState>:

static etInt16 getState(MrPong* self) {
100023a0:	b580      	push	{r7, lr}
100023a2:	b082      	sub	sp, #8
100023a4:	af00      	add	r7, sp, #0
100023a6:	6078      	str	r0, [r7, #4]
	return self->state;
100023a8:	687b      	ldr	r3, [r7, #4]
100023aa:	889b      	ldrh	r3, [r3, #4]
100023ac:	b21b      	sxth	r3, r3
}
100023ae:	1c18      	adds	r0, r3, #0
100023b0:	46bd      	mov	sp, r7
100023b2:	b002      	add	sp, #8
100023b4:	bd80      	pop	{r7, pc}
100023b6:	46c0      	nop			; (mov r8, r8)

100023b8 <action_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0>:

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0(MrPong* self, const InterfaceItemBase* ifitem, PingPongData* data) {
100023b8:	b580      	push	{r7, lr}
100023ba:	b084      	sub	sp, #16
100023bc:	af00      	add	r7, sp, #0
100023be:	60f8      	str	r0, [r7, #12]
100023c0:	60b9      	str	r1, [r7, #8]
100023c2:	607a      	str	r2, [r7, #4]
	p0_pong(data);
100023c4:	68fb      	ldr	r3, [r7, #12]
100023c6:	681b      	ldr	r3, [r3, #0]
100023c8:	1c1a      	adds	r2, r3, #0
100023ca:	687b      	ldr	r3, [r7, #4]
100023cc:	1c10      	adds	r0, r2, #0
100023ce:	1c19      	adds	r1, r3, #0
100023d0:	f000 f990 	bl	100026f4 <PingPongProtocolPort_pong>
}
100023d4:	46bd      	mov	sp, r7
100023d6:	b004      	add	sp, #16
100023d8:	bd80      	pop	{r7, pc}
100023da:	46c0      	nop			; (mov r8, r8)

100023dc <exitTo>:
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(MrPong* self, etInt16 current__et, etInt16 to) {
100023dc:	b580      	push	{r7, lr}
100023de:	b082      	sub	sp, #8
100023e0:	af00      	add	r7, sp, #0
100023e2:	6078      	str	r0, [r7, #4]
100023e4:	1cbb      	adds	r3, r7, #2
100023e6:	8019      	strh	r1, [r3, #0]
100023e8:	1c3b      	adds	r3, r7, #0
100023ea:	801a      	strh	r2, [r3, #0]
	while (current__et!=to) {
100023ec:	e010      	b.n	10002410 <exitTo+0x34>
		switch (current__et) {
100023ee:	1cbb      	adds	r3, r7, #2
100023f0:	2100      	movs	r1, #0
100023f2:	5e5b      	ldrsh	r3, [r3, r1]
100023f4:	2b02      	cmp	r3, #2
100023f6:	d106      	bne.n	10002406 <exitTo+0x2a>
			case STATE_running:
				self->history[STATE_TOP] = STATE_running;
100023f8:	687b      	ldr	r3, [r7, #4]
100023fa:	2202      	movs	r2, #2
100023fc:	811a      	strh	r2, [r3, #8]
				current__et = STATE_TOP;
100023fe:	1cbb      	adds	r3, r7, #2
10002400:	2201      	movs	r2, #1
10002402:	801a      	strh	r2, [r3, #0]
				break;
10002404:	e004      	b.n	10002410 <exitTo+0x34>
10002406:	1cbb      	adds	r3, r7, #2
10002408:	1cba      	adds	r2, r7, #2
1000240a:	8812      	ldrh	r2, [r2, #0]
1000240c:	801a      	strh	r2, [r3, #0]
			default:
				/* should not occur */
				break;
1000240e:	46c0      	nop			; (mov r8, r8)
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(MrPong* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
10002410:	1cba      	adds	r2, r7, #2
10002412:	1c3b      	adds	r3, r7, #0
10002414:	2100      	movs	r1, #0
10002416:	5e52      	ldrsh	r2, [r2, r1]
10002418:	2100      	movs	r1, #0
1000241a:	5e5b      	ldrsh	r3, [r3, r1]
1000241c:	429a      	cmp	r2, r3
1000241e:	d1e6      	bne.n	100023ee <exitTo+0x12>
			default:
				/* should not occur */
				break;
		}
	}
}
10002420:	46bd      	mov	sp, r7
10002422:	b002      	add	sp, #8
10002424:	bd80      	pop	{r7, pc}
10002426:	46c0      	nop			; (mov r8, r8)

10002428 <executeTransitionChain>:
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(MrPong* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
10002428:	b580      	push	{r7, lr}
1000242a:	b086      	sub	sp, #24
1000242c:	af00      	add	r7, sp, #0
1000242e:	60f8      	str	r0, [r7, #12]
10002430:	60b9      	str	r1, [r7, #8]
10002432:	607a      	str	r2, [r7, #4]
10002434:	603b      	str	r3, [r7, #0]
	switch (chain__et) {
10002436:	68bb      	ldr	r3, [r7, #8]
10002438:	2b01      	cmp	r3, #1
1000243a:	d002      	beq.n	10002442 <executeTransitionChain+0x1a>
1000243c:	2b02      	cmp	r3, #2
1000243e:	d002      	beq.n	10002446 <executeTransitionChain+0x1e>
10002440:	e00d      	b.n	1000245e <executeTransitionChain+0x36>
		case CHAIN_TRANS_INITIAL_TO__running:
		{
			return STATE_running;
10002442:	2302      	movs	r3, #2
10002444:	e00d      	b.n	10002462 <executeTransitionChain+0x3a>
		}
		case CHAIN_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0:
		{
			PingPongData* data = ((PingPongData*) generic_data__et);
10002446:	683b      	ldr	r3, [r7, #0]
10002448:	617b      	str	r3, [r7, #20]
			action_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0(self, ifitem, data);
1000244a:	68f9      	ldr	r1, [r7, #12]
1000244c:	687a      	ldr	r2, [r7, #4]
1000244e:	697b      	ldr	r3, [r7, #20]
10002450:	1c08      	adds	r0, r1, #0
10002452:	1c11      	adds	r1, r2, #0
10002454:	1c1a      	adds	r2, r3, #0
10002456:	f7ff ffaf 	bl	100023b8 <action_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0>
			return STATE_running;
1000245a:	2302      	movs	r3, #2
1000245c:	e001      	b.n	10002462 <executeTransitionChain+0x3a>
		}
			default:
				/* should not occur */
				break;
1000245e:	46c0      	nop			; (mov r8, r8)
	}
	return NO_STATE;
10002460:	2300      	movs	r3, #0
10002462:	b21b      	sxth	r3, r3
}
10002464:	1c18      	adds	r0, r3, #0
10002466:	46bd      	mov	sp, r7
10002468:	b006      	add	sp, #24
1000246a:	bd80      	pop	{r7, pc}

1000246c <enterHistory>:
/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(MrPong* self, etInt16 state__et) {
1000246c:	b580      	push	{r7, lr}
1000246e:	b084      	sub	sp, #16
10002470:	af00      	add	r7, sp, #0
10002472:	6078      	str	r0, [r7, #4]
10002474:	1c0a      	adds	r2, r1, #0
10002476:	1cbb      	adds	r3, r7, #2
10002478:	801a      	strh	r2, [r3, #0]
	boolean skip_entry__et = ET_FALSE;
1000247a:	1c3b      	adds	r3, r7, #0
1000247c:	330f      	adds	r3, #15
1000247e:	2200      	movs	r2, #0
10002480:	701a      	strb	r2, [r3, #0]
	if (state__et >= STATE_MAX) {
10002482:	1cbb      	adds	r3, r7, #2
10002484:	2200      	movs	r2, #0
10002486:	5e9b      	ldrsh	r3, [r3, r2]
10002488:	2b02      	cmp	r3, #2
1000248a:	dd09      	ble.n	100024a0 <enterHistory+0x34>
		state__et = (etInt16) (state__et - STATE_MAX);
1000248c:	1cbb      	adds	r3, r7, #2
1000248e:	881b      	ldrh	r3, [r3, #0]
10002490:	3b03      	subs	r3, #3
10002492:	b29a      	uxth	r2, r3
10002494:	1cbb      	adds	r3, r7, #2
10002496:	801a      	strh	r2, [r3, #0]
		skip_entry__et = ET_TRUE;
10002498:	1c3b      	adds	r3, r7, #0
1000249a:	330f      	adds	r3, #15
1000249c:	2201      	movs	r2, #1
1000249e:	701a      	strb	r2, [r3, #0]
	}
	while (ET_TRUE) {
		switch (state__et) {
100024a0:	1cbb      	adds	r3, r7, #2
100024a2:	2200      	movs	r2, #0
100024a4:	5e9b      	ldrsh	r3, [r3, r2]
100024a6:	2b01      	cmp	r3, #1
100024a8:	d004      	beq.n	100024b4 <enterHistory+0x48>
100024aa:	2b02      	cmp	r3, #2
100024ac:	d107      	bne.n	100024be <enterHistory+0x52>
			case STATE_running:
				/* in leaf state: return state id */
				return STATE_running;
100024ae:	2302      	movs	r3, #2
100024b0:	b21b      	sxth	r3, r3
100024b2:	e00a      	b.n	100024ca <enterHistory+0x5e>
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
100024b4:	1cbb      	adds	r3, r7, #2
100024b6:	687a      	ldr	r2, [r7, #4]
100024b8:	8912      	ldrh	r2, [r2, #8]
100024ba:	801a      	strh	r2, [r3, #0]
				break;
100024bc:	e000      	b.n	100024c0 <enterHistory+0x54>
			default:
				/* should not occur */
				break;
100024be:	46c0      	nop			; (mov r8, r8)
		}
		skip_entry__et = ET_FALSE;
100024c0:	1c3b      	adds	r3, r7, #0
100024c2:	330f      	adds	r3, #15
100024c4:	2200      	movs	r2, #0
100024c6:	701a      	strb	r2, [r3, #0]
	}
100024c8:	e7ea      	b.n	100024a0 <enterHistory+0x34>
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}
100024ca:	1c18      	adds	r0, r3, #0
100024cc:	46bd      	mov	sp, r7
100024ce:	b004      	add	sp, #16
100024d0:	bd80      	pop	{r7, pc}
100024d2:	46c0      	nop			; (mov r8, r8)

100024d4 <MrPong_executeInitTransition>:

static void MrPong_executeInitTransition(MrPong* self) {
100024d4:	b590      	push	{r4, r7, lr}
100024d6:	b085      	sub	sp, #20
100024d8:	af00      	add	r7, sp, #0
100024da:	6078      	str	r0, [r7, #4]
	int chain__et = CHAIN_TRANS_INITIAL_TO__running;
100024dc:	2301      	movs	r3, #1
100024de:	60fb      	str	r3, [r7, #12]
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
100024e0:	1c3c      	adds	r4, r7, #0
100024e2:	340a      	adds	r4, #10
100024e4:	687a      	ldr	r2, [r7, #4]
100024e6:	68fb      	ldr	r3, [r7, #12]
100024e8:	1c10      	adds	r0, r2, #0
100024ea:	1c19      	adds	r1, r3, #0
100024ec:	2200      	movs	r2, #0
100024ee:	2300      	movs	r3, #0
100024f0:	f7ff ff9a 	bl	10002428 <executeTransitionChain>
100024f4:	1c03      	adds	r3, r0, #0
100024f6:	8023      	strh	r3, [r4, #0]
	next__et = enterHistory(self, next__et);
100024f8:	1c3c      	adds	r4, r7, #0
100024fa:	340a      	adds	r4, #10
100024fc:	687a      	ldr	r2, [r7, #4]
100024fe:	1c3b      	adds	r3, r7, #0
10002500:	330a      	adds	r3, #10
10002502:	2100      	movs	r1, #0
10002504:	5e5b      	ldrsh	r3, [r3, r1]
10002506:	1c10      	adds	r0, r2, #0
10002508:	1c19      	adds	r1, r3, #0
1000250a:	f7ff ffaf 	bl	1000246c <enterHistory>
1000250e:	1c03      	adds	r3, r0, #0
10002510:	8023      	strh	r3, [r4, #0]
	setState(self, next__et);
10002512:	687a      	ldr	r2, [r7, #4]
10002514:	1c3b      	adds	r3, r7, #0
10002516:	330a      	adds	r3, #10
10002518:	2100      	movs	r1, #0
1000251a:	5e5b      	ldrsh	r3, [r3, r1]
1000251c:	1c10      	adds	r0, r2, #0
1000251e:	1c19      	adds	r1, r3, #0
10002520:	f7ff ff30 	bl	10002384 <setState>
}
10002524:	46bd      	mov	sp, r7
10002526:	b005      	add	sp, #20
10002528:	bd90      	pop	{r4, r7, pc}
1000252a:	46c0      	nop			; (mov r8, r8)

1000252c <MrPong_receiveEvent>:

/* receiveEvent contains the main implementation of the FSM */
static void MrPong_receiveEvent(MrPong* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
1000252c:	b590      	push	{r4, r7, lr}
1000252e:	b089      	sub	sp, #36	; 0x24
10002530:	af00      	add	r7, sp, #0
10002532:	60f8      	str	r0, [r7, #12]
10002534:	60b9      	str	r1, [r7, #8]
10002536:	607a      	str	r2, [r7, #4]
10002538:	603b      	str	r3, [r7, #0]
	int trigger__et = ifitem->localId + EVT_SHIFT*evt;
1000253a:	68bb      	ldr	r3, [r7, #8]
1000253c:	7a5b      	ldrb	r3, [r3, #9]
1000253e:	1c1a      	adds	r2, r3, #0
10002540:	687b      	ldr	r3, [r7, #4]
10002542:	2164      	movs	r1, #100	; 0x64
10002544:	434b      	muls	r3, r1
10002546:	18d3      	adds	r3, r2, r3
10002548:	617b      	str	r3, [r7, #20]
	int chain__et = NOT_CAUGHT;
1000254a:	2300      	movs	r3, #0
1000254c:	61fb      	str	r3, [r7, #28]
	etInt16 catching_state__et = NO_STATE;
1000254e:	1c3b      	adds	r3, r7, #0
10002550:	331a      	adds	r3, #26
10002552:	2200      	movs	r2, #0
10002554:	801a      	strh	r2, [r3, #0]
	((void)trigger__et);	/* avoids unused warning */
	
	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
10002556:	68b9      	ldr	r1, [r7, #8]
10002558:	687a      	ldr	r2, [r7, #4]
1000255a:	683b      	ldr	r3, [r7, #0]
1000255c:	1c08      	adds	r0, r1, #0
1000255e:	1c11      	adds	r1, r2, #0
10002560:	1c1a      	adds	r2, r3, #0
10002562:	f004 f90f 	bl	10006784 <handleSystemEvent>
10002566:	1c03      	adds	r3, r0, #0
10002568:	2b00      	cmp	r3, #0
1000256a:	d113      	bne.n	10002594 <MrPong_receiveEvent+0x68>
		switch (getState(self)) {
1000256c:	68fb      	ldr	r3, [r7, #12]
1000256e:	1c18      	adds	r0, r3, #0
10002570:	f7ff ff16 	bl	100023a0 <getState>
10002574:	1c03      	adds	r3, r0, #0
10002576:	2b02      	cmp	r3, #2
10002578:	d10b      	bne.n	10002592 <MrPong_receiveEvent+0x66>
			case STATE_running:
				switch(trigger__et) {
1000257a:	697b      	ldr	r3, [r7, #20]
1000257c:	2bc9      	cmp	r3, #201	; 0xc9
1000257e:	d106      	bne.n	1000258e <MrPong_receiveEvent+0x62>
						case TRIG_p0__ping:
							{
								chain__et = CHAIN_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0;
10002580:	2302      	movs	r3, #2
10002582:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
10002584:	1c3b      	adds	r3, r7, #0
10002586:	331a      	adds	r3, #26
10002588:	2201      	movs	r2, #1
1000258a:	801a      	strh	r2, [r3, #0]
							}
						break;
1000258c:	e000      	b.n	10002590 <MrPong_receiveEvent+0x64>
						default:
							/* should not occur */
							break;
1000258e:	46c0      	nop			; (mov r8, r8)
				}
				break;
10002590:	e000      	b.n	10002594 <MrPong_receiveEvent+0x68>
			default:
				/* should not occur */
				break;
10002592:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (chain__et != NOT_CAUGHT) {
10002594:	69fb      	ldr	r3, [r7, #28]
10002596:	2b00      	cmp	r3, #0
10002598:	d02f      	beq.n	100025fa <MrPong_receiveEvent+0xce>
		exitTo(self, getState(self), catching_state__et);
1000259a:	68fb      	ldr	r3, [r7, #12]
1000259c:	1c18      	adds	r0, r3, #0
1000259e:	f7ff feff 	bl	100023a0 <getState>
100025a2:	1c03      	adds	r3, r0, #0
100025a4:	1c1a      	adds	r2, r3, #0
100025a6:	68f9      	ldr	r1, [r7, #12]
100025a8:	1c3b      	adds	r3, r7, #0
100025aa:	331a      	adds	r3, #26
100025ac:	2000      	movs	r0, #0
100025ae:	5e1b      	ldrsh	r3, [r3, r0]
100025b0:	1c08      	adds	r0, r1, #0
100025b2:	1c11      	adds	r1, r2, #0
100025b4:	1c1a      	adds	r2, r3, #0
100025b6:	f7ff ff11 	bl	100023dc <exitTo>
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
100025ba:	1c3c      	adds	r4, r7, #0
100025bc:	3412      	adds	r4, #18
100025be:	68f8      	ldr	r0, [r7, #12]
100025c0:	69f9      	ldr	r1, [r7, #28]
100025c2:	68ba      	ldr	r2, [r7, #8]
100025c4:	683b      	ldr	r3, [r7, #0]
100025c6:	f7ff ff2f 	bl	10002428 <executeTransitionChain>
100025ca:	1c03      	adds	r3, r0, #0
100025cc:	8023      	strh	r3, [r4, #0]
			next__et = enterHistory(self, next__et);
100025ce:	1c3c      	adds	r4, r7, #0
100025d0:	3412      	adds	r4, #18
100025d2:	68fa      	ldr	r2, [r7, #12]
100025d4:	1c3b      	adds	r3, r7, #0
100025d6:	3312      	adds	r3, #18
100025d8:	2100      	movs	r1, #0
100025da:	5e5b      	ldrsh	r3, [r3, r1]
100025dc:	1c10      	adds	r0, r2, #0
100025de:	1c19      	adds	r1, r3, #0
100025e0:	f7ff ff44 	bl	1000246c <enterHistory>
100025e4:	1c03      	adds	r3, r0, #0
100025e6:	8023      	strh	r3, [r4, #0]
			setState(self, next__et);
100025e8:	68fa      	ldr	r2, [r7, #12]
100025ea:	1c3b      	adds	r3, r7, #0
100025ec:	3312      	adds	r3, #18
100025ee:	2000      	movs	r0, #0
100025f0:	5e1b      	ldrsh	r3, [r3, r0]
100025f2:	1c10      	adds	r0, r2, #0
100025f4:	1c19      	adds	r1, r3, #0
100025f6:	f7ff fec5 	bl	10002384 <setState>
		}
	}
}
100025fa:	46bd      	mov	sp, r7
100025fc:	b009      	add	sp, #36	; 0x24
100025fe:	bd90      	pop	{r4, r7, pc}

10002600 <MrPong_init>:

void MrPong_init(MrPong* self){
10002600:	b580      	push	{r7, lr}
10002602:	b084      	sub	sp, #16
10002604:	af00      	add	r7, sp, #0
10002606:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MrPong", "init")
	self->state = STATE_TOP;
10002608:	687b      	ldr	r3, [r7, #4]
1000260a:	2201      	movs	r2, #1
1000260c:	809a      	strh	r2, [r3, #4]
	{
		int i;
		for (i=0; i<MRPONG_HISTORY_SIZE; ++i)
1000260e:	2300      	movs	r3, #0
10002610:	60fb      	str	r3, [r7, #12]
10002612:	e008      	b.n	10002626 <MrPong_init+0x26>
			self->history[i] = NO_STATE;
10002614:	687a      	ldr	r2, [r7, #4]
10002616:	68fb      	ldr	r3, [r7, #12]
10002618:	005b      	lsls	r3, r3, #1
1000261a:	18d3      	adds	r3, r2, r3
1000261c:	2200      	movs	r2, #0
1000261e:	80da      	strh	r2, [r3, #6]
void MrPong_init(MrPong* self){
	ET_MSC_LOGGER_SYNC_ENTRY("MrPong", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<MRPONG_HISTORY_SIZE; ++i)
10002620:	68fb      	ldr	r3, [r7, #12]
10002622:	3301      	adds	r3, #1
10002624:	60fb      	str	r3, [r7, #12]
10002626:	68fb      	ldr	r3, [r7, #12]
10002628:	2b01      	cmp	r3, #1
1000262a:	ddf3      	ble.n	10002614 <MrPong_init+0x14>
			self->history[i] = NO_STATE;
	}
	MrPong_executeInitTransition(self);
1000262c:	687b      	ldr	r3, [r7, #4]
1000262e:	1c18      	adds	r0, r3, #0
10002630:	f7ff ff50 	bl	100024d4 <MrPong_executeInitTransition>
	ET_MSC_LOGGER_SYNC_EXIT
}
10002634:	46bd      	mov	sp, r7
10002636:	b004      	add	sp, #16
10002638:	bd80      	pop	{r7, pc}
1000263a:	46c0      	nop			; (mov r8, r8)

1000263c <MrPong_receiveMessage>:


void MrPong_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
1000263c:	b580      	push	{r7, lr}
1000263e:	b084      	sub	sp, #16
10002640:	af00      	add	r7, sp, #0
10002642:	60f8      	str	r0, [r7, #12]
10002644:	60b9      	str	r1, [r7, #8]
10002646:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MrPong", "_receiveMessage")
	
	MrPong_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));
10002648:	687b      	ldr	r3, [r7, #4]
1000264a:	88db      	ldrh	r3, [r3, #6]
1000264c:	b21a      	sxth	r2, r3
1000264e:	687b      	ldr	r3, [r7, #4]
10002650:	3308      	adds	r3, #8
10002652:	68f8      	ldr	r0, [r7, #12]
10002654:	68b9      	ldr	r1, [r7, #8]
10002656:	f7ff ff69 	bl	1000252c <MrPong_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
1000265a:	46bd      	mov	sp, r7
1000265c:	b004      	add	sp, #16
1000265e:	bd80      	pop	{r7, pc}

10002660 <PingPongData_getData>:
#include "PingPongData_Utils.h"



/*--------------------- operations ---------------------*/
void PingPongData_getData(PingPongData* self, uint8* p) {
10002660:	b580      	push	{r7, lr}
10002662:	b084      	sub	sp, #16
10002664:	af00      	add	r7, sp, #0
10002666:	6078      	str	r0, [r7, #4]
10002668:	6039      	str	r1, [r7, #0]
	uint8 i;
	for(i=0;i<10;i++){*p++=data[i];};
1000266a:	1c3b      	adds	r3, r7, #0
1000266c:	330f      	adds	r3, #15
1000266e:	2200      	movs	r2, #0
10002670:	701a      	strb	r2, [r3, #0]
10002672:	e010      	b.n	10002696 <PingPongData_getData+0x36>
10002674:	1c3b      	adds	r3, r7, #0
10002676:	330f      	adds	r3, #15
10002678:	781b      	ldrb	r3, [r3, #0]
1000267a:	687a      	ldr	r2, [r7, #4]
1000267c:	5cd2      	ldrb	r2, [r2, r3]
1000267e:	683b      	ldr	r3, [r7, #0]
10002680:	701a      	strb	r2, [r3, #0]
10002682:	683b      	ldr	r3, [r7, #0]
10002684:	3301      	adds	r3, #1
10002686:	603b      	str	r3, [r7, #0]
10002688:	1c3b      	adds	r3, r7, #0
1000268a:	330f      	adds	r3, #15
1000268c:	1c3a      	adds	r2, r7, #0
1000268e:	320f      	adds	r2, #15
10002690:	7812      	ldrb	r2, [r2, #0]
10002692:	3201      	adds	r2, #1
10002694:	701a      	strb	r2, [r3, #0]
10002696:	1c3b      	adds	r3, r7, #0
10002698:	330f      	adds	r3, #15
1000269a:	781b      	ldrb	r3, [r3, #0]
1000269c:	2b09      	cmp	r3, #9
1000269e:	d9e9      	bls.n	10002674 <PingPongData_getData+0x14>
}
100026a0:	46bd      	mov	sp, r7
100026a2:	b004      	add	sp, #16
100026a4:	bd80      	pop	{r7, pc}
100026a6:	46c0      	nop			; (mov r8, r8)

100026a8 <PingPongData_initData>:
void PingPongData_initData(PingPongData* self) {
100026a8:	b580      	push	{r7, lr}
100026aa:	b084      	sub	sp, #16
100026ac:	af00      	add	r7, sp, #0
100026ae:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<10;i++){data[i]=i;};
100026b0:	2300      	movs	r3, #0
100026b2:	60fb      	str	r3, [r7, #12]
100026b4:	e008      	b.n	100026c8 <PingPongData_initData+0x20>
100026b6:	68fb      	ldr	r3, [r7, #12]
100026b8:	b2da      	uxtb	r2, r3
100026ba:	6879      	ldr	r1, [r7, #4]
100026bc:	68fb      	ldr	r3, [r7, #12]
100026be:	18cb      	adds	r3, r1, r3
100026c0:	701a      	strb	r2, [r3, #0]
100026c2:	68fb      	ldr	r3, [r7, #12]
100026c4:	3301      	adds	r3, #1
100026c6:	60fb      	str	r3, [r7, #12]
100026c8:	68fb      	ldr	r3, [r7, #12]
100026ca:	2b09      	cmp	r3, #9
100026cc:	ddf3      	ble.n	100026b6 <PingPongData_initData+0xe>
}
100026ce:	46bd      	mov	sp, r7
100026d0:	b004      	add	sp, #16
100026d2:	bd80      	pop	{r7, pc}

100026d4 <PingPongData_deepCopy>:

void PingPongData_deepCopy(PingPongData* source, PingPongData* target) {
100026d4:	b580      	push	{r7, lr}
100026d6:	b082      	sub	sp, #8
100026d8:	af00      	add	r7, sp, #0
100026da:	6078      	str	r0, [r7, #4]
100026dc:	6039      	str	r1, [r7, #0]
	memcpy(target, source, sizeof(PingPongData));
100026de:	683a      	ldr	r2, [r7, #0]
100026e0:	687b      	ldr	r3, [r7, #4]
100026e2:	1c10      	adds	r0, r2, #0
100026e4:	1c19      	adds	r1, r3, #0
100026e6:	220a      	movs	r2, #10
100026e8:	f006 faba 	bl	10008c60 <memcpy>
}
100026ec:	46bd      	mov	sp, r7
100026ee:	b002      	add	sp, #8
100026f0:	bd80      	pop	{r7, pc}
100026f2:	46c0      	nop			; (mov r8, r8)

100026f4 <PingPongProtocolPort_pong>:
#include "PingPongProtocol_Utils.h"


/*--------------------- port methods */

void PingPongProtocolPort_pong(const PingPongProtocolPort* self, PingPongData* data__et) {
100026f4:	b580      	push	{r7, lr}
100026f6:	b082      	sub	sp, #8
100026f8:	af00      	add	r7, sp, #0
100026fa:	6078      	str	r0, [r7, #4]
100026fc:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolPort", "pong")
		etPort_sendMessage(self, PingPongProtocol_OUT_pong, sizeof(PingPongData), data__et);
100026fe:	687a      	ldr	r2, [r7, #4]
10002700:	683b      	ldr	r3, [r7, #0]
10002702:	1c10      	adds	r0, r2, #0
10002704:	2101      	movs	r1, #1
10002706:	220a      	movs	r2, #10
10002708:	f004 f848 	bl	1000679c <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
1000270c:	46bd      	mov	sp, r7
1000270e:	b002      	add	sp, #8
10002710:	bd80      	pop	{r7, pc}
10002712:	46c0      	nop			; (mov r8, r8)

10002714 <PingPongProtocolReplPort_pong_broadcast>:

void PingPongProtocolReplPort_pong_broadcast(const PingPongProtocolReplPort* self, PingPongData* data__et) {
10002714:	b580      	push	{r7, lr}
10002716:	b084      	sub	sp, #16
10002718:	af00      	add	r7, sp, #0
1000271a:	6078      	str	r0, [r7, #4]
1000271c:	6039      	str	r1, [r7, #0]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolReplPort", "pong")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
1000271e:	2300      	movs	r3, #0
10002720:	60fb      	str	r3, [r7, #12]
10002722:	e00e      	b.n	10002742 <PingPongProtocolReplPort_pong_broadcast+0x2e>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_OUT_pong, sizeof(PingPongData), data__et);
10002724:	687b      	ldr	r3, [r7, #4]
10002726:	685a      	ldr	r2, [r3, #4]
10002728:	68fb      	ldr	r3, [r7, #12]
1000272a:	011b      	lsls	r3, r3, #4
1000272c:	18d3      	adds	r3, r2, r3
1000272e:	1c1a      	adds	r2, r3, #0
10002730:	683b      	ldr	r3, [r7, #0]
10002732:	1c10      	adds	r0, r2, #0
10002734:	2101      	movs	r1, #1
10002736:	220a      	movs	r2, #10
10002738:	f004 f830 	bl	1000679c <etPort_sendMessage>
}

void PingPongProtocolReplPort_pong_broadcast(const PingPongProtocolReplPort* self, PingPongData* data__et) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolReplPort", "pong")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
1000273c:	68fb      	ldr	r3, [r7, #12]
1000273e:	3301      	adds	r3, #1
10002740:	60fb      	str	r3, [r7, #12]
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	881b      	ldrh	r3, [r3, #0]
10002746:	b21a      	sxth	r2, r3
10002748:	68fb      	ldr	r3, [r7, #12]
1000274a:	429a      	cmp	r2, r3
1000274c:	dcea      	bgt.n	10002724 <PingPongProtocolReplPort_pong_broadcast+0x10>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_OUT_pong, sizeof(PingPongData), data__et);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000274e:	46bd      	mov	sp, r7
10002750:	b004      	add	sp, #16
10002752:	bd80      	pop	{r7, pc}

10002754 <PingPongProtocolReplPort_pong>:

void PingPongProtocolReplPort_pong(const PingPongProtocolReplPort* self, int idx__et, PingPongData* data__et) {
10002754:	b580      	push	{r7, lr}
10002756:	b084      	sub	sp, #16
10002758:	af00      	add	r7, sp, #0
1000275a:	60f8      	str	r0, [r7, #12]
1000275c:	60b9      	str	r1, [r7, #8]
1000275e:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolReplPort", "pong")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
10002760:	68bb      	ldr	r3, [r7, #8]
10002762:	2b00      	cmp	r3, #0
10002764:	db11      	blt.n	1000278a <PingPongProtocolReplPort_pong+0x36>
10002766:	68fb      	ldr	r3, [r7, #12]
10002768:	881b      	ldrh	r3, [r3, #0]
1000276a:	b21a      	sxth	r2, r3
1000276c:	68bb      	ldr	r3, [r7, #8]
1000276e:	429a      	cmp	r2, r3
10002770:	dd0b      	ble.n	1000278a <PingPongProtocolReplPort_pong+0x36>
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PingPongProtocol_OUT_pong, sizeof(PingPongData), data__et);
10002772:	68fb      	ldr	r3, [r7, #12]
10002774:	685a      	ldr	r2, [r3, #4]
10002776:	68bb      	ldr	r3, [r7, #8]
10002778:	011b      	lsls	r3, r3, #4
1000277a:	18d3      	adds	r3, r2, r3
1000277c:	1c1a      	adds	r2, r3, #0
1000277e:	687b      	ldr	r3, [r7, #4]
10002780:	1c10      	adds	r0, r2, #0
10002782:	2101      	movs	r1, #1
10002784:	220a      	movs	r2, #10
10002786:	f004 f809 	bl	1000679c <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000278a:	46bd      	mov	sp, r7
1000278c:	b004      	add	sp, #16
1000278e:	bd80      	pop	{r7, pc}

10002790 <PingPongProtocolReplPort_getReplication>:

etInt32 PingPongProtocolReplPort_getReplication(const PingPongProtocolReplPort* self) {
10002790:	b580      	push	{r7, lr}
10002792:	b082      	sub	sp, #8
10002794:	af00      	add	r7, sp, #0
10002796:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002798:	687b      	ldr	r3, [r7, #4]
1000279a:	881b      	ldrh	r3, [r3, #0]
1000279c:	b21b      	sxth	r3, r3
}
1000279e:	1c18      	adds	r0, r3, #0
100027a0:	46bd      	mov	sp, r7
100027a2:	b002      	add	sp, #8
100027a4:	bd80      	pop	{r7, pc}
100027a6:	46c0      	nop			; (mov r8, r8)

100027a8 <PingPongProtocolConjPort_ping>:



void PingPongProtocolConjPort_ping(const PingPongProtocolConjPort* self, PingPongData* data__et) {
100027a8:	b580      	push	{r7, lr}
100027aa:	b082      	sub	sp, #8
100027ac:	af00      	add	r7, sp, #0
100027ae:	6078      	str	r0, [r7, #4]
100027b0:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjPort", "ping")
		etPort_sendMessage(self, PingPongProtocol_IN_ping, sizeof(PingPongData), data__et);
100027b2:	687a      	ldr	r2, [r7, #4]
100027b4:	683b      	ldr	r3, [r7, #0]
100027b6:	1c10      	adds	r0, r2, #0
100027b8:	2102      	movs	r1, #2
100027ba:	220a      	movs	r2, #10
100027bc:	f003 ffee 	bl	1000679c <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
100027c0:	46bd      	mov	sp, r7
100027c2:	b002      	add	sp, #8
100027c4:	bd80      	pop	{r7, pc}
100027c6:	46c0      	nop			; (mov r8, r8)

100027c8 <PingPongProtocolConjReplPort_ping_broadcast>:

void PingPongProtocolConjReplPort_ping_broadcast(const PingPongProtocolConjReplPort* self, PingPongData* data__et) {
100027c8:	b580      	push	{r7, lr}
100027ca:	b084      	sub	sp, #16
100027cc:	af00      	add	r7, sp, #0
100027ce:	6078      	str	r0, [r7, #4]
100027d0:	6039      	str	r1, [r7, #0]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjReplPort", "ping")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100027d2:	2300      	movs	r3, #0
100027d4:	60fb      	str	r3, [r7, #12]
100027d6:	e00e      	b.n	100027f6 <PingPongProtocolConjReplPort_ping_broadcast+0x2e>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_IN_ping, sizeof(PingPongData), data__et);
100027d8:	687b      	ldr	r3, [r7, #4]
100027da:	685a      	ldr	r2, [r3, #4]
100027dc:	68fb      	ldr	r3, [r7, #12]
100027de:	011b      	lsls	r3, r3, #4
100027e0:	18d3      	adds	r3, r2, r3
100027e2:	1c1a      	adds	r2, r3, #0
100027e4:	683b      	ldr	r3, [r7, #0]
100027e6:	1c10      	adds	r0, r2, #0
100027e8:	2102      	movs	r1, #2
100027ea:	220a      	movs	r2, #10
100027ec:	f003 ffd6 	bl	1000679c <etPort_sendMessage>
}

void PingPongProtocolConjReplPort_ping_broadcast(const PingPongProtocolConjReplPort* self, PingPongData* data__et) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjReplPort", "ping")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100027f0:	68fb      	ldr	r3, [r7, #12]
100027f2:	3301      	adds	r3, #1
100027f4:	60fb      	str	r3, [r7, #12]
100027f6:	687b      	ldr	r3, [r7, #4]
100027f8:	881b      	ldrh	r3, [r3, #0]
100027fa:	b21a      	sxth	r2, r3
100027fc:	68fb      	ldr	r3, [r7, #12]
100027fe:	429a      	cmp	r2, r3
10002800:	dcea      	bgt.n	100027d8 <PingPongProtocolConjReplPort_ping_broadcast+0x10>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_IN_ping, sizeof(PingPongData), data__et);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10002802:	46bd      	mov	sp, r7
10002804:	b004      	add	sp, #16
10002806:	bd80      	pop	{r7, pc}

10002808 <PingPongProtocolConjReplPort_ping>:

void PingPongProtocolConjReplPort_ping(const PingPongProtocolConjReplPort* self, int idx__et, PingPongData* data__et) {
10002808:	b580      	push	{r7, lr}
1000280a:	b084      	sub	sp, #16
1000280c:	af00      	add	r7, sp, #0
1000280e:	60f8      	str	r0, [r7, #12]
10002810:	60b9      	str	r1, [r7, #8]
10002812:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjReplPort", "ping")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
10002814:	68bb      	ldr	r3, [r7, #8]
10002816:	2b00      	cmp	r3, #0
10002818:	db11      	blt.n	1000283e <PingPongProtocolConjReplPort_ping+0x36>
1000281a:	68fb      	ldr	r3, [r7, #12]
1000281c:	881b      	ldrh	r3, [r3, #0]
1000281e:	b21a      	sxth	r2, r3
10002820:	68bb      	ldr	r3, [r7, #8]
10002822:	429a      	cmp	r2, r3
10002824:	dd0b      	ble.n	1000283e <PingPongProtocolConjReplPort_ping+0x36>
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PingPongProtocol_IN_ping, sizeof(PingPongData), data__et);
10002826:	68fb      	ldr	r3, [r7, #12]
10002828:	685a      	ldr	r2, [r3, #4]
1000282a:	68bb      	ldr	r3, [r7, #8]
1000282c:	011b      	lsls	r3, r3, #4
1000282e:	18d3      	adds	r3, r2, r3
10002830:	1c1a      	adds	r2, r3, #0
10002832:	687b      	ldr	r3, [r7, #4]
10002834:	1c10      	adds	r0, r2, #0
10002836:	2102      	movs	r1, #2
10002838:	220a      	movs	r2, #10
1000283a:	f003 ffaf 	bl	1000679c <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000283e:	46bd      	mov	sp, r7
10002840:	b004      	add	sp, #16
10002842:	bd80      	pop	{r7, pc}

10002844 <PingPongProtocolConjReplPort_getReplication>:

etInt32 PingPongProtocolConjReplPort_getReplication(const PingPongProtocolConjReplPort* self) {
10002844:	b580      	push	{r7, lr}
10002846:	b082      	sub	sp, #8
10002848:	af00      	add	r7, sp, #0
1000284a:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
1000284c:	687b      	ldr	r3, [r7, #4]
1000284e:	881b      	ldrh	r3, [r3, #0]
10002850:	b21b      	sxth	r3, r3
}
10002852:	1c18      	adds	r0, r3, #0
10002854:	46bd      	mov	sp, r7
10002856:	b002      	add	sp, #8
10002858:	bd80      	pop	{r7, pc}
1000285a:	46c0      	nop			; (mov r8, r8)

1000285c <PingPongTop_init>:

/* interface item IDs */
/* empty enum not generated */


void PingPongTop_init(PingPongTop* self){
1000285c:	b580      	push	{r7, lr}
1000285e:	b082      	sub	sp, #8
10002860:	af00      	add	r7, sp, #0
10002862:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongTop", "init")
	ET_MSC_LOGGER_SYNC_EXIT
}
10002864:	46bd      	mov	sp, r7
10002866:	b002      	add	sp, #8
10002868:	bd80      	pop	{r7, pc}
1000286a:	46c0      	nop			; (mov r8, r8)

1000286c <PingPongTop_receiveMessage>:


void PingPongTop_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
1000286c:	b580      	push	{r7, lr}
1000286e:	b084      	sub	sp, #16
10002870:	af00      	add	r7, sp, #0
10002872:	60f8      	str	r0, [r7, #12]
10002874:	60b9      	str	r1, [r7, #8]
10002876:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongTop", "_receiveMessage")
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002878:	46bd      	mov	sp, r7
1000287a:	b004      	add	sp, #16
1000287c:	bd80      	pop	{r7, pc}
1000287e:	46c0      	nop			; (mov r8, r8)

10002880 <MsgDispatcher_SimpleMainLoop_poll>:


/**
 * generated execute function for all cyclic execute calls for the async or datadriven actor instances of thread "SimpleMainLoop"
 */
static void MsgDispatcher_SimpleMainLoop_poll(void){
10002880:	b580      	push	{r7, lr}
10002882:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_SimpleMainLoop", "execute")
	ATimingService_execute((void*)&_PingPong_LogSys_PingPong_subSysRef_timingService);
10002884:	4b02      	ldr	r3, [pc, #8]	; (10002890 <MsgDispatcher_SimpleMainLoop_poll+0x10>)
10002886:	1c18      	adds	r0, r3, #0
10002888:	f7fe ff00 	bl	1000168c <ATimingService_execute>
	ET_MSC_LOGGER_SYNC_EXIT
}
1000288c:	46bd      	mov	sp, r7
1000288e:	bd80      	pop	{r7, pc}
10002890:	20001184 	.word	0x20001184

10002894 <MsgDispatcher_SimpleMainLoop_receiveMessage>:

/**
 * generated dispatch function for all messages for the thread "SimpleMainLoop"
 */
static etBool MsgDispatcher_SimpleMainLoop_receiveMessage(const etMessage* msg){
10002894:	b580      	push	{r7, lr}
10002896:	b082      	sub	sp, #8
10002898:	af00      	add	r7, sp, #0
1000289a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_SimpleMainLoop", "receiveMessage")
	switch(msg->address){
1000289c:	687b      	ldr	r3, [r7, #4]
1000289e:	889b      	ldrh	r3, [r3, #4]
100028a0:	b21b      	sxth	r3, r3
100028a2:	2b33      	cmp	r3, #51	; 0x33
100028a4:	d900      	bls.n	100028a8 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x14>
100028a6:	e0b8      	b.n	10002a1a <MsgDispatcher_SimpleMainLoop_receiveMessage+0x186>
100028a8:	009a      	lsls	r2, r3, #2
100028aa:	4b63      	ldr	r3, [pc, #396]	; (10002a38 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1a4>)
100028ac:	18d3      	adds	r3, r2, r3
100028ae:	681b      	ldr	r3, [r3, #0]
100028b0:	469f      	mov	pc, r3
	
		case MESSAGESERVICE_ADDRESS:
			if (msg->evtID == etSystemProtocol_IN_poll) {
100028b2:	687b      	ldr	r3, [r7, #4]
100028b4:	88db      	ldrh	r3, [r3, #6]
100028b6:	b21b      	sxth	r3, r3
100028b8:	2b01      	cmp	r3, #1
100028ba:	d102      	bne.n	100028c2 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x2e>
				MsgDispatcher_SimpleMainLoop_poll();
100028bc:	f7ff ffe0 	bl	10002880 <MsgDispatcher_SimpleMainLoop_poll>
			}
			else
			if (msg->evtID == etSystemProtocol_IN_terminate)
				return ET_FALSE;
			break;
100028c0:	e0b4      	b.n	10002a2c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x198>
		case MESSAGESERVICE_ADDRESS:
			if (msg->evtID == etSystemProtocol_IN_poll) {
				MsgDispatcher_SimpleMainLoop_poll();
			}
			else
			if (msg->evtID == etSystemProtocol_IN_terminate)
100028c2:	687b      	ldr	r3, [r7, #4]
100028c4:	88db      	ldrh	r3, [r3, #6]
100028c6:	b21b      	sxth	r3, r3
100028c8:	2b02      	cmp	r3, #2
100028ca:	d000      	beq.n	100028ce <MsgDispatcher_SimpleMainLoop_receiveMessage+0x3a>
100028cc:	e0ae      	b.n	10002a2c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x198>
				return ET_FALSE;
100028ce:	2300      	movs	r3, #0
100028d0:	e0ae      	b.n	10002a30 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19c>
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong */
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong/ref0 */
		case 3+BASE_ADDRESS:
			MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.p0, msg);
100028d2:	495a      	ldr	r1, [pc, #360]	; (10002a3c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1a8>)
100028d4:	4a5a      	ldr	r2, [pc, #360]	; (10002a40 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1ac>)
100028d6:	687b      	ldr	r3, [r7, #4]
100028d8:	1c08      	adds	r0, r1, #0
100028da:	1c11      	adds	r1, r2, #0
100028dc:	1c1a      	adds	r2, r3, #0
100028de:	f7ff fd3f 	bl	10002360 <MrPing_receiveMessage>
			break;
100028e2:	e0a4      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		case 4+BASE_ADDRESS:
			MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.Led0, msg);
100028e4:	4955      	ldr	r1, [pc, #340]	; (10002a3c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1a8>)
100028e6:	4a57      	ldr	r2, [pc, #348]	; (10002a44 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1b0>)
100028e8:	687b      	ldr	r3, [r7, #4]
100028ea:	1c08      	adds	r0, r1, #0
100028ec:	1c11      	adds	r1, r2, #0
100028ee:	1c1a      	adds	r2, r3, #0
100028f0:	f7ff fd36 	bl	10002360 <MrPing_receiveMessage>
			break;
100028f4:	e09b      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		case 5+BASE_ADDRESS:
			MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.Led1, msg);
100028f6:	4951      	ldr	r1, [pc, #324]	; (10002a3c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1a8>)
100028f8:	4a53      	ldr	r2, [pc, #332]	; (10002a48 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1b4>)
100028fa:	687b      	ldr	r3, [r7, #4]
100028fc:	1c08      	adds	r0, r1, #0
100028fe:	1c11      	adds	r1, r2, #0
10002900:	1c1a      	adds	r2, r3, #0
10002902:	f7ff fd2d 	bl	10002360 <MrPing_receiveMessage>
			break;
10002906:	e092      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		case 6+BASE_ADDRESS:
			MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.uart, msg);
10002908:	494c      	ldr	r1, [pc, #304]	; (10002a3c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1a8>)
1000290a:	4a50      	ldr	r2, [pc, #320]	; (10002a4c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1b8>)
1000290c:	687b      	ldr	r3, [r7, #4]
1000290e:	1c08      	adds	r0, r1, #0
10002910:	1c11      	adds	r1, r2, #0
10002912:	1c1a      	adds	r2, r3, #0
10002914:	f7ff fd24 	bl	10002360 <MrPing_receiveMessage>
			break;
10002918:	e089      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		case 7+BASE_ADDRESS:
			switch (msg->evtID){
1000291a:	687b      	ldr	r3, [r7, #4]
1000291c:	88db      	ldrh	r3, [r3, #6]
1000291e:	b21b      	sxth	r3, r3
10002920:	2b01      	cmp	r3, #1
10002922:	d106      	bne.n	10002932 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x9e>
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.timer,msg,(void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,MrPing_receiveMessage);
10002924:	484a      	ldr	r0, [pc, #296]	; (10002a50 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1bc>)
10002926:	6879      	ldr	r1, [r7, #4]
10002928:	4a44      	ldr	r2, [pc, #272]	; (10002a3c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1a8>)
1000292a:	4b4a      	ldr	r3, [pc, #296]	; (10002a54 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1c0>)
1000292c:	f7ff f8fe 	bl	10001b2c <PTimerConjPort_timeout_receiveHandler>
					break;
10002930:	e008      	b.n	10002944 <MsgDispatcher_SimpleMainLoop_receiveMessage+0xb0>
				default: MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.timer, msg);
10002932:	4942      	ldr	r1, [pc, #264]	; (10002a3c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1a8>)
10002934:	4a46      	ldr	r2, [pc, #280]	; (10002a50 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1bc>)
10002936:	687b      	ldr	r3, [r7, #4]
10002938:	1c08      	adds	r0, r1, #0
1000293a:	1c11      	adds	r1, r2, #0
1000293c:	1c1a      	adds	r2, r3, #0
1000293e:	f7ff fd0f 	bl	10002360 <MrPing_receiveMessage>
					break;
10002942:	46c0      	nop			; (mov r8, r8)
			}
			break;
10002944:	e073      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong/ref1 */
		case 9+BASE_ADDRESS:
			MrPong_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref1,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref1_const.p0, msg);
10002946:	4944      	ldr	r1, [pc, #272]	; (10002a58 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1c4>)
10002948:	4a44      	ldr	r2, [pc, #272]	; (10002a5c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1c8>)
1000294a:	687b      	ldr	r3, [r7, #4]
1000294c:	1c08      	adds	r0, r1, #0
1000294e:	1c11      	adds	r1, r2, #0
10002950:	1c1a      	adds	r2, r3, #0
10002952:	f7ff fe73 	bl	1000263c <MrPong_receiveMessage>
			break;
10002956:	e06a      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong/dimmer */
		case 11+BASE_ADDRESS:
			ADimmer_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer_const.pwm, msg);
10002958:	4941      	ldr	r1, [pc, #260]	; (10002a60 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1cc>)
1000295a:	4a42      	ldr	r2, [pc, #264]	; (10002a64 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1d0>)
1000295c:	687b      	ldr	r3, [r7, #4]
1000295e:	1c08      	adds	r0, r1, #0
10002960:	1c11      	adds	r1, r2, #0
10002962:	1c1a      	adds	r2, r3, #0
10002964:	f7ff fb0e 	bl	10001f84 <ADimmer_receiveMessage>
			break;
10002968:	e061      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		case 12+BASE_ADDRESS:
			switch (msg->evtID){
1000296a:	687b      	ldr	r3, [r7, #4]
1000296c:	88db      	ldrh	r3, [r3, #6]
1000296e:	b21b      	sxth	r3, r3
10002970:	2b01      	cmp	r3, #1
10002972:	d106      	bne.n	10002982 <MsgDispatcher_SimpleMainLoop_receiveMessage+0xee>
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer_const.timer,msg,(void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer,ADimmer_receiveMessage);
10002974:	483c      	ldr	r0, [pc, #240]	; (10002a68 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1d4>)
10002976:	6879      	ldr	r1, [r7, #4]
10002978:	4a39      	ldr	r2, [pc, #228]	; (10002a60 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1cc>)
1000297a:	4b3c      	ldr	r3, [pc, #240]	; (10002a6c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1d8>)
1000297c:	f7ff f8d6 	bl	10001b2c <PTimerConjPort_timeout_receiveHandler>
					break;
10002980:	e008      	b.n	10002994 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x100>
				default: ADimmer_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer_const.timer, msg);
10002982:	4937      	ldr	r1, [pc, #220]	; (10002a60 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1cc>)
10002984:	4a38      	ldr	r2, [pc, #224]	; (10002a68 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1d4>)
10002986:	687b      	ldr	r3, [r7, #4]
10002988:	1c08      	adds	r0, r1, #0
1000298a:	1c11      	adds	r1, r2, #0
1000298c:	1c1a      	adds	r2, r3, #0
1000298e:	f7ff faf9 	bl	10001f84 <ADimmer_receiveMessage>
					break;
10002992:	46c0      	nop			; (mov r8, r8)
			}
			break;
10002994:	e04b      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong/dimmer2 */
		case 14+BASE_ADDRESS:
			ADimmer_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2_const.pwm, msg);
10002996:	4936      	ldr	r1, [pc, #216]	; (10002a70 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1dc>)
10002998:	4a36      	ldr	r2, [pc, #216]	; (10002a74 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1e0>)
1000299a:	687b      	ldr	r3, [r7, #4]
1000299c:	1c08      	adds	r0, r1, #0
1000299e:	1c11      	adds	r1, r2, #0
100029a0:	1c1a      	adds	r2, r3, #0
100029a2:	f7ff faef 	bl	10001f84 <ADimmer_receiveMessage>
			break;
100029a6:	e042      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		case 15+BASE_ADDRESS:
			switch (msg->evtID){
100029a8:	687b      	ldr	r3, [r7, #4]
100029aa:	88db      	ldrh	r3, [r3, #6]
100029ac:	b21b      	sxth	r3, r3
100029ae:	2b01      	cmp	r3, #1
100029b0:	d106      	bne.n	100029c0 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x12c>
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2_const.timer,msg,(void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2,ADimmer_receiveMessage);
100029b2:	4831      	ldr	r0, [pc, #196]	; (10002a78 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1e4>)
100029b4:	6879      	ldr	r1, [r7, #4]
100029b6:	4a2e      	ldr	r2, [pc, #184]	; (10002a70 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1dc>)
100029b8:	4b2c      	ldr	r3, [pc, #176]	; (10002a6c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1d8>)
100029ba:	f7ff f8b7 	bl	10001b2c <PTimerConjPort_timeout_receiveHandler>
					break;
100029be:	e008      	b.n	100029d2 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x13e>
				default: ADimmer_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2_const.timer, msg);
100029c0:	492b      	ldr	r1, [pc, #172]	; (10002a70 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1dc>)
100029c2:	4a2d      	ldr	r2, [pc, #180]	; (10002a78 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1e4>)
100029c4:	687b      	ldr	r3, [r7, #4]
100029c6:	1c08      	adds	r0, r1, #0
100029c8:	1c11      	adds	r1, r2, #0
100029ca:	1c1a      	adds	r2, r3, #0
100029cc:	f7ff fada 	bl	10001f84 <ADimmer_receiveMessage>
					break;
100029d0:	46c0      	nop			; (mov r8, r8)
			}
			break;
100029d2:	e02c      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/timingService */
		case 17+BASE_ADDRESS:
			ATimingService_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_timingService,&_PingPong_LogSys_PingPong_subSysRef_timingService_const.timer.ports[0].port, msg);
100029d4:	4b29      	ldr	r3, [pc, #164]	; (10002a7c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1e8>)
100029d6:	685b      	ldr	r3, [r3, #4]
100029d8:	1c1a      	adds	r2, r3, #0
100029da:	4929      	ldr	r1, [pc, #164]	; (10002a80 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1ec>)
100029dc:	687b      	ldr	r3, [r7, #4]
100029de:	1c08      	adds	r0, r1, #0
100029e0:	1c11      	adds	r1, r2, #0
100029e2:	1c1a      	adds	r2, r3, #0
100029e4:	f7fe fe40 	bl	10001668 <ATimingService_receiveMessage>
		break;
100029e8:	e021      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		case 18+BASE_ADDRESS:
			ATimingService_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_timingService,&_PingPong_LogSys_PingPong_subSysRef_timingService_const.timer.ports[1].port, msg);
100029ea:	4b24      	ldr	r3, [pc, #144]	; (10002a7c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1e8>)
100029ec:	685b      	ldr	r3, [r3, #4]
100029ee:	3310      	adds	r3, #16
100029f0:	1c1a      	adds	r2, r3, #0
100029f2:	4923      	ldr	r1, [pc, #140]	; (10002a80 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1ec>)
100029f4:	687b      	ldr	r3, [r7, #4]
100029f6:	1c08      	adds	r0, r1, #0
100029f8:	1c11      	adds	r1, r2, #0
100029fa:	1c1a      	adds	r2, r3, #0
100029fc:	f7fe fe34 	bl	10001668 <ATimingService_receiveMessage>
		break;
10002a00:	e015      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		case 19+BASE_ADDRESS:
			ATimingService_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_timingService,&_PingPong_LogSys_PingPong_subSysRef_timingService_const.timer.ports[2].port, msg);
10002a02:	4b1e      	ldr	r3, [pc, #120]	; (10002a7c <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1e8>)
10002a04:	685b      	ldr	r3, [r3, #4]
10002a06:	3320      	adds	r3, #32
10002a08:	1c1a      	adds	r2, r3, #0
10002a0a:	491d      	ldr	r1, [pc, #116]	; (10002a80 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1ec>)
10002a0c:	687b      	ldr	r3, [r7, #4]
10002a0e:	1c08      	adds	r0, r1, #0
10002a10:	1c11      	adds	r1, r2, #0
10002a12:	1c1a      	adds	r2, r3, #0
10002a14:	f7fe fe28 	bl	10001668 <ATimingService_receiveMessage>
		break;
10002a18:	e009      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
		
		default:
			etLogger_logErrorF("MessageService_SimpleMainLoop_receiveMessage: address %d does not exist ", msg->address);
10002a1a:	687b      	ldr	r3, [r7, #4]
10002a1c:	889b      	ldrh	r3, [r3, #4]
10002a1e:	b21b      	sxth	r3, r3
10002a20:	4a18      	ldr	r2, [pc, #96]	; (10002a84 <MsgDispatcher_SimpleMainLoop_receiveMessage+0x1f0>)
10002a22:	1c10      	adds	r0, r2, #0
10002a24:	1c19      	adds	r1, r3, #0
10002a26:	f003 fdd1 	bl	100065cc <etLogger_logErrorF>
			break;
10002a2a:	e000      	b.n	10002a2e <MsgDispatcher_SimpleMainLoop_receiveMessage+0x19a>
				MsgDispatcher_SimpleMainLoop_poll();
			}
			else
			if (msg->evtID == etSystemProtocol_IN_terminate)
				return ET_FALSE;
			break;
10002a2c:	46c0      	nop			; (mov r8, r8)
		default:
			etLogger_logErrorF("MessageService_SimpleMainLoop_receiveMessage: address %d does not exist ", msg->address);
			break;
	}
	ET_MSC_LOGGER_SYNC_EXIT
	return ET_TRUE;
10002a2e:	2301      	movs	r3, #1
}
10002a30:	1c18      	adds	r0, r3, #0
10002a32:	46bd      	mov	sp, r7
10002a34:	b002      	add	sp, #8
10002a36:	bd80      	pop	{r7, pc}
10002a38:	10008ef4 	.word	0x10008ef4
10002a3c:	20001128 	.word	0x20001128
10002a40:	10008df8 	.word	0x10008df8
10002a44:	10008e04 	.word	0x10008e04
10002a48:	10008e10 	.word	0x10008e10
10002a4c:	10008e1c 	.word	0x10008e1c
10002a50:	10008e28 	.word	0x10008e28
10002a54:	10002361 	.word	0x10002361
10002a58:	20001150 	.word	0x20001150
10002a5c:	10008e34 	.word	0x10008e34
10002a60:	2000115c 	.word	0x2000115c
10002a64:	10008e40 	.word	0x10008e40
10002a68:	10008e4c 	.word	0x10008e4c
10002a6c:	10001f85 	.word	0x10001f85
10002a70:	20001170 	.word	0x20001170
10002a74:	10008e58 	.word	0x10008e58
10002a78:	10008e64 	.word	0x10008e64
10002a7c:	10008ea0 	.word	0x10008ea0
10002a80:	20001184 	.word	0x20001184
10002a84:	10008ea8 	.word	0x10008ea8

10002a88 <XMC2Go_PingPong_subSysRef_initMessageServices>:

/* include instances for all classes */
#include "XMC2Go_PingPong_subSysRef_Inst.h"
#include "XMC2Go_PingPong_subSysRef_Disp.h"

static void XMC2Go_PingPong_subSysRef_initMessageServices(void) {
10002a88:	b5b0      	push	{r4, r5, r7, lr}
10002a8a:	b088      	sub	sp, #32
10002a8c:	af06      	add	r7, sp, #24
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "initMessageServices")
	{
		etTime interval;
		
		/* initialization of all message services */
		interval.sec = 0;
10002a8e:	1c3b      	adds	r3, r7, #0
10002a90:	2200      	movs	r2, #0
10002a92:	601a      	str	r2, [r3, #0]
		interval.nSec = 10000000;
10002a94:	1c3b      	adds	r3, r7, #0
10002a96:	4a0d      	ldr	r2, [pc, #52]	; (10002acc <XMC2Go_PingPong_subSysRef_initMessageServices+0x44>)
10002a98:	605a      	str	r2, [r3, #4]
		etMessageService_init(
10002a9a:	480d      	ldr	r0, [pc, #52]	; (10002ad0 <XMC2Go_PingPong_subSysRef_initMessageServices+0x48>)
10002a9c:	490d      	ldr	r1, [pc, #52]	; (10002ad4 <XMC2Go_PingPong_subSysRef_initMessageServices+0x4c>)
10002a9e:	23c8      	movs	r3, #200	; 0xc8
10002aa0:	005b      	lsls	r3, r3, #1
10002aa2:	9300      	str	r3, [sp, #0]
10002aa4:	2303      	movs	r3, #3
10002aa6:	9301      	str	r3, [sp, #4]
10002aa8:	1c3a      	adds	r2, r7, #0
10002aaa:	2308      	movs	r3, #8
10002aac:	466c      	mov	r4, sp
10002aae:	18e3      	adds	r3, r4, r3
10002ab0:	ca30      	ldmia	r2!, {r4, r5}
10002ab2:	c330      	stmia	r3!, {r4, r5}
10002ab4:	4b08      	ldr	r3, [pc, #32]	; (10002ad8 <XMC2Go_PingPong_subSysRef_initMessageServices+0x50>)
10002ab6:	9304      	str	r3, [sp, #16]
10002ab8:	2302      	movs	r3, #2
10002aba:	9305      	str	r3, [sp, #20]
10002abc:	220a      	movs	r2, #10
10002abe:	2320      	movs	r3, #32
10002ac0:	f003 feb0 	bl	10006824 <etMessageService_init>
			EXECMODE_MIXED);
			
	}
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002ac4:	46bd      	mov	sp, r7
10002ac6:	b002      	add	sp, #8
10002ac8:	bdb0      	pop	{r4, r5, r7, pc}
10002aca:	46c0      	nop			; (mov r8, r8)
10002acc:	00989680 	.word	0x00989680
10002ad0:	20000a60 	.word	0x20000a60
10002ad4:	20000920 	.word	0x20000920
10002ad8:	10002895 	.word	0x10002895

10002adc <XMC2Go_PingPong_subSysRef_startMessageServices>:

static void XMC2Go_PingPong_subSysRef_startMessageServices(void) {
10002adc:	b580      	push	{r7, lr}
10002ade:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "startMessageServices")
	
	etMessageService_start(&msgService_SimpleMainLoop);
10002ae0:	4b02      	ldr	r3, [pc, #8]	; (10002aec <XMC2Go_PingPong_subSysRef_startMessageServices+0x10>)
10002ae2:	1c18      	adds	r0, r3, #0
10002ae4:	f003 ff02 	bl	100068ec <etMessageService_start>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002ae8:	46bd      	mov	sp, r7
10002aea:	bd80      	pop	{r7, pc}
10002aec:	20000a60 	.word	0x20000a60

10002af0 <XMC2Go_PingPong_subSysRef_stopMessageServices>:

static void XMC2Go_PingPong_subSysRef_stopMessageServices(void) {
10002af0:	b580      	push	{r7, lr}
10002af2:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "stopMessageServices")
	
	etMessageService_stop(&msgService_SimpleMainLoop);
10002af4:	4b02      	ldr	r3, [pc, #8]	; (10002b00 <XMC2Go_PingPong_subSysRef_stopMessageServices+0x10>)
10002af6:	1c18      	adds	r0, r3, #0
10002af8:	f003 ff14 	bl	10006924 <etMessageService_stop>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002afc:	46bd      	mov	sp, r7
10002afe:	bd80      	pop	{r7, pc}
10002b00:	20000a60 	.word	0x20000a60

10002b04 <XMC2Go_PingPong_subSysRef_destroyMessageServices>:

static void XMC2Go_PingPong_subSysRef_destroyMessageServices(void) {
10002b04:	b580      	push	{r7, lr}
10002b06:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "destroyMessageServices")
	
	etMessageService_destroy(&msgService_SimpleMainLoop);
10002b08:	4b02      	ldr	r3, [pc, #8]	; (10002b14 <XMC2Go_PingPong_subSysRef_destroyMessageServices+0x10>)
10002b0a:	1c18      	adds	r0, r3, #0
10002b0c:	f003 ff32 	bl	10006974 <etMessageService_destroy>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002b10:	46bd      	mov	sp, r7
10002b12:	bd80      	pop	{r7, pc}
10002b14:	20000a60 	.word	0x20000a60

10002b18 <XMC2Go_PingPong_subSysRef_init>:

void XMC2Go_PingPong_subSysRef_init(void) {
10002b18:	b580      	push	{r7, lr}
10002b1a:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "init")
	etLogger_logInfoF("%s_init", XMC2Go_PingPong_subSysRefInst.name);
10002b1c:	4b07      	ldr	r3, [pc, #28]	; (10002b3c <XMC2Go_PingPong_subSysRef_init+0x24>)
10002b1e:	681b      	ldr	r3, [r3, #0]
10002b20:	4a07      	ldr	r2, [pc, #28]	; (10002b40 <XMC2Go_PingPong_subSysRef_init+0x28>)
10002b22:	1c10      	adds	r0, r2, #0
10002b24:	1c19      	adds	r1, r3, #0
10002b26:	f003 fd61 	bl	100065ec <etLogger_logInfoF>
	
	/* construct all actors */
	XMC2Go_PingPong_subSysRef_constructActorInstances();
10002b2a:	f000 f85d 	bl	10002be8 <XMC2Go_PingPong_subSysRef_constructActorInstances>
	
	/* initialization of all message services */
	XMC2Go_PingPong_subSysRef_initMessageServices();
10002b2e:	f7ff ffab 	bl	10002a88 <XMC2Go_PingPong_subSysRef_initMessageServices>
	
	/* init all actors */
	XMC2Go_PingPong_subSysRef_initActorInstances();
10002b32:	f000 f85d 	bl	10002bf0 <XMC2Go_PingPong_subSysRef_initActorInstances>
	
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002b36:	46bd      	mov	sp, r7
10002b38:	bd80      	pop	{r7, pc}
10002b3a:	46c0      	nop			; (mov r8, r8)
10002b3c:	20001120 	.word	0x20001120
10002b40:	10008fc4 	.word	0x10008fc4

10002b44 <XMC2Go_PingPong_subSysRef_start>:

void XMC2Go_PingPong_subSysRef_start(void) {
10002b44:	b580      	push	{r7, lr}
10002b46:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "start")
	etLogger_logInfoF("%s_start", XMC2Go_PingPong_subSysRefInst.name);
10002b48:	4b05      	ldr	r3, [pc, #20]	; (10002b60 <XMC2Go_PingPong_subSysRef_start+0x1c>)
10002b4a:	681b      	ldr	r3, [r3, #0]
10002b4c:	4a05      	ldr	r2, [pc, #20]	; (10002b64 <XMC2Go_PingPong_subSysRef_start+0x20>)
10002b4e:	1c10      	adds	r0, r2, #0
10002b50:	1c19      	adds	r1, r3, #0
10002b52:	f003 fd4b 	bl	100065ec <etLogger_logInfoF>
	XMC2Go_PingPong_subSysRef_startMessageServices();
10002b56:	f7ff ffc1 	bl	10002adc <XMC2Go_PingPong_subSysRef_startMessageServices>
	ET_MSC_LOGGER_SYNC_EXIT
}
10002b5a:	46bd      	mov	sp, r7
10002b5c:	bd80      	pop	{r7, pc}
10002b5e:	46c0      	nop			; (mov r8, r8)
10002b60:	20001120 	.word	0x20001120
10002b64:	10008fcc 	.word	0x10008fcc

10002b68 <XMC2Go_PingPong_subSysRef_run>:

void XMC2Go_PingPong_subSysRef_run(etBool runAsTest) {
10002b68:	b580      	push	{r7, lr}
10002b6a:	b082      	sub	sp, #8
10002b6c:	af00      	add	r7, sp, #0
10002b6e:	1c02      	adds	r2, r0, #0
10002b70:	1dfb      	adds	r3, r7, #7
10002b72:	701a      	strb	r2, [r3, #0]
		}
	}
	
	ET_MSC_LOGGER_SYNC_EXIT
#endif	
}
10002b74:	46bd      	mov	sp, r7
10002b76:	b002      	add	sp, #8
10002b78:	bd80      	pop	{r7, pc}
10002b7a:	46c0      	nop			; (mov r8, r8)

10002b7c <XMC2Go_PingPong_subSysRef_stop>:

void XMC2Go_PingPong_subSysRef_stop(void){
10002b7c:	b580      	push	{r7, lr}
10002b7e:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "stop")
	etLogger_logInfoF("%s_stop", XMC2Go_PingPong_subSysRefInst.name);
10002b80:	4b05      	ldr	r3, [pc, #20]	; (10002b98 <XMC2Go_PingPong_subSysRef_stop+0x1c>)
10002b82:	681b      	ldr	r3, [r3, #0]
10002b84:	4a05      	ldr	r2, [pc, #20]	; (10002b9c <XMC2Go_PingPong_subSysRef_stop+0x20>)
10002b86:	1c10      	adds	r0, r2, #0
10002b88:	1c19      	adds	r1, r3, #0
10002b8a:	f003 fd2f 	bl	100065ec <etLogger_logInfoF>

	XMC2Go_PingPong_subSysRef_stopMessageServices();
10002b8e:	f7ff ffaf 	bl	10002af0 <XMC2Go_PingPong_subSysRef_stopMessageServices>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002b92:	46bd      	mov	sp, r7
10002b94:	bd80      	pop	{r7, pc}
10002b96:	46c0      	nop			; (mov r8, r8)
10002b98:	20001120 	.word	0x20001120
10002b9c:	10008fd8 	.word	0x10008fd8

10002ba0 <XMC2Go_PingPong_subSysRef_destroy>:

void XMC2Go_PingPong_subSysRef_destroy(void){
10002ba0:	b580      	push	{r7, lr}
10002ba2:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "destroy")
	etLogger_logInfoF("%s_destroy", XMC2Go_PingPong_subSysRefInst.name);
10002ba4:	4b05      	ldr	r3, [pc, #20]	; (10002bbc <XMC2Go_PingPong_subSysRef_destroy+0x1c>)
10002ba6:	681b      	ldr	r3, [r3, #0]
10002ba8:	4a05      	ldr	r2, [pc, #20]	; (10002bc0 <XMC2Go_PingPong_subSysRef_destroy+0x20>)
10002baa:	1c10      	adds	r0, r2, #0
10002bac:	1c19      	adds	r1, r3, #0
10002bae:	f003 fd1d 	bl	100065ec <etLogger_logInfoF>
	
	XMC2Go_PingPong_subSysRef_destroyMessageServices();
10002bb2:	f7ff ffa7 	bl	10002b04 <XMC2Go_PingPong_subSysRef_destroyMessageServices>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002bb6:	46bd      	mov	sp, r7
10002bb8:	bd80      	pop	{r7, pc}
10002bba:	46c0      	nop			; (mov r8, r8)
10002bbc:	20001120 	.word	0x20001120
10002bc0:	10008fe0 	.word	0x10008fe0

10002bc4 <XMC2Go_PingPong_subSysRef_shutdown>:

void XMC2Go_PingPong_subSysRef_shutdown(void){
10002bc4:	b580      	push	{r7, lr}
10002bc6:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "shutdown")
	etLogger_logInfoF("%s_shutdown", XMC2Go_PingPong_subSysRefInst.name);
10002bc8:	4b05      	ldr	r3, [pc, #20]	; (10002be0 <XMC2Go_PingPong_subSysRef_shutdown+0x1c>)
10002bca:	681b      	ldr	r3, [r3, #0]
10002bcc:	4a05      	ldr	r2, [pc, #20]	; (10002be4 <XMC2Go_PingPong_subSysRef_shutdown+0x20>)
10002bce:	1c10      	adds	r0, r2, #0
10002bd0:	1c19      	adds	r1, r3, #0
10002bd2:	f003 fd0b 	bl	100065ec <etLogger_logInfoF>
	
	XMC2Go_PingPong_subSysRefInst.shutdownRequest = 1;
10002bd6:	4b02      	ldr	r3, [pc, #8]	; (10002be0 <XMC2Go_PingPong_subSysRef_shutdown+0x1c>)
10002bd8:	2201      	movs	r2, #1
10002bda:	605a      	str	r2, [r3, #4]
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002bdc:	46bd      	mov	sp, r7
10002bde:	bd80      	pop	{r7, pc}
10002be0:	20001120 	.word	0x20001120
10002be4:	10008fec 	.word	0x10008fec

10002be8 <XMC2Go_PingPong_subSysRef_constructActorInstances>:


static void XMC2Go_PingPong_subSysRef_constructActorInstances(void){
10002be8:	b580      	push	{r7, lr}
10002bea:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "constructActorInstances")
	
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002bec:	46bd      	mov	sp, r7
10002bee:	bd80      	pop	{r7, pc}

10002bf0 <XMC2Go_PingPong_subSysRef_initActorInstances>:

static void XMC2Go_PingPong_subSysRef_initActorInstances(void){
10002bf0:	b580      	push	{r7, lr}
10002bf2:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "initActorInstances")
	
	PingPongTop_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong);
10002bf4:	4b0c      	ldr	r3, [pc, #48]	; (10002c28 <XMC2Go_PingPong_subSysRef_initActorInstances+0x38>)
10002bf6:	1c18      	adds	r0, r3, #0
10002bf8:	f7ff fe30 	bl	1000285c <PingPongTop_init>
	MrPing_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0);
10002bfc:	4b0b      	ldr	r3, [pc, #44]	; (10002c2c <XMC2Go_PingPong_subSysRef_initActorInstances+0x3c>)
10002bfe:	1c18      	adds	r0, r3, #0
10002c00:	f7ff fb90 	bl	10002324 <MrPing_init>
	MrPong_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref1);
10002c04:	4b0a      	ldr	r3, [pc, #40]	; (10002c30 <XMC2Go_PingPong_subSysRef_initActorInstances+0x40>)
10002c06:	1c18      	adds	r0, r3, #0
10002c08:	f7ff fcfa 	bl	10002600 <MrPong_init>
	ADimmer_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer);
10002c0c:	4b09      	ldr	r3, [pc, #36]	; (10002c34 <XMC2Go_PingPong_subSysRef_initActorInstances+0x44>)
10002c0e:	1c18      	adds	r0, r3, #0
10002c10:	f7ff f99a 	bl	10001f48 <ADimmer_init>
	ADimmer_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2);
10002c14:	4b08      	ldr	r3, [pc, #32]	; (10002c38 <XMC2Go_PingPong_subSysRef_initActorInstances+0x48>)
10002c16:	1c18      	adds	r0, r3, #0
10002c18:	f7ff f996 	bl	10001f48 <ADimmer_init>
	ATimingService_init(&_PingPong_LogSys_PingPong_subSysRef_timingService);
10002c1c:	4b07      	ldr	r3, [pc, #28]	; (10002c3c <XMC2Go_PingPong_subSysRef_initActorInstances+0x4c>)
10002c1e:	1c18      	adds	r0, r3, #0
10002c20:	f7fe fd04 	bl	1000162c <ATimingService_init>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002c24:	46bd      	mov	sp, r7
10002c26:	bd80      	pop	{r7, pc}
10002c28:	20000acc 	.word	0x20000acc
10002c2c:	20001128 	.word	0x20001128
10002c30:	20001150 	.word	0x20001150
10002c34:	2000115c 	.word	0x2000115c
10002c38:	20001170 	.word	0x20001170
10002c3c:	20001184 	.word	0x20001184

10002c40 <main>:
/**
 * main function
 * creates component and starts and stops the lifecycle
 */

int main(int argc, char** argv) {
10002c40:	b580      	push	{r7, lr}
10002c42:	b084      	sub	sp, #16
10002c44:	af00      	add	r7, sp, #0
10002c46:	6078      	str	r0, [r7, #4]
10002c48:	6039      	str	r1, [r7, #0]
	etBool runAsTest = ET_FALSE;
10002c4a:	1c3b      	adds	r3, r7, #0
10002c4c:	330f      	adds	r3, #15
10002c4e:	2200      	movs	r2, #0
10002c50:	701a      	strb	r2, [r3, #0]

	if (argc>1 && strcmp(argv[1], "-headless")==0)
10002c52:	687b      	ldr	r3, [r7, #4]
10002c54:	2b01      	cmp	r3, #1
10002c56:	dd0e      	ble.n	10002c76 <main+0x36>
10002c58:	683b      	ldr	r3, [r7, #0]
10002c5a:	3304      	adds	r3, #4
10002c5c:	681a      	ldr	r2, [r3, #0]
10002c5e:	4b20      	ldr	r3, [pc, #128]	; (10002ce0 <main+0xa0>)
10002c60:	1c10      	adds	r0, r2, #0
10002c62:	1c19      	adds	r1, r3, #0
10002c64:	f006 f89e 	bl	10008da4 <strcmp>
10002c68:	1c03      	adds	r3, r0, #0
10002c6a:	2b00      	cmp	r3, #0
10002c6c:	d103      	bne.n	10002c76 <main+0x36>
		runAsTest = ET_TRUE;
10002c6e:	1c3b      	adds	r3, r7, #0
10002c70:	330f      	adds	r3, #15
10002c72:	2201      	movs	r2, #1
10002c74:	701a      	strb	r2, [r3, #0]
	if (argc>1 && strcmp(argv[1], "-run_as_test")==0)
10002c76:	687b      	ldr	r3, [r7, #4]
10002c78:	2b01      	cmp	r3, #1
10002c7a:	dd0e      	ble.n	10002c9a <main+0x5a>
10002c7c:	683b      	ldr	r3, [r7, #0]
10002c7e:	3304      	adds	r3, #4
10002c80:	681a      	ldr	r2, [r3, #0]
10002c82:	4b18      	ldr	r3, [pc, #96]	; (10002ce4 <main+0xa4>)
10002c84:	1c10      	adds	r0, r2, #0
10002c86:	1c19      	adds	r1, r3, #0
10002c88:	f006 f88c 	bl	10008da4 <strcmp>
10002c8c:	1c03      	adds	r3, r0, #0
10002c8e:	2b00      	cmp	r3, #0
10002c90:	d103      	bne.n	10002c9a <main+0x5a>
		runAsTest = ET_TRUE;
10002c92:	1c3b      	adds	r3, r7, #0
10002c94:	330f      	adds	r3, #15
10002c96:	2201      	movs	r2, #1
10002c98:	701a      	strb	r2, [r3, #0]

	etUserEntry(); /* platform specific */
10002c9a:	f003 fccf 	bl	1000663c <etUserEntry>
	
	etLogger_logInfo("***   T H E   B E G I N   ***");
10002c9e:	4b12      	ldr	r3, [pc, #72]	; (10002ce8 <main+0xa8>)
10002ca0:	1c18      	adds	r0, r3, #0
10002ca2:	f003 fc8b 	bl	100065bc <etLogger_logInfo>
	ET_MSC_LOGGER_OPEN("main");

	/* startup sequence  of lifecycle */
	XMC2Go_PingPong_subSysRef_init(); 		/* lifecycle init */
10002ca6:	f7ff ff37 	bl	10002b18 <XMC2Go_PingPong_subSysRef_init>
	XMC2Go_PingPong_subSysRef_start(); 	/* lifecycle start */
10002caa:	f7ff ff4b 	bl	10002b44 <XMC2Go_PingPong_subSysRef_start>

	etUserPreRun(); /* platform specific */
10002cae:	f003 fccb 	bl	10006648 <etUserPreRun>

	/* run Scheduler */
	XMC2Go_PingPong_subSysRef_run(runAsTest);
10002cb2:	1c3b      	adds	r3, r7, #0
10002cb4:	330f      	adds	r3, #15
10002cb6:	781b      	ldrb	r3, [r3, #0]
10002cb8:	1c18      	adds	r0, r3, #0
10002cba:	f7ff ff55 	bl	10002b68 <XMC2Go_PingPong_subSysRef_run>

	etUserPostRun(); /* platform specific */
10002cbe:	f003 fcd1 	bl	10006664 <etUserPostRun>

	/* shutdown sequence of lifecycle */
	XMC2Go_PingPong_subSysRef_stop(); 		/* lifecycle stop */
10002cc2:	f7ff ff5b 	bl	10002b7c <XMC2Go_PingPong_subSysRef_stop>
	XMC2Go_PingPong_subSysRef_destroy(); 	/* lifecycle destroy */
10002cc6:	f7ff ff6b 	bl	10002ba0 <XMC2Go_PingPong_subSysRef_destroy>

	ET_MSC_LOGGER_CLOSE
	etLogger_logInfo("***   T H E   E N D   ***");
10002cca:	4b08      	ldr	r3, [pc, #32]	; (10002cec <main+0xac>)
10002ccc:	1c18      	adds	r0, r3, #0
10002cce:	f003 fc75 	bl	100065bc <etLogger_logInfo>

	etUserExit(); /* platform specific */
10002cd2:	f003 fccb 	bl	1000666c <etUserExit>

	return 0;
10002cd6:	2300      	movs	r3, #0
}
10002cd8:	1c18      	adds	r0, r3, #0
10002cda:	46bd      	mov	sp, r7
10002cdc:	b004      	add	sp, #16
10002cde:	bd80      	pop	{r7, pc}
10002ce0:	10008ff8 	.word	0x10008ff8
10002ce4:	10009004 	.word	0x10009004
10002ce8:	10009014 	.word	0x10009014
10002cec:	10009034 	.word	0x10009034

10002cf0 <PIO004ReplPort_getReplication>:
#include "debugging/etMSCLogger.h"
#include "PIO004_Utils.h"


/*--------------------- port methods */
etInt32 PIO004ReplPort_getReplication(const PIO004ReplPort* self) {
10002cf0:	b580      	push	{r7, lr}
10002cf2:	b082      	sub	sp, #8
10002cf4:	af00      	add	r7, sp, #0
10002cf6:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002cf8:	687b      	ldr	r3, [r7, #4]
10002cfa:	881b      	ldrh	r3, [r3, #0]
10002cfc:	b21b      	sxth	r3, r3
}
10002cfe:	1c18      	adds	r0, r3, #0
10002d00:	46bd      	mov	sp, r7
10002d02:	b002      	add	sp, #8
10002d04:	bd80      	pop	{r7, pc}
10002d06:	46c0      	nop			; (mov r8, r8)

10002d08 <PIO004ConjPort_setInstance>:


/* begin PIO004ConjPort specific */

/*--------------------- operations ---------------------*/
void PIO004ConjPort_setInstance(PIO004ConjPort* self, uint32 data) {
10002d08:	b580      	push	{r7, lr}
10002d0a:	b082      	sub	sp, #8
10002d0c:	af00      	add	r7, sp, #0
10002d0e:	6078      	str	r0, [r7, #4]
10002d10:	6039      	str	r1, [r7, #0]
	switch(data){
10002d12:	683b      	ldr	r3, [r7, #0]
10002d14:	2b00      	cmp	r3, #0
10002d16:	d002      	beq.n	10002d1e <PIO004ConjPort_setInstance+0x16>
10002d18:	2b01      	cmp	r3, #1
10002d1a:	d006      	beq.n	10002d2a <PIO004ConjPort_setInstance+0x22>
10002d1c:	e00b      	b.n	10002d36 <PIO004ConjPort_setInstance+0x2e>
	    case 0: Handle=IO004_Handle0;
10002d1e:	687b      	ldr	r3, [r7, #4]
10002d20:	681b      	ldr	r3, [r3, #0]
10002d22:	4a07      	ldr	r2, [pc, #28]	; (10002d40 <PIO004ConjPort_setInstance+0x38>)
10002d24:	ca03      	ldmia	r2!, {r0, r1}
10002d26:	c303      	stmia	r3!, {r0, r1}
			break;
10002d28:	e006      	b.n	10002d38 <PIO004ConjPort_setInstance+0x30>
	    case 1: Handle=IO004_Handle1;
10002d2a:	687b      	ldr	r3, [r7, #4]
10002d2c:	681b      	ldr	r3, [r3, #0]
10002d2e:	4a05      	ldr	r2, [pc, #20]	; (10002d44 <PIO004ConjPort_setInstance+0x3c>)
10002d30:	ca03      	ldmia	r2!, {r0, r1}
10002d32:	c303      	stmia	r3!, {r0, r1}
			break;
10002d34:	e000      	b.n	10002d38 <PIO004ConjPort_setInstance+0x30>
	    default: break;
10002d36:	46c0      	nop			; (mov r8, r8)
	    }
}
10002d38:	46bd      	mov	sp, r7
10002d3a:	b002      	add	sp, #8
10002d3c:	bd80      	pop	{r7, pc}
10002d3e:	46c0      	nop			; (mov r8, r8)
10002d40:	10009114 	.word	0x10009114
10002d44:	1000911c 	.word	0x1000911c

10002d48 <PIO004ConjPort_readPin>:
uint32 PIO004ConjPort_readPin(PIO004ConjPort* self) {
10002d48:	b580      	push	{r7, lr}
10002d4a:	b082      	sub	sp, #8
10002d4c:	af00      	add	r7, sp, #0
10002d4e:	6078      	str	r0, [r7, #4]
	return IO004_ReadPin(Handle);
10002d50:	687b      	ldr	r3, [r7, #4]
10002d52:	681b      	ldr	r3, [r3, #0]
10002d54:	685b      	ldr	r3, [r3, #4]
10002d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002d58:	687b      	ldr	r3, [r7, #4]
10002d5a:	681b      	ldr	r3, [r3, #0]
10002d5c:	785b      	ldrb	r3, [r3, #1]
10002d5e:	40da      	lsrs	r2, r3
10002d60:	2301      	movs	r3, #1
10002d62:	4013      	ands	r3, r2
}
10002d64:	1c18      	adds	r0, r3, #0
10002d66:	46bd      	mov	sp, r7
10002d68:	b002      	add	sp, #8
10002d6a:	bd80      	pop	{r7, pc}

10002d6c <PIO004ConjPort_setPin>:
void PIO004ConjPort_setPin(PIO004ConjPort* self) {
10002d6c:	b580      	push	{r7, lr}
10002d6e:	b082      	sub	sp, #8
10002d70:	af00      	add	r7, sp, #0
10002d72:	6078      	str	r0, [r7, #4]
	IO004_SetPin(Handle);
10002d74:	687b      	ldr	r3, [r7, #4]
10002d76:	681b      	ldr	r3, [r3, #0]
10002d78:	685b      	ldr	r3, [r3, #4]
10002d7a:	687a      	ldr	r2, [r7, #4]
10002d7c:	6812      	ldr	r2, [r2, #0]
10002d7e:	7852      	ldrb	r2, [r2, #1]
10002d80:	2101      	movs	r1, #1
10002d82:	1c08      	adds	r0, r1, #0
10002d84:	4090      	lsls	r0, r2
10002d86:	1c02      	adds	r2, r0, #0
10002d88:	605a      	str	r2, [r3, #4]
}
10002d8a:	46bd      	mov	sp, r7
10002d8c:	b002      	add	sp, #8
10002d8e:	bd80      	pop	{r7, pc}

10002d90 <PIO004ConjPort_setOutputValue>:
void PIO004ConjPort_setOutputValue(PIO004ConjPort* self, boolean Value) {
10002d90:	b580      	push	{r7, lr}
10002d92:	b082      	sub	sp, #8
10002d94:	af00      	add	r7, sp, #0
10002d96:	6078      	str	r0, [r7, #4]
10002d98:	1c0a      	adds	r2, r1, #0
10002d9a:	1cfb      	adds	r3, r7, #3
10002d9c:	701a      	strb	r2, [r3, #0]
	IO004_SetOutputValue(Handle,Value);
10002d9e:	687b      	ldr	r3, [r7, #4]
10002da0:	681b      	ldr	r3, [r3, #0]
10002da2:	685b      	ldr	r3, [r3, #4]
10002da4:	1cfa      	adds	r2, r7, #3
10002da6:	7812      	ldrb	r2, [r2, #0]
10002da8:	2a00      	cmp	r2, #0
10002daa:	d007      	beq.n	10002dbc <PIO004ConjPort_setOutputValue+0x2c>
10002dac:	687a      	ldr	r2, [r7, #4]
10002dae:	6812      	ldr	r2, [r2, #0]
10002db0:	7852      	ldrb	r2, [r2, #1]
10002db2:	2101      	movs	r1, #1
10002db4:	1c08      	adds	r0, r1, #0
10002db6:	4090      	lsls	r0, r2
10002db8:	1c02      	adds	r2, r0, #0
10002dba:	e007      	b.n	10002dcc <PIO004ConjPort_setOutputValue+0x3c>
10002dbc:	687a      	ldr	r2, [r7, #4]
10002dbe:	6812      	ldr	r2, [r2, #0]
10002dc0:	7852      	ldrb	r2, [r2, #1]
10002dc2:	2180      	movs	r1, #128	; 0x80
10002dc4:	0249      	lsls	r1, r1, #9
10002dc6:	1c08      	adds	r0, r1, #0
10002dc8:	4090      	lsls	r0, r2
10002dca:	1c02      	adds	r2, r0, #0
10002dcc:	605a      	str	r2, [r3, #4]
}
10002dce:	46bd      	mov	sp, r7
10002dd0:	b002      	add	sp, #8
10002dd2:	bd80      	pop	{r7, pc}

10002dd4 <PIO004ConjPort_resetPin>:
void PIO004ConjPort_resetPin(PIO004ConjPort* self) {
10002dd4:	b580      	push	{r7, lr}
10002dd6:	b082      	sub	sp, #8
10002dd8:	af00      	add	r7, sp, #0
10002dda:	6078      	str	r0, [r7, #4]
	IO004_ResetPin(Handle);
10002ddc:	687b      	ldr	r3, [r7, #4]
10002dde:	681b      	ldr	r3, [r3, #0]
10002de0:	685b      	ldr	r3, [r3, #4]
10002de2:	687a      	ldr	r2, [r7, #4]
10002de4:	6812      	ldr	r2, [r2, #0]
10002de6:	7852      	ldrb	r2, [r2, #1]
10002de8:	2180      	movs	r1, #128	; 0x80
10002dea:	0249      	lsls	r1, r1, #9
10002dec:	1c08      	adds	r0, r1, #0
10002dee:	4090      	lsls	r0, r2
10002df0:	1c02      	adds	r2, r0, #0
10002df2:	605a      	str	r2, [r3, #4]
}
10002df4:	46bd      	mov	sp, r7
10002df6:	b002      	add	sp, #8
10002df8:	bd80      	pop	{r7, pc}
10002dfa:	46c0      	nop			; (mov r8, r8)

10002dfc <PIO004ConjPort_togglePin>:
void PIO004ConjPort_togglePin(PIO004ConjPort* self) {
10002dfc:	b580      	push	{r7, lr}
10002dfe:	b082      	sub	sp, #8
10002e00:	af00      	add	r7, sp, #0
10002e02:	6078      	str	r0, [r7, #4]
	IO004_TogglePin(Handle);
10002e04:	687b      	ldr	r3, [r7, #4]
10002e06:	681b      	ldr	r3, [r3, #0]
10002e08:	685b      	ldr	r3, [r3, #4]
10002e0a:	687a      	ldr	r2, [r7, #4]
10002e0c:	6812      	ldr	r2, [r2, #0]
10002e0e:	7852      	ldrb	r2, [r2, #1]
10002e10:	4903      	ldr	r1, [pc, #12]	; (10002e20 <PIO004ConjPort_togglePin+0x24>)
10002e12:	1c08      	adds	r0, r1, #0
10002e14:	4090      	lsls	r0, r2
10002e16:	1c02      	adds	r2, r0, #0
10002e18:	605a      	str	r2, [r3, #4]
}
10002e1a:	46bd      	mov	sp, r7
10002e1c:	b002      	add	sp, #8
10002e1e:	bd80      	pop	{r7, pc}
10002e20:	00010001 	.word	0x00010001

10002e24 <PIO004ConjPort_disableOutputBuffer>:
void PIO004ConjPort_disableOutputBuffer(PIO004ConjPort* self, IO004_InputModeType mode) {
10002e24:	b580      	push	{r7, lr}
10002e26:	b082      	sub	sp, #8
10002e28:	af00      	add	r7, sp, #0
10002e2a:	6078      	str	r0, [r7, #4]
10002e2c:	1c0a      	adds	r2, r1, #0
10002e2e:	1cfb      	adds	r3, r7, #3
10002e30:	701a      	strb	r2, [r3, #0]
	IO004_DisableOutputDriver(&Handle,mode);
10002e32:	687b      	ldr	r3, [r7, #4]
10002e34:	681b      	ldr	r3, [r3, #0]
10002e36:	1c1a      	adds	r2, r3, #0
10002e38:	1cfb      	adds	r3, r7, #3
10002e3a:	781b      	ldrb	r3, [r3, #0]
10002e3c:	1c10      	adds	r0, r2, #0
10002e3e:	1c19      	adds	r1, r3, #0
10002e40:	f002 ffd8 	bl	10005df4 <IO004_DisableOutputDriver>
}
10002e44:	46bd      	mov	sp, r7
10002e46:	b002      	add	sp, #8
10002e48:	bd80      	pop	{r7, pc}
10002e4a:	46c0      	nop			; (mov r8, r8)

10002e4c <PIO004ConjPort_enableOutputBuffer>:
void PIO004ConjPort_enableOutputBuffer(PIO004ConjPort* self, IO004_InputModeType mode) {
10002e4c:	b580      	push	{r7, lr}
10002e4e:	b082      	sub	sp, #8
10002e50:	af00      	add	r7, sp, #0
10002e52:	6078      	str	r0, [r7, #4]
10002e54:	1c0a      	adds	r2, r1, #0
10002e56:	1cfb      	adds	r3, r7, #3
10002e58:	701a      	strb	r2, [r3, #0]
	IO004_EnableOutputDriver(&Handle,mode);
10002e5a:	687b      	ldr	r3, [r7, #4]
10002e5c:	681b      	ldr	r3, [r3, #0]
10002e5e:	1c1a      	adds	r2, r3, #0
10002e60:	1cfb      	adds	r3, r7, #3
10002e62:	781b      	ldrb	r3, [r3, #0]
10002e64:	1c10      	adds	r0, r2, #0
10002e66:	1c19      	adds	r1, r3, #0
10002e68:	f003 f89e 	bl	10005fa8 <IO004_EnableOutputDriver>
}
10002e6c:	46bd      	mov	sp, r7
10002e6e:	b002      	add	sp, #8
10002e70:	bd80      	pop	{r7, pc}
10002e72:	46c0      	nop			; (mov r8, r8)

10002e74 <PIO004ConjReplPort_getReplication>:
/* end PIO004ConjPort specific */

etInt32 PIO004ConjReplPort_getReplication(const PIO004ConjReplPort* self) {
10002e74:	b580      	push	{r7, lr}
10002e76:	b082      	sub	sp, #8
10002e78:	af00      	add	r7, sp, #0
10002e7a:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002e7c:	687b      	ldr	r3, [r7, #4]
10002e7e:	881b      	ldrh	r3, [r3, #0]
10002e80:	b21b      	sxth	r3, r3
}
10002e82:	1c18      	adds	r0, r3, #0
10002e84:	46bd      	mov	sp, r7
10002e86:	b002      	add	sp, #8
10002e88:	bd80      	pop	{r7, pc}
10002e8a:	46c0      	nop			; (mov r8, r8)

10002e8c <PUART001ReplPort_getReplication>:
#include "debugging/etMSCLogger.h"
#include "PUART001_Utils.h"


/*--------------------- port methods */
etInt32 PUART001ReplPort_getReplication(const PUART001ReplPort* self) {
10002e8c:	b580      	push	{r7, lr}
10002e8e:	b082      	sub	sp, #8
10002e90:	af00      	add	r7, sp, #0
10002e92:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002e94:	687b      	ldr	r3, [r7, #4]
10002e96:	881b      	ldrh	r3, [r3, #0]
10002e98:	b21b      	sxth	r3, r3
}
10002e9a:	1c18      	adds	r0, r3, #0
10002e9c:	46bd      	mov	sp, r7
10002e9e:	b002      	add	sp, #8
10002ea0:	bd80      	pop	{r7, pc}
10002ea2:	46c0      	nop			; (mov r8, r8)

10002ea4 <PUART001ConjPort_dummy>:



void PUART001ConjPort_dummy(const PUART001ConjPort* self) {
10002ea4:	b580      	push	{r7, lr}
10002ea6:	b082      	sub	sp, #8
10002ea8:	af00      	add	r7, sp, #0
10002eaa:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PUART001ConjPort", "dummy")
		etPort_sendMessage(self, PUART001_IN_dummy, 0, NULL);
10002eac:	687b      	ldr	r3, [r7, #4]
10002eae:	1c18      	adds	r0, r3, #0
10002eb0:	2101      	movs	r1, #1
10002eb2:	2200      	movs	r2, #0
10002eb4:	2300      	movs	r3, #0
10002eb6:	f003 fc71 	bl	1000679c <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
10002eba:	46bd      	mov	sp, r7
10002ebc:	b002      	add	sp, #8
10002ebe:	bd80      	pop	{r7, pc}

10002ec0 <PUART001ConjReplPort_dummy_broadcast>:

void PUART001ConjReplPort_dummy_broadcast(const PUART001ConjReplPort* self) {
10002ec0:	b580      	push	{r7, lr}
10002ec2:	b084      	sub	sp, #16
10002ec4:	af00      	add	r7, sp, #0
10002ec6:	6078      	str	r0, [r7, #4]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PUART001ConjReplPort", "dummy")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10002ec8:	2300      	movs	r3, #0
10002eca:	60fb      	str	r3, [r7, #12]
10002ecc:	e00d      	b.n	10002eea <PUART001ConjReplPort_dummy_broadcast+0x2a>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PUART001_IN_dummy, 0, NULL);
10002ece:	687b      	ldr	r3, [r7, #4]
10002ed0:	685a      	ldr	r2, [r3, #4]
10002ed2:	68fb      	ldr	r3, [r7, #12]
10002ed4:	011b      	lsls	r3, r3, #4
10002ed6:	18d3      	adds	r3, r2, r3
10002ed8:	1c18      	adds	r0, r3, #0
10002eda:	2101      	movs	r1, #1
10002edc:	2200      	movs	r2, #0
10002ede:	2300      	movs	r3, #0
10002ee0:	f003 fc5c 	bl	1000679c <etPort_sendMessage>
}

void PUART001ConjReplPort_dummy_broadcast(const PUART001ConjReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PUART001ConjReplPort", "dummy")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10002ee4:	68fb      	ldr	r3, [r7, #12]
10002ee6:	3301      	adds	r3, #1
10002ee8:	60fb      	str	r3, [r7, #12]
10002eea:	687b      	ldr	r3, [r7, #4]
10002eec:	881b      	ldrh	r3, [r3, #0]
10002eee:	b21a      	sxth	r2, r3
10002ef0:	68fb      	ldr	r3, [r7, #12]
10002ef2:	429a      	cmp	r2, r3
10002ef4:	dceb      	bgt.n	10002ece <PUART001ConjReplPort_dummy_broadcast+0xe>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PUART001_IN_dummy, 0, NULL);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10002ef6:	46bd      	mov	sp, r7
10002ef8:	b004      	add	sp, #16
10002efa:	bd80      	pop	{r7, pc}

10002efc <PUART001ConjReplPort_dummy>:

void PUART001ConjReplPort_dummy(const PUART001ConjReplPort* self, int idx__et) {
10002efc:	b580      	push	{r7, lr}
10002efe:	b082      	sub	sp, #8
10002f00:	af00      	add	r7, sp, #0
10002f02:	6078      	str	r0, [r7, #4]
10002f04:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("PUART001ConjReplPort", "dummy")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
10002f06:	683b      	ldr	r3, [r7, #0]
10002f08:	2b00      	cmp	r3, #0
10002f0a:	db10      	blt.n	10002f2e <PUART001ConjReplPort_dummy+0x32>
10002f0c:	687b      	ldr	r3, [r7, #4]
10002f0e:	881b      	ldrh	r3, [r3, #0]
10002f10:	b21a      	sxth	r2, r3
10002f12:	683b      	ldr	r3, [r7, #0]
10002f14:	429a      	cmp	r2, r3
10002f16:	dd0a      	ble.n	10002f2e <PUART001ConjReplPort_dummy+0x32>
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PUART001_IN_dummy, 0, NULL);
10002f18:	687b      	ldr	r3, [r7, #4]
10002f1a:	685a      	ldr	r2, [r3, #4]
10002f1c:	683b      	ldr	r3, [r7, #0]
10002f1e:	011b      	lsls	r3, r3, #4
10002f20:	18d3      	adds	r3, r2, r3
10002f22:	1c18      	adds	r0, r3, #0
10002f24:	2101      	movs	r1, #1
10002f26:	2200      	movs	r2, #0
10002f28:	2300      	movs	r3, #0
10002f2a:	f003 fc37 	bl	1000679c <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10002f2e:	46bd      	mov	sp, r7
10002f30:	b002      	add	sp, #8
10002f32:	bd80      	pop	{r7, pc}

10002f34 <PUART001ConjPort_setInstance>:

/* begin PUART001ConjPort specific */

/*--------------------- operations ---------------------*/
void PUART001ConjPort_setInstance(PUART001ConjPort* self, uint32 data) {
10002f34:	b580      	push	{r7, lr}
10002f36:	b082      	sub	sp, #8
10002f38:	af00      	add	r7, sp, #0
10002f3a:	6078      	str	r0, [r7, #4]
10002f3c:	6039      	str	r1, [r7, #0]
	Handle=UART001_HandleArray[data];
10002f3e:	687b      	ldr	r3, [r7, #4]
10002f40:	681b      	ldr	r3, [r3, #0]
10002f42:	4a04      	ldr	r2, [pc, #16]	; (10002f54 <PUART001ConjPort_setInstance+0x20>)
10002f44:	6839      	ldr	r1, [r7, #0]
10002f46:	0089      	lsls	r1, r1, #2
10002f48:	588a      	ldr	r2, [r1, r2]
10002f4a:	601a      	str	r2, [r3, #0]
}
10002f4c:	46bd      	mov	sp, r7
10002f4e:	b002      	add	sp, #8
10002f50:	bd80      	pop	{r7, pc}
10002f52:	46c0      	nop			; (mov r8, r8)
10002f54:	20001190 	.word	0x20001190

10002f58 <PUART001ConjPort_readDataBytes>:
uint32 PUART001ConjPort_readDataBytes(PUART001ConjPort* self, uint8* buffer, uint32 count) {
10002f58:	b580      	push	{r7, lr}
10002f5a:	b084      	sub	sp, #16
10002f5c:	af00      	add	r7, sp, #0
10002f5e:	60f8      	str	r0, [r7, #12]
10002f60:	60b9      	str	r1, [r7, #8]
10002f62:	607a      	str	r2, [r7, #4]
	if (Handle != 0){
10002f64:	68fb      	ldr	r3, [r7, #12]
10002f66:	681b      	ldr	r3, [r3, #0]
10002f68:	681b      	ldr	r3, [r3, #0]
10002f6a:	2b00      	cmp	r3, #0
10002f6c:	d00b      	beq.n	10002f86 <PUART001ConjPort_readDataBytes+0x2e>
		return UART001_ReadDataBytes(Handle,buffer,count);}
10002f6e:	68fb      	ldr	r3, [r7, #12]
10002f70:	681b      	ldr	r3, [r3, #0]
10002f72:	6819      	ldr	r1, [r3, #0]
10002f74:	68ba      	ldr	r2, [r7, #8]
10002f76:	687b      	ldr	r3, [r7, #4]
10002f78:	1c08      	adds	r0, r1, #0
10002f7a:	1c11      	adds	r1, r2, #0
10002f7c:	1c1a      	adds	r2, r3, #0
10002f7e:	f000 fec9 	bl	10003d14 <UART001_ReadDataBytes>
10002f82:	1c03      	adds	r3, r0, #0
10002f84:	e000      	b.n	10002f88 <PUART001ConjPort_readDataBytes+0x30>
	return 0;
10002f86:	2300      	movs	r3, #0
}
10002f88:	1c18      	adds	r0, r3, #0
10002f8a:	46bd      	mov	sp, r7
10002f8c:	b004      	add	sp, #16
10002f8e:	bd80      	pop	{r7, pc}

10002f90 <PUART001ConjPort_writeDataBytes>:
uint32 PUART001ConjPort_writeDataBytes(PUART001ConjPort* self, uint8* buffer, uint32 count) {
10002f90:	b580      	push	{r7, lr}
10002f92:	b084      	sub	sp, #16
10002f94:	af00      	add	r7, sp, #0
10002f96:	60f8      	str	r0, [r7, #12]
10002f98:	60b9      	str	r1, [r7, #8]
10002f9a:	607a      	str	r2, [r7, #4]
	if (Handle != 0){
10002f9c:	68fb      	ldr	r3, [r7, #12]
10002f9e:	681b      	ldr	r3, [r3, #0]
10002fa0:	681b      	ldr	r3, [r3, #0]
10002fa2:	2b00      	cmp	r3, #0
10002fa4:	d00b      	beq.n	10002fbe <PUART001ConjPort_writeDataBytes+0x2e>
	   return UART001_WriteDataBytes(Handle,buffer,count);}
10002fa6:	68fb      	ldr	r3, [r7, #12]
10002fa8:	681b      	ldr	r3, [r3, #0]
10002faa:	6819      	ldr	r1, [r3, #0]
10002fac:	68ba      	ldr	r2, [r7, #8]
10002fae:	687b      	ldr	r3, [r7, #4]
10002fb0:	1c08      	adds	r0, r1, #0
10002fb2:	1c11      	adds	r1, r2, #0
10002fb4:	1c1a      	adds	r2, r3, #0
10002fb6:	f000 ff27 	bl	10003e08 <UART001_WriteDataBytes>
10002fba:	1c03      	adds	r3, r0, #0
10002fbc:	e000      	b.n	10002fc0 <PUART001ConjPort_writeDataBytes+0x30>
	return 0;
10002fbe:	2300      	movs	r3, #0
}
10002fc0:	1c18      	adds	r0, r3, #0
10002fc2:	46bd      	mov	sp, r7
10002fc4:	b004      	add	sp, #16
10002fc6:	bd80      	pop	{r7, pc}

10002fc8 <PUART001ConjReplPort_getReplication>:
/* end PUART001ConjPort specific */

etInt32 PUART001ConjReplPort_getReplication(const PUART001ConjReplPort* self) {
10002fc8:	b580      	push	{r7, lr}
10002fca:	b082      	sub	sp, #8
10002fcc:	af00      	add	r7, sp, #0
10002fce:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002fd0:	687b      	ldr	r3, [r7, #4]
10002fd2:	881b      	ldrh	r3, [r3, #0]
10002fd4:	b21b      	sxth	r3, r3
}
10002fd6:	1c18      	adds	r0, r3, #0
10002fd8:	46bd      	mov	sp, r7
10002fda:	b002      	add	sp, #8
10002fdc:	bd80      	pop	{r7, pc}
10002fde:	46c0      	nop			; (mov r8, r8)

10002fe0 <PWMSP001ReplPort_getReplication>:
#include "debugging/etMSCLogger.h"
#include "PWMSP001_Utils.h"


/*--------------------- port methods */
etInt32 PWMSP001ReplPort_getReplication(const PWMSP001ReplPort* self) {
10002fe0:	b580      	push	{r7, lr}
10002fe2:	b082      	sub	sp, #8
10002fe4:	af00      	add	r7, sp, #0
10002fe6:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002fe8:	687b      	ldr	r3, [r7, #4]
10002fea:	881b      	ldrh	r3, [r3, #0]
10002fec:	b21b      	sxth	r3, r3
}
10002fee:	1c18      	adds	r0, r3, #0
10002ff0:	46bd      	mov	sp, r7
10002ff2:	b002      	add	sp, #8
10002ff4:	bd80      	pop	{r7, pc}
10002ff6:	46c0      	nop			; (mov r8, r8)

10002ff8 <PWMSP001ConjPort_setInstance>:


/* begin PWMSP001ConjPort specific */

/*--------------------- operations ---------------------*/
void PWMSP001ConjPort_setInstance(PWMSP001ConjPort* self, uint32 data) {
10002ff8:	b580      	push	{r7, lr}
10002ffa:	b082      	sub	sp, #8
10002ffc:	af00      	add	r7, sp, #0
10002ffe:	6078      	str	r0, [r7, #4]
10003000:	6039      	str	r1, [r7, #0]
	switch(data){
10003002:	683b      	ldr	r3, [r7, #0]
10003004:	2b00      	cmp	r3, #0
10003006:	d002      	beq.n	1000300e <PWMSP001ConjPort_setInstance+0x16>
10003008:	2b01      	cmp	r3, #1
1000300a:	d005      	beq.n	10003018 <PWMSP001ConjPort_setInstance+0x20>
1000300c:	e009      	b.n	10003022 <PWMSP001ConjPort_setInstance+0x2a>
	    case 0: Handle=&PWMSP001_Handle0;
1000300e:	687b      	ldr	r3, [r7, #4]
10003010:	681b      	ldr	r3, [r3, #0]
10003012:	4a06      	ldr	r2, [pc, #24]	; (1000302c <PWMSP001ConjPort_setInstance+0x34>)
10003014:	601a      	str	r2, [r3, #0]
			break;
10003016:	e005      	b.n	10003024 <PWMSP001ConjPort_setInstance+0x2c>
	    case 1: Handle=&PWMSP001_Handle1;
10003018:	687b      	ldr	r3, [r7, #4]
1000301a:	681b      	ldr	r3, [r3, #0]
1000301c:	4a04      	ldr	r2, [pc, #16]	; (10003030 <PWMSP001ConjPort_setInstance+0x38>)
1000301e:	601a      	str	r2, [r3, #0]
			break;
10003020:	e000      	b.n	10003024 <PWMSP001ConjPort_setInstance+0x2c>
	    default: break;
10003022:	46c0      	nop			; (mov r8, r8)
	    }
}
10003024:	46bd      	mov	sp, r7
10003026:	b002      	add	sp, #8
10003028:	bd80      	pop	{r7, pc}
1000302a:	46c0      	nop			; (mov r8, r8)
1000302c:	10009084 	.word	0x10009084
10003030:	100090cc 	.word	0x100090cc

10003034 <PWMSP001ConjPort_setDutyCycle>:
void PWMSP001ConjPort_setDutyCycle(PWMSP001ConjPort* self, uint8 dc) {
10003034:	b590      	push	{r4, r7, lr}
10003036:	b083      	sub	sp, #12
10003038:	af00      	add	r7, sp, #0
1000303a:	6078      	str	r0, [r7, #4]
1000303c:	1c0a      	adds	r2, r1, #0
1000303e:	1cfb      	adds	r3, r7, #3
10003040:	701a      	strb	r2, [r3, #0]
	PWMSP001_SetDutyCycle(Handle, dc);
10003042:	687b      	ldr	r3, [r7, #4]
10003044:	681b      	ldr	r3, [r3, #0]
10003046:	681c      	ldr	r4, [r3, #0]
10003048:	1cfb      	adds	r3, r7, #3
1000304a:	781b      	ldrb	r3, [r3, #0]
1000304c:	1c18      	adds	r0, r3, #0
1000304e:	f004 fddf 	bl	10007c10 <__aeabi_ui2f>
10003052:	1c03      	adds	r3, r0, #0
10003054:	1c20      	adds	r0, r4, #0
10003056:	1c19      	adds	r1, r3, #0
10003058:	f001 ff7e 	bl	10004f58 <PWMSP001_SetDutyCycle>
}
1000305c:	46bd      	mov	sp, r7
1000305e:	b003      	add	sp, #12
10003060:	bd90      	pop	{r4, r7, pc}
10003062:	46c0      	nop			; (mov r8, r8)

10003064 <PWMSP001ConjReplPort_getReplication>:
/* end PWMSP001ConjPort specific */

etInt32 PWMSP001ConjReplPort_getReplication(const PWMSP001ConjReplPort* self) {
10003064:	b580      	push	{r7, lr}
10003066:	b082      	sub	sp, #8
10003068:	af00      	add	r7, sp, #0
1000306a:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
1000306c:	687b      	ldr	r3, [r7, #4]
1000306e:	881b      	ldrh	r3, [r3, #0]
10003070:	b21b      	sxth	r3, r3
}
10003072:	1c18      	adds	r0, r3, #0
10003074:	46bd      	mov	sp, r7
10003076:	b002      	add	sp, #8
10003078:	bd80      	pop	{r7, pc}
1000307a:	46c0      	nop			; (mov r8, r8)

1000307c <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
1000307c:	e7fe      	b.n	1000307c <NMI_Handler>

1000307e <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
1000307e:	e7fe      	b.n	1000307e <HardFault_Handler>

10003080 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
10003080:	e7fe      	b.n	10003080 <SVC_Handler>

10003082 <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
10003082:	e7fe      	b.n	10003082 <PendSV_Handler>
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
10003084:	e7fe      	b.n	10003084 <PendSV_Handler+0x2>

10003086 <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
10003086:	e7fe      	b.n	10003086 <SCU_0_IRQHandler>

10003088 <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
10003088:	e7fe      	b.n	10003088 <SCU_1_IRQHandler>

1000308a <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
1000308a:	e7fe      	b.n	1000308a <SCU_2_IRQHandler>

1000308c <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
1000308c:	e7fe      	b.n	1000308c <ERU0_0_IRQHandler>

1000308e <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
1000308e:	e7fe      	b.n	1000308e <ERU0_1_IRQHandler>

10003090 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
10003090:	e7fe      	b.n	10003090 <ERU0_2_IRQHandler>

10003092 <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
10003092:	e7fe      	b.n	10003092 <ERU0_3_IRQHandler>

10003094 <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
10003094:	e7fe      	b.n	10003094 <VADC0_C0_0_IRQHandler>

10003096 <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
10003096:	e7fe      	b.n	10003096 <VADC0_C0_1_IRQHandler>

10003098 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
10003098:	e7fe      	b.n	10003098 <CCU40_0_IRQHandler>

1000309a <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
1000309a:	e7fe      	b.n	1000309a <CCU40_1_IRQHandler>

1000309c <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
1000309c:	e7fe      	b.n	1000309c <CCU40_2_IRQHandler>

1000309e <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
1000309e:	e7fe      	b.n	1000309e <CCU40_3_IRQHandler>

100030a0 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
100030a0:	e7fe      	b.n	100030a0 <USIC0_0_IRQHandler>

100030a2 <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
100030a2:	e7fe      	b.n	100030a2 <USIC0_1_IRQHandler>

100030a4 <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
100030a4:	e7fe      	b.n	100030a4 <USIC0_2_IRQHandler>

100030a6 <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
100030a6:	e7fe      	b.n	100030a6 <USIC0_3_IRQHandler>

100030a8 <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
100030a8:	e7fe      	b.n	100030a8 <USIC0_4_IRQHandler>

100030aa <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
100030aa:	e7fe      	b.n	100030aa <USIC0_5_IRQHandler>

100030ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
100030ac:	b580      	push	{r7, lr}
100030ae:	af00      	add	r7, sp, #0
   * while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
   * SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
   * SystemCoreClockUpdate();
   *
   */
  SystemCoreClockUpdate();
100030b0:	f000 f802 	bl	100030b8 <SystemCoreClockUpdate>
}
100030b4:	46bd      	mov	sp, r7
100030b6:	bd80      	pop	{r7, pc}

100030b8 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
100030b8:	b580      	push	{r7, lr}
100030ba:	b082      	sub	sp, #8
100030bc:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100030be:	4b11      	ldr	r3, [pc, #68]	; (10003104 <SystemCoreClockUpdate+0x4c>)
100030c0:	681a      	ldr	r2, [r3, #0]
100030c2:	23ff      	movs	r3, #255	; 0xff
100030c4:	021b      	lsls	r3, r3, #8
100030c6:	4013      	ands	r3, r2
100030c8:	0a1b      	lsrs	r3, r3, #8
100030ca:	607b      	str	r3, [r7, #4]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100030cc:	4b0d      	ldr	r3, [pc, #52]	; (10003104 <SystemCoreClockUpdate+0x4c>)
100030ce:	681a      	ldr	r2, [r3, #0]
100030d0:	23ff      	movs	r3, #255	; 0xff
100030d2:	4013      	ands	r3, r2
100030d4:	603b      	str	r3, [r7, #0]
  
  if(IDIV)
100030d6:	687b      	ldr	r3, [r7, #4]
100030d8:	2b00      	cmp	r3, #0
100030da:	d00c      	beq.n	100030f6 <SystemCoreClockUpdate+0x3e>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((MCLK_MHZ << 7) / ((IDIV << 8) + FDIV)) << 1;
100030dc:	687b      	ldr	r3, [r7, #4]
100030de:	021a      	lsls	r2, r3, #8
100030e0:	683b      	ldr	r3, [r7, #0]
100030e2:	18d3      	adds	r3, r2, r3
100030e4:	4808      	ldr	r0, [pc, #32]	; (10003108 <SystemCoreClockUpdate+0x50>)
100030e6:	1c19      	adds	r1, r3, #0
100030e8:	f003 ffb2 	bl	10007050 <__aeabi_uidiv>
100030ec:	1c03      	adds	r3, r0, #0
100030ee:	005a      	lsls	r2, r3, #1
100030f0:	4b06      	ldr	r3, [pc, #24]	; (1000310c <SystemCoreClockUpdate+0x54>)
100030f2:	601a      	str	r2, [r3, #0]
100030f4:	e002      	b.n	100030fc <SystemCoreClockUpdate+0x44>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = MCLK_MHZ;
100030f6:	4b05      	ldr	r3, [pc, #20]	; (1000310c <SystemCoreClockUpdate+0x54>)
100030f8:	4a05      	ldr	r2, [pc, #20]	; (10003110 <SystemCoreClockUpdate+0x58>)
100030fa:	601a      	str	r2, [r3, #0]
  }
}
100030fc:	46bd      	mov	sp, r7
100030fe:	b002      	add	sp, #8
10003100:	bd80      	pop	{r7, pc}
10003102:	46c0      	nop			; (mov r8, r8)
10003104:	40010300 	.word	0x40010300
10003108:	f4240000 	.word	0xf4240000
1000310c:	20000d08 	.word	0x20000d08
10003110:	01e84800 	.word	0x01e84800

10003114 <timerCallback>:

#include "DAVE3.h"

void etTick_Handler(void);

void timerCallback(void * arg){
10003114:	b580      	push	{r7, lr}
10003116:	b082      	sub	sp, #8
10003118:	af00      	add	r7, sp, #0
1000311a:	6078      	str	r0, [r7, #4]
	etTick_Handler();
1000311c:	f003 fb10 	bl	10006740 <etTick_Handler>
}
10003120:	46bd      	mov	sp, r7
10003122:	b002      	add	sp, #8
10003124:	bd80      	pop	{r7, pc}
10003126:	46c0      	nop			; (mov r8, r8)

10003128 <StartDaveTimer>:

typedef void (*SYSTM001_TimerCallBackPtr)(void* ParamToCallBack);

void StartDaveTimer(void){
10003128:	b580      	push	{r7, lr}
1000312a:	b082      	sub	sp, #8
1000312c:	af00      	add	r7, sp, #0
handle_t timer;

	timer = SYSTM001_CreateTimer(1,SYSTM001_PERIODIC,(SYSTM001_TimerCallBackPtr*) timerCallback,(void*) 0);
1000312e:	4b08      	ldr	r3, [pc, #32]	; (10003150 <StartDaveTimer+0x28>)
10003130:	2001      	movs	r0, #1
10003132:	2101      	movs	r1, #1
10003134:	1c1a      	adds	r2, r3, #0
10003136:	2300      	movs	r3, #0
10003138:	f001 f952 	bl	100043e0 <SYSTM001_CreateTimer>
1000313c:	1c03      	adds	r3, r0, #0
1000313e:	607b      	str	r3, [r7, #4]
	SYSTM001_StartTimer(timer);
10003140:	687b      	ldr	r3, [r7, #4]
10003142:	1c18      	adds	r0, r3, #0
10003144:	f001 f9de 	bl	10004504 <SYSTM001_StartTimer>
}
10003148:	46bd      	mov	sp, r7
1000314a:	b002      	add	sp, #8
1000314c:	bd80      	pop	{r7, pc}
1000314e:	46c0      	nop			; (mov r8, r8)
10003150:	10003115 	.word	0x10003115

10003154 <_open>:
/* ========================================================================= */
/*
 * File open
 */
__attribute__((weak)) int _open(const char *name, int flags, int mode)
{
10003154:	b580      	push	{r7, lr}
10003156:	b084      	sub	sp, #16
10003158:	af00      	add	r7, sp, #0
1000315a:	60f8      	str	r0, [r7, #12]
1000315c:	60b9      	str	r1, [r7, #8]
1000315e:	607a      	str	r2, [r7, #4]
 flags = flags;
 mode = mode;
 return -1;
10003160:	2301      	movs	r3, #1
10003162:	425b      	negs	r3, r3
}
10003164:	1c18      	adds	r0, r3, #0
10003166:	46bd      	mov	sp, r7
10003168:	b004      	add	sp, #16
1000316a:	bd80      	pop	{r7, pc}

1000316c <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
1000316c:	b580      	push	{r7, lr}
1000316e:	b084      	sub	sp, #16
10003170:	af00      	add	r7, sp, #0
10003172:	60f8      	str	r0, [r7, #12]
10003174:	60b9      	str	r1, [r7, #8]
10003176:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
10003178:	2301      	movs	r3, #1
1000317a:	425b      	negs	r3, r3
}
1000317c:	1c18      	adds	r0, r3, #0
1000317e:	46bd      	mov	sp, r7
10003180:	b004      	add	sp, #16
10003182:	bd80      	pop	{r7, pc}

10003184 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10003184:	b580      	push	{r7, lr}
10003186:	b084      	sub	sp, #16
10003188:	af00      	add	r7, sp, #0
1000318a:	60f8      	str	r0, [r7, #12]
1000318c:	60b9      	str	r1, [r7, #8]
1000318e:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
10003190:	2300      	movs	r3, #0
}
10003192:	1c18      	adds	r0, r3, #0
10003194:	46bd      	mov	sp, r7
10003196:	b004      	add	sp, #16
10003198:	bd80      	pop	{r7, pc}
1000319a:	46c0      	nop			; (mov r8, r8)

1000319c <_write>:

/*
 * File write
 */
__attribute__((weak)) int _write(int file, char *buf, int nbytes)
{
1000319c:	b580      	push	{r7, lr}
1000319e:	b084      	sub	sp, #16
100031a0:	af00      	add	r7, sp, #0
100031a2:	60f8      	str	r0, [r7, #12]
100031a4:	60b9      	str	r1, [r7, #8]
100031a6:	607a      	str	r2, [r7, #4]
 return -1;
100031a8:	2301      	movs	r3, #1
100031aa:	425b      	negs	r3, r3
}
100031ac:	1c18      	adds	r0, r3, #0
100031ae:	46bd      	mov	sp, r7
100031b0:	b004      	add	sp, #16
100031b2:	bd80      	pop	{r7, pc}

100031b4 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
100031b4:	b580      	push	{r7, lr}
100031b6:	af00      	add	r7, sp, #0
 return -1;
100031b8:	2301      	movs	r3, #1
100031ba:	425b      	negs	r3, r3
}
100031bc:	1c18      	adds	r0, r3, #0
100031be:	46bd      	mov	sp, r7
100031c0:	bd80      	pop	{r7, pc}
100031c2:	46c0      	nop			; (mov r8, r8)

100031c4 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
100031c4:	b580      	push	{r7, lr}
100031c6:	b082      	sub	sp, #8
100031c8:	af00      	add	r7, sp, #0
100031ca:	6078      	str	r0, [r7, #4]
100031cc:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
100031ce:	683b      	ldr	r3, [r7, #0]
100031d0:	2b00      	cmp	r3, #0
100031d2:	d002      	beq.n	100031da <_fstat+0x16>
  return -1;
100031d4:	2301      	movs	r3, #1
100031d6:	425b      	negs	r3, r3
100031d8:	e001      	b.n	100031de <_fstat+0x1a>
 else
  return -2;
100031da:	2302      	movs	r3, #2
100031dc:	425b      	negs	r3, r3
}
100031de:	1c18      	adds	r0, r3, #0
100031e0:	46bd      	mov	sp, r7
100031e2:	b002      	add	sp, #8
100031e4:	bd80      	pop	{r7, pc}
100031e6:	46c0      	nop			; (mov r8, r8)

100031e8 <_link>:
/*
 * File linking
 */
__attribute__((weak)) int _link (char *old, char *new)
{
100031e8:	b580      	push	{r7, lr}
100031ea:	b082      	sub	sp, #8
100031ec:	af00      	add	r7, sp, #0
100031ee:	6078      	str	r0, [r7, #4]
100031f0:	6039      	str	r1, [r7, #0]
 if (old == new)
100031f2:	687a      	ldr	r2, [r7, #4]
100031f4:	683b      	ldr	r3, [r7, #0]
100031f6:	429a      	cmp	r2, r3
100031f8:	d102      	bne.n	10003200 <_link+0x18>
  return -1;
100031fa:	2301      	movs	r3, #1
100031fc:	425b      	negs	r3, r3
100031fe:	e001      	b.n	10003204 <_link+0x1c>
 else
  return -2;
10003200:	2302      	movs	r3, #2
10003202:	425b      	negs	r3, r3
}
10003204:	1c18      	adds	r0, r3, #0
10003206:	46bd      	mov	sp, r7
10003208:	b002      	add	sp, #8
1000320a:	bd80      	pop	{r7, pc}

1000320c <_unlink>:

/*
 * Unlinking directory entry
 */
__attribute__((weak)) int _unlink(char *name)
{
1000320c:	b580      	push	{r7, lr}
1000320e:	b082      	sub	sp, #8
10003210:	af00      	add	r7, sp, #0
10003212:	6078      	str	r0, [r7, #4]
 return -1;
10003214:	2301      	movs	r3, #1
10003216:	425b      	negs	r3, r3
}
10003218:	1c18      	adds	r0, r3, #0
1000321a:	46bd      	mov	sp, r7
1000321c:	b002      	add	sp, #8
1000321e:	bd80      	pop	{r7, pc}

10003220 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
10003220:	b580      	push	{r7, lr}
10003222:	b086      	sub	sp, #24
10003224:	af00      	add	r7, sp, #0
10003226:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
10003228:	4b14      	ldr	r3, [pc, #80]	; (1000327c <_sbrk+0x5c>)
1000322a:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
1000322c:	4b14      	ldr	r3, [pc, #80]	; (10003280 <_sbrk+0x60>)
1000322e:	681b      	ldr	r3, [r3, #0]
10003230:	2b00      	cmp	r3, #0
10003232:	d108      	bne.n	10003246 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
10003234:	4b12      	ldr	r3, [pc, #72]	; (10003280 <_sbrk+0x60>)
10003236:	4a13      	ldr	r2, [pc, #76]	; (10003284 <_sbrk+0x64>)
10003238:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
1000323a:	4b11      	ldr	r3, [pc, #68]	; (10003280 <_sbrk+0x60>)
1000323c:	681a      	ldr	r2, [r3, #0]
1000323e:	697b      	ldr	r3, [r7, #20]
10003240:	18d2      	adds	r2, r2, r3
10003242:	4b11      	ldr	r3, [pc, #68]	; (10003288 <_sbrk+0x68>)
10003244:	601a      	str	r2, [r3, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
10003246:	4b0e      	ldr	r3, [pc, #56]	; (10003280 <_sbrk+0x60>)
10003248:	681b      	ldr	r3, [r3, #0]
1000324a:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
1000324c:	4b0c      	ldr	r3, [pc, #48]	; (10003280 <_sbrk+0x60>)
1000324e:	681b      	ldr	r3, [r3, #0]
10003250:	1c1a      	adds	r2, r3, #0
10003252:	687b      	ldr	r3, [r7, #4]
10003254:	18d3      	adds	r3, r2, r3
10003256:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
10003258:	2207      	movs	r2, #7
1000325a:	4393      	bics	r3, r2
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
1000325c:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
1000325e:	4b0a      	ldr	r3, [pc, #40]	; (10003288 <_sbrk+0x68>)
10003260:	681b      	ldr	r3, [r3, #0]
10003262:	68fa      	ldr	r2, [r7, #12]
10003264:	429a      	cmp	r2, r3
10003266:	d301      	bcc.n	1000326c <_sbrk+0x4c>
  return ((unsigned char *)NULL);
10003268:	2300      	movs	r3, #0
1000326a:	e003      	b.n	10003274 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
1000326c:	4b04      	ldr	r3, [pc, #16]	; (10003280 <_sbrk+0x60>)
1000326e:	68fa      	ldr	r2, [r7, #12]
10003270:	601a      	str	r2, [r3, #0]
  return CurrBreak;
10003272:	693b      	ldr	r3, [r7, #16]
 }
}
10003274:	1c18      	adds	r0, r3, #0
10003276:	46bd      	mov	sp, r7
10003278:	b006      	add	sp, #24
1000327a:	bd80      	pop	{r7, pc}
1000327c:	00002e68 	.word	0x00002e68
10003280:	20000afc 	.word	0x20000afc
10003284:	20001198 	.word	0x20001198
10003288:	20000b00 	.word	0x20000b00

1000328c <_times>:
/* ========================================================================= */
/*
 * Process timing information
 */
__attribute__((weak)) int _times(struct tms *buf)
{
1000328c:	b580      	push	{r7, lr}
1000328e:	b082      	sub	sp, #8
10003290:	af00      	add	r7, sp, #0
10003292:	6078      	str	r0, [r7, #4]
 return -1;
10003294:	2301      	movs	r3, #1
10003296:	425b      	negs	r3, r3
}
10003298:	1c18      	adds	r0, r3, #0
1000329a:	46bd      	mov	sp, r7
1000329c:	b002      	add	sp, #8
1000329e:	bd80      	pop	{r7, pc}

100032a0 <_wait>:
/*
 * Waiting for a child process to complete
 */
__attribute__((weak)) int _wait(int *status)
{
100032a0:	b580      	push	{r7, lr}
100032a2:	b082      	sub	sp, #8
100032a4:	af00      	add	r7, sp, #0
100032a6:	6078      	str	r0, [r7, #4]
 return -1;
100032a8:	2301      	movs	r3, #1
100032aa:	425b      	negs	r3, r3
}
100032ac:	1c18      	adds	r0, r3, #0
100032ae:	46bd      	mov	sp, r7
100032b0:	b002      	add	sp, #8
100032b2:	bd80      	pop	{r7, pc}

100032b4 <_kill>:

/*
 * Kill a process
 */
__attribute__((weak)) int _kill(int pid,int sig)
{
100032b4:	b580      	push	{r7, lr}
100032b6:	b082      	sub	sp, #8
100032b8:	af00      	add	r7, sp, #0
100032ba:	6078      	str	r0, [r7, #4]
100032bc:	6039      	str	r1, [r7, #0]
 pid = pid;
 sig = sig;
 return -1;
100032be:	2301      	movs	r3, #1
100032c0:	425b      	negs	r3, r3
}
100032c2:	1c18      	adds	r0, r3, #0
100032c4:	46bd      	mov	sp, r7
100032c6:	b002      	add	sp, #8
100032c8:	bd80      	pop	{r7, pc}
100032ca:	46c0      	nop			; (mov r8, r8)

100032cc <_fork>:

/*
 * Forking a child process
 */
__attribute__((weak)) int _fork(void)
{
100032cc:	b580      	push	{r7, lr}
100032ce:	af00      	add	r7, sp, #0
 return -1;
100032d0:	2301      	movs	r3, #1
100032d2:	425b      	negs	r3, r3
}
100032d4:	1c18      	adds	r0, r3, #0
100032d6:	46bd      	mov	sp, r7
100032d8:	bd80      	pop	{r7, pc}
100032da:	46c0      	nop			; (mov r8, r8)

100032dc <_getpid>:

/*
 * Process ID
 */
__attribute__((weak)) int _getpid(void)
{
100032dc:	b580      	push	{r7, lr}
100032de:	af00      	add	r7, sp, #0
 return -1;
100032e0:	2301      	movs	r3, #1
100032e2:	425b      	negs	r3, r3
}
100032e4:	1c18      	adds	r0, r3, #0
100032e6:	46bd      	mov	sp, r7
100032e8:	bd80      	pop	{r7, pc}
100032ea:	46c0      	nop			; (mov r8, r8)

100032ec <_exit>:

/*
 * Program/process exit
 */
__attribute__((weak)) void _exit(int rc)
{
100032ec:	b580      	push	{r7, lr}
100032ee:	b082      	sub	sp, #8
100032f0:	af00      	add	r7, sp, #0
100032f2:	6078      	str	r0, [r7, #4]
 rc = rc;
 while(1){}
100032f4:	e7fe      	b.n	100032f4 <_exit+0x8>
100032f6:	46c0      	nop			; (mov r8, r8)

100032f8 <_init>:
}

/* Init */
__attribute__((weak)) void _init(void)
{}
100032f8:	b580      	push	{r7, lr}
100032fa:	af00      	add	r7, sp, #0
100032fc:	46bd      	mov	sp, r7
100032fe:	bd80      	pop	{r7, pc}

10003300 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
10003300:	b580      	push	{r7, lr}
10003302:	b082      	sub	sp, #8
10003304:	af00      	add	r7, sp, #0
10003306:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
10003308:	2301      	movs	r3, #1
1000330a:	425b      	negs	r3, r3
}
1000330c:	1c18      	adds	r0, r3, #0
1000330e:	46bd      	mov	sp, r7
10003310:	b002      	add	sp, #8
10003312:	bd80      	pop	{r7, pc}

10003314 <UART001_lInit>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lInit (const UART001_HandleType* Handle)
{
10003314:	b580      	push	{r7, lr}
10003316:	b084      	sub	sp, #16
10003318:	af00      	add	r7, sp, #0
1000331a:	6078      	str	r0, [r7, #4]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
1000331c:	687b      	ldr	r3, [r7, #4]
1000331e:	681b      	ldr	r3, [r3, #0]
10003320:	60fb      	str	r3, [r7, #12]
 
  /** UART initialisation  */

  /* Disable UART mode before configuring all USIC registers to avoid 
   * unintended edges */ 
  UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk))); 
10003322:	68fb      	ldr	r3, [r7, #12]
10003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003326:	2202      	movs	r2, #2
10003328:	1c19      	adds	r1, r3, #0
1000332a:	4391      	bics	r1, r2
1000332c:	1c0a      	adds	r2, r1, #0
1000332e:	68fb      	ldr	r3, [r7, #12]
10003330:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the USIC Channel */
  UartRegs->KSCFG |= ((((uint32_t)MASK_ONE  & USIC_CH_KSCFG_MODEN_Msk)) | \
10003332:	68fb      	ldr	r3, [r7, #12]
10003334:	68db      	ldr	r3, [r3, #12]
10003336:	2203      	movs	r2, #3
10003338:	431a      	orrs	r2, r3
1000333a:	68fb      	ldr	r3, [r7, #12]
1000333c:	60da      	str	r2, [r3, #12]
                         USIC_CH_KSCFG_BPMODEN_Msk)); 
   
  /* Configuration of USIC Channel Fractional Divider */

  /* Fractional divider mode selected */
  UartRegs->FDR |= (((uint32_t)SHIFT_TWO << USIC_CH_FDR_DM_Pos) \
1000333e:	68fb      	ldr	r3, [r7, #12]
10003340:	691b      	ldr	r3, [r3, #16]
10003342:	2280      	movs	r2, #128	; 0x80
10003344:	0212      	lsls	r2, r2, #8
10003346:	431a      	orrs	r2, r3
10003348:	68fb      	ldr	r3, [r7, #12]
1000334a:	611a      	str	r2, [r3, #16]
                                                     & USIC_CH_FDR_DM_Msk);
  
  /* Step value */
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
1000334c:	68fb      	ldr	r3, [r7, #12]
1000334e:	691a      	ldr	r2, [r3, #16]
10003350:	687b      	ldr	r3, [r7, #4]
10003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10003354:	059b      	lsls	r3, r3, #22
10003356:	0d9b      	lsrs	r3, r3, #22
10003358:	431a      	orrs	r2, r3
1000335a:	68fb      	ldr	r3, [r7, #12]
1000335c:	611a      	str	r2, [r3, #16]
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
1000335e:	68fb      	ldr	r3, [r7, #12]
10003360:	695a      	ldr	r2, [r3, #20]
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
10003362:	6879      	ldr	r1, [r7, #4]
10003364:	2330      	movs	r3, #48	; 0x30
10003366:	5ccb      	ldrb	r3, [r1, r3]
10003368:	0219      	lsls	r1, r3, #8
1000336a:	23c0      	movs	r3, #192	; 0xc0
1000336c:	009b      	lsls	r3, r3, #2
1000336e:	4019      	ands	r1, r3
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
10003370:	687b      	ldr	r3, [r7, #4]
10003372:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
10003374:	0298      	lsls	r0, r3, #10
10003376:	23f8      	movs	r3, #248	; 0xf8
10003378:	01db      	lsls	r3, r3, #7
1000337a:	4003      	ands	r3, r0
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
1000337c:	4319      	orrs	r1, r3
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_PDIV) << USIC_CH_BRG_PDIV_Pos) &  \
1000337e:	687b      	ldr	r3, [r7, #4]
10003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
10003382:	0418      	lsls	r0, r3, #16
10003384:	4b4f      	ldr	r3, [pc, #316]	; (100034c4 <UART001_lInit+0x1b0>)
10003386:	4003      	ands	r3, r0
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
10003388:	430b      	orrs	r3, r1
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
1000338a:	431a      	orrs	r2, r3
1000338c:	68fb      	ldr	r3, [r7, #12]
1000338e:	615a      	str	r2, [r3, #20]
  /* Configuration of USIC Shift Control */
  
  /* Transmit/Receive LSB first is selected  */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
10003390:	68fb      	ldr	r3, [r7, #12]
10003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003394:	2281      	movs	r2, #129	; 0x81
10003396:	0052      	lsls	r2, r2, #1
10003398:	431a      	orrs	r2, r3
1000339a:	68fb      	ldr	r3, [r7, #12]
1000339c:	635a      	str	r2, [r3, #52]	; 0x34
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
1000339e:	68fb      	ldr	r3, [r7, #12]
100033a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100033a2:	687b      	ldr	r3, [r7, #4]
100033a4:	8b9b      	ldrh	r3, [r3, #28]
100033a6:	0419      	lsls	r1, r3, #16
100033a8:	23fc      	movs	r3, #252	; 0xfc
100033aa:	039b      	lsls	r3, r3, #14
100033ac:	4019      	ands	r1, r3
                      USIC_CH_SCTR_FLE_Msk ) | \
                     (((uint32_t)Handle->DataBits  << USIC_CH_SCTR_WLE_Pos) & \
100033ae:	687b      	ldr	r3, [r7, #4]
100033b0:	8b9b      	ldrh	r3, [r3, #28]
100033b2:	0618      	lsls	r0, r3, #24
100033b4:	23f0      	movs	r3, #240	; 0xf0
100033b6:	051b      	lsls	r3, r3, #20
100033b8:	4003      	ands	r3, r0
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
                      USIC_CH_SCTR_FLE_Msk ) | \
100033ba:	430b      	orrs	r3, r1
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
100033bc:	431a      	orrs	r2, r3
100033be:	68fb      	ldr	r3, [r7, #12]
100033c0:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Configuration of USIC Transmit Control/Status Register */ 
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
	
  UartRegs->TCSR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_TCSR_TDEN_Pos) & \
100033c2:	68fb      	ldr	r3, [r7, #12]
100033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100033c6:	22a0      	movs	r2, #160	; 0xa0
100033c8:	00d2      	lsls	r2, r2, #3
100033ca:	431a      	orrs	r2, r3
100033cc:	68fb      	ldr	r3, [r7, #12]
100033ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
100033d0:	68fb      	ldr	r3, [r7, #12]
100033d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
100033d4:	687b      	ldr	r3, [r7, #4]
100033d6:	7d5b      	ldrb	r3, [r3, #21]
100033d8:	0059      	lsls	r1, r3, #1
100033da:	2302      	movs	r3, #2
100033dc:	4019      	ands	r1, r3
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
100033de:	687b      	ldr	r3, [r7, #4]
100033e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
100033e2:	0218      	lsls	r0, r3, #8
100033e4:	23f8      	movs	r3, #248	; 0xf8
100033e6:	015b      	lsls	r3, r3, #5
100033e8:	4003      	ands	r3, r0
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
100033ea:	430b      	orrs	r3, r1
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
100033ec:	4313      	orrs	r3, r2
100033ee:	2201      	movs	r2, #1
100033f0:	431a      	orrs	r2, r3
100033f2:	68fb      	ldr	r3, [r7, #12]
100033f4:	63da      	str	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
    USIC_CH_PCR_ASCMode_SP_Msk));
      
  if(Handle->RecvNoiseEn)
100033f6:	687a      	ldr	r2, [r7, #4]
100033f8:	2324      	movs	r3, #36	; 0x24
100033fa:	5cd3      	ldrb	r3, [r2, r3]
100033fc:	2b00      	cmp	r3, #0
100033fe:	d005      	beq.n	1000340c <UART001_lInit+0xf8>
  {
   	/* Enable Receiver Noise Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR5_Pos) & \
10003400:	68fb      	ldr	r3, [r7, #12]
10003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003404:	2220      	movs	r2, #32
10003406:	431a      	orrs	r2, r3
10003408:	68fb      	ldr	r3, [r7, #12]
1000340a:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	  USIC_CH_PCR_CTR5_Msk); 
  }
  
  if(Handle->FormatErrEn)
1000340c:	687a      	ldr	r2, [r7, #4]
1000340e:	2325      	movs	r3, #37	; 0x25
10003410:	5cd3      	ldrb	r3, [r2, r3]
10003412:	2b00      	cmp	r3, #0
10003414:	d005      	beq.n	10003422 <UART001_lInit+0x10e>
  {
   	/* Enable Format Error Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR6_Pos) & \
10003416:	68fb      	ldr	r3, [r7, #12]
10003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000341a:	2240      	movs	r2, #64	; 0x40
1000341c:	431a      	orrs	r2, r3
1000341e:	68fb      	ldr	r3, [r7, #12]
10003420:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	                             USIC_CH_PCR_CTR6_Msk); 
  }
  
  if(Handle->FrameFinEn)
10003422:	687a      	ldr	r2, [r7, #4]
10003424:	2326      	movs	r3, #38	; 0x26
10003426:	5cd3      	ldrb	r3, [r2, r3]
10003428:	2b00      	cmp	r3, #0
1000342a:	d005      	beq.n	10003438 <UART001_lInit+0x124>
  {
   	/* Enable Frame Finished Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR7_Pos) & \
1000342c:	68fb      	ldr	r3, [r7, #12]
1000342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003430:	2280      	movs	r2, #128	; 0x80
10003432:	431a      	orrs	r2, r3
10003434:	68fb      	ldr	r3, [r7, #12]
10003436:	63da      	str	r2, [r3, #60]	; 0x3c
		  	                                   	  	 USIC_CH_PCR_CTR7_Msk); 
  } 
  
  if (Handle->TxFifoEn)
10003438:	687b      	ldr	r3, [r7, #4]
1000343a:	7f9b      	ldrb	r3, [r3, #30]
1000343c:	2b00      	cmp	r3, #0
1000343e:	d011      	beq.n	10003464 <UART001_lInit+0x150>
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
10003440:	68fa      	ldr	r2, [r7, #12]
10003442:	2384      	movs	r3, #132	; 0x84
10003444:	005b      	lsls	r3, r3, #1
10003446:	58d2      	ldr	r2, [r2, r3]
10003448:	6879      	ldr	r1, [r7, #4]
1000344a:	2320      	movs	r3, #32
1000344c:	5ccb      	ldrb	r3, [r1, r3]
1000344e:	0219      	lsls	r1, r3, #8
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
10003450:	23fc      	movs	r3, #252	; 0xfc
10003452:	019b      	lsls	r3, r3, #6
10003454:	400b      	ands	r3, r1
  } 
  
  if (Handle->TxFifoEn)
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
10003456:	1c11      	adds	r1, r2, #0
10003458:	4319      	orrs	r1, r3
1000345a:	68fa      	ldr	r2, [r7, #12]
1000345c:	2384      	movs	r3, #132	; 0x84
1000345e:	005b      	lsls	r3, r3, #1
10003460:	50d1      	str	r1, [r2, r3]
10003462:	e006      	b.n	10003472 <UART001_lInit+0x15e>
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
  }
  else
  {
	  /* TBIF is set to simplify polling*/
	  UartRegs->PSR_ASCMode |= (((uint32_t)SHIFT_ONE  << USIC_CH_PSR_TBIF_Pos) & \
10003464:	68fb      	ldr	r3, [r7, #12]
10003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003468:	2280      	movs	r2, #128	; 0x80
1000346a:	0192      	lsls	r2, r2, #6
1000346c:	431a      	orrs	r2, r3
1000346e:	68fb      	ldr	r3, [r7, #12]
10003470:	649a      	str	r2, [r3, #72]	; 0x48
	 		  (uint32_t)USIC_CH_PSR_TBIF_Msk);
  }
  
  if (Handle->RxFifoEn)
10003472:	687b      	ldr	r3, [r7, #4]
10003474:	7fdb      	ldrb	r3, [r3, #31]
10003476:	2b00      	cmp	r3, #0
10003478:	d013      	beq.n	100034a2 <UART001_lInit+0x18e>
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
1000347a:	68fa      	ldr	r2, [r7, #12]
1000347c:	2386      	movs	r3, #134	; 0x86
1000347e:	005b      	lsls	r3, r3, #1
10003480:	58d2      	ldr	r2, [r2, r3]
10003482:	6879      	ldr	r1, [r7, #4]
10003484:	2321      	movs	r3, #33	; 0x21
10003486:	5ccb      	ldrb	r3, [r1, r3]
10003488:	0219      	lsls	r1, r3, #8
						   USIC_CH_RBCTR_LIMIT_Pos) & USIC_CH_RBCTR_LIMIT_Msk) | \
1000348a:	23fc      	movs	r3, #252	; 0xfc
1000348c:	019b      	lsls	r3, r3, #6
1000348e:	400b      	ands	r3, r1
  }
  
  if (Handle->RxFifoEn)
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
10003490:	4313      	orrs	r3, r2
10003492:	2280      	movs	r2, #128	; 0x80
10003494:	0552      	lsls	r2, r2, #21
10003496:	1c11      	adds	r1, r2, #0
10003498:	4319      	orrs	r1, r3
1000349a:	68fa      	ldr	r2, [r7, #12]
1000349c:	2386      	movs	r3, #134	; 0x86
1000349e:	005b      	lsls	r3, r3, #1
100034a0:	50d1      	str	r1, [r2, r3]
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
100034a2:	68fb      	ldr	r3, [r7, #12]
100034a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
100034a6:	687b      	ldr	r3, [r7, #4]
100034a8:	7d9b      	ldrb	r3, [r3, #22]
100034aa:	0219      	lsls	r1, r3, #8
100034ac:	23c0      	movs	r3, #192	; 0xc0
100034ae:	009b      	lsls	r3, r3, #2
100034b0:	400b      	ands	r3, r1
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
100034b2:	4313      	orrs	r3, r2
100034b4:	2202      	movs	r2, #2
100034b6:	431a      	orrs	r2, r3
100034b8:	68fb      	ldr	r3, [r7, #12]
100034ba:	641a      	str	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
                     USIC_CH_CCR_PM_Msk));

}
100034bc:	46bd      	mov	sp, r7
100034be:	b004      	add	sp, #16
100034c0:	bd80      	pop	{r7, pc}
100034c2:	46c0      	nop			; (mov r8, r8)
100034c4:	03ff0000 	.word	0x03ff0000

100034c8 <UART001_lConfigTXPin>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
100034c8:	b590      	push	{r4, r7, lr}
100034ca:	b085      	sub	sp, #20
100034cc:	af00      	add	r7, sp, #0
100034ce:	6078      	str	r0, [r7, #4]
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
100034d0:	687b      	ldr	r3, [r7, #4]
100034d2:	685b      	ldr	r3, [r3, #4]
100034d4:	687a      	ldr	r2, [r7, #4]
100034d6:	6852      	ldr	r2, [r2, #4]
100034d8:	6851      	ldr	r1, [r2, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
100034da:	687a      	ldr	r2, [r7, #4]
100034dc:	7a12      	ldrb	r2, [r2, #8]
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
100034de:	2001      	movs	r0, #1
100034e0:	1c04      	adds	r4, r0, #0
100034e2:	4094      	lsls	r4, r2
100034e4:	1c22      	adds	r2, r4, #0
100034e6:	430a      	orrs	r2, r1
100034e8:	605a      	str	r2, [r3, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
     
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;
100034ea:	687b      	ldr	r3, [r7, #4]
100034ec:	7a1b      	ldrb	r3, [r3, #8]
100034ee:	60fb      	str	r3, [r7, #12]

    if (FIRST_NIBBLE > TempPortPin)
100034f0:	68fb      	ldr	r3, [r7, #12]
100034f2:	2b03      	cmp	r3, #3
100034f4:	d80e      	bhi.n	10003514 <UART001_lConfigTXPin+0x4c>
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
100034f6:	687b      	ldr	r3, [r7, #4]
100034f8:	685b      	ldr	r3, [r3, #4]
100034fa:	687a      	ldr	r2, [r7, #4]
100034fc:	6852      	ldr	r2, [r2, #4]
100034fe:	6911      	ldr	r1, [r2, #16]
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10003500:	68fa      	ldr	r2, [r7, #12]
10003502:	00d2      	lsls	r2, r2, #3
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10003504:	3203      	adds	r2, #3
10003506:	2018      	movs	r0, #24
10003508:	1c04      	adds	r4, r0, #0
1000350a:	4094      	lsls	r4, r2
1000350c:	1c22      	adds	r2, r4, #0
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
1000350e:	430a      	orrs	r2, r1
10003510:	611a      	str	r2, [r3, #16]
10003512:	e046      	b.n	100035a2 <UART001_lConfigTXPin+0xda>
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
10003514:	68fb      	ldr	r3, [r7, #12]
10003516:	2b03      	cmp	r3, #3
10003518:	d914      	bls.n	10003544 <UART001_lConfigTXPin+0x7c>
1000351a:	68fb      	ldr	r3, [r7, #12]
1000351c:	2b07      	cmp	r3, #7
1000351e:	d811      	bhi.n	10003544 <UART001_lConfigTXPin+0x7c>
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
10003520:	68fb      	ldr	r3, [r7, #12]
10003522:	3b04      	subs	r3, #4
10003524:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
10003526:	687b      	ldr	r3, [r7, #4]
10003528:	685b      	ldr	r3, [r3, #4]
1000352a:	687a      	ldr	r2, [r7, #4]
1000352c:	6852      	ldr	r2, [r2, #4]
1000352e:	6951      	ldr	r1, [r2, #20]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10003530:	68fa      	ldr	r2, [r7, #12]
10003532:	00d2      	lsls	r2, r2, #3
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10003534:	3203      	adds	r2, #3
10003536:	2018      	movs	r0, #24
10003538:	1c04      	adds	r4, r0, #0
1000353a:	4094      	lsls	r4, r2
1000353c:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
1000353e:	430a      	orrs	r2, r1
10003540:	615a      	str	r2, [r3, #20]
10003542:	e02e      	b.n	100035a2 <UART001_lConfigTXPin+0xda>
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
10003544:	68fb      	ldr	r3, [r7, #12]
10003546:	2b07      	cmp	r3, #7
10003548:	d914      	bls.n	10003574 <UART001_lConfigTXPin+0xac>
1000354a:	68fb      	ldr	r3, [r7, #12]
1000354c:	2b0b      	cmp	r3, #11
1000354e:	d811      	bhi.n	10003574 <UART001_lConfigTXPin+0xac>
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
10003550:	68fb      	ldr	r3, [r7, #12]
10003552:	3b08      	subs	r3, #8
10003554:	60fb      	str	r3, [r7, #12]
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
10003556:	687b      	ldr	r3, [r7, #4]
10003558:	685b      	ldr	r3, [r3, #4]
1000355a:	687a      	ldr	r2, [r7, #4]
1000355c:	6852      	ldr	r2, [r2, #4]
1000355e:	6991      	ldr	r1, [r2, #24]
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10003560:	68fa      	ldr	r2, [r7, #12]
10003562:	00d2      	lsls	r2, r2, #3
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10003564:	3203      	adds	r2, #3
10003566:	2018      	movs	r0, #24
10003568:	1c04      	adds	r4, r0, #0
1000356a:	4094      	lsls	r4, r2
1000356c:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
1000356e:	430a      	orrs	r2, r1
10003570:	619a      	str	r2, [r3, #24]
10003572:	e016      	b.n	100035a2 <UART001_lConfigTXPin+0xda>
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
10003574:	68fb      	ldr	r3, [r7, #12]
10003576:	2b0b      	cmp	r3, #11
10003578:	d913      	bls.n	100035a2 <UART001_lConfigTXPin+0xda>
1000357a:	68fb      	ldr	r3, [r7, #12]
1000357c:	2b0f      	cmp	r3, #15
1000357e:	d810      	bhi.n	100035a2 <UART001_lConfigTXPin+0xda>
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
10003580:	68fb      	ldr	r3, [r7, #12]
10003582:	3b0c      	subs	r3, #12
10003584:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
10003586:	687b      	ldr	r3, [r7, #4]
10003588:	685b      	ldr	r3, [r3, #4]
1000358a:	687a      	ldr	r2, [r7, #4]
1000358c:	6852      	ldr	r2, [r2, #4]
1000358e:	69d1      	ldr	r1, [r2, #28]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10003590:	68fa      	ldr	r2, [r7, #12]
10003592:	00d2      	lsls	r2, r2, #3
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10003594:	3203      	adds	r2, #3
10003596:	2018      	movs	r0, #24
10003598:	1c04      	adds	r4, r0, #0
1000359a:	4094      	lsls	r4, r2
1000359c:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
1000359e:	430a      	orrs	r2, r1
100035a0:	61da      	str	r2, [r3, #28]
							(TempPortPin * 8U)));
    }
	else
	{}

}
100035a2:	46bd      	mov	sp, r7
100035a4:	b005      	add	sp, #20
100035a6:	bd90      	pop	{r4, r7, pc}

100035a8 <UART001_labsRealType>:
 * 				 -ve float value if Number is >= 0.0 <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
float UART001_labsRealType(float Number)
{
100035a8:	b580      	push	{r7, lr}
100035aa:	b084      	sub	sp, #16
100035ac:	af00      	add	r7, sp, #0
100035ae:	6078      	str	r0, [r7, #4]
   float return_value;
	if (Number < 0.0F){
100035b0:	6878      	ldr	r0, [r7, #4]
100035b2:	2100      	movs	r1, #0
100035b4:	f003 fdae 	bl	10007114 <__aeabi_fcmplt>
100035b8:	1c03      	adds	r3, r0, #0
100035ba:	2b00      	cmp	r3, #0
100035bc:	d005      	beq.n	100035ca <UART001_labsRealType+0x22>
		return_value = -Number;
100035be:	687b      	ldr	r3, [r7, #4]
100035c0:	2280      	movs	r2, #128	; 0x80
100035c2:	0612      	lsls	r2, r2, #24
100035c4:	4053      	eors	r3, r2
100035c6:	60fb      	str	r3, [r7, #12]
100035c8:	e001      	b.n	100035ce <UART001_labsRealType+0x26>
	}
	else{
		return_value = Number;
100035ca:	687b      	ldr	r3, [r7, #4]
100035cc:	60fb      	str	r3, [r7, #12]
	}
	return return_value;
100035ce:	68fb      	ldr	r3, [r7, #12]
}
100035d0:	1c18      	adds	r0, r3, #0
100035d2:	46bd      	mov	sp, r7
100035d4:	b004      	add	sp, #16
100035d6:	bd80      	pop	{r7, pc}

100035d8 <UART001_lConfigureBaudRate>:
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
void UART001_lConfigureBaudRate\
                              (uint32_t BaudRate,uint32_t* Pdiv,uint32_t* Step)
{
100035d8:	b5b0      	push	{r4, r5, r7, lr}
100035da:	b0ae      	sub	sp, #184	; 0xb8
100035dc:	af00      	add	r7, sp, #0
100035de:	60f8      	str	r0, [r7, #12]
100035e0:	60b9      	str	r1, [r7, #8]
100035e2:	607a      	str	r2, [r7, #4]
	uint32_t fdr_step = 0x00U;
100035e4:	2300      	movs	r3, #0
100035e6:	20b4      	movs	r0, #180	; 0xb4
100035e8:	19c0      	adds	r0, r0, r7
100035ea:	6003      	str	r3, [r0, #0]
	uint32_t brg_pdiv = 0x00U;
100035ec:	2300      	movs	r3, #0
100035ee:	21b0      	movs	r1, #176	; 0xb0
100035f0:	19c9      	adds	r1, r1, r7
100035f2:	600b      	str	r3, [r1, #0]
	uint32_t divisor_in = BaudRate ;
100035f4:	68fb      	ldr	r3, [r7, #12]
100035f6:	22ac      	movs	r2, #172	; 0xac
100035f8:	19d2      	adds	r2, r2, r7
100035fa:	6013      	str	r3, [r2, #0]
	/* fPB / 1024 * (Brg_dctq + 1) */
	uint32_t dividend_in = 0U;
100035fc:	2300      	movs	r3, #0
100035fe:	20a8      	movs	r0, #168	; 0xa8
10003600:	19c0      	adds	r0, r0, r7
10003602:	6003      	str	r3, [r0, #0]
	uint32_t divisor_array[4];
	uint32_t dividend_array[4];
	uint32_t div_array[4];
	uint32_t max, frac,divisor1,divisor2,dividend1,dividend2;
	uint32_t array_count,array_count_1,array_count_2;
	uint32_t do_while_break = 0U;
10003604:	2300      	movs	r3, #0
10003606:	2188      	movs	r1, #136	; 0x88
10003608:	19c9      	adds	r1, r1, r7
1000360a:	600b      	str	r3, [r1, #0]
	uint32_t temp = 0U;
1000360c:	2300      	movs	r3, #0
1000360e:	67fb      	str	r3, [r7, #124]	; 0x7c
	float div_factor;
	uint32_t loop_cnt;
	bool swapped;
	dividend_in = (uint32_t)((uint32_t)(UART001_CLOCK * 1000000)/ \
10003610:	4be0      	ldr	r3, [pc, #896]	; (10003994 <UART001_lConfigureBaudRate+0x3bc>)
10003612:	22a8      	movs	r2, #168	; 0xa8
10003614:	19d2      	adds	r2, r2, r7
10003616:	6013      	str	r3, [r2, #0]
                    	(UART001_MAX_VALUE * UART001_DCTQ_VALUE)); 
	/* swap if divisor_in/dividend_in > max_divisor/max_dividend */
	div_factor = (float) divisor_in/(float) dividend_in;
10003618:	23ac      	movs	r3, #172	; 0xac
1000361a:	19db      	adds	r3, r3, r7
1000361c:	6818      	ldr	r0, [r3, #0]
1000361e:	f004 faf7 	bl	10007c10 <__aeabi_ui2f>
10003622:	1c04      	adds	r4, r0, #0
10003624:	21a8      	movs	r1, #168	; 0xa8
10003626:	19c9      	adds	r1, r1, r7
10003628:	6808      	ldr	r0, [r1, #0]
1000362a:	f004 faf1 	bl	10007c10 <__aeabi_ui2f>
1000362e:	1c03      	adds	r3, r0, #0
10003630:	1c20      	adds	r0, r4, #0
10003632:	1c19      	adds	r1, r3, #0
10003634:	f003 fdd0 	bl	100071d8 <__aeabi_fdiv>
10003638:	1c03      	adds	r3, r0, #0
1000363a:	67bb      	str	r3, [r7, #120]	; 0x78
	if ( div_factor > 1.0F)
1000363c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
1000363e:	21fe      	movs	r1, #254	; 0xfe
10003640:	0589      	lsls	r1, r1, #22
10003642:	f003 fd7b 	bl	1000713c <__aeabi_fcmpgt>
10003646:	1c03      	adds	r3, r0, #0
10003648:	2b00      	cmp	r3, #0
1000364a:	d017      	beq.n	1000367c <UART001_lConfigureBaudRate+0xa4>
	{
		max = UART001_MAX_VALUE;
1000364c:	2380      	movs	r3, #128	; 0x80
1000364e:	00db      	lsls	r3, r3, #3
10003650:	22a4      	movs	r2, #164	; 0xa4
10003652:	19d2      	adds	r2, r2, r7
10003654:	6013      	str	r3, [r2, #0]
		swapped = 1U;
10003656:	1c3b      	adds	r3, r7, #0
10003658:	3383      	adds	r3, #131	; 0x83
1000365a:	2201      	movs	r2, #1
1000365c:	701a      	strb	r2, [r3, #0]
		temp = divisor_in;
1000365e:	20ac      	movs	r0, #172	; 0xac
10003660:	19c0      	adds	r0, r0, r7
10003662:	6803      	ldr	r3, [r0, #0]
10003664:	67fb      	str	r3, [r7, #124]	; 0x7c
		divisor_in = dividend_in;
10003666:	21a8      	movs	r1, #168	; 0xa8
10003668:	19c9      	adds	r1, r1, r7
1000366a:	680b      	ldr	r3, [r1, #0]
1000366c:	22ac      	movs	r2, #172	; 0xac
1000366e:	19d2      	adds	r2, r2, r7
10003670:	6013      	str	r3, [r2, #0]
		dividend_in = temp;
10003672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10003674:	20a8      	movs	r0, #168	; 0xa8
10003676:	19c0      	adds	r0, r0, r7
10003678:	6003      	str	r3, [r0, #0]
1000367a:	e008      	b.n	1000368e <UART001_lConfigureBaudRate+0xb6>
	}
	else
	{
		swapped = 0U;
1000367c:	1c3b      	adds	r3, r7, #0
1000367e:	3383      	adds	r3, #131	; 0x83
10003680:	2200      	movs	r2, #0
10003682:	701a      	strb	r2, [r3, #0]
		max = UART001_MAX_VALUE;
10003684:	2380      	movs	r3, #128	; 0x80
10003686:	00db      	lsls	r3, r3, #3
10003688:	21a4      	movs	r1, #164	; 0xa4
1000368a:	19c9      	adds	r1, r1, r7
1000368c:	600b      	str	r3, [r1, #0]
	}
	/*Init parameters*/
	loop_cnt = 0U;
1000368e:	2300      	movs	r3, #0
10003690:	2284      	movs	r2, #132	; 0x84
10003692:	19d2      	adds	r2, r2, r7
10003694:	6013      	str	r3, [r2, #0]
	array_count = 0U;
10003696:	2300      	movs	r3, #0
10003698:	2090      	movs	r0, #144	; 0x90
1000369a:	19c0      	adds	r0, r0, r7
1000369c:	6003      	str	r3, [r0, #0]
	array_count_1 = 0U;
1000369e:	2300      	movs	r3, #0
100036a0:	218c      	movs	r1, #140	; 0x8c
100036a2:	19c9      	adds	r1, r1, r7
100036a4:	600b      	str	r3, [r1, #0]
	divisor[0] = divisor_in;
100036a6:	1c3b      	adds	r3, r7, #0
100036a8:	3360      	adds	r3, #96	; 0x60
100036aa:	20ac      	movs	r0, #172	; 0xac
100036ac:	19c0      	adds	r0, r0, r7
100036ae:	6802      	ldr	r2, [r0, #0]
100036b0:	601a      	str	r2, [r3, #0]
	remainder[0] = dividend_in;
100036b2:	1c3b      	adds	r3, r7, #0
100036b4:	3340      	adds	r3, #64	; 0x40
100036b6:	21a8      	movs	r1, #168	; 0xa8
100036b8:	19c9      	adds	r1, r1, r7
100036ba:	680a      	ldr	r2, [r1, #0]
100036bc:	601a      	str	r2, [r3, #0]
	divisor_array[0] = 1U;
100036be:	1c3b      	adds	r3, r7, #0
100036c0:	3330      	adds	r3, #48	; 0x30
100036c2:	2201      	movs	r2, #1
100036c4:	601a      	str	r2, [r3, #0]
	dividend_array[0] = 0U;
100036c6:	1c3b      	adds	r3, r7, #0
100036c8:	3320      	adds	r3, #32
100036ca:	2200      	movs	r2, #0
100036cc:	601a      	str	r2, [r3, #0]
	do {
			++loop_cnt;
100036ce:	2284      	movs	r2, #132	; 0x84
100036d0:	19d2      	adds	r2, r2, r7
100036d2:	6813      	ldr	r3, [r2, #0]
100036d4:	3301      	adds	r3, #1
100036d6:	2084      	movs	r0, #132	; 0x84
100036d8:	19c0      	adds	r0, r0, r7
100036da:	6003      	str	r3, [r0, #0]
			array_count_2 = array_count_1; /* on first loop is not used */
100036dc:	218c      	movs	r1, #140	; 0x8c
100036de:	19c9      	adds	r1, r1, r7
100036e0:	680b      	ldr	r3, [r1, #0]
100036e2:	677b      	str	r3, [r7, #116]	; 0x74
			array_count_1 = array_count;
100036e4:	2290      	movs	r2, #144	; 0x90
100036e6:	19d2      	adds	r2, r2, r7
100036e8:	6813      	ldr	r3, [r2, #0]
100036ea:	208c      	movs	r0, #140	; 0x8c
100036ec:	19c0      	adds	r0, r0, r7
100036ee:	6003      	str	r3, [r0, #0]
			array_count = loop_cnt % 4U;
100036f0:	2184      	movs	r1, #132	; 0x84
100036f2:	19c9      	adds	r1, r1, r7
100036f4:	680a      	ldr	r2, [r1, #0]
100036f6:	2303      	movs	r3, #3
100036f8:	4013      	ands	r3, r2
100036fa:	2290      	movs	r2, #144	; 0x90
100036fc:	19d2      	adds	r2, r2, r7
100036fe:	6013      	str	r3, [r2, #0]
			dividend[array_count] = divisor[array_count_1];
10003700:	1c3b      	adds	r3, r7, #0
10003702:	3360      	adds	r3, #96	; 0x60
10003704:	208c      	movs	r0, #140	; 0x8c
10003706:	19c0      	adds	r0, r0, r7
10003708:	6802      	ldr	r2, [r0, #0]
1000370a:	0092      	lsls	r2, r2, #2
1000370c:	58d1      	ldr	r1, [r2, r3]
1000370e:	1c3b      	adds	r3, r7, #0
10003710:	3350      	adds	r3, #80	; 0x50
10003712:	2090      	movs	r0, #144	; 0x90
10003714:	19c0      	adds	r0, r0, r7
10003716:	6802      	ldr	r2, [r0, #0]
10003718:	0092      	lsls	r2, r2, #2
1000371a:	50d1      	str	r1, [r2, r3]
			
			divisor[array_count] = remainder[array_count_1];
1000371c:	1c3b      	adds	r3, r7, #0
1000371e:	3340      	adds	r3, #64	; 0x40
10003720:	218c      	movs	r1, #140	; 0x8c
10003722:	19c9      	adds	r1, r1, r7
10003724:	680a      	ldr	r2, [r1, #0]
10003726:	0092      	lsls	r2, r2, #2
10003728:	58d1      	ldr	r1, [r2, r3]
1000372a:	1c3b      	adds	r3, r7, #0
1000372c:	3360      	adds	r3, #96	; 0x60
1000372e:	2090      	movs	r0, #144	; 0x90
10003730:	19c0      	adds	r0, r0, r7
10003732:	6802      	ldr	r2, [r0, #0]
10003734:	0092      	lsls	r2, r2, #2
10003736:	50d1      	str	r1, [r2, r3]
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
10003738:	1c3b      	adds	r3, r7, #0
1000373a:	3350      	adds	r3, #80	; 0x50
1000373c:	2190      	movs	r1, #144	; 0x90
1000373e:	19c9      	adds	r1, r1, r7
10003740:	680a      	ldr	r2, [r1, #0]
10003742:	0092      	lsls	r2, r2, #2
10003744:	58d2      	ldr	r2, [r2, r3]
10003746:	1c3b      	adds	r3, r7, #0
10003748:	3360      	adds	r3, #96	; 0x60
1000374a:	2090      	movs	r0, #144	; 0x90
1000374c:	19c0      	adds	r0, r0, r7
1000374e:	6801      	ldr	r1, [r0, #0]
10003750:	0089      	lsls	r1, r1, #2
10003752:	58cb      	ldr	r3, [r1, r3]
10003754:	1c10      	adds	r0, r2, #0
10003756:	1c19      	adds	r1, r3, #0
10003758:	f003 fc7a 	bl	10007050 <__aeabi_uidiv>
1000375c:	1c03      	adds	r3, r0, #0
1000375e:	1c19      	adds	r1, r3, #0
			array_count = loop_cnt % 4U;
			dividend[array_count] = divisor[array_count_1];
			
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
10003760:	1c3b      	adds	r3, r7, #0
10003762:	3310      	adds	r3, #16
10003764:	2090      	movs	r0, #144	; 0x90
10003766:	19c0      	adds	r0, r0, r7
10003768:	6802      	ldr	r2, [r0, #0]
1000376a:	0092      	lsls	r2, r2, #2
1000376c:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
			                       dividend[array_count] % divisor[array_count];
1000376e:	1c3b      	adds	r3, r7, #0
10003770:	3350      	adds	r3, #80	; 0x50
10003772:	2190      	movs	r1, #144	; 0x90
10003774:	19c9      	adds	r1, r1, r7
10003776:	680a      	ldr	r2, [r1, #0]
10003778:	0092      	lsls	r2, r2, #2
1000377a:	58d2      	ldr	r2, [r2, r3]
1000377c:	1c3b      	adds	r3, r7, #0
1000377e:	3360      	adds	r3, #96	; 0x60
10003780:	2090      	movs	r0, #144	; 0x90
10003782:	19c0      	adds	r0, r0, r7
10003784:	6801      	ldr	r1, [r0, #0]
10003786:	0089      	lsls	r1, r1, #2
10003788:	58cb      	ldr	r3, [r1, r3]
1000378a:	1c10      	adds	r0, r2, #0
1000378c:	1c19      	adds	r1, r3, #0
1000378e:	f003 fca3 	bl	100070d8 <__aeabi_uidivmod>
10003792:	1c0b      	adds	r3, r1, #0
10003794:	1c19      	adds	r1, r3, #0
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
10003796:	1c3b      	adds	r3, r7, #0
10003798:	3340      	adds	r3, #64	; 0x40
1000379a:	2090      	movs	r0, #144	; 0x90
1000379c:	19c0      	adds	r0, r0, r7
1000379e:	6802      	ldr	r2, [r0, #0]
100037a0:	0092      	lsls	r2, r2, #2
100037a2:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] % divisor[array_count];
			
			/* This executed only on first loop */
			if (loop_cnt == 1U)
100037a4:	2184      	movs	r1, #132	; 0x84
100037a6:	19c9      	adds	r1, r1, r7
100037a8:	680b      	ldr	r3, [r1, #0]
100037aa:	2b01      	cmp	r3, #1
100037ac:	d10a      	bne.n	100037c4 <UART001_lConfigureBaudRate+0x1ec>
			{ 
				divisor_array[1] = div_array[1];
100037ae:	1c3b      	adds	r3, r7, #0
100037b0:	3310      	adds	r3, #16
100037b2:	685a      	ldr	r2, [r3, #4]
100037b4:	1c3b      	adds	r3, r7, #0
100037b6:	3330      	adds	r3, #48	; 0x30
100037b8:	605a      	str	r2, [r3, #4]
				dividend_array[1] = 1U;
100037ba:	1c3b      	adds	r3, r7, #0
100037bc:	3320      	adds	r3, #32
100037be:	2201      	movs	r2, #1
100037c0:	605a      	str	r2, [r3, #4]
100037c2:	e037      	b.n	10003834 <UART001_lConfigureBaudRate+0x25c>
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
100037c4:	1c3b      	adds	r3, r7, #0
100037c6:	3310      	adds	r3, #16
100037c8:	2090      	movs	r0, #144	; 0x90
100037ca:	19c0      	adds	r0, r0, r7
100037cc:	6802      	ldr	r2, [r0, #0]
100037ce:	0092      	lsls	r2, r2, #2
100037d0:	58d3      	ldr	r3, [r2, r3]
100037d2:	1c3a      	adds	r2, r7, #0
100037d4:	3230      	adds	r2, #48	; 0x30
100037d6:	208c      	movs	r0, #140	; 0x8c
100037d8:	19c0      	adds	r0, r0, r7
100037da:	6801      	ldr	r1, [r0, #0]
100037dc:	0089      	lsls	r1, r1, #2
100037de:	588a      	ldr	r2, [r1, r2]
100037e0:	435a      	muls	r2, r3
				       divisor_array[array_count_2];
100037e2:	1c3b      	adds	r3, r7, #0
100037e4:	3330      	adds	r3, #48	; 0x30
100037e6:	6f79      	ldr	r1, [r7, #116]	; 0x74
100037e8:	0089      	lsls	r1, r1, #2
100037ea:	58cb      	ldr	r3, [r1, r3]
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
100037ec:	18d1      	adds	r1, r2, r3
				divisor_array[1] = div_array[1];
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
100037ee:	1c3b      	adds	r3, r7, #0
100037f0:	3330      	adds	r3, #48	; 0x30
100037f2:	2090      	movs	r0, #144	; 0x90
100037f4:	19c0      	adds	r0, r0, r7
100037f6:	6802      	ldr	r2, [r0, #0]
100037f8:	0092      	lsls	r2, r2, #2
100037fa:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
100037fc:	1c3b      	adds	r3, r7, #0
100037fe:	3310      	adds	r3, #16
10003800:	2190      	movs	r1, #144	; 0x90
10003802:	19c9      	adds	r1, r1, r7
10003804:	680a      	ldr	r2, [r1, #0]
10003806:	0092      	lsls	r2, r2, #2
10003808:	58d3      	ldr	r3, [r2, r3]
1000380a:	1c3a      	adds	r2, r7, #0
1000380c:	3220      	adds	r2, #32
1000380e:	208c      	movs	r0, #140	; 0x8c
10003810:	19c0      	adds	r0, r0, r7
10003812:	6801      	ldr	r1, [r0, #0]
10003814:	0089      	lsls	r1, r1, #2
10003816:	588a      	ldr	r2, [r1, r2]
10003818:	435a      	muls	r2, r3
				       dividend_array[array_count_2];
1000381a:	1c3b      	adds	r3, r7, #0
1000381c:	3320      	adds	r3, #32
1000381e:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003820:	0089      	lsls	r1, r1, #2
10003822:	58cb      	ldr	r3, [r1, r3]
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10003824:	18d1      	adds	r1, r2, r3
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
10003826:	1c3b      	adds	r3, r7, #0
10003828:	3320      	adds	r3, #32
1000382a:	2090      	movs	r0, #144	; 0x90
1000382c:	19c0      	adds	r0, r0, r7
1000382e:	6802      	ldr	r2, [r0, #0]
10003830:	0092      	lsls	r2, r2, #2
10003832:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * dividend_array[array_count_1]) + \
				       dividend_array[array_count_2];
			}
			if (dividend_array[array_count] > max) 
10003834:	1c3b      	adds	r3, r7, #0
10003836:	3320      	adds	r3, #32
10003838:	2190      	movs	r1, #144	; 0x90
1000383a:	19c9      	adds	r1, r1, r7
1000383c:	680a      	ldr	r2, [r1, #0]
1000383e:	0092      	lsls	r2, r2, #2
10003840:	58d2      	ldr	r2, [r2, r3]
10003842:	20a4      	movs	r0, #164	; 0xa4
10003844:	19c0      	adds	r0, r0, r7
10003846:	6803      	ldr	r3, [r0, #0]
10003848:	429a      	cmp	r2, r3
1000384a:	d800      	bhi.n	1000384e <UART001_lConfigureBaudRate+0x276>
1000384c:	e0fd      	b.n	10003a4a <UART001_lConfigureBaudRate+0x472>
			{
				divisor1 = divisor_array[array_count_1];
1000384e:	1c3b      	adds	r3, r7, #0
10003850:	3330      	adds	r3, #48	; 0x30
10003852:	218c      	movs	r1, #140	; 0x8c
10003854:	19c9      	adds	r1, r1, r7
10003856:	680a      	ldr	r2, [r1, #0]
10003858:	0092      	lsls	r2, r2, #2
1000385a:	58d3      	ldr	r3, [r2, r3]
1000385c:	22a0      	movs	r2, #160	; 0xa0
1000385e:	19d2      	adds	r2, r2, r7
10003860:	6013      	str	r3, [r2, #0]
				dividend1 = dividend_array[array_count_1];
10003862:	1c3b      	adds	r3, r7, #0
10003864:	3320      	adds	r3, #32
10003866:	208c      	movs	r0, #140	; 0x8c
10003868:	19c0      	adds	r0, r0, r7
1000386a:	6802      	ldr	r2, [r0, #0]
1000386c:	0092      	lsls	r2, r2, #2
1000386e:	58d3      	ldr	r3, [r2, r3]
10003870:	2198      	movs	r1, #152	; 0x98
10003872:	19c9      	adds	r1, r1, r7
10003874:	600b      	str	r3, [r1, #0]
				frac = (max - dividend_array[array_count_2]) / \
10003876:	1c3b      	adds	r3, r7, #0
10003878:	3320      	adds	r3, #32
1000387a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
1000387c:	0092      	lsls	r2, r2, #2
1000387e:	58d3      	ldr	r3, [r2, r3]
10003880:	20a4      	movs	r0, #164	; 0xa4
10003882:	19c0      	adds	r0, r0, r7
10003884:	6802      	ldr	r2, [r0, #0]
10003886:	1ad2      	subs	r2, r2, r3
				                               dividend_array[array_count_1];
10003888:	1c3b      	adds	r3, r7, #0
1000388a:	3320      	adds	r3, #32
1000388c:	208c      	movs	r0, #140	; 0x8c
1000388e:	19c0      	adds	r0, r0, r7
10003890:	6801      	ldr	r1, [r0, #0]
10003892:	0089      	lsls	r1, r1, #2
10003894:	58cb      	ldr	r3, [r1, r3]
			}
			if (dividend_array[array_count] > max) 
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
10003896:	1c10      	adds	r0, r2, #0
10003898:	1c19      	adds	r1, r3, #0
1000389a:	f003 fbd9 	bl	10007050 <__aeabi_uidiv>
1000389e:	1c03      	adds	r3, r0, #0
100038a0:	673b      	str	r3, [r7, #112]	; 0x70
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
100038a2:	2190      	movs	r1, #144	; 0x90
100038a4:	19c9      	adds	r1, r1, r7
100038a6:	680b      	ldr	r3, [r1, #0]
100038a8:	1e5a      	subs	r2, r3, #1
100038aa:	1c3b      	adds	r3, r7, #0
100038ac:	3330      	adds	r3, #48	; 0x30
100038ae:	0092      	lsls	r2, r2, #2
100038b0:	58d3      	ldr	r3, [r2, r3]
100038b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
100038b4:	435a      	muls	r2, r3
				                                divisor_array[array_count-2U];
100038b6:	2090      	movs	r0, #144	; 0x90
100038b8:	19c0      	adds	r0, r0, r7
100038ba:	6803      	ldr	r3, [r0, #0]
100038bc:	1e99      	subs	r1, r3, #2
100038be:	1c3b      	adds	r3, r7, #0
100038c0:	3330      	adds	r3, #48	; 0x30
100038c2:	0089      	lsls	r1, r1, #2
100038c4:	58cb      	ldr	r3, [r1, r3]
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
100038c6:	18d3      	adds	r3, r2, r3
100038c8:	219c      	movs	r1, #156	; 0x9c
100038ca:	19c9      	adds	r1, r1, r7
100038cc:	600b      	str	r3, [r1, #0]
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
100038ce:	2290      	movs	r2, #144	; 0x90
100038d0:	19d2      	adds	r2, r2, r7
100038d2:	6813      	ldr	r3, [r2, #0]
100038d4:	1e5a      	subs	r2, r3, #1
100038d6:	1c3b      	adds	r3, r7, #0
100038d8:	3320      	adds	r3, #32
100038da:	0092      	lsls	r2, r2, #2
100038dc:	58d3      	ldr	r3, [r2, r3]
100038de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
100038e0:	435a      	muls	r2, r3
				                               dividend_array[array_count_2];
100038e2:	1c3b      	adds	r3, r7, #0
100038e4:	3320      	adds	r3, #32
100038e6:	6f79      	ldr	r1, [r7, #116]	; 0x74
100038e8:	0089      	lsls	r1, r1, #2
100038ea:	58cb      	ldr	r3, [r1, r3]
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
100038ec:	18d3      	adds	r3, r2, r3
100038ee:	2094      	movs	r0, #148	; 0x94
100038f0:	19c0      	adds	r0, r0, r7
100038f2:	6003      	str	r3, [r0, #0]
				                               dividend_array[array_count_2];
				/* Swap if required */
				if (swapped) {
100038f4:	1c3b      	adds	r3, r7, #0
100038f6:	3383      	adds	r3, #131	; 0x83
100038f8:	781b      	ldrb	r3, [r3, #0]
100038fa:	2b00      	cmp	r3, #0
100038fc:	d01b      	beq.n	10003936 <UART001_lConfigureBaudRate+0x35e>
						/* Swap divisor1 and dividend1 */
						temp = divisor1;
100038fe:	21a0      	movs	r1, #160	; 0xa0
10003900:	19c9      	adds	r1, r1, r7
10003902:	680b      	ldr	r3, [r1, #0]
10003904:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor1 = dividend1;
10003906:	2298      	movs	r2, #152	; 0x98
10003908:	19d2      	adds	r2, r2, r7
1000390a:	6813      	ldr	r3, [r2, #0]
1000390c:	20a0      	movs	r0, #160	; 0xa0
1000390e:	19c0      	adds	r0, r0, r7
10003910:	6003      	str	r3, [r0, #0]
						dividend1 = temp;
10003912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10003914:	2198      	movs	r1, #152	; 0x98
10003916:	19c9      	adds	r1, r1, r7
10003918:	600b      	str	r3, [r1, #0]
						/* Swap divisor2 and dividend2 */
						temp = divisor2;
1000391a:	229c      	movs	r2, #156	; 0x9c
1000391c:	19d2      	adds	r2, r2, r7
1000391e:	6813      	ldr	r3, [r2, #0]
10003920:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor2 = dividend2;
10003922:	2094      	movs	r0, #148	; 0x94
10003924:	19c0      	adds	r0, r0, r7
10003926:	6803      	ldr	r3, [r0, #0]
10003928:	219c      	movs	r1, #156	; 0x9c
1000392a:	19c9      	adds	r1, r1, r7
1000392c:	600b      	str	r3, [r1, #0]
						dividend2 = temp;
1000392e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10003930:	2294      	movs	r2, #148	; 0x94
10003932:	19d2      	adds	r2, r2, r7
10003934:	6013      	str	r3, [r2, #0]
					}
				/* Remove if one of has divisor 0 */
				if ((dividend1 == 0U) || (divisor1 == 0U)) {
10003936:	2098      	movs	r0, #152	; 0x98
10003938:	19c0      	adds	r0, r0, r7
1000393a:	6803      	ldr	r3, [r0, #0]
1000393c:	2b00      	cmp	r3, #0
1000393e:	d004      	beq.n	1000394a <UART001_lConfigureBaudRate+0x372>
10003940:	21a0      	movs	r1, #160	; 0xa0
10003942:	19c9      	adds	r1, r1, r7
10003944:	680b      	ldr	r3, [r1, #0]
10003946:	2b00      	cmp	r3, #0
10003948:	d10c      	bne.n	10003964 <UART001_lConfigureBaudRate+0x38c>
					fdr_step = divisor2;
1000394a:	229c      	movs	r2, #156	; 0x9c
1000394c:	19d2      	adds	r2, r2, r7
1000394e:	6813      	ldr	r3, [r2, #0]
10003950:	20b4      	movs	r0, #180	; 0xb4
10003952:	19c0      	adds	r0, r0, r7
10003954:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend2;
10003956:	2194      	movs	r1, #148	; 0x94
10003958:	19c9      	adds	r1, r1, r7
1000395a:	680b      	ldr	r3, [r1, #0]
1000395c:	22b0      	movs	r2, #176	; 0xb0
1000395e:	19d2      	adds	r2, r2, r7
10003960:	6013      	str	r3, [r2, #0]
10003962:	e06d      	b.n	10003a40 <UART001_lConfigureBaudRate+0x468>
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
10003964:	2094      	movs	r0, #148	; 0x94
10003966:	19c0      	adds	r0, r0, r7
10003968:	6803      	ldr	r3, [r0, #0]
1000396a:	2b00      	cmp	r3, #0
1000396c:	d004      	beq.n	10003978 <UART001_lConfigureBaudRate+0x3a0>
1000396e:	219c      	movs	r1, #156	; 0x9c
10003970:	19c9      	adds	r1, r1, r7
10003972:	680b      	ldr	r3, [r1, #0]
10003974:	2b00      	cmp	r3, #0
10003976:	d10f      	bne.n	10003998 <UART001_lConfigureBaudRate+0x3c0>
					fdr_step = divisor1;
10003978:	22a0      	movs	r2, #160	; 0xa0
1000397a:	19d2      	adds	r2, r2, r7
1000397c:	6813      	ldr	r3, [r2, #0]
1000397e:	20b4      	movs	r0, #180	; 0xb4
10003980:	19c0      	adds	r0, r0, r7
10003982:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend1;
10003984:	2198      	movs	r1, #152	; 0x98
10003986:	19c9      	adds	r1, r1, r7
10003988:	680b      	ldr	r3, [r1, #0]
1000398a:	22b0      	movs	r2, #176	; 0xb0
1000398c:	19d2      	adds	r2, r2, r7
1000398e:	6013      	str	r3, [r2, #0]
10003990:	e056      	b.n	10003a40 <UART001_lConfigureBaudRate+0x468>
10003992:	46c0      	nop			; (mov r8, r8)
10003994:	00000c35 	.word	0x00000c35
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
10003998:	23a0      	movs	r3, #160	; 0xa0
1000399a:	19db      	adds	r3, r3, r7
1000399c:	6818      	ldr	r0, [r3, #0]
1000399e:	f004 f937 	bl	10007c10 <__aeabi_ui2f>
100039a2:	1c04      	adds	r4, r0, #0
100039a4:	2198      	movs	r1, #152	; 0x98
100039a6:	19c9      	adds	r1, r1, r7
100039a8:	6808      	ldr	r0, [r1, #0]
100039aa:	f004 f931 	bl	10007c10 <__aeabi_ui2f>
100039ae:	1c03      	adds	r3, r0, #0
100039b0:	1c20      	adds	r0, r4, #0
100039b2:	1c19      	adds	r1, r3, #0
100039b4:	f003 fc10 	bl	100071d8 <__aeabi_fdiv>
100039b8:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
100039ba:	6fb8      	ldr	r0, [r7, #120]	; 0x78
100039bc:	1c19      	adds	r1, r3, #0
100039be:	f003 ff2d 	bl	1000781c <__aeabi_fsub>
100039c2:	1c03      	adds	r3, r0, #0
100039c4:	1c18      	adds	r0, r3, #0
100039c6:	f7ff fdef 	bl	100035a8 <UART001_labsRealType>
100039ca:	1c04      	adds	r4, r0, #0
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
100039cc:	229c      	movs	r2, #156	; 0x9c
100039ce:	19d2      	adds	r2, r2, r7
100039d0:	6810      	ldr	r0, [r2, #0]
100039d2:	f004 f91d 	bl	10007c10 <__aeabi_ui2f>
100039d6:	1c05      	adds	r5, r0, #0
100039d8:	2394      	movs	r3, #148	; 0x94
100039da:	19db      	adds	r3, r3, r7
100039dc:	6818      	ldr	r0, [r3, #0]
100039de:	f004 f917 	bl	10007c10 <__aeabi_ui2f>
100039e2:	1c03      	adds	r3, r0, #0
100039e4:	1c28      	adds	r0, r5, #0
100039e6:	1c19      	adds	r1, r3, #0
100039e8:	f003 fbf6 	bl	100071d8 <__aeabi_fdiv>
100039ec:	1c03      	adds	r3, r0, #0
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
100039ee:	6fb8      	ldr	r0, [r7, #120]	; 0x78
100039f0:	1c19      	adds	r1, r3, #0
100039f2:	f003 ff13 	bl	1000781c <__aeabi_fsub>
100039f6:	1c03      	adds	r3, r0, #0
100039f8:	1c18      	adds	r0, r3, #0
100039fa:	f7ff fdd5 	bl	100035a8 <UART001_labsRealType>
100039fe:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
10003a00:	1c20      	adds	r0, r4, #0
10003a02:	1c19      	adds	r1, r3, #0
10003a04:	f003 fb9a 	bl	1000713c <__aeabi_fcmpgt>
10003a08:	1c03      	adds	r3, r0, #0
10003a0a:	2b00      	cmp	r3, #0
10003a0c:	d00c      	beq.n	10003a28 <UART001_lConfigureBaudRate+0x450>
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
					{
						fdr_step = divisor2;
10003a0e:	209c      	movs	r0, #156	; 0x9c
10003a10:	19c0      	adds	r0, r0, r7
10003a12:	6803      	ldr	r3, [r0, #0]
10003a14:	21b4      	movs	r1, #180	; 0xb4
10003a16:	19c9      	adds	r1, r1, r7
10003a18:	600b      	str	r3, [r1, #0]
						brg_pdiv = dividend2;
10003a1a:	2294      	movs	r2, #148	; 0x94
10003a1c:	19d2      	adds	r2, r2, r7
10003a1e:	6813      	ldr	r3, [r2, #0]
10003a20:	20b0      	movs	r0, #176	; 0xb0
10003a22:	19c0      	adds	r0, r0, r7
10003a24:	6003      	str	r3, [r0, #0]
10003a26:	e00b      	b.n	10003a40 <UART001_lConfigureBaudRate+0x468>
					}else {
						fdr_step = divisor1;
10003a28:	21a0      	movs	r1, #160	; 0xa0
10003a2a:	19c9      	adds	r1, r1, r7
10003a2c:	680b      	ldr	r3, [r1, #0]
10003a2e:	22b4      	movs	r2, #180	; 0xb4
10003a30:	19d2      	adds	r2, r2, r7
10003a32:	6013      	str	r3, [r2, #0]
						brg_pdiv = dividend1;
10003a34:	2098      	movs	r0, #152	; 0x98
10003a36:	19c0      	adds	r0, r0, r7
10003a38:	6803      	ldr	r3, [r0, #0]
10003a3a:	21b0      	movs	r1, #176	; 0xb0
10003a3c:	19c9      	adds	r1, r1, r7
10003a3e:	600b      	str	r3, [r1, #0]
					}
				}
				do_while_break = 0x05U;
10003a40:	2305      	movs	r3, #5
10003a42:	2288      	movs	r2, #136	; 0x88
10003a44:	19d2      	adds	r2, r2, r7
10003a46:	6013      	str	r3, [r2, #0]
10003a48:	e033      	b.n	10003ab2 <UART001_lConfigureBaudRate+0x4da>
			}
			else if (remainder[array_count]== 0U) 
10003a4a:	1c3b      	adds	r3, r7, #0
10003a4c:	3340      	adds	r3, #64	; 0x40
10003a4e:	2090      	movs	r0, #144	; 0x90
10003a50:	19c0      	adds	r0, r0, r7
10003a52:	6802      	ldr	r2, [r0, #0]
10003a54:	0092      	lsls	r2, r2, #2
10003a56:	58d3      	ldr	r3, [r2, r3]
10003a58:	2b00      	cmp	r3, #0
10003a5a:	d12a      	bne.n	10003ab2 <UART001_lConfigureBaudRate+0x4da>
			{
				fdr_step = divisor_array[array_count];
10003a5c:	1c3b      	adds	r3, r7, #0
10003a5e:	3330      	adds	r3, #48	; 0x30
10003a60:	2190      	movs	r1, #144	; 0x90
10003a62:	19c9      	adds	r1, r1, r7
10003a64:	680a      	ldr	r2, [r1, #0]
10003a66:	0092      	lsls	r2, r2, #2
10003a68:	58d3      	ldr	r3, [r2, r3]
10003a6a:	22b4      	movs	r2, #180	; 0xb4
10003a6c:	19d2      	adds	r2, r2, r7
10003a6e:	6013      	str	r3, [r2, #0]
				brg_pdiv = dividend_array[array_count];
10003a70:	1c3b      	adds	r3, r7, #0
10003a72:	3320      	adds	r3, #32
10003a74:	2090      	movs	r0, #144	; 0x90
10003a76:	19c0      	adds	r0, r0, r7
10003a78:	6802      	ldr	r2, [r0, #0]
10003a7a:	0092      	lsls	r2, r2, #2
10003a7c:	58d3      	ldr	r3, [r2, r3]
10003a7e:	21b0      	movs	r1, #176	; 0xb0
10003a80:	19c9      	adds	r1, r1, r7
10003a82:	600b      	str	r3, [r1, #0]
				if (swapped)
10003a84:	1c3b      	adds	r3, r7, #0
10003a86:	3383      	adds	r3, #131	; 0x83
10003a88:	781b      	ldrb	r3, [r3, #0]
10003a8a:	2b00      	cmp	r3, #0
10003a8c:	d00d      	beq.n	10003aaa <UART001_lConfigureBaudRate+0x4d2>
				{
					/* Swap fdr_step and brg_pdiv */
					temp = fdr_step;
10003a8e:	22b4      	movs	r2, #180	; 0xb4
10003a90:	19d2      	adds	r2, r2, r7
10003a92:	6813      	ldr	r3, [r2, #0]
10003a94:	67fb      	str	r3, [r7, #124]	; 0x7c
					fdr_step = brg_pdiv;
10003a96:	20b0      	movs	r0, #176	; 0xb0
10003a98:	19c0      	adds	r0, r0, r7
10003a9a:	6803      	ldr	r3, [r0, #0]
10003a9c:	21b4      	movs	r1, #180	; 0xb4
10003a9e:	19c9      	adds	r1, r1, r7
10003aa0:	600b      	str	r3, [r1, #0]
					brg_pdiv = temp;
10003aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10003aa4:	22b0      	movs	r2, #176	; 0xb0
10003aa6:	19d2      	adds	r2, r2, r7
10003aa8:	6013      	str	r3, [r2, #0]
				}
				do_while_break = 0x05U;
10003aaa:	2305      	movs	r3, #5
10003aac:	2088      	movs	r0, #136	; 0x88
10003aae:	19c0      	adds	r0, r0, r7
10003ab0:	6003      	str	r3, [r0, #0]
			}
			else {
			  /* Do Nothing */
			}
		} while (do_while_break != 0x05U);
10003ab2:	2188      	movs	r1, #136	; 0x88
10003ab4:	19c9      	adds	r1, r1, r7
10003ab6:	680b      	ldr	r3, [r1, #0]
10003ab8:	2b05      	cmp	r3, #5
10003aba:	d000      	beq.n	10003abe <UART001_lConfigureBaudRate+0x4e6>
10003abc:	e607      	b.n	100036ce <UART001_lConfigureBaudRate+0xf6>

	if(fdr_step >= UART001_MAX_VALUE)
10003abe:	23b4      	movs	r3, #180	; 0xb4
10003ac0:	19db      	adds	r3, r3, r7
10003ac2:	681a      	ldr	r2, [r3, #0]
10003ac4:	4b0a      	ldr	r3, [pc, #40]	; (10003af0 <UART001_lConfigureBaudRate+0x518>)
10003ac6:	429a      	cmp	r2, r3
10003ac8:	d903      	bls.n	10003ad2 <UART001_lConfigureBaudRate+0x4fa>
	{
	   fdr_step = 1023U;
10003aca:	4b09      	ldr	r3, [pc, #36]	; (10003af0 <UART001_lConfigureBaudRate+0x518>)
10003acc:	20b4      	movs	r0, #180	; 0xb4
10003ace:	19c0      	adds	r0, r0, r7
10003ad0:	6003      	str	r3, [r0, #0]
	}

	*Step = fdr_step;
10003ad2:	687b      	ldr	r3, [r7, #4]
10003ad4:	21b4      	movs	r1, #180	; 0xb4
10003ad6:	19c9      	adds	r1, r1, r7
10003ad8:	680a      	ldr	r2, [r1, #0]
10003ada:	601a      	str	r2, [r3, #0]

	*Pdiv = brg_pdiv - 1U;
10003adc:	22b0      	movs	r2, #176	; 0xb0
10003ade:	19d2      	adds	r2, r2, r7
10003ae0:	6813      	ldr	r3, [r2, #0]
10003ae2:	1e5a      	subs	r2, r3, #1
10003ae4:	68bb      	ldr	r3, [r7, #8]
10003ae6:	601a      	str	r2, [r3, #0]
}
10003ae8:	46bd      	mov	sp, r7
10003aea:	b02e      	add	sp, #184	; 0xb8
10003aec:	bdb0      	pop	{r4, r5, r7, pc}
10003aee:	46c0      	nop			; (mov r8, r8)
10003af0:	000003ff 	.word	0x000003ff

10003af4 <UART001_Init>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
void UART001_Init(void)
{
10003af4:	b580      	push	{r7, lr}
10003af6:	b082      	sub	sp, #8
10003af8:	af00      	add	r7, sp, #0
    #if (__TARGET_DEVICE__ != XMC45)
	#if ((__TARGET_DEVICE__ == XMC13) || \
	     (__TARGET_DEVICE__ == XMC12) || \
	     (__TARGET_DEVICE__ == XMC11))
	  /* Disable the USIC0/USIC1 clock gating for XMC1000 devices */	     
	  SCU_GENERAL->PASSWD = 0x000000C0UL;
10003afa:	4b1d      	ldr	r3, [pc, #116]	; (10003b70 <UART001_Init+0x7c>)
10003afc:	22c0      	movs	r2, #192	; 0xc0
10003afe:	625a      	str	r2, [r3, #36]	; 0x24
	  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, \
10003b00:	4b1c      	ldr	r3, [pc, #112]	; (10003b74 <UART001_Init+0x80>)
10003b02:	4a1c      	ldr	r2, [pc, #112]	; (10003b74 <UART001_Init+0x80>)
10003b04:	6812      	ldr	r2, [r2, #0]
10003b06:	491c      	ldr	r1, [pc, #112]	; (10003b78 <UART001_Init+0x84>)
10003b08:	430a      	orrs	r2, r1
10003b0a:	601a      	str	r2, [r3, #0]
	                                SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);

	  #if defined(UART001_PER0_USIC0_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_USIC0_Pos);
10003b0c:	4b19      	ldr	r3, [pc, #100]	; (10003b74 <UART001_Init+0x80>)
10003b0e:	4a19      	ldr	r2, [pc, #100]	; (10003b74 <UART001_Init+0x80>)
10003b10:	6912      	ldr	r2, [r2, #16]
10003b12:	2108      	movs	r1, #8
10003b14:	430a      	orrs	r2, r1
10003b16:	611a      	str	r2, [r3, #16]
      #endif
      #if defined(UART001_PER1_USIC1_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR1, SCU_CLK_CGATCLR1_USIC1_Pos);
	  #endif
	  while ((SCU_CLK->CLKCR)&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003b18:	46c0      	nop			; (mov r8, r8)
10003b1a:	4b16      	ldr	r3, [pc, #88]	; (10003b74 <UART001_Init+0x80>)
10003b1c:	681a      	ldr	r2, [r3, #0]
10003b1e:	2380      	movs	r3, #128	; 0x80
10003b20:	05db      	lsls	r3, r3, #23
10003b22:	4013      	ands	r3, r2
10003b24:	d1f9      	bne.n	10003b1a <UART001_Init+0x26>
	  {
	  	;
	  }
	  SCU_GENERAL->PASSWD = 0x000000C3UL;
10003b26:	4b12      	ldr	r3, [pc, #72]	; (10003b70 <UART001_Init+0x7c>)
10003b28:	22c3      	movs	r2, #195	; 0xc3
10003b2a:	625a      	str	r2, [r3, #36]	; 0x24
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10003b2c:	2300      	movs	r3, #0
10003b2e:	607b      	str	r3, [r7, #4]
10003b30:	e017      	b.n	10003b62 <UART001_Init+0x6e>
	                           LoopIndex++)
   {
	  if (UART001_HandleArray[LoopIndex]->Mode == UART_HALFDUPLEX)
10003b32:	4b12      	ldr	r3, [pc, #72]	; (10003b7c <UART001_Init+0x88>)
10003b34:	687a      	ldr	r2, [r7, #4]
10003b36:	0092      	lsls	r2, r2, #2
10003b38:	58d3      	ldr	r3, [r2, r3]
10003b3a:	7d1b      	ldrb	r3, [r3, #20]
10003b3c:	2b01      	cmp	r3, #1
10003b3e:	d106      	bne.n	10003b4e <UART001_Init+0x5a>
	  {
	   /*Configure TX Pin in Open-drain mode to allow the Wired-AND connection*/
		UART001_lConfigTXPin(UART001_HandleArray[LoopIndex]);
10003b40:	4b0e      	ldr	r3, [pc, #56]	; (10003b7c <UART001_Init+0x88>)
10003b42:	687a      	ldr	r2, [r7, #4]
10003b44:	0092      	lsls	r2, r2, #2
10003b46:	58d3      	ldr	r3, [r2, r3]
10003b48:	1c18      	adds	r0, r3, #0
10003b4a:	f7ff fcbd 	bl	100034c8 <UART001_lConfigTXPin>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
10003b4e:	4b0b      	ldr	r3, [pc, #44]	; (10003b7c <UART001_Init+0x88>)
10003b50:	687a      	ldr	r2, [r7, #4]
10003b52:	0092      	lsls	r2, r2, #2
10003b54:	58d3      	ldr	r3, [r2, r3]
10003b56:	1c18      	adds	r0, r3, #0
10003b58:	f7ff fbdc 	bl	10003314 <UART001_lInit>
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
	                           LoopIndex++)
10003b5c:	687b      	ldr	r3, [r7, #4]
10003b5e:	3301      	adds	r3, #1
10003b60:	607b      	str	r3, [r7, #4]
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10003b62:	687b      	ldr	r3, [r7, #4]
10003b64:	2b00      	cmp	r3, #0
10003b66:	d0e4      	beq.n	10003b32 <UART001_Init+0x3e>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
   }
   
}
10003b68:	46bd      	mov	sp, r7
10003b6a:	b002      	add	sp, #8
10003b6c:	bd80      	pop	{r7, pc}
10003b6e:	46c0      	nop			; (mov r8, r8)
10003b70:	40010000 	.word	0x40010000
10003b74:	40010300 	.word	0x40010300
10003b78:	3ff00000 	.word	0x3ff00000
10003b7c:	20001190 	.word	0x20001190

10003b80 <UART001_DeInit>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
 void  UART001_DeInit (const UART001_HandleType* Handle)
{
10003b80:	b580      	push	{r7, lr}
10003b82:	b082      	sub	sp, #8
10003b84:	af00      	add	r7, sp, #0
10003b86:	6078      	str	r0, [r7, #4]
  /* <<<DD_UART001_API_2>>> */
  /* Place holder function */      
}
10003b88:	46bd      	mov	sp, r7
10003b8a:	b002      	add	sp, #8
10003b8c:	bd80      	pop	{r7, pc}
10003b8e:	46c0      	nop			; (mov r8, r8)

10003b90 <UART001_Configure>:
  const UART001_HandleType* Handle,
  uint32_t BaudRate,
  UART_ParityType Parity,
  UART_StopBitType Stopbit
)
{
10003b90:	b580      	push	{r7, lr}
10003b92:	b08a      	sub	sp, #40	; 0x28
10003b94:	af00      	add	r7, sp, #0
10003b96:	60f8      	str	r0, [r7, #12]
10003b98:	60b9      	str	r1, [r7, #8]
10003b9a:	1c11      	adds	r1, r2, #0
10003b9c:	1c1a      	adds	r2, r3, #0
10003b9e:	1dfb      	adds	r3, r7, #7
10003ba0:	7019      	strb	r1, [r3, #0]
10003ba2:	1dbb      	adds	r3, r7, #6
10003ba4:	701a      	strb	r2, [r3, #0]
   uint32_t Brg_Pdiv = 0x00U;
10003ba6:	2300      	movs	r3, #0
10003ba8:	617b      	str	r3, [r7, #20]
   uint32_t Fdr_Step = 0x00U;
10003baa:	2300      	movs	r3, #0
10003bac:	613b      	str	r3, [r7, #16]
   uint32_t TXIDLE_status;
   uint32_t RXIDLE_status;
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10003bae:	68fb      	ldr	r3, [r7, #12]
10003bb0:	681b      	ldr	r3, [r3, #0]
10003bb2:	623b      	str	r3, [r7, #32]
   status_t Status = (status_t)UART001_ERROR;
10003bb4:	2305      	movs	r3, #5
10003bb6:	627b      	str	r3, [r7, #36]	; 0x24
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
10003bb8:	6a3b      	ldr	r3, [r7, #32]
10003bba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
   status_t Status = (status_t)UART001_ERROR;
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
10003bbc:	2301      	movs	r3, #1
10003bbe:	4013      	ands	r3, r2
10003bc0:	61fb      	str	r3, [r7, #28]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
10003bc2:	6a3b      	ldr	r3, [r7, #32]
10003bc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10003bc6:	2302      	movs	r3, #2
10003bc8:	4013      	ands	r3, r2

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
10003bca:	085b      	lsrs	r3, r3, #1
10003bcc:	61bb      	str	r3, [r7, #24]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_RXIDLE_Pos);
   if(( TXIDLE_status & RXIDLE_status) == 0x01U)
10003bce:	69fb      	ldr	r3, [r7, #28]
10003bd0:	69ba      	ldr	r2, [r7, #24]
10003bd2:	4013      	ands	r3, r2
10003bd4:	2b01      	cmp	r3, #1
10003bd6:	d156      	bne.n	10003c86 <UART001_Configure+0xf6>
    {
      /* Disable UART mode before configuring all USIC registers to avoid 
       * unintended edges */ 
      UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)));  
10003bd8:	6a3b      	ldr	r3, [r7, #32]
10003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003bdc:	2202      	movs	r2, #2
10003bde:	1c19      	adds	r1, r3, #0
10003be0:	4391      	bics	r1, r2
10003be2:	1c0a      	adds	r2, r1, #0
10003be4:	6a3b      	ldr	r3, [r7, #32]
10003be6:	641a      	str	r2, [r3, #64]	; 0x40
	  
      /* Configuration of USIC Channel Fractional Divider */
      UART001_lConfigureBaudRate(BaudRate,&Brg_Pdiv,&Fdr_Step);
10003be8:	68b9      	ldr	r1, [r7, #8]
10003bea:	1c3a      	adds	r2, r7, #0
10003bec:	3214      	adds	r2, #20
10003bee:	1c3b      	adds	r3, r7, #0
10003bf0:	3310      	adds	r3, #16
10003bf2:	1c08      	adds	r0, r1, #0
10003bf4:	1c11      	adds	r1, r2, #0
10003bf6:	1c1a      	adds	r2, r3, #0
10003bf8:	f7ff fcee 	bl	100035d8 <UART001_lConfigureBaudRate>

      /* Step value: 0x3FF */
      UartRegs->FDR &= ~(USIC_CH_FDR_STEP_Msk);
10003bfc:	6a3b      	ldr	r3, [r7, #32]
10003bfe:	691b      	ldr	r3, [r3, #16]
10003c00:	0a9b      	lsrs	r3, r3, #10
10003c02:	029a      	lsls	r2, r3, #10
10003c04:	6a3b      	ldr	r3, [r7, #32]
10003c06:	611a      	str	r2, [r3, #16]
      UartRegs->FDR |= ( Fdr_Step & USIC_CH_FDR_STEP_Msk);
10003c08:	6a3b      	ldr	r3, [r7, #32]
10003c0a:	691a      	ldr	r2, [r3, #16]
10003c0c:	693b      	ldr	r3, [r7, #16]
10003c0e:	059b      	lsls	r3, r3, #22
10003c10:	0d9b      	lsrs	r3, r3, #22
10003c12:	431a      	orrs	r2, r3
10003c14:	6a3b      	ldr	r3, [r7, #32]
10003c16:	611a      	str	r2, [r3, #16]
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
10003c18:	6a3b      	ldr	r3, [r7, #32]
10003c1a:	695a      	ldr	r2, [r3, #20]
10003c1c:	4b1d      	ldr	r3, [pc, #116]	; (10003c94 <UART001_Configure+0x104>)
10003c1e:	401a      	ands	r2, r3
10003c20:	6a3b      	ldr	r3, [r7, #32]
10003c22:	615a      	str	r2, [r3, #20]
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10003c24:	6a3b      	ldr	r3, [r7, #32]
10003c26:	695a      	ldr	r2, [r3, #20]
10003c28:	697b      	ldr	r3, [r7, #20]
10003c2a:	0419      	lsls	r1, r3, #16
    		                                          &  USIC_CH_BRG_PDIV_Msk));
10003c2c:	4b1a      	ldr	r3, [pc, #104]	; (10003c98 <UART001_Configure+0x108>)
10003c2e:	400b      	ands	r3, r1
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10003c30:	431a      	orrs	r2, r3
10003c32:	6a3b      	ldr	r3, [r7, #32]
10003c34:	615a      	str	r2, [r3, #20]
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
10003c36:	6a3b      	ldr	r3, [r7, #32]
10003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003c3a:	2202      	movs	r2, #2
10003c3c:	1c19      	adds	r1, r3, #0
10003c3e:	4391      	bics	r1, r2
10003c40:	1c0a      	adds	r2, r1, #0
10003c42:	6a3b      	ldr	r3, [r7, #32]
10003c44:	63da      	str	r2, [r3, #60]	; 0x3c
      UartRegs->PCR_ASCMode |= \
10003c46:	6a3b      	ldr	r3, [r7, #32]
10003c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
10003c4a:	1dbb      	adds	r3, r7, #6
10003c4c:	781b      	ldrb	r3, [r3, #0]
10003c4e:	0059      	lsls	r1, r3, #1
10003c50:	2302      	movs	r3, #2
10003c52:	400b      	ands	r3, r1
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
      UartRegs->PCR_ASCMode |= \
10003c54:	431a      	orrs	r2, r3
10003c56:	6a3b      	ldr	r3, [r7, #32]
10003c58:	63da      	str	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
10003c5a:	6a3b      	ldr	r3, [r7, #32]
10003c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10003c5e:	4b0f      	ldr	r3, [pc, #60]	; (10003c9c <UART001_Configure+0x10c>)
10003c60:	401a      	ands	r2, r3
10003c62:	6a3b      	ldr	r3, [r7, #32]
10003c64:	641a      	str	r2, [r3, #64]	; 0x40
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10003c66:	6a3b      	ldr	r3, [r7, #32]
10003c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
10003c6a:	1dfb      	adds	r3, r7, #7
10003c6c:	781b      	ldrb	r3, [r3, #0]
10003c6e:	0219      	lsls	r1, r3, #8
10003c70:	23c0      	movs	r3, #192	; 0xc0
10003c72:	009b      	lsls	r3, r3, #2
10003c74:	400b      	ands	r3, r1
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10003c76:	4313      	orrs	r3, r2
10003c78:	2202      	movs	r2, #2
10003c7a:	431a      	orrs	r2, r3
10003c7c:	6a3b      	ldr	r3, [r7, #32]
10003c7e:	641a      	str	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
                                                       USIC_CH_CCR_PM_Msk));

      Status = (status_t)DAVEApp_SUCCESS;
10003c80:	2300      	movs	r3, #0
10003c82:	627b      	str	r3, [r7, #36]	; 0x24
10003c84:	e001      	b.n	10003c8a <UART001_Configure+0xfa>
    }
    else
    {
      Status = (status_t)UART001_BUSY;
10003c86:	2303      	movs	r3, #3
10003c88:	627b      	str	r3, [r7, #36]	; 0x24
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
    }
  
  return Status;
10003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
10003c8c:	1c18      	adds	r0, r3, #0
10003c8e:	46bd      	mov	sp, r7
10003c90:	b00a      	add	sp, #40	; 0x28
10003c92:	bd80      	pop	{r7, pc}
10003c94:	fc00ffff 	.word	0xfc00ffff
10003c98:	03ff0000 	.word	0x03ff0000
10003c9c:	fffffcff 	.word	0xfffffcff

10003ca0 <UART001_ReadDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{ 
10003ca0:	b580      	push	{r7, lr}
10003ca2:	b086      	sub	sp, #24
10003ca4:	af00      	add	r7, sp, #0
10003ca6:	60f8      	str	r0, [r7, #12]
10003ca8:	60b9      	str	r1, [r7, #8]
10003caa:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
10003cac:	2300      	movs	r3, #0
10003cae:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10003cb0:	68fb      	ldr	r3, [r7, #12]
10003cb2:	681b      	ldr	r3, [r3, #0]
10003cb4:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
10003cb6:	68fb      	ldr	r3, [r7, #12]
10003cb8:	7fdb      	ldrb	r3, [r3, #31]
10003cba:	2b00      	cmp	r3, #0
10003cbc:	d01c      	beq.n	10003cf8 <UART001_ReadDataMultiple+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10003cbe:	e00f      	b.n	10003ce0 <UART001_ReadDataMultiple+0x40>
	  {
		*DataPtr = (uint16_t)UartRegs->OUTR;
10003cc0:	693a      	ldr	r2, [r7, #16]
10003cc2:	238e      	movs	r3, #142	; 0x8e
10003cc4:	005b      	lsls	r3, r3, #1
10003cc6:	58d3      	ldr	r3, [r2, r3]
10003cc8:	b29a      	uxth	r2, r3
10003cca:	68bb      	ldr	r3, [r7, #8]
10003ccc:	801a      	strh	r2, [r3, #0]
		Count--;
10003cce:	687b      	ldr	r3, [r7, #4]
10003cd0:	3b01      	subs	r3, #1
10003cd2:	607b      	str	r3, [r7, #4]
		ReadCount++;
10003cd4:	697b      	ldr	r3, [r7, #20]
10003cd6:	3301      	adds	r3, #1
10003cd8:	617b      	str	r3, [r7, #20]
		DataPtr++;
10003cda:	68bb      	ldr	r3, [r7, #8]
10003cdc:	3302      	adds	r3, #2
10003cde:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10003ce0:	693a      	ldr	r2, [r7, #16]
10003ce2:	238a      	movs	r3, #138	; 0x8a
10003ce4:	005b      	lsls	r3, r3, #1
10003ce6:	58d2      	ldr	r2, [r2, r3]
10003ce8:	2308      	movs	r3, #8
10003cea:	4013      	ands	r3, r2
10003cec:	08db      	lsrs	r3, r3, #3
10003cee:	d10b      	bne.n	10003d08 <UART001_ReadDataMultiple+0x68>
10003cf0:	687b      	ldr	r3, [r7, #4]
10003cf2:	2b00      	cmp	r3, #0
10003cf4:	d1e4      	bne.n	10003cc0 <UART001_ReadDataMultiple+0x20>
10003cf6:	e007      	b.n	10003d08 <UART001_ReadDataMultiple+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint16_t)UartRegs->RBUF;
10003cf8:	693b      	ldr	r3, [r7, #16]
10003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003cfc:	b29a      	uxth	r2, r3
10003cfe:	68bb      	ldr	r3, [r7, #8]
10003d00:	801a      	strh	r2, [r3, #0]
	  ReadCount++;
10003d02:	697b      	ldr	r3, [r7, #20]
10003d04:	3301      	adds	r3, #1
10003d06:	617b      	str	r3, [r7, #20]
  }
  return ReadCount;
10003d08:	697b      	ldr	r3, [r7, #20]
}
10003d0a:	1c18      	adds	r0, r3, #0
10003d0c:	46bd      	mov	sp, r7
10003d0e:	b006      	add	sp, #24
10003d10:	bd80      	pop	{r7, pc}
10003d12:	46c0      	nop			; (mov r8, r8)

10003d14 <UART001_ReadDataBytes>:
(
  const UART001_HandleType* Handle,
  uint8_t* DataPtr,
  uint32_t Count
)
{ 
10003d14:	b580      	push	{r7, lr}
10003d16:	b086      	sub	sp, #24
10003d18:	af00      	add	r7, sp, #0
10003d1a:	60f8      	str	r0, [r7, #12]
10003d1c:	60b9      	str	r1, [r7, #8]
10003d1e:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
10003d20:	2300      	movs	r3, #0
10003d22:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10003d24:	68fb      	ldr	r3, [r7, #12]
10003d26:	681b      	ldr	r3, [r3, #0]
10003d28:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
10003d2a:	68fb      	ldr	r3, [r7, #12]
10003d2c:	7fdb      	ldrb	r3, [r3, #31]
10003d2e:	2b00      	cmp	r3, #0
10003d30:	d01c      	beq.n	10003d6c <UART001_ReadDataBytes+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10003d32:	e00f      	b.n	10003d54 <UART001_ReadDataBytes+0x40>
	  {
		*DataPtr = (uint8_t)UartRegs->OUTR;
10003d34:	693a      	ldr	r2, [r7, #16]
10003d36:	238e      	movs	r3, #142	; 0x8e
10003d38:	005b      	lsls	r3, r3, #1
10003d3a:	58d3      	ldr	r3, [r2, r3]
10003d3c:	b2da      	uxtb	r2, r3
10003d3e:	68bb      	ldr	r3, [r7, #8]
10003d40:	701a      	strb	r2, [r3, #0]
		Count--;
10003d42:	687b      	ldr	r3, [r7, #4]
10003d44:	3b01      	subs	r3, #1
10003d46:	607b      	str	r3, [r7, #4]
		ReadCount++;
10003d48:	697b      	ldr	r3, [r7, #20]
10003d4a:	3301      	adds	r3, #1
10003d4c:	617b      	str	r3, [r7, #20]
		DataPtr++;
10003d4e:	68bb      	ldr	r3, [r7, #8]
10003d50:	3301      	adds	r3, #1
10003d52:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10003d54:	693a      	ldr	r2, [r7, #16]
10003d56:	238a      	movs	r3, #138	; 0x8a
10003d58:	005b      	lsls	r3, r3, #1
10003d5a:	58d2      	ldr	r2, [r2, r3]
10003d5c:	2308      	movs	r3, #8
10003d5e:	4013      	ands	r3, r2
10003d60:	08db      	lsrs	r3, r3, #3
10003d62:	d10b      	bne.n	10003d7c <UART001_ReadDataBytes+0x68>
10003d64:	687b      	ldr	r3, [r7, #4]
10003d66:	2b00      	cmp	r3, #0
10003d68:	d1e4      	bne.n	10003d34 <UART001_ReadDataBytes+0x20>
10003d6a:	e007      	b.n	10003d7c <UART001_ReadDataBytes+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint8_t)UartRegs->RBUF;
10003d6c:	693b      	ldr	r3, [r7, #16]
10003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003d70:	b2da      	uxtb	r2, r3
10003d72:	68bb      	ldr	r3, [r7, #8]
10003d74:	701a      	strb	r2, [r3, #0]
	  ReadCount++;
10003d76:	697b      	ldr	r3, [r7, #20]
10003d78:	3301      	adds	r3, #1
10003d7a:	617b      	str	r3, [r7, #20]
  }  
  return ReadCount;
10003d7c:	697b      	ldr	r3, [r7, #20]
}
10003d7e:	1c18      	adds	r0, r3, #0
10003d80:	46bd      	mov	sp, r7
10003d82:	b006      	add	sp, #24
10003d84:	bd80      	pop	{r7, pc}
10003d86:	46c0      	nop			; (mov r8, r8)

10003d88 <UART001_WriteDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{
10003d88:	b580      	push	{r7, lr}
10003d8a:	b086      	sub	sp, #24
10003d8c:	af00      	add	r7, sp, #0
10003d8e:	60f8      	str	r0, [r7, #12]
10003d90:	60b9      	str	r1, [r7, #8]
10003d92:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10003d94:	2300      	movs	r3, #0
10003d96:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
10003d98:	68fb      	ldr	r3, [r7, #12]
10003d9a:	681b      	ldr	r3, [r3, #0]
10003d9c:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
10003d9e:	68fb      	ldr	r3, [r7, #12]
10003da0:	7f9b      	ldrb	r3, [r3, #30]
10003da2:	2b00      	cmp	r3, #0
10003da4:	d01d      	beq.n	10003de2 <UART001_WriteDataMultiple+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10003da6:	e00f      	b.n	10003dc8 <UART001_WriteDataMultiple+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10003da8:	68bb      	ldr	r3, [r7, #8]
10003daa:	881b      	ldrh	r3, [r3, #0]
10003dac:	1c19      	adds	r1, r3, #0
10003dae:	693a      	ldr	r2, [r7, #16]
10003db0:	23c0      	movs	r3, #192	; 0xc0
10003db2:	005b      	lsls	r3, r3, #1
10003db4:	50d1      	str	r1, [r2, r3]
		Count--;
10003db6:	687b      	ldr	r3, [r7, #4]
10003db8:	3b01      	subs	r3, #1
10003dba:	607b      	str	r3, [r7, #4]
		WriteCount++;
10003dbc:	697b      	ldr	r3, [r7, #20]
10003dbe:	3301      	adds	r3, #1
10003dc0:	617b      	str	r3, [r7, #20]
		DataPtr++;
10003dc2:	68bb      	ldr	r3, [r7, #8]
10003dc4:	3302      	adds	r3, #2
10003dc6:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10003dc8:	693a      	ldr	r2, [r7, #16]
10003dca:	238a      	movs	r3, #138	; 0x8a
10003dcc:	005b      	lsls	r3, r3, #1
10003dce:	58d2      	ldr	r2, [r2, r3]
10003dd0:	2380      	movs	r3, #128	; 0x80
10003dd2:	015b      	lsls	r3, r3, #5
10003dd4:	4013      	ands	r3, r2
10003dd6:	0b1b      	lsrs	r3, r3, #12
10003dd8:	d111      	bne.n	10003dfe <UART001_WriteDataMultiple+0x76>
10003dda:	687b      	ldr	r3, [r7, #4]
10003ddc:	2b00      	cmp	r3, #0
10003dde:	d1e3      	bne.n	10003da8 <UART001_WriteDataMultiple+0x20>
10003de0:	e00d      	b.n	10003dfe <UART001_WriteDataMultiple+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
10003de2:	693b      	ldr	r3, [r7, #16]
10003de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10003de6:	2380      	movs	r3, #128	; 0x80
10003de8:	4013      	ands	r3, r2
10003dea:	d108      	bne.n	10003dfe <UART001_WriteDataMultiple+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
10003dec:	68bb      	ldr	r3, [r7, #8]
10003dee:	881b      	ldrh	r3, [r3, #0]
10003df0:	1c19      	adds	r1, r3, #0
10003df2:	693a      	ldr	r2, [r7, #16]
10003df4:	2380      	movs	r3, #128	; 0x80
10003df6:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
10003df8:	697b      	ldr	r3, [r7, #20]
10003dfa:	3301      	adds	r3, #1
10003dfc:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
10003dfe:	697b      	ldr	r3, [r7, #20]
}
10003e00:	1c18      	adds	r0, r3, #0
10003e02:	46bd      	mov	sp, r7
10003e04:	b006      	add	sp, #24
10003e06:	bd80      	pop	{r7, pc}

10003e08 <UART001_WriteDataBytes>:
(
  const UART001_HandleType* Handle,
  const uint8_t* DataPtr,
  uint32_t Count
)
{
10003e08:	b580      	push	{r7, lr}
10003e0a:	b086      	sub	sp, #24
10003e0c:	af00      	add	r7, sp, #0
10003e0e:	60f8      	str	r0, [r7, #12]
10003e10:	60b9      	str	r1, [r7, #8]
10003e12:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10003e14:	2300      	movs	r3, #0
10003e16:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
10003e18:	68fb      	ldr	r3, [r7, #12]
10003e1a:	681b      	ldr	r3, [r3, #0]
10003e1c:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
10003e1e:	68fb      	ldr	r3, [r7, #12]
10003e20:	7f9b      	ldrb	r3, [r3, #30]
10003e22:	2b00      	cmp	r3, #0
10003e24:	d01d      	beq.n	10003e62 <UART001_WriteDataBytes+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10003e26:	e00f      	b.n	10003e48 <UART001_WriteDataBytes+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10003e28:	68bb      	ldr	r3, [r7, #8]
10003e2a:	781b      	ldrb	r3, [r3, #0]
10003e2c:	1c19      	adds	r1, r3, #0
10003e2e:	693a      	ldr	r2, [r7, #16]
10003e30:	23c0      	movs	r3, #192	; 0xc0
10003e32:	005b      	lsls	r3, r3, #1
10003e34:	50d1      	str	r1, [r2, r3]
		Count--;
10003e36:	687b      	ldr	r3, [r7, #4]
10003e38:	3b01      	subs	r3, #1
10003e3a:	607b      	str	r3, [r7, #4]
		WriteCount++;
10003e3c:	697b      	ldr	r3, [r7, #20]
10003e3e:	3301      	adds	r3, #1
10003e40:	617b      	str	r3, [r7, #20]
		DataPtr++;
10003e42:	68bb      	ldr	r3, [r7, #8]
10003e44:	3301      	adds	r3, #1
10003e46:	60bb      	str	r3, [r7, #8]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10003e48:	693a      	ldr	r2, [r7, #16]
10003e4a:	238a      	movs	r3, #138	; 0x8a
10003e4c:	005b      	lsls	r3, r3, #1
10003e4e:	58d2      	ldr	r2, [r2, r3]
10003e50:	2380      	movs	r3, #128	; 0x80
10003e52:	015b      	lsls	r3, r3, #5
10003e54:	4013      	ands	r3, r2
10003e56:	0b1b      	lsrs	r3, r3, #12
10003e58:	d111      	bne.n	10003e7e <UART001_WriteDataBytes+0x76>
10003e5a:	687b      	ldr	r3, [r7, #4]
10003e5c:	2b00      	cmp	r3, #0
10003e5e:	d1e3      	bne.n	10003e28 <UART001_WriteDataBytes+0x20>
10003e60:	e00d      	b.n	10003e7e <UART001_WriteDataBytes+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */  
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
10003e62:	693b      	ldr	r3, [r7, #16]
10003e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10003e66:	2380      	movs	r3, #128	; 0x80
10003e68:	4013      	ands	r3, r2
10003e6a:	d108      	bne.n	10003e7e <UART001_WriteDataBytes+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
10003e6c:	68bb      	ldr	r3, [r7, #8]
10003e6e:	781b      	ldrb	r3, [r3, #0]
10003e70:	1c19      	adds	r1, r3, #0
10003e72:	693a      	ldr	r2, [r7, #16]
10003e74:	2380      	movs	r3, #128	; 0x80
10003e76:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
10003e78:	697b      	ldr	r3, [r7, #20]
10003e7a:	3301      	adds	r3, #1
10003e7c:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
10003e7e:	697b      	ldr	r3, [r7, #20]
}
10003e80:	1c18      	adds	r0, r3, #0
10003e82:	46bd      	mov	sp, r7
10003e84:	b006      	add	sp, #24
10003e86:	bd80      	pop	{r7, pc}

10003e88 <UART001_GetFlagStatus>:
status_t UART001_GetFlagStatus 
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
10003e88:	b580      	push	{r7, lr}
10003e8a:	b086      	sub	sp, #24
10003e8c:	af00      	add	r7, sp, #0
10003e8e:	6078      	str	r0, [r7, #4]
10003e90:	1c0a      	adds	r2, r1, #0
10003e92:	1cfb      	adds	r3, r7, #3
10003e94:	701a      	strb	r2, [r3, #0]
  status_t Status = (status_t)UART001_RESET;
10003e96:	2301      	movs	r3, #1
10003e98:	617b      	str	r3, [r7, #20]
  uint32_t TempValue = 0x00U;
10003e9a:	2300      	movs	r3, #0
10003e9c:	613b      	str	r3, [r7, #16]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10003e9e:	687b      	ldr	r3, [r7, #4]
10003ea0:	681b      	ldr	r3, [r3, #0]
10003ea2:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_7>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10003ea4:	1cfb      	adds	r3, r7, #3
10003ea6:	781b      	ldrb	r3, [r3, #0]
10003ea8:	2b0f      	cmp	r3, #15
10003eaa:	d80a      	bhi.n	10003ec2 <UART001_GetFlagStatus+0x3a>
  {
    TempValue = UartRegs->PSR_ASCMode;
10003eac:	68fb      	ldr	r3, [r7, #12]
10003eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003eb0:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
10003eb2:	1cfb      	adds	r3, r7, #3
10003eb4:	781b      	ldrb	r3, [r3, #0]
10003eb6:	2201      	movs	r2, #1
10003eb8:	409a      	lsls	r2, r3
10003eba:	693b      	ldr	r3, [r7, #16]
10003ebc:	4013      	ands	r3, r2
10003ebe:	613b      	str	r3, [r7, #16]
10003ec0:	e01e      	b.n	10003f00 <UART001_GetFlagStatus+0x78>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
10003ec2:	1cfb      	adds	r3, r7, #3
10003ec4:	781b      	ldrb	r3, [r3, #0]
10003ec6:	2b12      	cmp	r3, #18
10003ec8:	d80d      	bhi.n	10003ee6 <UART001_GetFlagStatus+0x5e>
  {
    TempValue = UartRegs->TRBSR;
10003eca:	68fa      	ldr	r2, [r7, #12]
10003ecc:	238a      	movs	r3, #138	; 0x8a
10003ece:	005b      	lsls	r3, r3, #1
10003ed0:	58d3      	ldr	r3, [r2, r3]
10003ed2:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
10003ed4:	1cfb      	adds	r3, r7, #3
10003ed6:	781b      	ldrb	r3, [r3, #0]
10003ed8:	3b10      	subs	r3, #16
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
10003eda:	2201      	movs	r2, #1
10003edc:	409a      	lsls	r2, r3
10003ede:	693b      	ldr	r3, [r7, #16]
10003ee0:	4013      	ands	r3, r2
10003ee2:	613b      	str	r3, [r7, #16]
10003ee4:	e00c      	b.n	10003f00 <UART001_GetFlagStatus+0x78>
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
10003ee6:	68fa      	ldr	r2, [r7, #12]
10003ee8:	238a      	movs	r3, #138	; 0x8a
10003eea:	005b      	lsls	r3, r3, #1
10003eec:	58d3      	ldr	r3, [r2, r3]
10003eee:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
10003ef0:	1cfb      	adds	r3, r7, #3
10003ef2:	781b      	ldrb	r3, [r3, #0]
10003ef4:	3b0b      	subs	r3, #11
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
10003ef6:	2201      	movs	r2, #1
10003ef8:	409a      	lsls	r2, r3
10003efa:	693b      	ldr	r3, [r7, #16]
10003efc:	4013      	ands	r3, r2
10003efe:	613b      	str	r3, [r7, #16]
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
  } 

  if(TempValue)
10003f00:	693b      	ldr	r3, [r7, #16]
10003f02:	2b00      	cmp	r3, #0
10003f04:	d001      	beq.n	10003f0a <UART001_GetFlagStatus+0x82>
  {
    Status = (status_t)UART001_SET;
10003f06:	2302      	movs	r3, #2
10003f08:	617b      	str	r3, [r7, #20]
  }
  return Status;
10003f0a:	697b      	ldr	r3, [r7, #20]
}
10003f0c:	1c18      	adds	r0, r3, #0
10003f0e:	46bd      	mov	sp, r7
10003f10:	b006      	add	sp, #24
10003f12:	bd80      	pop	{r7, pc}

10003f14 <UART001_ClearFlag>:
void UART001_ClearFlag
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
10003f14:	b580      	push	{r7, lr}
10003f16:	b084      	sub	sp, #16
10003f18:	af00      	add	r7, sp, #0
10003f1a:	6078      	str	r0, [r7, #4]
10003f1c:	1c0a      	adds	r2, r1, #0
10003f1e:	1cfb      	adds	r3, r7, #3
10003f20:	701a      	strb	r2, [r3, #0]

  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10003f22:	687b      	ldr	r3, [r7, #4]
10003f24:	681b      	ldr	r3, [r3, #0]
10003f26:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_8>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10003f28:	1cfb      	adds	r3, r7, #3
10003f2a:	781b      	ldrb	r3, [r3, #0]
10003f2c:	2b0f      	cmp	r3, #15
10003f2e:	d80b      	bhi.n	10003f48 <UART001_ClearFlag+0x34>
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
10003f30:	68fb      	ldr	r3, [r7, #12]
10003f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10003f34:	1cfb      	adds	r3, r7, #3
10003f36:	781b      	ldrb	r3, [r3, #0]
10003f38:	2101      	movs	r1, #1
10003f3a:	1c08      	adds	r0, r1, #0
10003f3c:	4098      	lsls	r0, r3
10003f3e:	1c03      	adds	r3, r0, #0
10003f40:	431a      	orrs	r2, r3
10003f42:	68fb      	ldr	r3, [r7, #12]
10003f44:	64da      	str	r2, [r3, #76]	; 0x4c
10003f46:	e026      	b.n	10003f96 <UART001_ClearFlag+0x82>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
10003f48:	1cfb      	adds	r3, r7, #3
10003f4a:	781b      	ldrb	r3, [r3, #0]
10003f4c:	2b12      	cmp	r3, #18
10003f4e:	d811      	bhi.n	10003f74 <UART001_ClearFlag+0x60>
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10003f50:	68fa      	ldr	r2, [r7, #12]
10003f52:	238c      	movs	r3, #140	; 0x8c
10003f54:	005b      	lsls	r3, r3, #1
10003f56:	58d2      	ldr	r2, [r2, r3]
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
10003f58:	1cfb      	adds	r3, r7, #3
10003f5a:	781b      	ldrb	r3, [r3, #0]
10003f5c:	3b10      	subs	r3, #16
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10003f5e:	2101      	movs	r1, #1
10003f60:	1c08      	adds	r0, r1, #0
10003f62:	4098      	lsls	r0, r3
10003f64:	1c03      	adds	r3, r0, #0
10003f66:	1c11      	adds	r1, r2, #0
10003f68:	4319      	orrs	r1, r3
10003f6a:	68fa      	ldr	r2, [r7, #12]
10003f6c:	238c      	movs	r3, #140	; 0x8c
10003f6e:	005b      	lsls	r3, r3, #1
10003f70:	50d1      	str	r1, [r2, r3]
10003f72:	e010      	b.n	10003f96 <UART001_ClearFlag+0x82>
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10003f74:	68fa      	ldr	r2, [r7, #12]
10003f76:	238c      	movs	r3, #140	; 0x8c
10003f78:	005b      	lsls	r3, r3, #1
10003f7a:	58d2      	ldr	r2, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
10003f7c:	1cfb      	adds	r3, r7, #3
10003f7e:	781b      	ldrb	r3, [r3, #0]
10003f80:	3b0b      	subs	r3, #11
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10003f82:	2101      	movs	r1, #1
10003f84:	1c08      	adds	r0, r1, #0
10003f86:	4098      	lsls	r0, r3
10003f88:	1c03      	adds	r3, r0, #0
10003f8a:	1c11      	adds	r1, r2, #0
10003f8c:	4319      	orrs	r1, r3
10003f8e:	68fa      	ldr	r2, [r7, #12]
10003f90:	238c      	movs	r3, #140	; 0x8c
10003f92:	005b      	lsls	r3, r3, #1
10003f94:	50d1      	str	r1, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
                                                       UART001_FLAG_OFFSET ));
  }  
  
}
10003f96:	46bd      	mov	sp, r7
10003f98:	b004      	add	sp, #16
10003f9a:	bd80      	pop	{r7, pc}

10003f9c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003f9c:	b5b0      	push	{r4, r5, r7, lr}
10003f9e:	b082      	sub	sp, #8
10003fa0:	af00      	add	r7, sp, #0
10003fa2:	1c02      	adds	r2, r0, #0
10003fa4:	6039      	str	r1, [r7, #0]
10003fa6:	1dfb      	adds	r3, r7, #7
10003fa8:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
10003faa:	1dfb      	adds	r3, r7, #7
10003fac:	781b      	ldrb	r3, [r3, #0]
10003fae:	2b7f      	cmp	r3, #127	; 0x7f
10003fb0:	d932      	bls.n	10004018 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10003fb2:	4930      	ldr	r1, [pc, #192]	; (10004074 <NVIC_SetPriority+0xd8>)
10003fb4:	1dfb      	adds	r3, r7, #7
10003fb6:	781b      	ldrb	r3, [r3, #0]
10003fb8:	1c1a      	adds	r2, r3, #0
10003fba:	230f      	movs	r3, #15
10003fbc:	4013      	ands	r3, r2
10003fbe:	3b08      	subs	r3, #8
10003fc0:	0898      	lsrs	r0, r3, #2
10003fc2:	4a2c      	ldr	r2, [pc, #176]	; (10004074 <NVIC_SetPriority+0xd8>)
10003fc4:	1dfb      	adds	r3, r7, #7
10003fc6:	781b      	ldrb	r3, [r3, #0]
10003fc8:	1c1c      	adds	r4, r3, #0
10003fca:	230f      	movs	r3, #15
10003fcc:	4023      	ands	r3, r4
10003fce:	3b08      	subs	r3, #8
10003fd0:	089b      	lsrs	r3, r3, #2
10003fd2:	3306      	adds	r3, #6
10003fd4:	009b      	lsls	r3, r3, #2
10003fd6:	18d3      	adds	r3, r2, r3
10003fd8:	685b      	ldr	r3, [r3, #4]
10003fda:	1dfa      	adds	r2, r7, #7
10003fdc:	7812      	ldrb	r2, [r2, #0]
10003fde:	1c14      	adds	r4, r2, #0
10003fe0:	2203      	movs	r2, #3
10003fe2:	4022      	ands	r2, r4
10003fe4:	00d2      	lsls	r2, r2, #3
10003fe6:	24ff      	movs	r4, #255	; 0xff
10003fe8:	1c25      	adds	r5, r4, #0
10003fea:	4095      	lsls	r5, r2
10003fec:	1c2a      	adds	r2, r5, #0
10003fee:	43d2      	mvns	r2, r2
10003ff0:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10003ff2:	683b      	ldr	r3, [r7, #0]
10003ff4:	019c      	lsls	r4, r3, #6
10003ff6:	23ff      	movs	r3, #255	; 0xff
10003ff8:	401c      	ands	r4, r3
10003ffa:	1dfb      	adds	r3, r7, #7
10003ffc:	781b      	ldrb	r3, [r3, #0]
10003ffe:	1c1d      	adds	r5, r3, #0
10004000:	2303      	movs	r3, #3
10004002:	402b      	ands	r3, r5
10004004:	00db      	lsls	r3, r3, #3
10004006:	1c25      	adds	r5, r4, #0
10004008:	409d      	lsls	r5, r3
1000400a:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
1000400c:	431a      	orrs	r2, r3
1000400e:	1d83      	adds	r3, r0, #6
10004010:	009b      	lsls	r3, r3, #2
10004012:	18cb      	adds	r3, r1, r3
10004014:	605a      	str	r2, [r3, #4]
10004016:	e029      	b.n	1000406c <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10004018:	4b17      	ldr	r3, [pc, #92]	; (10004078 <NVIC_SetPriority+0xdc>)
1000401a:	1dfa      	adds	r2, r7, #7
1000401c:	7812      	ldrb	r2, [r2, #0]
1000401e:	b252      	sxtb	r2, r2
10004020:	0892      	lsrs	r2, r2, #2
10004022:	4915      	ldr	r1, [pc, #84]	; (10004078 <NVIC_SetPriority+0xdc>)
10004024:	1df8      	adds	r0, r7, #7
10004026:	7800      	ldrb	r0, [r0, #0]
10004028:	b240      	sxtb	r0, r0
1000402a:	0880      	lsrs	r0, r0, #2
1000402c:	30c0      	adds	r0, #192	; 0xc0
1000402e:	0080      	lsls	r0, r0, #2
10004030:	5841      	ldr	r1, [r0, r1]
10004032:	1df8      	adds	r0, r7, #7
10004034:	7800      	ldrb	r0, [r0, #0]
10004036:	1c04      	adds	r4, r0, #0
10004038:	2003      	movs	r0, #3
1000403a:	4020      	ands	r0, r4
1000403c:	00c0      	lsls	r0, r0, #3
1000403e:	24ff      	movs	r4, #255	; 0xff
10004040:	1c25      	adds	r5, r4, #0
10004042:	4085      	lsls	r5, r0
10004044:	1c28      	adds	r0, r5, #0
10004046:	43c0      	mvns	r0, r0
10004048:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
1000404a:	6839      	ldr	r1, [r7, #0]
1000404c:	018c      	lsls	r4, r1, #6
1000404e:	21ff      	movs	r1, #255	; 0xff
10004050:	400c      	ands	r4, r1
10004052:	1df9      	adds	r1, r7, #7
10004054:	7809      	ldrb	r1, [r1, #0]
10004056:	1c0d      	adds	r5, r1, #0
10004058:	2103      	movs	r1, #3
1000405a:	4029      	ands	r1, r5
1000405c:	00c9      	lsls	r1, r1, #3
1000405e:	1c25      	adds	r5, r4, #0
10004060:	408d      	lsls	r5, r1
10004062:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10004064:	4301      	orrs	r1, r0
10004066:	32c0      	adds	r2, #192	; 0xc0
10004068:	0092      	lsls	r2, r2, #2
1000406a:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
1000406c:	46bd      	mov	sp, r7
1000406e:	b002      	add	sp, #8
10004070:	bdb0      	pop	{r4, r5, r7, pc}
10004072:	46c0      	nop			; (mov r8, r8)
10004074:	e000ed00 	.word	0xe000ed00
10004078:	e000e100 	.word	0xe000e100

1000407c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1000407c:	b580      	push	{r7, lr}
1000407e:	b082      	sub	sp, #8
10004080:	af00      	add	r7, sp, #0
10004082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
10004084:	687b      	ldr	r3, [r7, #4]
10004086:	1e5a      	subs	r2, r3, #1
10004088:	4b0c      	ldr	r3, [pc, #48]	; (100040bc <SysTick_Config+0x40>)
1000408a:	429a      	cmp	r2, r3
1000408c:	d901      	bls.n	10004092 <SysTick_Config+0x16>
1000408e:	2301      	movs	r3, #1
10004090:	e010      	b.n	100040b4 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
10004092:	4b0b      	ldr	r3, [pc, #44]	; (100040c0 <SysTick_Config+0x44>)
10004094:	687a      	ldr	r2, [r7, #4]
10004096:	3a01      	subs	r2, #1
10004098:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
1000409a:	2301      	movs	r3, #1
1000409c:	425b      	negs	r3, r3
1000409e:	1c18      	adds	r0, r3, #0
100040a0:	2103      	movs	r1, #3
100040a2:	f7ff ff7b 	bl	10003f9c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
100040a6:	4b06      	ldr	r3, [pc, #24]	; (100040c0 <SysTick_Config+0x44>)
100040a8:	2200      	movs	r2, #0
100040aa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100040ac:	4b04      	ldr	r3, [pc, #16]	; (100040c0 <SysTick_Config+0x44>)
100040ae:	2207      	movs	r2, #7
100040b0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
100040b2:	2300      	movs	r3, #0
}
100040b4:	1c18      	adds	r0, r3, #0
100040b6:	46bd      	mov	sp, r7
100040b8:	b002      	add	sp, #8
100040ba:	bd80      	pop	{r7, pc}
100040bc:	00ffffff 	.word	0x00ffffff
100040c0:	e000e010 	.word	0xe000e010

100040c4 <SYSTM001_lInsertTimerList>:

/*
 * This function is called to insert a timer into the timer list.
 */
static void  SYSTM001_lInsertTimerList (uint32_t Index)
{
100040c4:	b580      	push	{r7, lr}
100040c6:	b086      	sub	sp, #24
100040c8:	af00      	add	r7, sp, #0
100040ca:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  int32_t DeltaTicks;
  uint32_t TempTmrCnt;
   /* Get timer time */
  TempTmrCnt = TimerTbl[Index].TimerCount;
100040cc:	4a50      	ldr	r2, [pc, #320]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
100040ce:	687b      	ldr	r3, [r7, #4]
100040d0:	015b      	lsls	r3, r3, #5
100040d2:	18d3      	adds	r3, r2, r3
100040d4:	3308      	adds	r3, #8
100040d6:	681b      	ldr	r3, [r3, #0]
100040d8:	60fb      	str	r3, [r7, #12]
  /* Check if timer count is zero */
  /* <<<DD_SYSTM001_PRIV _API_1>>> */

  /* Check if Timer list is NULL */
  if(TimerList == NULL)
100040da:	4b4e      	ldr	r3, [pc, #312]	; (10004214 <SYSTM001_lInsertTimerList+0x150>)
100040dc:	681b      	ldr	r3, [r3, #0]
100040de:	2b00      	cmp	r3, #0
100040e0:	d106      	bne.n	100040f0 <SYSTM001_lInsertTimerList+0x2c>
  {
      /* Set this as first Timer */
      TimerList = &TimerTbl[Index];
100040e2:	687b      	ldr	r3, [r7, #4]
100040e4:	015a      	lsls	r2, r3, #5
100040e6:	4b4a      	ldr	r3, [pc, #296]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
100040e8:	18d2      	adds	r2, r2, r3
100040ea:	4b4a      	ldr	r3, [pc, #296]	; (10004214 <SYSTM001_lInsertTimerList+0x150>)
100040ec:	601a      	str	r2, [r3, #0]
100040ee:	e08b      	b.n	10004208 <SYSTM001_lInsertTimerList+0x144>
  }
  /* IF Not, find the correct place ,and insert the specified timer */
  else
  {
    TmrObjPtr = TimerList;
100040f0:	4b48      	ldr	r3, [pc, #288]	; (10004214 <SYSTM001_lInsertTimerList+0x150>)
100040f2:	681b      	ldr	r3, [r3, #0]
100040f4:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
100040f6:	68fb      	ldr	r3, [r7, #12]
100040f8:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
100040fa:	e081      	b.n	10004200 <SYSTM001_lInsertTimerList+0x13c>
    {
      /* Get timer Count Difference  */
      DeltaTicks -= (int32_t)TmrObjPtr->TimerCount;
100040fc:	697b      	ldr	r3, [r7, #20]
100040fe:	689b      	ldr	r3, [r3, #8]
10004100:	693a      	ldr	r2, [r7, #16]
10004102:	1ad3      	subs	r3, r2, r3
10004104:	613b      	str	r3, [r7, #16]
      /* Is delta ticks<0? */
      if(DeltaTicks < 0)
10004106:	693b      	ldr	r3, [r7, #16]
10004108:	2b00      	cmp	r3, #0
1000410a:	da5a      	bge.n	100041c2 <SYSTM001_lInsertTimerList+0xfe>
      {
        /*  Check If head item */
        if(TmrObjPtr->TimerPrev!= NULL)
1000410c:	697b      	ldr	r3, [r7, #20]
1000410e:	69db      	ldr	r3, [r3, #28]
10004110:	2b00      	cmp	r3, #0
10004112:	d01c      	beq.n	1000414e <SYSTM001_lInsertTimerList+0x8a>
        {
          /* If Insert to list */
          TmrObjPtr->TimerPrev->TimerNext = &TimerTbl[Index];
10004114:	697b      	ldr	r3, [r7, #20]
10004116:	69db      	ldr	r3, [r3, #28]
10004118:	687a      	ldr	r2, [r7, #4]
1000411a:	0151      	lsls	r1, r2, #5
1000411c:	4a3c      	ldr	r2, [pc, #240]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
1000411e:	188a      	adds	r2, r1, r2
10004120:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerPrev = TmrObjPtr->TimerPrev;
10004122:	697b      	ldr	r3, [r7, #20]
10004124:	69da      	ldr	r2, [r3, #28]
10004126:	493a      	ldr	r1, [pc, #232]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
10004128:	687b      	ldr	r3, [r7, #4]
1000412a:	015b      	lsls	r3, r3, #5
1000412c:	18cb      	adds	r3, r1, r3
1000412e:	331c      	adds	r3, #28
10004130:	601a      	str	r2, [r3, #0]
          TimerTbl[Index].TimerNext = TmrObjPtr;
10004132:	4a37      	ldr	r2, [pc, #220]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
10004134:	687b      	ldr	r3, [r7, #4]
10004136:	015b      	lsls	r3, r3, #5
10004138:	18d3      	adds	r3, r2, r3
1000413a:	3318      	adds	r3, #24
1000413c:	697a      	ldr	r2, [r7, #20]
1000413e:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerPrev = &TimerTbl[Index];
10004140:	687b      	ldr	r3, [r7, #4]
10004142:	015a      	lsls	r2, r3, #5
10004144:	4b32      	ldr	r3, [pc, #200]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
10004146:	18d2      	adds	r2, r2, r3
10004148:	697b      	ldr	r3, [r7, #20]
1000414a:	61da      	str	r2, [r3, #28]
1000414c:	e014      	b.n	10004178 <SYSTM001_lInsertTimerList+0xb4>
        }
        else
        {
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
1000414e:	4b31      	ldr	r3, [pc, #196]	; (10004214 <SYSTM001_lInsertTimerList+0x150>)
10004150:	681a      	ldr	r2, [r3, #0]
10004152:	492f      	ldr	r1, [pc, #188]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
10004154:	687b      	ldr	r3, [r7, #4]
10004156:	015b      	lsls	r3, r3, #5
10004158:	18cb      	adds	r3, r1, r3
1000415a:	3318      	adds	r3, #24
1000415c:	601a      	str	r2, [r3, #0]
          TimerList->TimerPrev = &TimerTbl[Index];
1000415e:	4b2d      	ldr	r3, [pc, #180]	; (10004214 <SYSTM001_lInsertTimerList+0x150>)
10004160:	681b      	ldr	r3, [r3, #0]
10004162:	687a      	ldr	r2, [r7, #4]
10004164:	0151      	lsls	r1, r2, #5
10004166:	4a2a      	ldr	r2, [pc, #168]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
10004168:	188a      	adds	r2, r1, r2
1000416a:	61da      	str	r2, [r3, #28]
          TimerList = &TimerTbl[Index];
1000416c:	687b      	ldr	r3, [r7, #4]
1000416e:	015a      	lsls	r2, r3, #5
10004170:	4b27      	ldr	r3, [pc, #156]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
10004172:	18d2      	adds	r2, r2, r3
10004174:	4b27      	ldr	r3, [pc, #156]	; (10004214 <SYSTM001_lInsertTimerList+0x150>)
10004176:	601a      	str	r2, [r3, #0]
        }
        TimerTbl[Index].TimerCount = \
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
10004178:	4a25      	ldr	r2, [pc, #148]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
1000417a:	687b      	ldr	r3, [r7, #4]
1000417c:	015b      	lsls	r3, r3, #5
1000417e:	18d3      	adds	r3, r2, r3
10004180:	3318      	adds	r3, #24
10004182:	681b      	ldr	r3, [r3, #0]
10004184:	689a      	ldr	r2, [r3, #8]
10004186:	693b      	ldr	r3, [r7, #16]
10004188:	18d2      	adds	r2, r2, r3
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
          TimerList->TimerPrev = &TimerTbl[Index];
          TimerList = &TimerTbl[Index];
        }
        TimerTbl[Index].TimerCount = \
1000418a:	4921      	ldr	r1, [pc, #132]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
1000418c:	687b      	ldr	r3, [r7, #4]
1000418e:	015b      	lsls	r3, r3, #5
10004190:	18cb      	adds	r3, r1, r3
10004192:	3308      	adds	r3, #8
10004194:	601a      	str	r2, [r3, #0]
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
        TimerTbl[Index].TimerNext->TimerCount  -= TimerTbl[Index].TimerCount;
10004196:	4a1e      	ldr	r2, [pc, #120]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
10004198:	687b      	ldr	r3, [r7, #4]
1000419a:	015b      	lsls	r3, r3, #5
1000419c:	18d3      	adds	r3, r2, r3
1000419e:	3318      	adds	r3, #24
100041a0:	681b      	ldr	r3, [r3, #0]
100041a2:	491b      	ldr	r1, [pc, #108]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
100041a4:	687a      	ldr	r2, [r7, #4]
100041a6:	0152      	lsls	r2, r2, #5
100041a8:	188a      	adds	r2, r1, r2
100041aa:	3218      	adds	r2, #24
100041ac:	6812      	ldr	r2, [r2, #0]
100041ae:	6891      	ldr	r1, [r2, #8]
100041b0:	4817      	ldr	r0, [pc, #92]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
100041b2:	687a      	ldr	r2, [r7, #4]
100041b4:	0152      	lsls	r2, r2, #5
100041b6:	1882      	adds	r2, r0, r2
100041b8:	3208      	adds	r2, #8
100041ba:	6812      	ldr	r2, [r2, #0]
100041bc:	1a8a      	subs	r2, r1, r2
100041be:	609a      	str	r2, [r3, #8]
        break;
100041c0:	e022      	b.n	10004208 <SYSTM001_lInsertTimerList+0x144>
      }
      /* Is last item in list? */
      else
      {
        if((DeltaTicks >= 0) && (TmrObjPtr->TimerNext == NULL))
100041c2:	693b      	ldr	r3, [r7, #16]
100041c4:	2b00      	cmp	r3, #0
100041c6:	db18      	blt.n	100041fa <SYSTM001_lInsertTimerList+0x136>
100041c8:	697b      	ldr	r3, [r7, #20]
100041ca:	699b      	ldr	r3, [r3, #24]
100041cc:	2b00      	cmp	r3, #0
100041ce:	d114      	bne.n	100041fa <SYSTM001_lInsertTimerList+0x136>
        {
          /* Yes,insert into */
          TimerTbl[Index].TimerPrev = TmrObjPtr;
100041d0:	4a0f      	ldr	r2, [pc, #60]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
100041d2:	687b      	ldr	r3, [r7, #4]
100041d4:	015b      	lsls	r3, r3, #5
100041d6:	18d3      	adds	r3, r2, r3
100041d8:	331c      	adds	r3, #28
100041da:	697a      	ldr	r2, [r7, #20]
100041dc:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerNext = &TimerTbl[Index];
100041de:	687b      	ldr	r3, [r7, #4]
100041e0:	015a      	lsls	r2, r3, #5
100041e2:	4b0b      	ldr	r3, [pc, #44]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
100041e4:	18d2      	adds	r2, r2, r3
100041e6:	697b      	ldr	r3, [r7, #20]
100041e8:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerCount = (uint32_t)DeltaTicks;
100041ea:	693a      	ldr	r2, [r7, #16]
100041ec:	4908      	ldr	r1, [pc, #32]	; (10004210 <SYSTM001_lInsertTimerList+0x14c>)
100041ee:	687b      	ldr	r3, [r7, #4]
100041f0:	015b      	lsls	r3, r3, #5
100041f2:	18cb      	adds	r3, r1, r3
100041f4:	3308      	adds	r3, #8
100041f6:	601a      	str	r2, [r3, #0]
          break;
100041f8:	e006      	b.n	10004208 <SYSTM001_lInsertTimerList+0x144>
        }
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
100041fa:	697b      	ldr	r3, [r7, #20]
100041fc:	699b      	ldr	r3, [r3, #24]
100041fe:	617b      	str	r3, [r7, #20]
  {
    TmrObjPtr = TimerList;
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
10004200:	697b      	ldr	r3, [r7, #20]
10004202:	2b00      	cmp	r3, #0
10004204:	d000      	beq.n	10004208 <SYSTM001_lInsertTimerList+0x144>
10004206:	e779      	b.n	100040fc <SYSTM001_lInsertTimerList+0x38>
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
    }
  }
}
10004208:	46bd      	mov	sp, r7
1000420a:	b006      	add	sp, #24
1000420c:	bd80      	pop	{r7, pc}
1000420e:	46c0      	nop			; (mov r8, r8)
10004210:	20000d0c 	.word	0x20000d0c
10004214:	20000b04 	.word	0x20000b04

10004218 <SYSTM001_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void  SYSTM001_lRemoveTimerList(uint32_t Index)
{
10004218:	b580      	push	{r7, lr}
1000421a:	b084      	sub	sp, #16
1000421c:	af00      	add	r7, sp, #0
1000421e:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = &TimerTbl[Index];
10004220:	687b      	ldr	r3, [r7, #4]
10004222:	015a      	lsls	r2, r3, #5
10004224:	4b27      	ldr	r3, [pc, #156]	; (100042c4 <SYSTM001_lRemoveTimerList+0xac>)
10004226:	18d3      	adds	r3, r2, r3
10004228:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  /* <<<DD_SYSTM001_PRIV _API_2>>> */
  if((TmrObjPtr->TimerPrev == NULL) && (TmrObjPtr->TimerNext == NULL))
1000422a:	68fb      	ldr	r3, [r7, #12]
1000422c:	69db      	ldr	r3, [r3, #28]
1000422e:	2b00      	cmp	r3, #0
10004230:	d107      	bne.n	10004242 <SYSTM001_lRemoveTimerList+0x2a>
10004232:	68fb      	ldr	r3, [r7, #12]
10004234:	699b      	ldr	r3, [r3, #24]
10004236:	2b00      	cmp	r3, #0
10004238:	d103      	bne.n	10004242 <SYSTM001_lRemoveTimerList+0x2a>
  {
    /* set timer list as NULL */ 
    TimerList = NULL;                 	
1000423a:	4b23      	ldr	r3, [pc, #140]	; (100042c8 <SYSTM001_lRemoveTimerList+0xb0>)
1000423c:	2200      	movs	r2, #0
1000423e:	601a      	str	r2, [r3, #0]
10004240:	e03d      	b.n	100042be <SYSTM001_lRemoveTimerList+0xa6>
  }
   /* Check if the first item in timer list   */
  else if(TmrObjPtr->TimerPrev == NULL)     
10004242:	68fb      	ldr	r3, [r7, #12]
10004244:	69db      	ldr	r3, [r3, #28]
10004246:	2b00      	cmp	r3, #0
10004248:	d114      	bne.n	10004274 <SYSTM001_lRemoveTimerList+0x5c>
  {   
    /* Remove timer from list,and reset timer list */
    TimerList  = TmrObjPtr->TimerNext;
1000424a:	68fb      	ldr	r3, [r7, #12]
1000424c:	699a      	ldr	r2, [r3, #24]
1000424e:	4b1e      	ldr	r3, [pc, #120]	; (100042c8 <SYSTM001_lRemoveTimerList+0xb0>)
10004250:	601a      	str	r2, [r3, #0]
    TimerList->TimerPrev = NULL;
10004252:	4b1d      	ldr	r3, [pc, #116]	; (100042c8 <SYSTM001_lRemoveTimerList+0xb0>)
10004254:	681b      	ldr	r3, [r3, #0]
10004256:	2200      	movs	r2, #0
10004258:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount += TmrObjPtr->TimerCount;
1000425a:	68fb      	ldr	r3, [r7, #12]
1000425c:	699b      	ldr	r3, [r3, #24]
1000425e:	68fa      	ldr	r2, [r7, #12]
10004260:	6992      	ldr	r2, [r2, #24]
10004262:	6891      	ldr	r1, [r2, #8]
10004264:	68fa      	ldr	r2, [r7, #12]
10004266:	6892      	ldr	r2, [r2, #8]
10004268:	188a      	adds	r2, r1, r2
1000426a:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext    = NULL;  
1000426c:	68fb      	ldr	r3, [r7, #12]
1000426e:	2200      	movs	r2, #0
10004270:	619a      	str	r2, [r3, #24]
10004272:	e024      	b.n	100042be <SYSTM001_lRemoveTimerList+0xa6>
  }
  /* Check if the last item in timer list   */
  else if(TmrObjPtr->TimerNext == NULL)      
10004274:	68fb      	ldr	r3, [r7, #12]
10004276:	699b      	ldr	r3, [r3, #24]
10004278:	2b00      	cmp	r3, #0
1000427a:	d107      	bne.n	1000428c <SYSTM001_lRemoveTimerList+0x74>
  {
    /* Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext = NULL;	
1000427c:	68fb      	ldr	r3, [r7, #12]
1000427e:	69db      	ldr	r3, [r3, #28]
10004280:	2200      	movs	r2, #0
10004282:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
10004284:	68fb      	ldr	r3, [r7, #12]
10004286:	2200      	movs	r2, #0
10004288:	61da      	str	r2, [r3, #28]
1000428a:	e018      	b.n	100042be <SYSTM001_lRemoveTimerList+0xa6>
  }
  else                                /*  remove timer from list         */
  {
    /*  Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext  =  TmrObjPtr->TimerNext;
1000428c:	68fb      	ldr	r3, [r7, #12]
1000428e:	69db      	ldr	r3, [r3, #28]
10004290:	68fa      	ldr	r2, [r7, #12]
10004292:	6992      	ldr	r2, [r2, #24]
10004294:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerNext->TimerPrev  =  TmrObjPtr->TimerPrev;
10004296:	68fb      	ldr	r3, [r7, #12]
10004298:	699b      	ldr	r3, [r3, #24]
1000429a:	68fa      	ldr	r2, [r7, #12]
1000429c:	69d2      	ldr	r2, [r2, #28]
1000429e:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount  += TmrObjPtr->TimerCount;
100042a0:	68fb      	ldr	r3, [r7, #12]
100042a2:	699b      	ldr	r3, [r3, #24]
100042a4:	68fa      	ldr	r2, [r7, #12]
100042a6:	6992      	ldr	r2, [r2, #24]
100042a8:	6891      	ldr	r1, [r2, #8]
100042aa:	68fa      	ldr	r2, [r7, #12]
100042ac:	6892      	ldr	r2, [r2, #8]
100042ae:	188a      	adds	r2, r1, r2
100042b0:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext = NULL;
100042b2:	68fb      	ldr	r3, [r7, #12]
100042b4:	2200      	movs	r2, #0
100042b6:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
100042b8:	68fb      	ldr	r3, [r7, #12]
100042ba:	2200      	movs	r2, #0
100042bc:	61da      	str	r2, [r3, #28]
  }
}
100042be:	46bd      	mov	sp, r7
100042c0:	b004      	add	sp, #16
100042c2:	bd80      	pop	{r7, pc}
100042c4:	20000d0c 	.word	0x20000d0c
100042c8:	20000b04 	.word	0x20000b04

100042cc <SYSTM001_lTimerHandler>:

/*
 * Handler function  called from Systick event handler. 
 */
static void  SYSTM001_lTimerHandler (void)
{
100042cc:	b580      	push	{r7, lr}
100042ce:	b082      	sub	sp, #8
100042d0:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
100042d2:	4b1f      	ldr	r3, [pc, #124]	; (10004350 <SYSTM001_lTimerHandler+0x84>)
100042d4:	681b      	ldr	r3, [r3, #0]
100042d6:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
100042d8:	e02d      	b.n	10004336 <SYSTM001_lTimerHandler+0x6a>
  {	
    /* Check whether timer is a one shot timer */
    if(TmrObjPtr->TimerType == SYSTM001_ONE_SHOT)
100042da:	687b      	ldr	r3, [r7, #4]
100042dc:	791b      	ldrb	r3, [r3, #4]
100042de:	2b00      	cmp	r3, #0
100042e0:	d10e      	bne.n	10004300 <SYSTM001_lTimerHandler+0x34>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
100042e2:	687b      	ldr	r3, [r7, #4]
100042e4:	681b      	ldr	r3, [r3, #0]
100042e6:	1c18      	adds	r0, r3, #0
100042e8:	f7ff ff96 	bl	10004218 <SYSTM001_lRemoveTimerList>
      /* Set timer status as SYSTM001_STATE_STOPPED */
      TmrObjPtr->TimerState = SYSTM001_STATE_STOPPED;
100042ec:	687b      	ldr	r3, [r7, #4]
100042ee:	2201      	movs	r2, #1
100042f0:	715a      	strb	r2, [r3, #5]
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
100042f2:	687b      	ldr	r3, [r7, #4]
100042f4:	691a      	ldr	r2, [r3, #16]
100042f6:	687b      	ldr	r3, [r7, #4]
100042f8:	695b      	ldr	r3, [r3, #20]
100042fa:	1c18      	adds	r0, r3, #0
100042fc:	4790      	blx	r2
100042fe:	e017      	b.n	10004330 <SYSTM001_lTimerHandler+0x64>
    }
    /* Check whether timer is SYSTM001_PERIODIC */
    else if(TmrObjPtr->TimerType == SYSTM001_PERIODIC)
10004300:	687b      	ldr	r3, [r7, #4]
10004302:	791b      	ldrb	r3, [r3, #4]
10004304:	2b01      	cmp	r3, #1
10004306:	d11e      	bne.n	10004346 <SYSTM001_lTimerHandler+0x7a>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
10004308:	687b      	ldr	r3, [r7, #4]
1000430a:	681b      	ldr	r3, [r3, #0]
1000430c:	1c18      	adds	r0, r3, #0
1000430e:	f7ff ff83 	bl	10004218 <SYSTM001_lRemoveTimerList>
      /* Reset timer tick             */
      TmrObjPtr->TimerCount = TmrObjPtr->TimerReload;
10004312:	687b      	ldr	r3, [r7, #4]
10004314:	68da      	ldr	r2, [r3, #12]
10004316:	687b      	ldr	r3, [r7, #4]
10004318:	609a      	str	r2, [r3, #8]
        /* Insert timer into timer list */
      SYSTM001_lInsertTimerList(TmrObjPtr->TimerID);
1000431a:	687b      	ldr	r3, [r7, #4]
1000431c:	681b      	ldr	r3, [r3, #0]
1000431e:	1c18      	adds	r0, r3, #0
10004320:	f7ff fed0 	bl	100040c4 <SYSTM001_lInsertTimerList>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
10004324:	687b      	ldr	r3, [r7, #4]
10004326:	691a      	ldr	r2, [r3, #16]
10004328:	687b      	ldr	r3, [r7, #4]
1000432a:	695b      	ldr	r3, [r3, #20]
1000432c:	1c18      	adds	r0, r3, #0
1000432e:	4790      	blx	r2
    else
    {
      break;
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
10004330:	4b07      	ldr	r3, [pc, #28]	; (10004350 <SYSTM001_lTimerHandler+0x84>)
10004332:	681b      	ldr	r3, [r3, #0]
10004334:	607b      	str	r3, [r7, #4]
{
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
10004336:	687b      	ldr	r3, [r7, #4]
10004338:	2b00      	cmp	r3, #0
1000433a:	d005      	beq.n	10004348 <SYSTM001_lTimerHandler+0x7c>
1000433c:	687b      	ldr	r3, [r7, #4]
1000433e:	689b      	ldr	r3, [r3, #8]
10004340:	2b00      	cmp	r3, #0
10004342:	d0ca      	beq.n	100042da <SYSTM001_lTimerHandler+0xe>
10004344:	e000      	b.n	10004348 <SYSTM001_lTimerHandler+0x7c>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
    }
    else
    {
      break;
10004346:	46c0      	nop			; (mov r8, r8)
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
  }
}
10004348:	46bd      	mov	sp, r7
1000434a:	b002      	add	sp, #8
1000434c:	bd80      	pop	{r7, pc}
1000434e:	46c0      	nop			; (mov r8, r8)
10004350:	20000b04 	.word	0x20000b04

10004354 <SysTick_Handler>:

/*
 *  SysTick Event Handler 
 */
void  SysTick_Handler(void)
{ 
10004354:	b580      	push	{r7, lr}
10004356:	b082      	sub	sp, #8
10004358:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = TimerList;
1000435a:	4b0e      	ldr	r3, [pc, #56]	; (10004394 <SysTick_Handler+0x40>)
1000435c:	681b      	ldr	r3, [r3, #0]
1000435e:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_4>>> */
  SysTickCount++;
10004360:	4b0d      	ldr	r3, [pc, #52]	; (10004398 <SysTick_Handler+0x44>)
10004362:	681b      	ldr	r3, [r3, #0]
10004364:	1c5a      	adds	r2, r3, #1
10004366:	4b0c      	ldr	r3, [pc, #48]	; (10004398 <SysTick_Handler+0x44>)
10004368:	601a      	str	r2, [r3, #0]
  if(TmrObjPtr == NULL)
1000436a:	687b      	ldr	r3, [r7, #4]
1000436c:	2b00      	cmp	r3, #0
1000436e:	d00e      	beq.n	1000438e <SysTick_Handler+0x3a>
    /* Not supposed to be here */
   ;  
  }
  else
  {
    if(TmrObjPtr->TimerCount > 1UL)
10004370:	687b      	ldr	r3, [r7, #4]
10004372:	689b      	ldr	r3, [r3, #8]
10004374:	2b01      	cmp	r3, #1
10004376:	d905      	bls.n	10004384 <SysTick_Handler+0x30>
    {
      TmrObjPtr->TimerCount--;
10004378:	687b      	ldr	r3, [r7, #4]
1000437a:	689b      	ldr	r3, [r3, #8]
1000437c:	1e5a      	subs	r2, r3, #1
1000437e:	687b      	ldr	r3, [r7, #4]
10004380:	609a      	str	r2, [r3, #8]
10004382:	e004      	b.n	1000438e <SysTick_Handler+0x3a>
    }
    else
    { 
      TmrObjPtr->TimerCount = 0;
10004384:	687b      	ldr	r3, [r7, #4]
10004386:	2200      	movs	r2, #0
10004388:	609a      	str	r2, [r3, #8]
      SYSTM001_lTimerHandler();
1000438a:	f7ff ff9f 	bl	100042cc <SYSTM001_lTimerHandler>
    }
  }
}
1000438e:	46bd      	mov	sp, r7
10004390:	b002      	add	sp, #8
10004392:	bd80      	pop	{r7, pc}
10004394:	20000b04 	.word	0x20000b04
10004398:	20000b0c 	.word	0x20000b0c

1000439c <SYSTM001_Init>:
/*
 *  Initialization function which initializes the App internal data
 *  structures to default values. 
 */
void  SYSTM001_Init( void)
{
1000439c:	b580      	push	{r7, lr}
1000439e:	b082      	sub	sp, #8
100043a0:	af00      	add	r7, sp, #0
    uint32_t Status = 0UL;
100043a2:	2300      	movs	r3, #0
100043a4:	607b      	str	r3, [r7, #4]

  /** Initialize the header of the list */
  TimerList = NULL;
100043a6:	4b0c      	ldr	r3, [pc, #48]	; (100043d8 <SYSTM001_Init+0x3c>)
100043a8:	2200      	movs	r2, #0
100043aa:	601a      	str	r2, [r3, #0]
  /* Clock Initialization */
  CLK002_Init();
100043ac:	f001 ff80 	bl	100062b0 <CLK002_Init>
  /**   Initialize timer tracker  */
  Status = SysTick_Config((uint32_t)(SYSTM001_SYSTICK_INTERVAL * SYSTM001_SYS_CORE_CLOCK * 1000U));
100043b0:	23fa      	movs	r3, #250	; 0xfa
100043b2:	01db      	lsls	r3, r3, #7
100043b4:	1c18      	adds	r0, r3, #0
100043b6:	f7ff fe61 	bl	1000407c <SysTick_Config>
100043ba:	1c03      	adds	r3, r0, #0
100043bc:	607b      	str	r3, [r7, #4]
  if(Status == 1U)
  {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
  }
    NVIC_SetPriority(SysTick_IRQn, 1);
100043be:	2301      	movs	r3, #1
100043c0:	425b      	negs	r3, r3
100043c2:	1c18      	adds	r0, r3, #0
100043c4:	2101      	movs	r1, #1
100043c6:	f7ff fde9 	bl	10003f9c <NVIC_SetPriority>
  TimerTracker = 0UL;
100043ca:	4b04      	ldr	r3, [pc, #16]	; (100043dc <SYSTM001_Init+0x40>)
100043cc:	2200      	movs	r2, #0
100043ce:	601a      	str	r2, [r3, #0]

}
100043d0:	46bd      	mov	sp, r7
100043d2:	b002      	add	sp, #8
100043d4:	bd80      	pop	{r7, pc}
100043d6:	46c0      	nop			; (mov r8, r8)
100043d8:	20000b04 	.word	0x20000b04
100043dc:	20000b08 	.word	0x20000b08

100043e0 <SYSTM001_CreateTimer>:
  uint32_t Period,
  SYSTM001_TimerType TimerType, 
  SYSTM001_TimerCallBackPtr TimerCallBack, 
  void  * pCallBackArgPtr
)
{
100043e0:	b580      	push	{r7, lr}
100043e2:	b088      	sub	sp, #32
100043e4:	af00      	add	r7, sp, #0
100043e6:	60f8      	str	r0, [r7, #12]
100043e8:	607a      	str	r2, [r7, #4]
100043ea:	603b      	str	r3, [r7, #0]
100043ec:	1c3b      	adds	r3, r7, #0
100043ee:	330b      	adds	r3, #11
100043f0:	1c0a      	adds	r2, r1, #0
100043f2:	701a      	strb	r2, [r3, #0]
  uint32_t TimerID = 0UL;
100043f4:	2300      	movs	r3, #0
100043f6:	61fb      	str	r3, [r7, #28]
  uint32_t Count = 0UL;
100043f8:	2300      	movs	r3, #0
100043fa:	61bb      	str	r3, [r7, #24]
  uint32_t Error = 0UL;  
100043fc:	2300      	movs	r3, #0
100043fe:	617b      	str	r3, [r7, #20]

  /* Check for input parameter */
    if((TimerType != SYSTM001_ONE_SHOT) && (TimerType != SYSTM001_PERIODIC))
10004400:	1c3b      	adds	r3, r7, #0
10004402:	330b      	adds	r3, #11
10004404:	781b      	ldrb	r3, [r3, #0]
10004406:	2b00      	cmp	r3, #0
10004408:	d006      	beq.n	10004418 <SYSTM001_CreateTimer+0x38>
1000440a:	1c3b      	adds	r3, r7, #0
1000440c:	330b      	adds	r3, #11
1000440e:	781b      	ldrb	r3, [r3, #0]
10004410:	2b01      	cmp	r3, #1
10004412:	d001      	beq.n	10004418 <SYSTM001_CreateTimer+0x38>
    {
      Error=(uint32_t)1UL;
10004414:	2301      	movs	r3, #1
10004416:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
      
    }
    if(Period < (uint32_t)SYSTM001_SYSTICK_INTERVAL)
10004418:	68fb      	ldr	r3, [r7, #12]
1000441a:	2b00      	cmp	r3, #0
1000441c:	d101      	bne.n	10004422 <SYSTM001_CreateTimer+0x42>
    {
      Error=(uint32_t)1UL;
1000441e:	2301      	movs	r3, #1
10004420:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if(Period == 0)          /* Timer with '0' time is not allowed. */
10004422:	68fb      	ldr	r3, [r7, #12]
10004424:	2b00      	cmp	r3, #0
10004426:	d101      	bne.n	1000442c <SYSTM001_CreateTimer+0x4c>
    {
      Error=(uint32_t)1UL;
10004428:	2301      	movs	r3, #1
1000442a:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }

    if(TimerCallBack == NULL)
1000442c:	687b      	ldr	r3, [r7, #4]
1000442e:	2b00      	cmp	r3, #0
10004430:	d101      	bne.n	10004436 <SYSTM001_CreateTimer+0x56>
    {
      Error=(uint32_t)1UL;
10004432:	2301      	movs	r3, #1
10004434:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
10004436:	697b      	ldr	r3, [r7, #20]
10004438:	2b00      	cmp	r3, #0
1000443a:	d159      	bne.n	100044f0 <SYSTM001_CreateTimer+0x110>
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
1000443c:	2300      	movs	r3, #0
1000443e:	61bb      	str	r3, [r7, #24]
10004440:	e053      	b.n	100044ea <SYSTM001_CreateTimer+0x10a>
       {
           /* Check for free timer ID */
           if((TimerTracker & ((uint32_t)1U << Count)) == 0U)
10004442:	4b2e      	ldr	r3, [pc, #184]	; (100044fc <SYSTM001_CreateTimer+0x11c>)
10004444:	681a      	ldr	r2, [r3, #0]
10004446:	69bb      	ldr	r3, [r7, #24]
10004448:	40da      	lsrs	r2, r3
1000444a:	2301      	movs	r3, #1
1000444c:	4013      	ands	r3, r2
1000444e:	d149      	bne.n	100044e4 <SYSTM001_CreateTimer+0x104>
           {
               /* If yes,assign ID to this timer      */
               TimerTracker |= ((uint32_t)1U << Count);
10004450:	69bb      	ldr	r3, [r7, #24]
10004452:	2201      	movs	r2, #1
10004454:	409a      	lsls	r2, r3
10004456:	4b29      	ldr	r3, [pc, #164]	; (100044fc <SYSTM001_CreateTimer+0x11c>)
10004458:	681b      	ldr	r3, [r3, #0]
1000445a:	431a      	orrs	r2, r3
1000445c:	4b27      	ldr	r3, [pc, #156]	; (100044fc <SYSTM001_CreateTimer+0x11c>)
1000445e:	601a      	str	r2, [r3, #0]
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
10004460:	4b27      	ldr	r3, [pc, #156]	; (10004500 <SYSTM001_CreateTimer+0x120>)
10004462:	69ba      	ldr	r2, [r7, #24]
10004464:	0152      	lsls	r2, r2, #5
10004466:	69b9      	ldr	r1, [r7, #24]
10004468:	50d1      	str	r1, [r2, r3]
               TimerTbl[Count].TimerType   = TimerType;
1000446a:	4925      	ldr	r1, [pc, #148]	; (10004500 <SYSTM001_CreateTimer+0x120>)
1000446c:	69bb      	ldr	r3, [r7, #24]
1000446e:	015b      	lsls	r3, r3, #5
10004470:	1c3a      	adds	r2, r7, #0
10004472:	320b      	adds	r2, #11
10004474:	18cb      	adds	r3, r1, r3
10004476:	7812      	ldrb	r2, [r2, #0]
10004478:	711a      	strb	r2, [r3, #4]
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
1000447a:	4a21      	ldr	r2, [pc, #132]	; (10004500 <SYSTM001_CreateTimer+0x120>)
1000447c:	69bb      	ldr	r3, [r7, #24]
1000447e:	015b      	lsls	r3, r3, #5
10004480:	18d3      	adds	r3, r2, r3
10004482:	2201      	movs	r2, #1
10004484:	715a      	strb	r2, [r3, #5]
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
                                                    +HW_TIMER_ADDITIONAL_CNT);
10004486:	68fb      	ldr	r3, [r7, #12]
10004488:	1c5a      	adds	r2, r3, #1
               TimerTracker |= ((uint32_t)1U << Count);
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
               TimerTbl[Count].TimerType   = TimerType;
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
1000448a:	491d      	ldr	r1, [pc, #116]	; (10004500 <SYSTM001_CreateTimer+0x120>)
1000448c:	69bb      	ldr	r3, [r7, #24]
1000448e:	015b      	lsls	r3, r3, #5
10004490:	18cb      	adds	r3, r1, r3
10004492:	3308      	adds	r3, #8
10004494:	601a      	str	r2, [r3, #0]
                                                    +HW_TIMER_ADDITIONAL_CNT);
               TimerTbl[Count].TimerReload	= (Period / SYSTM001_SYSTICK_INTERVAL);
10004496:	4a1a      	ldr	r2, [pc, #104]	; (10004500 <SYSTM001_CreateTimer+0x120>)
10004498:	69bb      	ldr	r3, [r7, #24]
1000449a:	015b      	lsls	r3, r3, #5
1000449c:	18d3      	adds	r3, r2, r3
1000449e:	330c      	adds	r3, #12
100044a0:	68fa      	ldr	r2, [r7, #12]
100044a2:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerCallBack = TimerCallBack;
100044a4:	4a16      	ldr	r2, [pc, #88]	; (10004500 <SYSTM001_CreateTimer+0x120>)
100044a6:	69bb      	ldr	r3, [r7, #24]
100044a8:	015b      	lsls	r3, r3, #5
100044aa:	18d3      	adds	r3, r2, r3
100044ac:	3310      	adds	r3, #16
100044ae:	687a      	ldr	r2, [r7, #4]
100044b0:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].ParamToCallBack = pCallBackArgPtr;
100044b2:	4a13      	ldr	r2, [pc, #76]	; (10004500 <SYSTM001_CreateTimer+0x120>)
100044b4:	69bb      	ldr	r3, [r7, #24]
100044b6:	015b      	lsls	r3, r3, #5
100044b8:	18d3      	adds	r3, r2, r3
100044ba:	3314      	adds	r3, #20
100044bc:	683a      	ldr	r2, [r7, #0]
100044be:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerPrev   = NULL;
100044c0:	4a0f      	ldr	r2, [pc, #60]	; (10004500 <SYSTM001_CreateTimer+0x120>)
100044c2:	69bb      	ldr	r3, [r7, #24]
100044c4:	015b      	lsls	r3, r3, #5
100044c6:	18d3      	adds	r3, r2, r3
100044c8:	331c      	adds	r3, #28
100044ca:	2200      	movs	r2, #0
100044cc:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerNext   = NULL;
100044ce:	4a0c      	ldr	r2, [pc, #48]	; (10004500 <SYSTM001_CreateTimer+0x120>)
100044d0:	69bb      	ldr	r3, [r7, #24]
100044d2:	015b      	lsls	r3, r3, #5
100044d4:	18d3      	adds	r3, r2, r3
100044d6:	3318      	adds	r3, #24
100044d8:	2200      	movs	r2, #0
100044da:	601a      	str	r2, [r3, #0]
               TimerID = Count + 1U;
100044dc:	69bb      	ldr	r3, [r7, #24]
100044de:	3301      	adds	r3, #1
100044e0:	61fb      	str	r3, [r7, #28]
               break;
100044e2:	e005      	b.n	100044f0 <SYSTM001_CreateTimer+0x110>
      Error=(uint32_t)1UL;
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
100044e4:	69bb      	ldr	r3, [r7, #24]
100044e6:	3301      	adds	r3, #1
100044e8:	61bb      	str	r3, [r7, #24]
100044ea:	69bb      	ldr	r3, [r7, #24]
100044ec:	2b1f      	cmp	r3, #31
100044ee:	d9a8      	bls.n	10004442 <SYSTM001_CreateTimer+0x62>
               break;
            }
        }
    }

  return (handle_t)TimerID;
100044f0:	69fb      	ldr	r3, [r7, #28]
}  
100044f2:	1c18      	adds	r0, r3, #0
100044f4:	46bd      	mov	sp, r7
100044f6:	b008      	add	sp, #32
100044f8:	bd80      	pop	{r7, pc}
100044fa:	46c0      	nop			; (mov r8, r8)
100044fc:	20000b08 	.word	0x20000b08
10004500:	20000d0c 	.word	0x20000d0c

10004504 <SYSTM001_StartTimer>:

/*
 *  Interface to start the software timer .
 */
status_t SYSTM001_StartTimer(handle_t  Handle) 
{
10004504:	b580      	push	{r7, lr}
10004506:	b084      	sub	sp, #16
10004508:	af00      	add	r7, sp, #0
1000450a:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
1000450c:	2300      	movs	r3, #0
1000450e:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10004510:	687b      	ldr	r3, [r7, #4]
10004512:	2b20      	cmp	r3, #32
10004514:	d901      	bls.n	1000451a <SYSTM001_StartTimer+0x16>
  {
    Error = (status_t)SYSTM001_INVALID_HANDLE_ERROR;
10004516:	2301      	movs	r3, #1
10004518:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
1000451a:	4b18      	ldr	r3, [pc, #96]	; (1000457c <SYSTM001_StartTimer+0x78>)
1000451c:	681a      	ldr	r2, [r3, #0]
1000451e:	687b      	ldr	r3, [r7, #4]
10004520:	3b01      	subs	r3, #1
10004522:	40da      	lsrs	r2, r3
10004524:	2301      	movs	r3, #1
10004526:	4013      	ands	r3, r2
10004528:	d101      	bne.n	1000452e <SYSTM001_StartTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
1000452a:	2301      	movs	r3, #1
1000452c:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  /* Any timer with time '0', can't start again. */
  if(TimerTbl[Handle - 1U].TimerCount == 0UL)
1000452e:	687b      	ldr	r3, [r7, #4]
10004530:	3b01      	subs	r3, #1
10004532:	4a13      	ldr	r2, [pc, #76]	; (10004580 <SYSTM001_StartTimer+0x7c>)
10004534:	015b      	lsls	r3, r3, #5
10004536:	18d3      	adds	r3, r2, r3
10004538:	3308      	adds	r3, #8
1000453a:	681b      	ldr	r3, [r3, #0]
1000453c:	2b00      	cmp	r3, #0
1000453e:	d101      	bne.n	10004544 <SYSTM001_StartTimer+0x40>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10004540:	2301      	movs	r3, #1
10004542:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  
  
  if(Error == (status_t)DAVEApp_SUCCESS)
10004544:	68fb      	ldr	r3, [r7, #12]
10004546:	2b00      	cmp	r3, #0
10004548:	d113      	bne.n	10004572 <SYSTM001_StartTimer+0x6e>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_RUNNING)
1000454a:	687b      	ldr	r3, [r7, #4]
1000454c:	3b01      	subs	r3, #1
1000454e:	4a0c      	ldr	r2, [pc, #48]	; (10004580 <SYSTM001_StartTimer+0x7c>)
10004550:	015b      	lsls	r3, r3, #5
10004552:	18d3      	adds	r3, r2, r3
10004554:	795b      	ldrb	r3, [r3, #5]
10004556:	2b00      	cmp	r3, #0
10004558:	d00b      	beq.n	10004572 <SYSTM001_StartTimer+0x6e>
    {
      /* set timer status as SYSTM001_STATE_RUNNING */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_RUNNING;
1000455a:	687b      	ldr	r3, [r7, #4]
1000455c:	3b01      	subs	r3, #1
1000455e:	4a08      	ldr	r2, [pc, #32]	; (10004580 <SYSTM001_StartTimer+0x7c>)
10004560:	015b      	lsls	r3, r3, #5
10004562:	18d3      	adds	r3, r2, r3
10004564:	2200      	movs	r2, #0
10004566:	715a      	strb	r2, [r3, #5]
      /* Insert this timer into timer list  */
      SYSTM001_lInsertTimerList((Handle - 1U));
10004568:	687b      	ldr	r3, [r7, #4]
1000456a:	3b01      	subs	r3, #1
1000456c:	1c18      	adds	r0, r3, #0
1000456e:	f7ff fda9 	bl	100040c4 <SYSTM001_lInsertTimerList>
    }
  }

  return Error;
10004572:	68fb      	ldr	r3, [r7, #12]
}
10004574:	1c18      	adds	r0, r3, #0
10004576:	46bd      	mov	sp, r7
10004578:	b004      	add	sp, #16
1000457a:	bd80      	pop	{r7, pc}
1000457c:	20000b08 	.word	0x20000b08
10004580:	20000d0c 	.word	0x20000d0c

10004584 <SYSTM001_StopTimer>:

/*
 *  Interface to stop the software timer.
 */
status_t SYSTM001_StopTimer(handle_t Handle) 
{
10004584:	b580      	push	{r7, lr}
10004586:	b084      	sub	sp, #16
10004588:	af00      	add	r7, sp, #0
1000458a:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
1000458c:	2300      	movs	r3, #0
1000458e:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10004590:	687b      	ldr	r3, [r7, #4]
10004592:	2b20      	cmp	r3, #32
10004594:	d901      	bls.n	1000459a <SYSTM001_StopTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10004596:	2301      	movs	r3, #1
10004598:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
1000459a:	4b13      	ldr	r3, [pc, #76]	; (100045e8 <SYSTM001_StopTimer+0x64>)
1000459c:	681a      	ldr	r2, [r3, #0]
1000459e:	687b      	ldr	r3, [r7, #4]
100045a0:	3b01      	subs	r3, #1
100045a2:	40da      	lsrs	r2, r3
100045a4:	2301      	movs	r3, #1
100045a6:	4013      	ands	r3, r2
100045a8:	d101      	bne.n	100045ae <SYSTM001_StopTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
100045aa:	2301      	movs	r3, #1
100045ac:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
100045ae:	68fb      	ldr	r3, [r7, #12]
100045b0:	2b00      	cmp	r3, #0
100045b2:	d113      	bne.n	100045dc <SYSTM001_StopTimer+0x58>
  {
    /* Check whether Timer is in Stop state */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_STOPPED)
100045b4:	687b      	ldr	r3, [r7, #4]
100045b6:	3b01      	subs	r3, #1
100045b8:	4a0c      	ldr	r2, [pc, #48]	; (100045ec <SYSTM001_StopTimer+0x68>)
100045ba:	015b      	lsls	r3, r3, #5
100045bc:	18d3      	adds	r3, r2, r3
100045be:	795b      	ldrb	r3, [r3, #5]
100045c0:	2b01      	cmp	r3, #1
100045c2:	d00b      	beq.n	100045dc <SYSTM001_StopTimer+0x58>
    {
      /* remove Timer from node list */
      SYSTM001_lRemoveTimerList((Handle - 1U));
100045c4:	687b      	ldr	r3, [r7, #4]
100045c6:	3b01      	subs	r3, #1
100045c8:	1c18      	adds	r0, r3, #0
100045ca:	f7ff fe25 	bl	10004218 <SYSTM001_lRemoveTimerList>

      /* Set timer status as SYSTM001_STATE_STOPPED  */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_STOPPED;
100045ce:	687b      	ldr	r3, [r7, #4]
100045d0:	3b01      	subs	r3, #1
100045d2:	4a06      	ldr	r2, [pc, #24]	; (100045ec <SYSTM001_StopTimer+0x68>)
100045d4:	015b      	lsls	r3, r3, #5
100045d6:	18d3      	adds	r3, r2, r3
100045d8:	2201      	movs	r2, #1
100045da:	715a      	strb	r2, [r3, #5]
    }
  }

  return Error;
100045dc:	68fb      	ldr	r3, [r7, #12]
}
100045de:	1c18      	adds	r0, r3, #0
100045e0:	46bd      	mov	sp, r7
100045e2:	b004      	add	sp, #16
100045e4:	bd80      	pop	{r7, pc}
100045e6:	46c0      	nop			; (mov r8, r8)
100045e8:	20000b08 	.word	0x20000b08
100045ec:	20000d0c 	.word	0x20000d0c

100045f0 <SYSTM001_DeleteTimer>:

/*
 *  Function to delete the Timer instance.
 */
status_t SYSTM001_DeleteTimer(handle_t Handle) 
{
100045f0:	b580      	push	{r7, lr}
100045f2:	b084      	sub	sp, #16
100045f4:	af00      	add	r7, sp, #0
100045f6:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
100045f8:	2300      	movs	r3, #0
100045fa:	60fb      	str	r3, [r7, #12]

  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
100045fc:	687b      	ldr	r3, [r7, #4]
100045fe:	2b20      	cmp	r3, #32
10004600:	d901      	bls.n	10004606 <SYSTM001_DeleteTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10004602:	2301      	movs	r3, #1
10004604:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
10004606:	4b15      	ldr	r3, [pc, #84]	; (1000465c <SYSTM001_DeleteTimer+0x6c>)
10004608:	681a      	ldr	r2, [r3, #0]
1000460a:	687b      	ldr	r3, [r7, #4]
1000460c:	3b01      	subs	r3, #1
1000460e:	40da      	lsrs	r2, r3
10004610:	2301      	movs	r3, #1
10004612:	4013      	ands	r3, r2
10004614:	d101      	bne.n	1000461a <SYSTM001_DeleteTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10004616:	2301      	movs	r3, #1
10004618:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
1000461a:	68fb      	ldr	r3, [r7, #12]
1000461c:	2b00      	cmp	r3, #0
1000461e:	d118      	bne.n	10004652 <SYSTM001_DeleteTimer+0x62>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState == SYSTM001_STATE_RUNNING)
10004620:	687b      	ldr	r3, [r7, #4]
10004622:	3b01      	subs	r3, #1
10004624:	4a0e      	ldr	r2, [pc, #56]	; (10004660 <SYSTM001_DeleteTimer+0x70>)
10004626:	015b      	lsls	r3, r3, #5
10004628:	18d3      	adds	r3, r2, r3
1000462a:	795b      	ldrb	r3, [r3, #5]
1000462c:	2b00      	cmp	r3, #0
1000462e:	d104      	bne.n	1000463a <SYSTM001_DeleteTimer+0x4a>
    {
      /* Yes,remove this timer from timer list*/
      SYSTM001_lRemoveTimerList((Handle - 1U));
10004630:	687b      	ldr	r3, [r7, #4]
10004632:	3b01      	subs	r3, #1
10004634:	1c18      	adds	r0, r3, #0
10004636:	f7ff fdef 	bl	10004218 <SYSTM001_lRemoveTimerList>
    }

    /* Release resource that this timer hold*/
    TimerTracker &=~((uint32_t)1U << (Handle - 1U));
1000463a:	687b      	ldr	r3, [r7, #4]
1000463c:	3b01      	subs	r3, #1
1000463e:	2201      	movs	r2, #1
10004640:	1c11      	adds	r1, r2, #0
10004642:	4099      	lsls	r1, r3
10004644:	1c0b      	adds	r3, r1, #0
10004646:	43da      	mvns	r2, r3
10004648:	4b04      	ldr	r3, [pc, #16]	; (1000465c <SYSTM001_DeleteTimer+0x6c>)
1000464a:	681b      	ldr	r3, [r3, #0]
1000464c:	401a      	ands	r2, r3
1000464e:	4b03      	ldr	r3, [pc, #12]	; (1000465c <SYSTM001_DeleteTimer+0x6c>)
10004650:	601a      	str	r2, [r3, #0]
  }

  return Error;
10004652:	68fb      	ldr	r3, [r7, #12]

}
10004654:	1c18      	adds	r0, r3, #0
10004656:	46bd      	mov	sp, r7
10004658:	b004      	add	sp, #16
1000465a:	bd80      	pop	{r7, pc}
1000465c:	20000b08 	.word	0x20000b08
10004660:	20000d0c 	.word	0x20000d0c

10004664 <SYSTM001_GetTime>:

/*
 *  Interface to get the current system time.
 */
uint32_t  SYSTM001_GetTime(void)
{
10004664:	b580      	push	{r7, lr}
10004666:	af00      	add	r7, sp, #0
  /* <<<DD_SYSTM001 _API_6>>> */
  return CONVERT_SYSTICK_COUNT_TO_MSEC(SysTickCount);
10004668:	4b02      	ldr	r3, [pc, #8]	; (10004674 <SYSTM001_GetTime+0x10>)
1000466a:	681b      	ldr	r3, [r3, #0]
}
1000466c:	1c18      	adds	r0, r3, #0
1000466e:	46bd      	mov	sp, r7
10004670:	bd80      	pop	{r7, pc}
10004672:	46c0      	nop			; (mov r8, r8)
10004674:	20000b0c 	.word	0x20000b0c

10004678 <SYSTM001_GetSysTickCount>:
/*
 *  Utility function to get the no of system ticks for the 
 *  specified period.
 */
uint32_t  SYSTM001_GetSysTickCount(uint32_t Period ) 
{
10004678:	b590      	push	{r4, r7, lr}
1000467a:	b085      	sub	sp, #20
1000467c:	af00      	add	r7, sp, #0
1000467e:	6078      	str	r0, [r7, #4]
  /* <<<DD_SYSTM001 _API_7>>> */
  uint32_t	Count  = CONVERT_MSEC_TO_SYSICK_COUNT(Period);
10004680:	6878      	ldr	r0, [r7, #4]
10004682:	f004 f941 	bl	10008908 <__aeabi_ui2d>
10004686:	1c03      	adds	r3, r0, #0
10004688:	1c0c      	adds	r4, r1, #0
1000468a:	1c18      	adds	r0, r3, #0
1000468c:	1c21      	adds	r1, r4, #0
1000468e:	4b0d      	ldr	r3, [pc, #52]	; (100046c4 <SYSTM001_GetSysTickCount+0x4c>)
10004690:	4a0b      	ldr	r2, [pc, #44]	; (100046c0 <SYSTM001_GetSysTickCount+0x48>)
10004692:	f003 fb11 	bl	10007cb8 <__aeabi_dmul>
10004696:	1c03      	adds	r3, r0, #0
10004698:	1c0c      	adds	r4, r1, #0
1000469a:	1c18      	adds	r0, r3, #0
1000469c:	1c21      	adds	r1, r4, #0
1000469e:	4a0a      	ldr	r2, [pc, #40]	; (100046c8 <SYSTM001_GetSysTickCount+0x50>)
100046a0:	4b0a      	ldr	r3, [pc, #40]	; (100046cc <SYSTM001_GetSysTickCount+0x54>)
100046a2:	f003 fb09 	bl	10007cb8 <__aeabi_dmul>
100046a6:	1c03      	adds	r3, r0, #0
100046a8:	1c0c      	adds	r4, r1, #0
100046aa:	1c18      	adds	r0, r3, #0
100046ac:	1c21      	adds	r1, r4, #0
100046ae:	f002 fd73 	bl	10007198 <__aeabi_d2uiz>
100046b2:	1c03      	adds	r3, r0, #0
100046b4:	60fb      	str	r3, [r7, #12]
  return Count;
100046b6:	68fb      	ldr	r3, [r7, #12]
}
100046b8:	1c18      	adds	r0, r3, #0
100046ba:	46bd      	mov	sp, r7
100046bc:	b005      	add	sp, #20
100046be:	bd90      	pop	{r4, r7, pc}
100046c0:	00000000 	.word	0x00000000
100046c4:	40400000 	.word	0x40400000
100046c8:	00000000 	.word	0x00000000
100046cc:	408f4000 	.word	0x408f4000

100046d0 <PWMSP001_Init>:
 **                 Function definitions                                       **
 *******************************************************************************/
   
/* This function initializes the app */
void PWMSP001_Init(void)
{
100046d0:	b580      	push	{r7, lr}
100046d2:	b082      	sub	sp, #8
100046d4:	af00      	add	r7, sp, #0
  status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100046d6:	2301      	movs	r3, #1
100046d8:	607b      	str	r3, [r7, #4]
  CCU4GLOBAL_Init();
100046da:	f001 fefd 	bl	100064d8 <CCU4GLOBAL_Init>
  Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
100046de:	4b1e      	ldr	r3, [pc, #120]	; (10004758 <PWMSP001_Init+0x88>)
100046e0:	1c18      	adds	r0, r3, #0
100046e2:	f000 f841 	bl	10004768 <PWMSP001_lInit>
100046e6:	1c03      	adds	r3, r0, #0
100046e8:	607b      	str	r3, [r7, #4]
  /* Start the app if "Start after initialization" is checked */
  if(Error == (uint32_t)DAVEApp_SUCCESS)
100046ea:	687b      	ldr	r3, [r7, #4]
100046ec:	2b00      	cmp	r3, #0
100046ee:	d109      	bne.n	10004704 <PWMSP001_Init+0x34>
  {   
    if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
100046f0:	4b19      	ldr	r3, [pc, #100]	; (10004758 <PWMSP001_Init+0x88>)
100046f2:	785b      	ldrb	r3, [r3, #1]
100046f4:	2b01      	cmp	r3, #1
100046f6:	d105      	bne.n	10004704 <PWMSP001_Init+0x34>
    {
      Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
100046f8:	4b17      	ldr	r3, [pc, #92]	; (10004758 <PWMSP001_Init+0x88>)
100046fa:	1c18      	adds	r0, r3, #0
100046fc:	f000 fa52 	bl	10004ba4 <PWMSP001_Start>
10004700:	1c03      	adds	r3, r0, #0
10004702:	607b      	str	r3, [r7, #4]
      DBG002_N(Error != DAVEApp_SUCCESS);
    }
  }
    
      PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
10004704:	4b15      	ldr	r3, [pc, #84]	; (1000475c <PWMSP001_Init+0x8c>)
10004706:	4a15      	ldr	r2, [pc, #84]	; (1000475c <PWMSP001_Init+0x8c>)
10004708:	6912      	ldr	r2, [r2, #16]
1000470a:	2140      	movs	r1, #64	; 0x40
1000470c:	438a      	bics	r2, r1
1000470e:	611a      	str	r2, [r3, #16]
      PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
10004710:	4b12      	ldr	r3, [pc, #72]	; (1000475c <PWMSP001_Init+0x8c>)
10004712:	4a12      	ldr	r2, [pc, #72]	; (1000475c <PWMSP001_Init+0x8c>)
10004714:	6912      	ldr	r2, [r2, #16]
10004716:	611a      	str	r2, [r3, #16]
                                   (uint32_t)PORT_IOCR_PC0_PO_Msk);
  Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle1);
10004718:	4b11      	ldr	r3, [pc, #68]	; (10004760 <PWMSP001_Init+0x90>)
1000471a:	1c18      	adds	r0, r3, #0
1000471c:	f000 f824 	bl	10004768 <PWMSP001_lInit>
10004720:	1c03      	adds	r3, r0, #0
10004722:	607b      	str	r3, [r7, #4]
  /* Start the app if "Start after initialization" is checked */
  if(Error == (uint32_t)DAVEApp_SUCCESS)
10004724:	687b      	ldr	r3, [r7, #4]
10004726:	2b00      	cmp	r3, #0
10004728:	d109      	bne.n	1000473e <PWMSP001_Init+0x6e>
  {   
    if (PWMSP001_Handle1.StartControl == (uint8_t)SET)
1000472a:	4b0d      	ldr	r3, [pc, #52]	; (10004760 <PWMSP001_Init+0x90>)
1000472c:	785b      	ldrb	r3, [r3, #1]
1000472e:	2b01      	cmp	r3, #1
10004730:	d105      	bne.n	1000473e <PWMSP001_Init+0x6e>
    {
      Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle1);
10004732:	4b0b      	ldr	r3, [pc, #44]	; (10004760 <PWMSP001_Init+0x90>)
10004734:	1c18      	adds	r0, r3, #0
10004736:	f000 fa35 	bl	10004ba4 <PWMSP001_Start>
1000473a:	1c03      	adds	r3, r0, #0
1000473c:	607b      	str	r3, [r7, #4]
      DBG002_N(Error != DAVEApp_SUCCESS);
    }
  }
    
      PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
1000473e:	4b07      	ldr	r3, [pc, #28]	; (1000475c <PWMSP001_Init+0x8c>)
10004740:	4a06      	ldr	r2, [pc, #24]	; (1000475c <PWMSP001_Init+0x8c>)
10004742:	6911      	ldr	r1, [r2, #16]
10004744:	4a07      	ldr	r2, [pc, #28]	; (10004764 <PWMSP001_Init+0x94>)
10004746:	400a      	ands	r2, r1
10004748:	611a      	str	r2, [r3, #16]
      PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
1000474a:	4b04      	ldr	r3, [pc, #16]	; (1000475c <PWMSP001_Init+0x8c>)
1000474c:	4a03      	ldr	r2, [pc, #12]	; (1000475c <PWMSP001_Init+0x8c>)
1000474e:	6912      	ldr	r2, [r2, #16]
10004750:	611a      	str	r2, [r3, #16]
                                   (uint32_t)PORT_IOCR_PC1_PO_Msk);
}
10004752:	46bd      	mov	sp, r7
10004754:	b002      	add	sp, #8
10004756:	bd80      	pop	{r7, pc}
10004758:	10009084 	.word	0x10009084
1000475c:	40040100 	.word	0x40040100
10004760:	100090cc 	.word	0x100090cc
10004764:	ffffbfff 	.word	0xffffbfff

10004768 <PWMSP001_lInit>:

/*<<<DD_PWMSP001_API_1>>>*/
/* This function initializes an instance of the app */
status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
{
10004768:	b5b0      	push	{r4, r5, r7, lr}
1000476a:	b084      	sub	sp, #16
1000476c:	af00      	add	r7, sp, #0
1000476e:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004770:	2301      	movs	r3, #1
10004772:	60fb      	str	r3, [r7, #12]

  do
  {
    /*<<<DD_PWMSP001_API_1_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
10004774:	687b      	ldr	r3, [r7, #4]
10004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004778:	781b      	ldrb	r3, [r3, #0]
1000477a:	2b00      	cmp	r3, #0
1000477c:	d000      	beq.n	10004780 <PWMSP001_lInit+0x18>
1000477e:	e156      	b.n	10004a2e <PWMSP001_lInit+0x2c6>
    {
      break;
    }
    HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
10004780:	687b      	ldr	r3, [r7, #4]
10004782:	699b      	ldr	r3, [r3, #24]
10004784:	2207      	movs	r2, #7
10004786:	611a      	str	r2, [r3, #16]

    /*<<<DD_PWMSP001_API_1_3>>>*/
    /* If external stop trigger is setelected */
    if (HandlePtr->kExtStopTrig == (uint8_t)SET)
10004788:	687b      	ldr	r3, [r7, #4]
1000478a:	7bdb      	ldrb	r3, [r3, #15]
1000478c:	2b01      	cmp	r3, #1
1000478e:	d125      	bne.n	100047dc <PWMSP001_lInit+0x74>
    {
      HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LPF1M_Msk);
10004790:	687b      	ldr	r3, [r7, #4]
10004792:	699b      	ldr	r3, [r3, #24]
10004794:	687a      	ldr	r2, [r7, #4]
10004796:	6992      	ldr	r2, [r2, #24]
10004798:	6811      	ldr	r1, [r2, #0]
1000479a:	4aa8      	ldr	r2, [pc, #672]	; (10004a3c <PWMSP001_lInit+0x2d4>)
1000479c:	400a      	ands	r2, r1
1000479e:	601a      	str	r2, [r3, #0]
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
100047a0:	687b      	ldr	r3, [r7, #4]
100047a2:	699b      	ldr	r3, [r3, #24]
100047a4:	687a      	ldr	r2, [r7, #4]
100047a6:	6992      	ldr	r2, [r2, #24]
100047a8:	6852      	ldr	r2, [r2, #4]
100047aa:	210c      	movs	r1, #12
100047ac:	438a      	bics	r2, r1
100047ae:	605a      	str	r2, [r3, #4]
      HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV1EM_Pos)\
100047b0:	687b      	ldr	r3, [r7, #4]
100047b2:	699b      	ldr	r3, [r3, #24]
100047b4:	687a      	ldr	r2, [r7, #4]
100047b6:	6992      	ldr	r2, [r2, #24]
100047b8:	6811      	ldr	r1, [r2, #0]
100047ba:	6878      	ldr	r0, [r7, #4]
100047bc:	2224      	movs	r2, #36	; 0x24
100047be:	5c82      	ldrb	r2, [r0, r2]
100047c0:	0490      	lsls	r0, r2, #18
	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)\
100047c2:	22c0      	movs	r2, #192	; 0xc0
100047c4:	0312      	lsls	r2, r2, #12
100047c6:	4002      	ands	r2, r0
    /* If external stop trigger is setelected */
    if (HandlePtr->kExtStopTrig == (uint8_t)SET)
    {
      HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LPF1M_Msk);
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
      HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV1EM_Pos)\
100047c8:	430a      	orrs	r2, r1
100047ca:	601a      	str	r2, [r3, #0]
	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)\
		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));

      HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
100047cc:	687b      	ldr	r3, [r7, #4]
100047ce:	699b      	ldr	r3, [r3, #24]
100047d0:	687a      	ldr	r2, [r7, #4]
100047d2:	6992      	ldr	r2, [r2, #24]
100047d4:	6852      	ldr	r2, [r2, #4]
100047d6:	2108      	movs	r1, #8
100047d8:	430a      	orrs	r2, r1
100047da:	605a      	str	r2, [r3, #4]
          (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
    }/*End of if (HandlePtr->kExtStopTrig == SET)*/

    /*<<<DD_PWMSP001_API_1_4>>>*/
    /* Trap configurations if trap is enabled */
    if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
100047dc:	687b      	ldr	r3, [r7, #4]
100047de:	7c5b      	ldrb	r3, [r3, #17]
100047e0:	2b01      	cmp	r3, #1
100047e2:	d12a      	bne.n	1000483a <PWMSP001_lInit+0xd2>
        ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
100047e4:	687a      	ldr	r2, [r7, #4]
100047e6:	2320      	movs	r3, #32
100047e8:	5cd3      	ldrb	r3, [r2, r3]
          (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
    }/*End of if (HandlePtr->kExtStopTrig == SET)*/

    /*<<<DD_PWMSP001_API_1_4>>>*/
    /* Trap configurations if trap is enabled */
    if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
100047ea:	2b01      	cmp	r3, #1
100047ec:	d025      	beq.n	1000483a <PWMSP001_lInit+0xd2>
        ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
    )
    {
      HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
100047ee:	687b      	ldr	r3, [r7, #4]
100047f0:	699b      	ldr	r3, [r3, #24]
100047f2:	687a      	ldr	r2, [r7, #4]
100047f4:	6992      	ldr	r2, [r2, #24]
100047f6:	6811      	ldr	r1, [r2, #0]
100047f8:	4a91      	ldr	r2, [pc, #580]	; (10004a40 <PWMSP001_lInit+0x2d8>)
100047fa:	400a      	ands	r2, r1
100047fc:	601a      	str	r2, [r3, #0]
	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
100047fe:	687b      	ldr	r3, [r7, #4]
10004800:	699b      	ldr	r3, [r3, #24]
10004802:	687a      	ldr	r2, [r7, #4]
10004804:	6992      	ldr	r2, [r2, #24]
10004806:	6851      	ldr	r1, [r2, #4]
10004808:	4a8e      	ldr	r2, [pc, #568]	; (10004a44 <PWMSP001_lInit+0x2dc>)
1000480a:	400a      	ands	r2, r1
1000480c:	605a      	str	r2, [r3, #4]
      HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
1000480e:	687b      	ldr	r3, [r7, #4]
10004810:	699b      	ldr	r3, [r3, #24]
10004812:	687a      	ldr	r2, [r7, #4]
10004814:	6992      	ldr	r2, [r2, #24]
10004816:	6811      	ldr	r1, [r2, #0]
	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
10004818:	687a      	ldr	r2, [r7, #4]
1000481a:	7812      	ldrb	r2, [r2, #0]
1000481c:	0610      	lsls	r0, r2, #24
		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
1000481e:	2280      	movs	r2, #128	; 0x80
10004820:	0452      	lsls	r2, r2, #17
10004822:	4002      	ands	r2, r0
    )
    {
      HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
      HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
10004824:	430a      	orrs	r2, r1
10004826:	601a      	str	r2, [r3, #0]
	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));

      HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
10004828:	687b      	ldr	r3, [r7, #4]
1000482a:	699b      	ldr	r3, [r3, #24]
1000482c:	687a      	ldr	r2, [r7, #4]
1000482e:	6992      	ldr	r2, [r2, #24]
10004830:	6852      	ldr	r2, [r2, #4]
10004832:	2180      	movs	r1, #128	; 0x80
10004834:	0289      	lsls	r1, r1, #10
10004836:	430a      	orrs	r2, r1
10004838:	605a      	str	r2, [r3, #4]
    }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
    
    HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
1000483a:	687b      	ldr	r3, [r7, #4]
1000483c:	699b      	ldr	r3, [r3, #24]
1000483e:	687a      	ldr	r2, [r7, #4]
10004840:	6992      	ldr	r2, [r2, #24]
10004842:	6951      	ldr	r1, [r2, #20]
10004844:	4a80      	ldr	r2, [pc, #512]	; (10004a48 <PWMSP001_lInit+0x2e0>)
10004846:	400a      	ands	r2, r1
10004848:	615a      	str	r2, [r3, #20]
	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
    
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
1000484a:	687b      	ldr	r3, [r7, #4]
1000484c:	699b      	ldr	r3, [r3, #24]
1000484e:	687a      	ldr	r2, [r7, #4]
10004850:	6992      	ldr	r2, [r2, #24]
10004852:	6951      	ldr	r1, [r2, #20]
10004854:	6878      	ldr	r0, [r7, #4]
10004856:	2236      	movs	r2, #54	; 0x36
10004858:	5c82      	ldrb	r2, [r0, r2]
1000485a:	1c10      	adds	r0, r2, #0
	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
1000485c:	2201      	movs	r2, #1
1000485e:	4010      	ands	r0, r2
		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
10004860:	687c      	ldr	r4, [r7, #4]
10004862:	2234      	movs	r2, #52	; 0x34
10004864:	5ca2      	ldrb	r2, [r4, r2]
10004866:	0294      	lsls	r4, r2, #10
			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
10004868:	2280      	movs	r2, #128	; 0x80
1000486a:	00d2      	lsls	r2, r2, #3
1000486c:	4022      	ands	r2, r4
	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
    
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1000486e:	4310      	orrs	r0, r2
			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
10004870:	687c      	ldr	r4, [r7, #4]
10004872:	2235      	movs	r2, #53	; 0x35
10004874:	5ca2      	ldrb	r2, [r4, r2]
10004876:	0214      	lsls	r4, r2, #8
				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
10004878:	22c0      	movs	r2, #192	; 0xc0
1000487a:	0092      	lsls	r2, r2, #2
1000487c:	4022      	ands	r2, r4
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
1000487e:	4302      	orrs	r2, r0
    
    HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
    
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
10004880:	430a      	orrs	r2, r1
10004882:	615a      	str	r2, [r3, #20]
				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
    /*
     * If timer concatenation is enabled during single shot mode lower timer 
     * should be free running
     */
	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
10004884:	687a      	ldr	r2, [r7, #4]
10004886:	2320      	movs	r3, #32
10004888:	5cd3      	ldrb	r3, [r2, r3]
1000488a:	2b01      	cmp	r3, #1
1000488c:	d00d      	beq.n	100048aa <PWMSP001_lInit+0x142>
	{
		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
1000488e:	687b      	ldr	r3, [r7, #4]
10004890:	699b      	ldr	r3, [r3, #24]
10004892:	687a      	ldr	r2, [r7, #4]
10004894:	7b12      	ldrb	r2, [r2, #12]
10004896:	0051      	lsls	r1, r2, #1
10004898:	2202      	movs	r2, #2
1000489a:	4011      	ands	r1, r2
1000489c:	687a      	ldr	r2, [r7, #4]
1000489e:	6992      	ldr	r2, [r2, #24]
100048a0:	6952      	ldr	r2, [r2, #20]
100048a2:	2002      	movs	r0, #2
100048a4:	4382      	bics	r2, r0
100048a6:	430a      	orrs	r2, r1
100048a8:	615a      	str	r2, [r3, #20]
			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
	} 
    
    /*Set the dither mode setting*/
    HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
100048aa:	687b      	ldr	r3, [r7, #4]
100048ac:	699b      	ldr	r3, [r3, #24]
100048ae:	687a      	ldr	r2, [r7, #4]
100048b0:	6992      	ldr	r2, [r2, #24]
100048b2:	6951      	ldr	r1, [r2, #20]
100048b4:	6878      	ldr	r0, [r7, #4]
100048b6:	2221      	movs	r2, #33	; 0x21
100048b8:	5c82      	ldrb	r2, [r0, r2]
100048ba:	0350      	lsls	r0, r2, #13
	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
100048bc:	22c0      	movs	r2, #192	; 0xc0
100048be:	01d2      	lsls	r2, r2, #7
100048c0:	4002      	ands	r2, r0
		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
	} 
    
    /*Set the dither mode setting*/
    HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
100048c2:	430a      	orrs	r2, r1
100048c4:	615a      	str	r2, [r3, #20]
	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
    
    WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
100048c6:	687b      	ldr	r3, [r7, #4]
100048c8:	699b      	ldr	r3, [r3, #24]
100048ca:	687a      	ldr	r2, [r7, #4]
100048cc:	7b52      	ldrb	r2, [r2, #13]
100048ce:	1c11      	adds	r1, r2, #0
100048d0:	220f      	movs	r2, #15
100048d2:	4011      	ands	r1, r2
100048d4:	687a      	ldr	r2, [r7, #4]
100048d6:	6992      	ldr	r2, [r2, #24]
100048d8:	6a12      	ldr	r2, [r2, #32]
100048da:	200f      	movs	r0, #15
100048dc:	4382      	bics	r2, r0
100048de:	430a      	orrs	r2, r1
100048e0:	621a      	str	r2, [r3, #32]
      (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);

    /*Configure Trap mode as per GUI*/
    if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
100048e2:	687a      	ldr	r2, [r7, #4]
100048e4:	2320      	movs	r3, #32
100048e6:	5cd3      	ldrb	r3, [r2, r3]
100048e8:	2b01      	cmp	r3, #1
100048ea:	d02c      	beq.n	10004946 <PWMSP001_lInit+0x1de>
    {
      /*<<<DD_PWMSP001_API_1_6>>>*/
      WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
100048ec:	687b      	ldr	r3, [r7, #4]
100048ee:	699b      	ldr	r3, [r3, #24]
100048f0:	687a      	ldr	r2, [r7, #4]
100048f2:	7c92      	ldrb	r2, [r2, #18]
100048f4:	0551      	lsls	r1, r2, #21
100048f6:	2280      	movs	r2, #128	; 0x80
100048f8:	0392      	lsls	r2, r2, #14
100048fa:	4011      	ands	r1, r2
100048fc:	687a      	ldr	r2, [r7, #4]
100048fe:	6992      	ldr	r2, [r2, #24]
10004900:	6950      	ldr	r0, [r2, #20]
10004902:	4a52      	ldr	r2, [pc, #328]	; (10004a4c <PWMSP001_lInit+0x2e4>)
10004904:	4002      	ands	r2, r0
10004906:	430a      	orrs	r2, r1
10004908:	615a      	str	r2, [r3, #20]
          (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);

      WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
1000490a:	687b      	ldr	r3, [r7, #4]
1000490c:	699b      	ldr	r3, [r3, #24]
1000490e:	687a      	ldr	r2, [r7, #4]
10004910:	7cd2      	ldrb	r2, [r2, #19]
10004912:	0591      	lsls	r1, r2, #22
10004914:	2280      	movs	r2, #128	; 0x80
10004916:	03d2      	lsls	r2, r2, #15
10004918:	4011      	ands	r1, r2
1000491a:	687a      	ldr	r2, [r7, #4]
1000491c:	6992      	ldr	r2, [r2, #24]
1000491e:	6950      	ldr	r0, [r2, #20]
10004920:	4a4b      	ldr	r2, [pc, #300]	; (10004a50 <PWMSP001_lInit+0x2e8>)
10004922:	4002      	ands	r2, r0
10004924:	430a      	orrs	r2, r1
10004926:	615a      	str	r2, [r3, #20]
          (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
      
	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
10004928:	687b      	ldr	r3, [r7, #4]
1000492a:	699b      	ldr	r3, [r3, #24]
1000492c:	687a      	ldr	r2, [r7, #4]
1000492e:	7c52      	ldrb	r2, [r2, #17]
10004930:	0451      	lsls	r1, r2, #17
10004932:	2280      	movs	r2, #128	; 0x80
10004934:	0292      	lsls	r2, r2, #10
10004936:	4011      	ands	r1, r2
10004938:	687a      	ldr	r2, [r7, #4]
1000493a:	6992      	ldr	r2, [r2, #24]
1000493c:	6950      	ldr	r0, [r2, #20]
1000493e:	4a41      	ldr	r2, [pc, #260]	; (10004a44 <PWMSP001_lInit+0x2dc>)
10004940:	4002      	ands	r2, r0
10004942:	430a      	orrs	r2, r1
10004944:	615a      	str	r2, [r3, #20]
		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
    }
    /*Set the prescalar divider and passive level of the o/p signal.*/
    WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
10004946:	687b      	ldr	r3, [r7, #4]
10004948:	699b      	ldr	r3, [r3, #24]
1000494a:	6879      	ldr	r1, [r7, #4]
1000494c:	2222      	movs	r2, #34	; 0x22
1000494e:	5c8a      	ldrb	r2, [r1, r2]
10004950:	1c11      	adds	r1, r2, #0
10004952:	220f      	movs	r2, #15
10004954:	4011      	ands	r1, r2
10004956:	687a      	ldr	r2, [r7, #4]
10004958:	6992      	ldr	r2, [r2, #24]
1000495a:	6a52      	ldr	r2, [r2, #36]	; 0x24
1000495c:	200f      	movs	r0, #15
1000495e:	4382      	bics	r2, r0
10004960:	430a      	orrs	r2, r1
10004962:	625a      	str	r2, [r3, #36]	; 0x24
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
    HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
10004964:	687b      	ldr	r3, [r7, #4]
10004966:	699b      	ldr	r3, [r3, #24]
10004968:	687a      	ldr	r2, [r7, #4]
1000496a:	7c12      	ldrb	r2, [r2, #16]
1000496c:	619a      	str	r2, [r3, #24]

    /*<<<DD_PWMSP001_API_1_7>>>*/
    /*Setting period register's value*/
    HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
1000496e:	687b      	ldr	r3, [r7, #4]
10004970:	699b      	ldr	r3, [r3, #24]
10004972:	687a      	ldr	r2, [r7, #4]
10004974:	6a92      	ldr	r2, [r2, #40]	; 0x28
10004976:	0412      	lsls	r2, r2, #16
10004978:	0c12      	lsrs	r2, r2, #16
1000497a:	635a      	str	r2, [r3, #52]	; 0x34
    /*Setting compare register's value*/
    HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
1000497c:	687b      	ldr	r3, [r7, #4]
1000497e:	699b      	ldr	r3, [r3, #24]
10004980:	687a      	ldr	r2, [r7, #4]
10004982:	6892      	ldr	r2, [r2, #8]
10004984:	0412      	lsls	r2, r2, #16
10004986:	0c12      	lsrs	r2, r2, #16
10004988:	63da      	str	r2, [r3, #60]	; 0x3c
    HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
1000498a:	687b      	ldr	r3, [r7, #4]
1000498c:	699a      	ldr	r2, [r3, #24]
1000498e:	687b      	ldr	r3, [r7, #4]
10004990:	6999      	ldr	r1, [r3, #24]
10004992:	23b0      	movs	r3, #176	; 0xb0
10004994:	58cb      	ldr	r3, [r1, r3]
10004996:	492f      	ldr	r1, [pc, #188]	; (10004a54 <PWMSP001_lInit+0x2ec>)
10004998:	4319      	orrs	r1, r3
1000499a:	23b0      	movs	r3, #176	; 0xb0
1000499c:	50d1      	str	r1, [r2, r3]

    /*Applying register's settings for the second slice if timer concatenation
     * is set */
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
1000499e:	687a      	ldr	r2, [r7, #4]
100049a0:	2320      	movs	r3, #32
100049a2:	5cd3      	ldrb	r3, [r2, r3]
100049a4:	2b01      	cmp	r3, #1
100049a6:	d10f      	bne.n	100049c8 <PWMSP001_lInit+0x260>
    {
      PWMSP001_lConfigureSecondSlice(HandlePtr);
100049a8:	687b      	ldr	r3, [r7, #4]
100049aa:	1c18      	adds	r0, r3, #0
100049ac:	f000 ff98 	bl	100058e0 <PWMSP001_lConfigureSecondSlice>
      HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
100049b0:	687b      	ldr	r3, [r7, #4]
100049b2:	69da      	ldr	r2, [r3, #28]
100049b4:	687b      	ldr	r3, [r7, #4]
100049b6:	69d9      	ldr	r1, [r3, #28]
100049b8:	23a4      	movs	r3, #164	; 0xa4
100049ba:	58c9      	ldr	r1, [r1, r3]
100049bc:	687b      	ldr	r3, [r7, #4]
100049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100049c0:	4319      	orrs	r1, r3
100049c2:	23a4      	movs	r3, #164	; 0xa4
100049c4:	50d1      	str	r1, [r2, r3]
100049c6:	e00a      	b.n	100049de <PWMSP001_lInit+0x276>

    } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
    else
    {
      HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
100049c8:	687b      	ldr	r3, [r7, #4]
100049ca:	699a      	ldr	r2, [r3, #24]
100049cc:	687b      	ldr	r3, [r7, #4]
100049ce:	6999      	ldr	r1, [r3, #24]
100049d0:	23a4      	movs	r3, #164	; 0xa4
100049d2:	58c9      	ldr	r1, [r1, r3]
100049d4:	687b      	ldr	r3, [r7, #4]
100049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100049d8:	4319      	orrs	r1, r3
100049da:	23a4      	movs	r3, #164	; 0xa4
100049dc:	50d1      	str	r1, [r2, r3]
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
100049de:	687b      	ldr	r3, [r7, #4]
100049e0:	695b      	ldr	r3, [r3, #20]
100049e2:	687a      	ldr	r2, [r7, #4]
100049e4:	6952      	ldr	r2, [r2, #20]
100049e6:	6911      	ldr	r1, [r2, #16]
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
100049e8:	6878      	ldr	r0, [r7, #4]
100049ea:	2237      	movs	r2, #55	; 0x37
100049ec:	5c82      	ldrb	r2, [r0, r2]
      HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
100049ee:	0092      	lsls	r2, r2, #2
100049f0:	2001      	movs	r0, #1
100049f2:	4090      	lsls	r0, r2
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
100049f4:	687c      	ldr	r4, [r7, #4]
100049f6:	2237      	movs	r2, #55	; 0x37
100049f8:	5ca2      	ldrb	r2, [r4, r2]
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
100049fa:	0092      	lsls	r2, r2, #2
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
100049fc:	3201      	adds	r2, #1
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
100049fe:	2401      	movs	r4, #1
10004a00:	1c25      	adds	r5, r4, #0
10004a02:	4095      	lsls	r5, r2
10004a04:	1c2a      	adds	r2, r5, #0
10004a06:	4310      	orrs	r0, r2
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
10004a08:	687c      	ldr	r4, [r7, #4]
10004a0a:	2237      	movs	r2, #55	; 0x37
10004a0c:	5ca2      	ldrb	r2, [r4, r2]
10004a0e:	0092      	lsls	r2, r2, #2
10004a10:	3202      	adds	r2, #2
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
10004a12:	2401      	movs	r4, #1
10004a14:	1c25      	adds	r5, r4, #0
10004a16:	4095      	lsls	r5, r2
10004a18:	1c2a      	adds	r2, r5, #0
10004a1a:	4302      	orrs	r2, r0
      HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
10004a1c:	430a      	orrs	r2, r1
10004a1e:	611a      	str	r2, [r3, #16]
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));

    Status = (uint32_t)DAVEApp_SUCCESS;
10004a20:	2300      	movs	r3, #0
10004a22:	60fb      	str	r3, [r7, #12]
    HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
10004a24:	687b      	ldr	r3, [r7, #4]
10004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004a28:	2201      	movs	r2, #1
10004a2a:	701a      	strb	r2, [r3, #0]
10004a2c:	e000      	b.n	10004a30 <PWMSP001_lInit+0x2c8>
  do
  {
    /*<<<DD_PWMSP001_API_1_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
    {
      break;
10004a2e:	46c0      	nop			; (mov r8, r8)

  if (Status != (uint32_t)DAVEApp_SUCCESS)
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  return Status;
10004a30:	68fb      	ldr	r3, [r7, #12]
}
10004a32:	1c18      	adds	r0, r3, #0
10004a34:	46bd      	mov	sp, r7
10004a36:	b004      	add	sp, #16
10004a38:	bdb0      	pop	{r4, r5, r7, pc}
10004a3a:	46c0      	nop			; (mov r8, r8)
10004a3c:	e7f3ffff 	.word	0xe7f3ffff
10004a40:	9ecfffff 	.word	0x9ecfffff
10004a44:	fffdffff 	.word	0xfffdffff
10004a48:	ffff98f6 	.word	0xffff98f6
10004a4c:	ffdfffff 	.word	0xffdfffff
10004a50:	ffbfffff 	.word	0xffbfffff
10004a54:	00000f0f 	.word	0x00000f0f

10004a58 <PWMSP001_Deinit>:

/*<<<DD_PWMSP001_API_2>>>*/
/* This function de-initializes the app */
status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
{
10004a58:	b590      	push	{r4, r7, lr}
10004a5a:	b089      	sub	sp, #36	; 0x24
10004a5c:	af00      	add	r7, sp, #0
10004a5e:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004a60:	2301      	movs	r3, #1
10004a62:	61fb      	str	r3, [r7, #28]
  uint32_t Temp2;
  uint32_t Temp3;
  uint32_t Temp4;

     /*<<<DD_PWMSP001_API_2_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
10004a64:	687b      	ldr	r3, [r7, #4]
10004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004a68:	781b      	ldrb	r3, [r3, #0]
10004a6a:	2b00      	cmp	r3, #0
10004a6c:	d100      	bne.n	10004a70 <PWMSP001_Deinit+0x18>
10004a6e:	e091      	b.n	10004b94 <PWMSP001_Deinit+0x13c>
    {
    /*<<<DD_PWMSP001_API_2_3>>>*/
    HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
10004a70:	687b      	ldr	r3, [r7, #4]
10004a72:	699b      	ldr	r3, [r3, #24]
10004a74:	2207      	movs	r2, #7
10004a76:	611a      	str	r2, [r3, #16]
    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
10004a78:	687b      	ldr	r3, [r7, #4]
10004a7a:	699a      	ldr	r2, [r3, #24]
10004a7c:	23b0      	movs	r3, #176	; 0xb0
10004a7e:	4948      	ldr	r1, [pc, #288]	; (10004ba0 <PWMSP001_Deinit+0x148>)
10004a80:	50d1      	str	r1, [r2, r3]
    HandlePtr->CC4yRegsPtr->INTE = 0x00U;
10004a82:	687b      	ldr	r3, [r7, #4]
10004a84:	699a      	ldr	r2, [r3, #24]
10004a86:	23a4      	movs	r3, #164	; 0xa4
10004a88:	2100      	movs	r1, #0
10004a8a:	50d1      	str	r1, [r2, r3]

    /*Set IDLE mode for selected slice*/
    HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
10004a8c:	687b      	ldr	r3, [r7, #4]
10004a8e:	695b      	ldr	r3, [r3, #20]
10004a90:	687a      	ldr	r2, [r7, #4]
10004a92:	6952      	ldr	r2, [r2, #20]
10004a94:	6891      	ldr	r1, [r2, #8]
	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
10004a96:	6878      	ldr	r0, [r7, #4]
10004a98:	2237      	movs	r2, #55	; 0x37
10004a9a:	5c82      	ldrb	r2, [r0, r2]
    HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
    HandlePtr->CC4yRegsPtr->INTE = 0x00U;

    /*Set IDLE mode for selected slice*/
    HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
10004a9c:	2001      	movs	r0, #1
10004a9e:	1c04      	adds	r4, r0, #0
10004aa0:	4094      	lsls	r4, r2
10004aa2:	1c22      	adds	r2, r4, #0
10004aa4:	430a      	orrs	r2, r1
10004aa6:	21c0      	movs	r1, #192	; 0xc0
10004aa8:	0089      	lsls	r1, r1, #2
10004aaa:	430a      	orrs	r2, r1
10004aac:	609a      	str	r2, [r3, #8]
	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));

    /*Clear all the registers*/
    HandlePtr->CC4yRegsPtr->INS = 0x00U;
10004aae:	687b      	ldr	r3, [r7, #4]
10004ab0:	699b      	ldr	r3, [r3, #24]
10004ab2:	2200      	movs	r2, #0
10004ab4:	601a      	str	r2, [r3, #0]
    HandlePtr->CC4yRegsPtr->CMC = 0x00U;
10004ab6:	687b      	ldr	r3, [r7, #4]
10004ab8:	699b      	ldr	r3, [r3, #24]
10004aba:	2200      	movs	r2, #0
10004abc:	605a      	str	r2, [r3, #4]
    HandlePtr->CC4yRegsPtr->TC = 0x00U;
10004abe:	687b      	ldr	r3, [r7, #4]
10004ac0:	699b      	ldr	r3, [r3, #24]
10004ac2:	2200      	movs	r2, #0
10004ac4:	615a      	str	r2, [r3, #20]
    HandlePtr->CC4yRegsPtr->PSC = 0x00U;
10004ac6:	687b      	ldr	r3, [r7, #4]
10004ac8:	699b      	ldr	r3, [r3, #24]
10004aca:	2200      	movs	r2, #0
10004acc:	625a      	str	r2, [r3, #36]	; 0x24
    HandlePtr->CC4yRegsPtr->PSL = 0x00U;
10004ace:	687b      	ldr	r3, [r7, #4]
10004ad0:	699b      	ldr	r3, [r3, #24]
10004ad2:	2200      	movs	r2, #0
10004ad4:	619a      	str	r2, [r3, #24]
    HandlePtr->CC4yRegsPtr->DITS = 0x00U;
10004ad6:	687b      	ldr	r3, [r7, #4]
10004ad8:	699b      	ldr	r3, [r3, #24]
10004ada:	2200      	movs	r2, #0
10004adc:	621a      	str	r2, [r3, #32]
    HandlePtr->CC4yRegsPtr->CRS = 0x00U;
10004ade:	687b      	ldr	r3, [r7, #4]
10004ae0:	699b      	ldr	r3, [r3, #24]
10004ae2:	2200      	movs	r2, #0
10004ae4:	63da      	str	r2, [r3, #60]	; 0x3c
    HandlePtr->CC4yRegsPtr->PRS = 0x00U;
10004ae6:	687b      	ldr	r3, [r7, #4]
10004ae8:	699b      	ldr	r3, [r3, #24]
10004aea:	2200      	movs	r2, #0
10004aec:	635a      	str	r2, [r3, #52]	; 0x34

    /*<<<DD_PWMSP001_API_2_2>>>*/
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004aee:	687a      	ldr	r2, [r7, #4]
10004af0:	2320      	movs	r3, #32
10004af2:	5cd3      	ldrb	r3, [r2, r3]
10004af4:	2b01      	cmp	r3, #1
10004af6:	d147      	bne.n	10004b88 <PWMSP001_Deinit+0x130>
    {
      /*<<<DD_PWMSP001_API_2_3>>>*/
      HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
10004af8:	687b      	ldr	r3, [r7, #4]
10004afa:	69db      	ldr	r3, [r3, #28]
10004afc:	2207      	movs	r2, #7
10004afe:	611a      	str	r2, [r3, #16]
      HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
10004b00:	687b      	ldr	r3, [r7, #4]
10004b02:	69da      	ldr	r2, [r3, #28]
10004b04:	23b0      	movs	r3, #176	; 0xb0
10004b06:	4926      	ldr	r1, [pc, #152]	; (10004ba0 <PWMSP001_Deinit+0x148>)
10004b08:	50d1      	str	r1, [r2, r3]
      HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
10004b0a:	687b      	ldr	r3, [r7, #4]
10004b0c:	69da      	ldr	r2, [r3, #28]
10004b0e:	23a4      	movs	r3, #164	; 0xa4
10004b10:	2100      	movs	r1, #0
10004b12:	50d1      	str	r1, [r2, r3]

      /*Set IDLE mode for selected slice*/
      Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
10004b14:	2380      	movs	r3, #128	; 0x80
10004b16:	009b      	lsls	r3, r3, #2
10004b18:	61bb      	str	r3, [r7, #24]
      Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
10004b1a:	2380      	movs	r3, #128	; 0x80
10004b1c:	005b      	lsls	r3, r3, #1
10004b1e:	617b      	str	r3, [r7, #20]
      Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
10004b20:	687a      	ldr	r2, [r7, #4]
10004b22:	2338      	movs	r3, #56	; 0x38
10004b24:	5cd3      	ldrb	r3, [r2, r3]
10004b26:	613b      	str	r3, [r7, #16]
      Temp1 = Temp3 | Temp4;
10004b28:	697a      	ldr	r2, [r7, #20]
10004b2a:	69bb      	ldr	r3, [r7, #24]
10004b2c:	4313      	orrs	r3, r2
10004b2e:	60fb      	str	r3, [r7, #12]
      HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
10004b30:	687b      	ldr	r3, [r7, #4]
10004b32:	695b      	ldr	r3, [r3, #20]
10004b34:	687a      	ldr	r2, [r7, #4]
10004b36:	6952      	ldr	r2, [r2, #20]
10004b38:	6891      	ldr	r1, [r2, #8]
10004b3a:	693a      	ldr	r2, [r7, #16]
10004b3c:	2001      	movs	r0, #1
10004b3e:	4090      	lsls	r0, r2
10004b40:	68fa      	ldr	r2, [r7, #12]
10004b42:	4302      	orrs	r2, r0
10004b44:	430a      	orrs	r2, r1
10004b46:	609a      	str	r2, [r3, #8]
      /*   Temp3 | Temp4 ); */

      /*Clear all the registers*/
      HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
10004b48:	687b      	ldr	r3, [r7, #4]
10004b4a:	69db      	ldr	r3, [r3, #28]
10004b4c:	2200      	movs	r2, #0
10004b4e:	601a      	str	r2, [r3, #0]
      HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
10004b50:	687b      	ldr	r3, [r7, #4]
10004b52:	69db      	ldr	r3, [r3, #28]
10004b54:	2200      	movs	r2, #0
10004b56:	605a      	str	r2, [r3, #4]
      HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
10004b58:	687b      	ldr	r3, [r7, #4]
10004b5a:	69db      	ldr	r3, [r3, #28]
10004b5c:	2200      	movs	r2, #0
10004b5e:	615a      	str	r2, [r3, #20]
      HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
10004b60:	687b      	ldr	r3, [r7, #4]
10004b62:	69db      	ldr	r3, [r3, #28]
10004b64:	2200      	movs	r2, #0
10004b66:	625a      	str	r2, [r3, #36]	; 0x24
      HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
10004b68:	687b      	ldr	r3, [r7, #4]
10004b6a:	69db      	ldr	r3, [r3, #28]
10004b6c:	2200      	movs	r2, #0
10004b6e:	619a      	str	r2, [r3, #24]
      HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
10004b70:	687b      	ldr	r3, [r7, #4]
10004b72:	69db      	ldr	r3, [r3, #28]
10004b74:	2200      	movs	r2, #0
10004b76:	621a      	str	r2, [r3, #32]
      HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
10004b78:	687b      	ldr	r3, [r7, #4]
10004b7a:	69db      	ldr	r3, [r3, #28]
10004b7c:	2200      	movs	r2, #0
10004b7e:	63da      	str	r2, [r3, #60]	; 0x3c
      HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
10004b80:	687b      	ldr	r3, [r7, #4]
10004b82:	69db      	ldr	r3, [r3, #28]
10004b84:	2200      	movs	r2, #0
10004b86:	635a      	str	r2, [r3, #52]	; 0x34
    }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/

    HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
10004b88:	687b      	ldr	r3, [r7, #4]
10004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004b8c:	2200      	movs	r2, #0
10004b8e:	701a      	strb	r2, [r3, #0]

    Status = (uint32_t)DAVEApp_SUCCESS;
10004b90:	2300      	movs	r3, #0
10004b92:	61fb      	str	r3, [r7, #28]

  if (Status != (uint32_t)DAVEApp_SUCCESS)
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  return Status;
10004b94:	69fb      	ldr	r3, [r7, #28]
}
10004b96:	1c18      	adds	r0, r3, #0
10004b98:	46bd      	mov	sp, r7
10004b9a:	b009      	add	sp, #36	; 0x24
10004b9c:	bd90      	pop	{r4, r7, pc}
10004b9e:	46c0      	nop			; (mov r8, r8)
10004ba0:	00000f0f 	.word	0x00000f0f

10004ba4 <PWMSP001_Start>:

/*<<<DD_PWMSP001_API_3>>>*/
/* This function starts the app. 
 * This needs to be called even if external start is configured.*/
status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
{
10004ba4:	b590      	push	{r4, r7, lr}
10004ba6:	b085      	sub	sp, #20
10004ba8:	af00      	add	r7, sp, #0
10004baa:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004bac:	2301      	movs	r3, #1
10004bae:	60fb      	str	r3, [r7, #12]

  do
  {
    /*<<<DD_PWMSP001_API_3_1>>>*/
    if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
10004bb0:	687b      	ldr	r3, [r7, #4]
10004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004bb4:	781b      	ldrb	r3, [r3, #0]
10004bb6:	2b01      	cmp	r3, #1
10004bb8:	d005      	beq.n	10004bc6 <PWMSP001_Start+0x22>
        (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
10004bba:	687b      	ldr	r3, [r7, #4]
10004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004bbe:	781b      	ldrb	r3, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;

  do
  {
    /*<<<DD_PWMSP001_API_3_1>>>*/
    if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
10004bc0:	2b03      	cmp	r3, #3
10004bc2:	d000      	beq.n	10004bc6 <PWMSP001_Start+0x22>
10004bc4:	e09f      	b.n	10004d06 <PWMSP001_Start+0x162>
    {
      DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
      break;
    }

    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
10004bc6:	687b      	ldr	r3, [r7, #4]
10004bc8:	699a      	ldr	r2, [r3, #24]
10004bca:	23b0      	movs	r3, #176	; 0xb0
10004bcc:	4951      	ldr	r1, [pc, #324]	; (10004d14 <PWMSP001_Start+0x170>)
10004bce:	50d1      	str	r1, [r2, r3]
    
    /*<<<DD_PWMSP001_API_3_2>>>*/
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
10004bd0:	687b      	ldr	r3, [r7, #4]
10004bd2:	695b      	ldr	r3, [r3, #20]
10004bd4:	687a      	ldr	r2, [r7, #4]
10004bd6:	6952      	ldr	r2, [r2, #20]
10004bd8:	68d1      	ldr	r1, [r2, #12]
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
10004bda:	6878      	ldr	r0, [r7, #4]
10004bdc:	2237      	movs	r2, #55	; 0x37
10004bde:	5c82      	ldrb	r2, [r0, r2]

    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
    
    /*<<<DD_PWMSP001_API_3_2>>>*/
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
10004be0:	2001      	movs	r0, #1
10004be2:	1c04      	adds	r4, r0, #0
10004be4:	4094      	lsls	r4, r2
10004be6:	1c22      	adds	r2, r4, #0
    }

    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
    
    /*<<<DD_PWMSP001_API_3_2>>>*/
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
10004be8:	430a      	orrs	r2, r1
10004bea:	60da      	str	r2, [r3, #12]
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004bec:	687a      	ldr	r2, [r7, #4]
10004bee:	2320      	movs	r3, #32
10004bf0:	5cd3      	ldrb	r3, [r2, r3]
10004bf2:	2b01      	cmp	r3, #1
10004bf4:	d10d      	bne.n	10004c12 <PWMSP001_Start+0x6e>
	{
	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
10004bf6:	687b      	ldr	r3, [r7, #4]
10004bf8:	695b      	ldr	r3, [r3, #20]
10004bfa:	687a      	ldr	r2, [r7, #4]
10004bfc:	6952      	ldr	r2, [r2, #20]
10004bfe:	68d1      	ldr	r1, [r2, #12]
		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->SecondSlice));
10004c00:	6878      	ldr	r0, [r7, #4]
10004c02:	2238      	movs	r2, #56	; 0x38
10004c04:	5c82      	ldrb	r2, [r0, r2]
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
	{
	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
10004c06:	2001      	movs	r0, #1
10004c08:	1c04      	adds	r4, r0, #0
10004c0a:	4094      	lsls	r4, r2
10004c0c:	1c22      	adds	r2, r4, #0
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
	{
	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
10004c0e:	430a      	orrs	r2, r1
10004c10:	60da      	str	r2, [r3, #12]
		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->SecondSlice));
	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
	
    /*Set run bit of slices if external start is not configured*/
    if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
10004c12:	687b      	ldr	r3, [r7, #4]
10004c14:	7b9b      	ldrb	r3, [r3, #14]
10004c16:	2b00      	cmp	r3, #0
10004c18:	d115      	bne.n	10004c46 <PWMSP001_Start+0xa2>
    {
      HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
10004c1a:	687b      	ldr	r3, [r7, #4]
10004c1c:	699b      	ldr	r3, [r3, #24]
10004c1e:	687a      	ldr	r2, [r7, #4]
10004c20:	6992      	ldr	r2, [r2, #24]
10004c22:	68d2      	ldr	r2, [r2, #12]
10004c24:	2101      	movs	r1, #1
10004c26:	430a      	orrs	r2, r1
10004c28:	60da      	str	r2, [r3, #12]
      if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004c2a:	687a      	ldr	r2, [r7, #4]
10004c2c:	2320      	movs	r3, #32
10004c2e:	5cd3      	ldrb	r3, [r2, r3]
10004c30:	2b01      	cmp	r3, #1
10004c32:	d161      	bne.n	10004cf8 <PWMSP001_Start+0x154>
      {
        HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
10004c34:	687b      	ldr	r3, [r7, #4]
10004c36:	69db      	ldr	r3, [r3, #28]
10004c38:	687a      	ldr	r2, [r7, #4]
10004c3a:	69d2      	ldr	r2, [r2, #28]
10004c3c:	68d2      	ldr	r2, [r2, #12]
10004c3e:	2101      	movs	r1, #1
10004c40:	430a      	orrs	r2, r1
10004c42:	60da      	str	r2, [r3, #12]
10004c44:	e058      	b.n	10004cf8 <PWMSP001_Start+0x154>
      }
    }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
    else
    {
      /*<<<DD_PWMSP001_API_1_2>>>*/
      if (HandlePtr->kExtStartTrig == (uint8_t)SET)
10004c46:	687b      	ldr	r3, [r7, #4]
10004c48:	7b9b      	ldrb	r3, [r3, #14]
10004c4a:	2b01      	cmp	r3, #1
10004c4c:	d125      	bne.n	10004c9a <PWMSP001_Start+0xf6>
      {
        HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
10004c4e:	687b      	ldr	r3, [r7, #4]
10004c50:	699b      	ldr	r3, [r3, #24]
10004c52:	687a      	ldr	r2, [r7, #4]
10004c54:	6992      	ldr	r2, [r2, #24]
10004c56:	6811      	ldr	r1, [r2, #0]
10004c58:	4a2f      	ldr	r2, [pc, #188]	; (10004d18 <PWMSP001_Start+0x174>)
10004c5a:	400a      	ands	r2, r1
10004c5c:	601a      	str	r2, [r3, #0]
		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
        HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
10004c5e:	687b      	ldr	r3, [r7, #4]
10004c60:	699b      	ldr	r3, [r3, #24]
10004c62:	687a      	ldr	r2, [r7, #4]
10004c64:	6992      	ldr	r2, [r2, #24]
10004c66:	6852      	ldr	r2, [r2, #4]
10004c68:	2103      	movs	r1, #3
10004c6a:	438a      	bics	r2, r1
10004c6c:	605a      	str	r2, [r3, #4]
        HandlePtr->CC4yRegsPtr->INS |=
10004c6e:	687b      	ldr	r3, [r7, #4]
10004c70:	699b      	ldr	r3, [r3, #24]
10004c72:	687a      	ldr	r2, [r7, #4]
10004c74:	6992      	ldr	r2, [r2, #24]
10004c76:	6811      	ldr	r1, [r2, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
10004c78:	6878      	ldr	r0, [r7, #4]
10004c7a:	2223      	movs	r2, #35	; 0x23
10004c7c:	5c82      	ldrb	r2, [r0, r2]
10004c7e:	0410      	lsls	r0, r2, #16
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
10004c80:	22c0      	movs	r2, #192	; 0xc0
10004c82:	0292      	lsls	r2, r2, #10
10004c84:	4002      	ands	r2, r0
      if (HandlePtr->kExtStartTrig == (uint8_t)SET)
      {
        HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
        HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
        HandlePtr->CC4yRegsPtr->INS |=
10004c86:	430a      	orrs	r2, r1
10004c88:	601a      	str	r2, [r3, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
                (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
        HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
10004c8a:	687b      	ldr	r3, [r7, #4]
10004c8c:	699b      	ldr	r3, [r3, #24]
10004c8e:	687a      	ldr	r2, [r7, #4]
10004c90:	6992      	ldr	r2, [r2, #24]
10004c92:	6852      	ldr	r2, [r2, #4]
10004c94:	2101      	movs	r1, #1
10004c96:	430a      	orrs	r2, r1
10004c98:	605a      	str	r2, [r3, #4]
            (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
      }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
      /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
      if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
10004c9a:	687b      	ldr	r3, [r7, #4]
10004c9c:	7b9b      	ldrb	r3, [r3, #14]
10004c9e:	2b01      	cmp	r3, #1
10004ca0:	d12a      	bne.n	10004cf8 <PWMSP001_Start+0x154>
          (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004ca2:	687a      	ldr	r2, [r7, #4]
10004ca4:	2320      	movs	r3, #32
10004ca6:	5cd3      	ldrb	r3, [r2, r3]
                (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
        HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
            (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
      }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
      /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
      if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
10004ca8:	2b01      	cmp	r3, #1
10004caa:	d125      	bne.n	10004cf8 <PWMSP001_Start+0x154>
          (HandlePtr->kTimerConcatenation == (uint8_t)SET)
      )
      {
        HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk);
10004cac:	687b      	ldr	r3, [r7, #4]
10004cae:	69db      	ldr	r3, [r3, #28]
10004cb0:	687a      	ldr	r2, [r7, #4]
10004cb2:	69d2      	ldr	r2, [r2, #28]
10004cb4:	6811      	ldr	r1, [r2, #0]
10004cb6:	4a18      	ldr	r2, [pc, #96]	; (10004d18 <PWMSP001_Start+0x174>)
10004cb8:	400a      	ands	r2, r1
10004cba:	601a      	str	r2, [r3, #0]
        HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
10004cbc:	687b      	ldr	r3, [r7, #4]
10004cbe:	69db      	ldr	r3, [r3, #28]
10004cc0:	687a      	ldr	r2, [r7, #4]
10004cc2:	69d2      	ldr	r2, [r2, #28]
10004cc4:	6852      	ldr	r2, [r2, #4]
10004cc6:	2103      	movs	r1, #3
10004cc8:	438a      	bics	r2, r1
10004cca:	605a      	str	r2, [r3, #4]
        HandlePtr->CC4yRegs1Ptr->INS |=
10004ccc:	687b      	ldr	r3, [r7, #4]
10004cce:	69db      	ldr	r3, [r3, #28]
10004cd0:	687a      	ldr	r2, [r7, #4]
10004cd2:	69d2      	ldr	r2, [r2, #28]
10004cd4:	6811      	ldr	r1, [r2, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
10004cd6:	6878      	ldr	r0, [r7, #4]
10004cd8:	2223      	movs	r2, #35	; 0x23
10004cda:	5c82      	ldrb	r2, [r0, r2]
10004cdc:	0410      	lsls	r0, r2, #16
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
10004cde:	22c0      	movs	r2, #192	; 0xc0
10004ce0:	0292      	lsls	r2, r2, #10
10004ce2:	4002      	ands	r2, r0
          (HandlePtr->kTimerConcatenation == (uint8_t)SET)
      )
      {
        HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk);
        HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
        HandlePtr->CC4yRegs1Ptr->INS |=
10004ce4:	430a      	orrs	r2, r1
10004ce6:	601a      	str	r2, [r3, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
                    (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
        HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
10004ce8:	687b      	ldr	r3, [r7, #4]
10004cea:	69db      	ldr	r3, [r3, #28]
10004cec:	687a      	ldr	r2, [r7, #4]
10004cee:	69d2      	ldr	r2, [r2, #28]
10004cf0:	6852      	ldr	r2, [r2, #4]
10004cf2:	2101      	movs	r1, #1
10004cf4:	430a      	orrs	r2, r1
10004cf6:	605a      	str	r2, [r3, #4]
		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
      }/*End of if (HandlePtr->kExtStartTrig == SET)*/
    }

    HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
10004cf8:	687b      	ldr	r3, [r7, #4]
10004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004cfc:	2202      	movs	r2, #2
10004cfe:	701a      	strb	r2, [r3, #0]
    Status = (uint32_t)DAVEApp_SUCCESS;
10004d00:	2300      	movs	r3, #0
10004d02:	60fb      	str	r3, [r7, #12]
10004d04:	e000      	b.n	10004d08 <PWMSP001_Start+0x164>
    /*<<<DD_PWMSP001_API_3_1>>>*/
    if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
        (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
    {
      DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
      break;
10004d06:	46c0      	nop			; (mov r8, r8)
    }

    HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
    Status = (uint32_t)DAVEApp_SUCCESS;
  } while (0);
  return Status;
10004d08:	68fb      	ldr	r3, [r7, #12]
}
10004d0a:	1c18      	adds	r0, r3, #0
10004d0c:	46bd      	mov	sp, r7
10004d0e:	b005      	add	sp, #20
10004d10:	bd90      	pop	{r4, r7, pc}
10004d12:	46c0      	nop			; (mov r8, r8)
10004d14:	00000f0f 	.word	0x00000f0f
10004d18:	f9fcffff 	.word	0xf9fcffff

10004d1c <PWMSP001_Stop>:

/*<<<DD_PWMSP001_API_4>>>*/
/* This function stops the app */
status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
{
10004d1c:	b580      	push	{r7, lr}
10004d1e:	b086      	sub	sp, #24
10004d20:	af00      	add	r7, sp, #0
10004d22:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004d24:	2301      	movs	r3, #1
10004d26:	617b      	str	r3, [r7, #20]
  uint32_t Temp2;
  
  do
  {
    /*<<<DD_PWMSP001_API_4_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
10004d28:	687b      	ldr	r3, [r7, #4]
10004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004d2c:	781b      	ldrb	r3, [r3, #0]
10004d2e:	2b02      	cmp	r3, #2
10004d30:	d139      	bne.n	10004da6 <PWMSP001_Stop+0x8a>
    {
      break;
    }
    else
    {
      Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
10004d32:	687a      	ldr	r2, [r7, #4]
10004d34:	2337      	movs	r3, #55	; 0x37
10004d36:	5cd3      	ldrb	r3, [r2, r3]
10004d38:	613b      	str	r3, [r7, #16]
      Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
10004d3a:	2380      	movs	r3, #128	; 0x80
10004d3c:	009b      	lsls	r3, r3, #2
10004d3e:	60fb      	str	r3, [r7, #12]
      HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
10004d40:	687b      	ldr	r3, [r7, #4]
10004d42:	699b      	ldr	r3, [r3, #24]
10004d44:	2207      	movs	r2, #7
10004d46:	611a      	str	r2, [r3, #16]
      HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
10004d48:	687b      	ldr	r3, [r7, #4]
10004d4a:	695b      	ldr	r3, [r3, #20]
10004d4c:	687a      	ldr	r2, [r7, #4]
10004d4e:	6952      	ldr	r2, [r2, #20]
10004d50:	6891      	ldr	r1, [r2, #8]
10004d52:	693a      	ldr	r2, [r7, #16]
10004d54:	2001      	movs	r0, #1
10004d56:	4090      	lsls	r0, r2
10004d58:	68fa      	ldr	r2, [r7, #12]
10004d5a:	4302      	orrs	r2, r0
10004d5c:	430a      	orrs	r2, r1
10004d5e:	609a      	str	r2, [r3, #8]

      if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004d60:	687a      	ldr	r2, [r7, #4]
10004d62:	2320      	movs	r3, #32
10004d64:	5cd3      	ldrb	r3, [r2, r3]
10004d66:	2b01      	cmp	r3, #1
10004d68:	d116      	bne.n	10004d98 <PWMSP001_Stop+0x7c>
      {
        HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
10004d6a:	687b      	ldr	r3, [r7, #4]
10004d6c:	69db      	ldr	r3, [r3, #28]
10004d6e:	2207      	movs	r2, #7
10004d70:	611a      	str	r2, [r3, #16]
        Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
10004d72:	687a      	ldr	r2, [r7, #4]
10004d74:	2338      	movs	r3, #56	; 0x38
10004d76:	5cd3      	ldrb	r3, [r2, r3]
10004d78:	613b      	str	r3, [r7, #16]
        Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
10004d7a:	2380      	movs	r3, #128	; 0x80
10004d7c:	009b      	lsls	r3, r3, #2
10004d7e:	60fb      	str	r3, [r7, #12]
        HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
10004d80:	687b      	ldr	r3, [r7, #4]
10004d82:	695b      	ldr	r3, [r3, #20]
10004d84:	687a      	ldr	r2, [r7, #4]
10004d86:	6952      	ldr	r2, [r2, #20]
10004d88:	6891      	ldr	r1, [r2, #8]
10004d8a:	693a      	ldr	r2, [r7, #16]
10004d8c:	2001      	movs	r0, #1
10004d8e:	4090      	lsls	r0, r2
10004d90:	68fa      	ldr	r2, [r7, #12]
10004d92:	4302      	orrs	r2, r0
10004d94:	430a      	orrs	r2, r1
10004d96:	609a      	str	r2, [r3, #8]
      }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/

      HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
10004d98:	687b      	ldr	r3, [r7, #4]
10004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004d9c:	2203      	movs	r2, #3
10004d9e:	701a      	strb	r2, [r3, #0]
      Status = (uint32_t)DAVEApp_SUCCESS;
10004da0:	2300      	movs	r3, #0
10004da2:	617b      	str	r3, [r7, #20]
10004da4:	e000      	b.n	10004da8 <PWMSP001_Stop+0x8c>
  do
  {
    /*<<<DD_PWMSP001_API_4_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
    {
      break;
10004da6:	46c0      	nop			; (mov r8, r8)

  if (Status != (uint32_t)DAVEApp_SUCCESS)
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  return Status;
10004da8:	697b      	ldr	r3, [r7, #20]
}
10004daa:	1c18      	adds	r0, r3, #0
10004dac:	46bd      	mov	sp, r7
10004dae:	b006      	add	sp, #24
10004db0:	bd80      	pop	{r7, pc}
10004db2:	46c0      	nop			; (mov r8, r8)

10004db4 <PWMSP001_SetCompare>:
status_t PWMSP001_SetCompare
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t Compare
)
{
10004db4:	b580      	push	{r7, lr}
10004db6:	b084      	sub	sp, #16
10004db8:	af00      	add	r7, sp, #0
10004dba:	6078      	str	r0, [r7, #4]
10004dbc:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004dbe:	2301      	movs	r3, #1
10004dc0:	60fb      	str	r3, [r7, #12]
  uint32_t period;

  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004dc2:	687a      	ldr	r2, [r7, #4]
10004dc4:	2320      	movs	r3, #32
10004dc6:	5cd3      	ldrb	r3, [r2, r3]
10004dc8:	2b01      	cmp	r3, #1
10004dca:	d109      	bne.n	10004de0 <PWMSP001_SetCompare+0x2c>
	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr->PRS);
10004dcc:	687b      	ldr	r3, [r7, #4]
10004dce:	69db      	ldr	r3, [r3, #28]
10004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004dd2:	041a      	lsls	r2, r3, #16
10004dd4:	687b      	ldr	r3, [r7, #4]
10004dd6:	699b      	ldr	r3, [r3, #24]
10004dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004dda:	4313      	orrs	r3, r2
10004ddc:	60bb      	str	r3, [r7, #8]
10004dde:	e003      	b.n	10004de8 <PWMSP001_SetCompare+0x34>
  else
	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
10004de0:	687b      	ldr	r3, [r7, #4]
10004de2:	699b      	ldr	r3, [r3, #24]
10004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004de6:	60bb      	str	r3, [r7, #8]

  /*<<<DD_PWMSP001_API_5_1>>>*/
  if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
10004de8:	687b      	ldr	r3, [r7, #4]
10004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004dec:	781b      	ldrb	r3, [r3, #0]
10004dee:	2b00      	cmp	r3, #0
10004df0:	d01c      	beq.n	10004e2c <PWMSP001_SetCompare+0x78>
  {
    if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
10004df2:	687b      	ldr	r3, [r7, #4]
10004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10004df6:	683b      	ldr	r3, [r7, #0]
10004df8:	429a      	cmp	r2, r3
10004dfa:	d207      	bcs.n	10004e0c <PWMSP001_SetCompare+0x58>
        (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
10004dfc:	687a      	ldr	r2, [r7, #4]
10004dfe:	2320      	movs	r3, #32
10004e00:	5cd3      	ldrb	r3, [r2, r3]
	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;

  /*<<<DD_PWMSP001_API_5_1>>>*/
  if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
  {
    if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
10004e02:	2b00      	cmp	r3, #0
10004e04:	d102      	bne.n	10004e0c <PWMSP001_SetCompare+0x58>
        (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004e06:	2302      	movs	r3, #2
10004e08:	60fb      	str	r3, [r7, #12]
10004e0a:	e00f      	b.n	10004e2c <PWMSP001_SetCompare+0x78>
    }
    else
    {
      /*if compare value is greater or equal to the period value, output should be with 0% dutycycle.
	  Since setting exact period value will create the spikes,we are adding 1 and setting to the register*/
	  if (Compare >= (uint32_t)period)
10004e0c:	683a      	ldr	r2, [r7, #0]
10004e0e:	68bb      	ldr	r3, [r7, #8]
10004e10:	429a      	cmp	r2, r3
10004e12:	d302      	bcc.n	10004e1a <PWMSP001_SetCompare+0x66>
	  {
		  Compare = (uint32_t)period + 1U;
10004e14:	68bb      	ldr	r3, [r7, #8]
10004e16:	3301      	adds	r3, #1
10004e18:	603b      	str	r3, [r7, #0]
	  }
      /* Call function as per the configured mode */
      HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
10004e1a:	687b      	ldr	r3, [r7, #4]
10004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004e1e:	6879      	ldr	r1, [r7, #4]
10004e20:	683a      	ldr	r2, [r7, #0]
10004e22:	1c08      	adds	r0, r1, #0
10004e24:	1c11      	adds	r1, r2, #0
10004e26:	4798      	blx	r3
      Status = (uint32_t)DAVEApp_SUCCESS;
10004e28:	2300      	movs	r3, #0
10004e2a:	60fb      	str	r3, [r7, #12]
    }
  }
  return Status;
10004e2c:	68fb      	ldr	r3, [r7, #12]
}
10004e2e:	1c18      	adds	r0, r3, #0
10004e30:	46bd      	mov	sp, r7
10004e32:	b004      	add	sp, #16
10004e34:	bd80      	pop	{r7, pc}
10004e36:	46c0      	nop			; (mov r8, r8)

10004e38 <PWMSP001_lSetCompareEdgeAlign>:
void PWMSP001_lSetCompareEdgeAlign
(
    void* Handle,
    uint32_t Compare
)
{
10004e38:	b590      	push	{r4, r7, lr}
10004e3a:	b087      	sub	sp, #28
10004e3c:	af00      	add	r7, sp, #0
10004e3e:	6078      	str	r0, [r7, #4]
10004e40:	6039      	str	r1, [r7, #0]
  uint32_t Temp1;
  uint32_t Temp2;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10004e42:	687b      	ldr	r3, [r7, #4]
10004e44:	617b      	str	r3, [r7, #20]
  HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
10004e46:	697b      	ldr	r3, [r7, #20]
10004e48:	699b      	ldr	r3, [r3, #24]
10004e4a:	683a      	ldr	r2, [r7, #0]
10004e4c:	0412      	lsls	r2, r2, #16
10004e4e:	0c12      	lsrs	r2, r2, #16
10004e50:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Request shadow transfer */
  Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
10004e52:	697a      	ldr	r2, [r7, #20]
10004e54:	2337      	movs	r3, #55	; 0x37
10004e56:	5cd3      	ldrb	r3, [r2, r3]
10004e58:	009b      	lsls	r3, r3, #2
10004e5a:	613b      	str	r3, [r7, #16]
  Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
10004e5c:	693b      	ldr	r3, [r7, #16]
10004e5e:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
10004e60:	697b      	ldr	r3, [r7, #20]
10004e62:	695b      	ldr	r3, [r3, #20]
10004e64:	697a      	ldr	r2, [r7, #20]
10004e66:	6952      	ldr	r2, [r2, #20]
10004e68:	6911      	ldr	r1, [r2, #16]
10004e6a:	68fa      	ldr	r2, [r7, #12]
10004e6c:	2001      	movs	r0, #1
10004e6e:	1c04      	adds	r4, r0, #0
10004e70:	4094      	lsls	r4, r2
10004e72:	1c22      	adds	r2, r4, #0
10004e74:	430a      	orrs	r2, r1
10004e76:	611a      	str	r2, [r3, #16]
}
10004e78:	46bd      	mov	sp, r7
10004e7a:	b007      	add	sp, #28
10004e7c:	bd90      	pop	{r4, r7, pc}
10004e7e:	46c0      	nop			; (mov r8, r8)

10004e80 <PWMSP001_lSetCompareEdgeAlignTimerConcat>:
void PWMSP001_lSetCompareEdgeAlignTimerConcat
(
    void* Handle,
    uint32_t Compare
)
{
10004e80:	b5b0      	push	{r4, r5, r7, lr}
10004e82:	b088      	sub	sp, #32
10004e84:	af00      	add	r7, sp, #0
10004e86:	6078      	str	r0, [r7, #4]
10004e88:	6039      	str	r1, [r7, #0]
  uint32_t FirstSliceCompareVal = 0x00U;
10004e8a:	2300      	movs	r3, #0
10004e8c:	61fb      	str	r3, [r7, #28]
  uint32_t SecondSliceCompareVal = 0x00U;
10004e8e:	2300      	movs	r3, #0
10004e90:	61bb      	str	r3, [r7, #24]
  uint32_t Temp1;
  uint32_t Temp2;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10004e92:	687b      	ldr	r3, [r7, #4]
10004e94:	617b      	str	r3, [r7, #20]
   * register of second slice.
   * This is done to achieve compare register value of first slice
   * to be less than period register value.
   */
  FirstSliceCompareVal = (uint32_t)Compare % \
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
10004e96:	697b      	ldr	r3, [r7, #20]
10004e98:	699b      	ldr	r3, [r3, #24]
10004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004e9c:	b29b      	uxth	r3, r3
   * compare register of first slice and quotient is written in compare
   * register of second slice.
   * This is done to achieve compare register value of first slice
   * to be less than period register value.
   */
  FirstSliceCompareVal = (uint32_t)Compare % \
10004e9e:	683a      	ldr	r2, [r7, #0]
10004ea0:	1c10      	adds	r0, r2, #0
10004ea2:	1c19      	adds	r1, r3, #0
10004ea4:	f002 f918 	bl	100070d8 <__aeabi_uidivmod>
10004ea8:	1c0b      	adds	r3, r1, #0
10004eaa:	61fb      	str	r3, [r7, #28]
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
  SecondSliceCompareVal = (uint32_t)Compare /
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
10004eac:	697b      	ldr	r3, [r7, #20]
10004eae:	699b      	ldr	r3, [r3, #24]
10004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004eb2:	b29b      	uxth	r3, r3
   * This is done to achieve compare register value of first slice
   * to be less than period register value.
   */
  FirstSliceCompareVal = (uint32_t)Compare % \
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
  SecondSliceCompareVal = (uint32_t)Compare /
10004eb4:	6838      	ldr	r0, [r7, #0]
10004eb6:	1c19      	adds	r1, r3, #0
10004eb8:	f002 f8ca 	bl	10007050 <__aeabi_uidiv>
10004ebc:	1c03      	adds	r3, r0, #0
10004ebe:	61bb      	str	r3, [r7, #24]
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
  
  HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
10004ec0:	697b      	ldr	r3, [r7, #20]
10004ec2:	699b      	ldr	r3, [r3, #24]
10004ec4:	69fa      	ldr	r2, [r7, #28]
10004ec6:	0412      	lsls	r2, r2, #16
10004ec8:	0c12      	lsrs	r2, r2, #16
10004eca:	63da      	str	r2, [r3, #60]	; 0x3c
  HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
10004ecc:	697b      	ldr	r3, [r7, #20]
10004ece:	69db      	ldr	r3, [r3, #28]
10004ed0:	69ba      	ldr	r2, [r7, #24]
10004ed2:	0412      	lsls	r2, r2, #16
10004ed4:	0c12      	lsrs	r2, r2, #16
10004ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Request shadow transfer */
  Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
10004ed8:	697a      	ldr	r2, [r7, #20]
10004eda:	2338      	movs	r3, #56	; 0x38
10004edc:	5cd3      	ldrb	r3, [r2, r3]
10004ede:	009b      	lsls	r3, r3, #2
10004ee0:	613b      	str	r3, [r7, #16]
  Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
10004ee2:	697a      	ldr	r2, [r7, #20]
10004ee4:	2337      	movs	r3, #55	; 0x37
10004ee6:	5cd3      	ldrb	r3, [r2, r3]
10004ee8:	009b      	lsls	r3, r3, #2
10004eea:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Temp1));
10004eec:	697b      	ldr	r3, [r7, #20]
10004eee:	695b      	ldr	r3, [r3, #20]
10004ef0:	697a      	ldr	r2, [r7, #20]
10004ef2:	6952      	ldr	r2, [r2, #20]
10004ef4:	6911      	ldr	r1, [r2, #16]
10004ef6:	68fa      	ldr	r2, [r7, #12]
10004ef8:	2001      	movs	r0, #1
10004efa:	4090      	lsls	r0, r2
10004efc:	693a      	ldr	r2, [r7, #16]
10004efe:	2401      	movs	r4, #1
10004f00:	1c25      	adds	r5, r4, #0
10004f02:	4095      	lsls	r5, r2
10004f04:	1c2a      	adds	r2, r5, #0
10004f06:	4302      	orrs	r2, r0
10004f08:	430a      	orrs	r2, r1
10004f0a:	611a      	str	r2, [r3, #16]
}
10004f0c:	46bd      	mov	sp, r7
10004f0e:	b008      	add	sp, #32
10004f10:	bdb0      	pop	{r4, r5, r7, pc}
10004f12:	46c0      	nop			; (mov r8, r8)

10004f14 <PWMSP001_lSetCompareCenterAlign>:
void PWMSP001_lSetCompareCenterAlign
(
    void* Handle,
    uint32_t Compare
)
{
10004f14:	b590      	push	{r4, r7, lr}
10004f16:	b085      	sub	sp, #20
10004f18:	af00      	add	r7, sp, #0
10004f1a:	6078      	str	r0, [r7, #4]
10004f1c:	6039      	str	r1, [r7, #0]
  uint32_t Temp1;
  /*<<<DD_PWMSP001_API_5_3>>>*/
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10004f1e:	687b      	ldr	r3, [r7, #4]
10004f20:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
10004f22:	68fb      	ldr	r3, [r7, #12]
10004f24:	699b      	ldr	r3, [r3, #24]
10004f26:	683a      	ldr	r2, [r7, #0]
10004f28:	0412      	lsls	r2, r2, #16
10004f2a:	0c12      	lsrs	r2, r2, #16
10004f2c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Request shadow transfer */
  Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
10004f2e:	68fa      	ldr	r2, [r7, #12]
10004f30:	2337      	movs	r3, #55	; 0x37
10004f32:	5cd3      	ldrb	r3, [r2, r3]
10004f34:	009b      	lsls	r3, r3, #2
10004f36:	60bb      	str	r3, [r7, #8]
  HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
10004f38:	68fb      	ldr	r3, [r7, #12]
10004f3a:	695b      	ldr	r3, [r3, #20]
10004f3c:	68fa      	ldr	r2, [r7, #12]
10004f3e:	6952      	ldr	r2, [r2, #20]
10004f40:	6911      	ldr	r1, [r2, #16]
10004f42:	68ba      	ldr	r2, [r7, #8]
10004f44:	2001      	movs	r0, #1
10004f46:	1c04      	adds	r4, r0, #0
10004f48:	4094      	lsls	r4, r2
10004f4a:	1c22      	adds	r2, r4, #0
10004f4c:	430a      	orrs	r2, r1
10004f4e:	611a      	str	r2, [r3, #16]
}
10004f50:	46bd      	mov	sp, r7
10004f52:	b005      	add	sp, #20
10004f54:	bd90      	pop	{r4, r7, pc}
10004f56:	46c0      	nop			; (mov r8, r8)

10004f58 <PWMSP001_SetDutyCycle>:
status_t PWMSP001_SetDutyCycle
(
    const PWMSP001_HandleType* HandlePtr,
    float Duty
)
{
10004f58:	b580      	push	{r7, lr}
10004f5a:	b084      	sub	sp, #16
10004f5c:	af00      	add	r7, sp, #0
10004f5e:	6078      	str	r0, [r7, #4]
10004f60:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004f62:	2301      	movs	r3, #1
10004f64:	60fb      	str	r3, [r7, #12]

  if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
10004f66:	687b      	ldr	r3, [r7, #4]
10004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004f6a:	781b      	ldrb	r3, [r3, #0]
10004f6c:	2b00      	cmp	r3, #0
10004f6e:	d019      	beq.n	10004fa4 <PWMSP001_SetDutyCycle+0x4c>
  {
  if((Duty > (float)100) || ((float)Duty < (float)0))
10004f70:	6838      	ldr	r0, [r7, #0]
10004f72:	490f      	ldr	r1, [pc, #60]	; (10004fb0 <PWMSP001_SetDutyCycle+0x58>)
10004f74:	f002 f8e2 	bl	1000713c <__aeabi_fcmpgt>
10004f78:	1c03      	adds	r3, r0, #0
10004f7a:	2b00      	cmp	r3, #0
10004f7c:	d106      	bne.n	10004f8c <PWMSP001_SetDutyCycle+0x34>
10004f7e:	6838      	ldr	r0, [r7, #0]
10004f80:	2100      	movs	r1, #0
10004f82:	f002 f8c7 	bl	10007114 <__aeabi_fcmplt>
10004f86:	1c03      	adds	r3, r0, #0
10004f88:	2b00      	cmp	r3, #0
10004f8a:	d002      	beq.n	10004f92 <PWMSP001_SetDutyCycle+0x3a>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004f8c:	2302      	movs	r3, #2
10004f8e:	60fb      	str	r3, [r7, #12]
10004f90:	e008      	b.n	10004fa4 <PWMSP001_SetDutyCycle+0x4c>
  }
  else
  {
    /* Call the function as per configured mode */
    HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
10004f92:	687b      	ldr	r3, [r7, #4]
10004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10004f96:	6879      	ldr	r1, [r7, #4]
10004f98:	683a      	ldr	r2, [r7, #0]
10004f9a:	1c08      	adds	r0, r1, #0
10004f9c:	1c11      	adds	r1, r2, #0
10004f9e:	4798      	blx	r3
    Status = (uint32_t)DAVEApp_SUCCESS;
10004fa0:	2300      	movs	r3, #0
10004fa2:	60fb      	str	r3, [r7, #12]
  }
  }
  return (Status);
10004fa4:	68fb      	ldr	r3, [r7, #12]
}
10004fa6:	1c18      	adds	r0, r3, #0
10004fa8:	46bd      	mov	sp, r7
10004faa:	b004      	add	sp, #16
10004fac:	bd80      	pop	{r7, pc}
10004fae:	46c0      	nop			; (mov r8, r8)
10004fb0:	42c80000 	.word	0x42c80000

10004fb4 <PWMSP001_lSetDutyEdgeAlign>:
void PWMSP001_lSetDutyEdgeAlign
(
    void* Handle,
    float Duty
)
{
10004fb4:	b590      	push	{r4, r7, lr}
10004fb6:	b089      	sub	sp, #36	; 0x24
10004fb8:	af00      	add	r7, sp, #0
10004fba:	6078      	str	r0, [r7, #4]
10004fbc:	6039      	str	r1, [r7, #0]
  uint32_t FirstSliceCompareVal = (uint32_t)0;
10004fbe:	2300      	movs	r3, #0
10004fc0:	61fb      	str	r3, [r7, #28]
  uint32_t Temp1;
  float fDuty, fPRS ;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10004fc2:	687b      	ldr	r3, [r7, #4]
10004fc4:	61bb      	str	r3, [r7, #24]
  fDuty = Duty;
10004fc6:	683b      	ldr	r3, [r7, #0]
10004fc8:	617b      	str	r3, [r7, #20]
  
  /*<<<DD_PWMSP001_API_15_3>>>*/
  
  fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
10004fca:	481c      	ldr	r0, [pc, #112]	; (1000503c <PWMSP001_lSetDutyEdgeAlign+0x88>)
10004fcc:	6979      	ldr	r1, [r7, #20]
10004fce:	f002 fc25 	bl	1000781c <__aeabi_fsub>
10004fd2:	1c03      	adds	r3, r0, #0
10004fd4:	1c18      	adds	r0, r3, #0
10004fd6:	4919      	ldr	r1, [pc, #100]	; (1000503c <PWMSP001_lSetDutyEdgeAlign+0x88>)
10004fd8:	f002 f8fe 	bl	100071d8 <__aeabi_fdiv>
10004fdc:	1c03      	adds	r3, r0, #0
10004fde:	617b      	str	r3, [r7, #20]
  fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
10004fe0:	69bb      	ldr	r3, [r7, #24]
10004fe2:	699b      	ldr	r3, [r3, #24]
10004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004fe6:	3301      	adds	r3, #1
10004fe8:	1c18      	adds	r0, r3, #0
10004fea:	f002 fe11 	bl	10007c10 <__aeabi_ui2f>
10004fee:	1c03      	adds	r3, r0, #0
10004ff0:	613b      	str	r3, [r7, #16]
  FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
10004ff2:	6938      	ldr	r0, [r7, #16]
10004ff4:	6979      	ldr	r1, [r7, #20]
10004ff6:	f002 fae1 	bl	100075bc <__aeabi_fmul>
10004ffa:	1c03      	adds	r3, r0, #0
10004ffc:	1c18      	adds	r0, r3, #0
10004ffe:	f002 f8b1 	bl	10007164 <__aeabi_f2uiz>
10005002:	1c03      	adds	r3, r0, #0
10005004:	61fb      	str	r3, [r7, #28]
  HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
10005006:	69bb      	ldr	r3, [r7, #24]
10005008:	699b      	ldr	r3, [r3, #24]
1000500a:	69fa      	ldr	r2, [r7, #28]
1000500c:	0412      	lsls	r2, r2, #16
1000500e:	0c12      	lsrs	r2, r2, #16
10005010:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /*Shadow transfer */
  Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
10005012:	69ba      	ldr	r2, [r7, #24]
10005014:	2337      	movs	r3, #55	; 0x37
10005016:	5cd3      	ldrb	r3, [r2, r3]
10005018:	009b      	lsls	r3, r3, #2
1000501a:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
1000501c:	69bb      	ldr	r3, [r7, #24]
1000501e:	695b      	ldr	r3, [r3, #20]
10005020:	69ba      	ldr	r2, [r7, #24]
10005022:	6952      	ldr	r2, [r2, #20]
10005024:	6911      	ldr	r1, [r2, #16]
10005026:	68fa      	ldr	r2, [r7, #12]
10005028:	2001      	movs	r0, #1
1000502a:	1c04      	adds	r4, r0, #0
1000502c:	4094      	lsls	r4, r2
1000502e:	1c22      	adds	r2, r4, #0
10005030:	430a      	orrs	r2, r1
10005032:	611a      	str	r2, [r3, #16]
  /*Update dynamic handle */
}
10005034:	46bd      	mov	sp, r7
10005036:	b009      	add	sp, #36	; 0x24
10005038:	bd90      	pop	{r4, r7, pc}
1000503a:	46c0      	nop			; (mov r8, r8)
1000503c:	42c80000 	.word	0x42c80000

10005040 <PWMSP001_lSetDutyEdgeAlignTimerConcat>:
void PWMSP001_lSetDutyEdgeAlignTimerConcat
(
    void* Handle,
    float Duty
)
{
10005040:	b5b0      	push	{r4, r5, r7, lr}
10005042:	b08a      	sub	sp, #40	; 0x28
10005044:	af00      	add	r7, sp, #0
10005046:	6078      	str	r0, [r7, #4]
10005048:	6039      	str	r1, [r7, #0]
  uint32_t Compare = (uint32_t)0;
1000504a:	2300      	movs	r3, #0
1000504c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t FirstSliceCompareVal = (uint32_t)0;
1000504e:	2300      	movs	r3, #0
10005050:	623b      	str	r3, [r7, #32]
  uint32_t SecondSliceCompareVal = (uint32_t)0;
10005052:	2300      	movs	r3, #0
10005054:	61fb      	str	r3, [r7, #28]
  uint32_t Temp2;
  uint32_t Temp3;
  float fDuty, fPRS ;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10005056:	687b      	ldr	r3, [r7, #4]
10005058:	61bb      	str	r3, [r7, #24]
  
  fDuty = Duty;
1000505a:	683b      	ldr	r3, [r7, #0]
1000505c:	617b      	str	r3, [r7, #20]
  /*<<<DD_PWMSP001_API_15_4>>>*/
  /* Find the compare register value from the duty cycle and period register value */
  Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
1000505e:	69bb      	ldr	r3, [r7, #24]
10005060:	69db      	ldr	r3, [r3, #28]
10005062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005064:	3301      	adds	r3, #1
10005066:	627b      	str	r3, [r7, #36]	; 0x24
  Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
10005068:	69bb      	ldr	r3, [r7, #24]
1000506a:	699b      	ldr	r3, [r3, #24]
1000506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000506e:	041b      	lsls	r3, r3, #16
10005070:	0c1b      	lsrs	r3, r3, #16
10005072:	1c5a      	adds	r2, r3, #1
10005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005076:	4353      	muls	r3, r2
10005078:	627b      	str	r3, [r7, #36]	; 0x24
  Compare +=  (uint32_t)1;
1000507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000507c:	3301      	adds	r3, #1
1000507e:	627b      	str	r3, [r7, #36]	; 0x24
  
  fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
10005080:	482c      	ldr	r0, [pc, #176]	; (10005134 <PWMSP001_lSetDutyEdgeAlignTimerConcat+0xf4>)
10005082:	6979      	ldr	r1, [r7, #20]
10005084:	f002 fbca 	bl	1000781c <__aeabi_fsub>
10005088:	1c03      	adds	r3, r0, #0
1000508a:	1c18      	adds	r0, r3, #0
1000508c:	4929      	ldr	r1, [pc, #164]	; (10005134 <PWMSP001_lSetDutyEdgeAlignTimerConcat+0xf4>)
1000508e:	f002 f8a3 	bl	100071d8 <__aeabi_fdiv>
10005092:	1c03      	adds	r3, r0, #0
10005094:	617b      	str	r3, [r7, #20]
  fPRS = (float)(Compare);
10005096:	6a78      	ldr	r0, [r7, #36]	; 0x24
10005098:	f002 fdba 	bl	10007c10 <__aeabi_ui2f>
1000509c:	1c03      	adds	r3, r0, #0
1000509e:	613b      	str	r3, [r7, #16]
  Compare = (uint32_t)( fPRS * fDuty);
100050a0:	6938      	ldr	r0, [r7, #16]
100050a2:	6979      	ldr	r1, [r7, #20]
100050a4:	f002 fa8a 	bl	100075bc <__aeabi_fmul>
100050a8:	1c03      	adds	r3, r0, #0
100050aa:	1c18      	adds	r0, r3, #0
100050ac:	f002 f85a 	bl	10007164 <__aeabi_f2uiz>
100050b0:	1c03      	adds	r3, r0, #0
100050b2:	627b      	str	r3, [r7, #36]	; 0x24

  FirstSliceCompareVal =(uint32_t)
                    ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
100050b4:	69bb      	ldr	r3, [r7, #24]
100050b6:	699b      	ldr	r3, [r3, #24]
100050b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100050ba:	041b      	lsls	r3, r3, #16
100050bc:	0c1b      	lsrs	r3, r3, #16
  
  fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
  fPRS = (float)(Compare);
  Compare = (uint32_t)( fPRS * fDuty);

  FirstSliceCompareVal =(uint32_t)
100050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100050c0:	1c10      	adds	r0, r2, #0
100050c2:	1c19      	adds	r1, r3, #0
100050c4:	f002 f808 	bl	100070d8 <__aeabi_uidivmod>
100050c8:	1c0b      	adds	r3, r1, #0
100050ca:	623b      	str	r3, [r7, #32]
                    ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
  HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
100050cc:	69bb      	ldr	r3, [r7, #24]
100050ce:	699b      	ldr	r3, [r3, #24]
100050d0:	6a3a      	ldr	r2, [r7, #32]
100050d2:	0412      	lsls	r2, r2, #16
100050d4:	0c12      	lsrs	r2, r2, #16
100050d6:	63da      	str	r2, [r3, #60]	; 0x3c
  SecondSliceCompareVal = (uint32_t)
                    ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
100050d8:	69bb      	ldr	r3, [r7, #24]
100050da:	699b      	ldr	r3, [r3, #24]
100050dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100050de:	041b      	lsls	r3, r3, #16
100050e0:	0c1b      	lsrs	r3, r3, #16
  Compare = (uint32_t)( fPRS * fDuty);

  FirstSliceCompareVal =(uint32_t)
                    ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
  HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
  SecondSliceCompareVal = (uint32_t)
100050e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
100050e4:	1c19      	adds	r1, r3, #0
100050e6:	f001 ffb3 	bl	10007050 <__aeabi_uidiv>
100050ea:	1c03      	adds	r3, r0, #0
100050ec:	61fb      	str	r3, [r7, #28]
                    ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
  HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
100050ee:	69bb      	ldr	r3, [r7, #24]
100050f0:	69db      	ldr	r3, [r3, #28]
100050f2:	69fa      	ldr	r2, [r7, #28]
100050f4:	0412      	lsls	r2, r2, #16
100050f6:	0c12      	lsrs	r2, r2, #16
100050f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /** shadow transfer */
  Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
100050fa:	69ba      	ldr	r2, [r7, #24]
100050fc:	2337      	movs	r3, #55	; 0x37
100050fe:	5cd3      	ldrb	r3, [r2, r3]
10005100:	009b      	lsls	r3, r3, #2
10005102:	60fb      	str	r3, [r7, #12]
  Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
10005104:	69ba      	ldr	r2, [r7, #24]
10005106:	2338      	movs	r3, #56	; 0x38
10005108:	5cd3      	ldrb	r3, [r2, r3]
1000510a:	009b      	lsls	r3, r3, #2
1000510c:	60bb      	str	r3, [r7, #8]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 << (uint32_t)Temp3));
1000510e:	69bb      	ldr	r3, [r7, #24]
10005110:	695b      	ldr	r3, [r3, #20]
10005112:	69ba      	ldr	r2, [r7, #24]
10005114:	6952      	ldr	r2, [r2, #20]
10005116:	6911      	ldr	r1, [r2, #16]
10005118:	68fa      	ldr	r2, [r7, #12]
1000511a:	2001      	movs	r0, #1
1000511c:	4090      	lsls	r0, r2
1000511e:	68ba      	ldr	r2, [r7, #8]
10005120:	2401      	movs	r4, #1
10005122:	1c25      	adds	r5, r4, #0
10005124:	4095      	lsls	r5, r2
10005126:	1c2a      	adds	r2, r5, #0
10005128:	4302      	orrs	r2, r0
1000512a:	430a      	orrs	r2, r1
1000512c:	611a      	str	r2, [r3, #16]
}
1000512e:	46bd      	mov	sp, r7
10005130:	b00a      	add	sp, #40	; 0x28
10005132:	bdb0      	pop	{r4, r5, r7, pc}
10005134:	42c80000 	.word	0x42c80000

10005138 <PWMSP001_lSetDutyCenterAlign>:
void PWMSP001_lSetDutyCenterAlign
(
    void* Handle,
    float Duty
)
{
10005138:	b590      	push	{r4, r7, lr}
1000513a:	b089      	sub	sp, #36	; 0x24
1000513c:	af00      	add	r7, sp, #0
1000513e:	6078      	str	r0, [r7, #4]
10005140:	6039      	str	r1, [r7, #0]
  /*<<<DD_PWMSP001_API_15_5>>>*/
  uint32_t FirstSliceCompareVal = (uint32_t)0x00;
10005142:	2300      	movs	r3, #0
10005144:	61fb      	str	r3, [r7, #28]
  uint32_t Temp1;
  float fDuty, fPRS ;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10005146:	687b      	ldr	r3, [r7, #4]
10005148:	61bb      	str	r3, [r7, #24]
  fDuty = Duty;
1000514a:	683b      	ldr	r3, [r7, #0]
1000514c:	617b      	str	r3, [r7, #20]

  fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
1000514e:	481b      	ldr	r0, [pc, #108]	; (100051bc <PWMSP001_lSetDutyCenterAlign+0x84>)
10005150:	6979      	ldr	r1, [r7, #20]
10005152:	f002 fb63 	bl	1000781c <__aeabi_fsub>
10005156:	1c03      	adds	r3, r0, #0
10005158:	1c18      	adds	r0, r3, #0
1000515a:	4918      	ldr	r1, [pc, #96]	; (100051bc <PWMSP001_lSetDutyCenterAlign+0x84>)
1000515c:	f002 f83c 	bl	100071d8 <__aeabi_fdiv>
10005160:	1c03      	adds	r3, r0, #0
10005162:	617b      	str	r3, [r7, #20]
  fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
10005164:	69bb      	ldr	r3, [r7, #24]
10005166:	699b      	ldr	r3, [r3, #24]
10005168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000516a:	1c18      	adds	r0, r3, #0
1000516c:	f002 fd50 	bl	10007c10 <__aeabi_ui2f>
10005170:	1c03      	adds	r3, r0, #0
10005172:	613b      	str	r3, [r7, #16]
  FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
10005174:	6938      	ldr	r0, [r7, #16]
10005176:	6979      	ldr	r1, [r7, #20]
10005178:	f002 fa20 	bl	100075bc <__aeabi_fmul>
1000517c:	1c03      	adds	r3, r0, #0
1000517e:	1c18      	adds	r0, r3, #0
10005180:	f001 fff0 	bl	10007164 <__aeabi_f2uiz>
10005184:	1c03      	adds	r3, r0, #0
10005186:	61fb      	str	r3, [r7, #28]
  HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
10005188:	69bb      	ldr	r3, [r7, #24]
1000518a:	699b      	ldr	r3, [r3, #24]
1000518c:	69fa      	ldr	r2, [r7, #28]
1000518e:	0412      	lsls	r2, r2, #16
10005190:	0c12      	lsrs	r2, r2, #16
10005192:	63da      	str	r2, [r3, #60]	; 0x3c

  /*shadow transfer */
  Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
10005194:	69ba      	ldr	r2, [r7, #24]
10005196:	2337      	movs	r3, #55	; 0x37
10005198:	5cd3      	ldrb	r3, [r2, r3]
1000519a:	009b      	lsls	r3, r3, #2
1000519c:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
1000519e:	69bb      	ldr	r3, [r7, #24]
100051a0:	695b      	ldr	r3, [r3, #20]
100051a2:	69ba      	ldr	r2, [r7, #24]
100051a4:	6952      	ldr	r2, [r2, #20]
100051a6:	6911      	ldr	r1, [r2, #16]
100051a8:	68fa      	ldr	r2, [r7, #12]
100051aa:	2001      	movs	r0, #1
100051ac:	1c04      	adds	r4, r0, #0
100051ae:	4094      	lsls	r4, r2
100051b0:	1c22      	adds	r2, r4, #0
100051b2:	430a      	orrs	r2, r1
100051b4:	611a      	str	r2, [r3, #16]
}
100051b6:	46bd      	mov	sp, r7
100051b8:	b009      	add	sp, #36	; 0x24
100051ba:	bd90      	pop	{r4, r7, pc}
100051bc:	42c80000 	.word	0x42c80000

100051c0 <PWMSP001_SetPeriodAndCompare>:
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t Period,
    uint32_t Compare
)
{
100051c0:	b580      	push	{r7, lr}
100051c2:	b086      	sub	sp, #24
100051c4:	af00      	add	r7, sp, #0
100051c6:	60f8      	str	r0, [r7, #12]
100051c8:	60b9      	str	r1, [r7, #8]
100051ca:	607a      	str	r2, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100051cc:	2301      	movs	r3, #1
100051ce:	617b      	str	r3, [r7, #20]
  uint32_t PeriodVal = 0UL;
100051d0:	2300      	movs	r3, #0
100051d2:	613b      	str	r3, [r7, #16]
  /*<<<DD_PWMSP001_API_6_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
100051d4:	68fb      	ldr	r3, [r7, #12]
100051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100051d8:	781b      	ldrb	r3, [r3, #0]
100051da:	2b00      	cmp	r3, #0
100051dc:	d037      	beq.n	1000524e <PWMSP001_SetPeriodAndCompare+0x8e>
  {
   if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
100051de:	68bb      	ldr	r3, [r7, #8]
100051e0:	2b00      	cmp	r3, #0
100051e2:	d009      	beq.n	100051f8 <PWMSP001_SetPeriodAndCompare+0x38>
100051e4:	68fb      	ldr	r3, [r7, #12]
100051e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
100051e8:	687b      	ldr	r3, [r7, #4]
100051ea:	429a      	cmp	r2, r3
100051ec:	d207      	bcs.n	100051fe <PWMSP001_SetPeriodAndCompare+0x3e>
       (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
100051ee:	68fa      	ldr	r2, [r7, #12]
100051f0:	2320      	movs	r3, #32
100051f2:	5cd3      	ldrb	r3, [r2, r3]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  uint32_t PeriodVal = 0UL;
  /*<<<DD_PWMSP001_API_6_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
  {
   if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
100051f4:	2b00      	cmp	r3, #0
100051f6:	d102      	bne.n	100051fe <PWMSP001_SetPeriodAndCompare+0x3e>
       (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100051f8:	2302      	movs	r3, #2
100051fa:	617b      	str	r3, [r7, #20]
100051fc:	e027      	b.n	1000524e <PWMSP001_SetPeriodAndCompare+0x8e>
    }
    else
    {
      if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
100051fe:	68fb      	ldr	r3, [r7, #12]
10005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10005202:	68bb      	ldr	r3, [r7, #8]
10005204:	429a      	cmp	r2, r3
10005206:	d207      	bcs.n	10005218 <PWMSP001_SetPeriodAndCompare+0x58>
          ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
10005208:	68fa      	ldr	r2, [r7, #12]
1000520a:	2320      	movs	r3, #32
1000520c:	5cd3      	ldrb	r3, [r2, r3]
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
    }
    else
    {
      if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
1000520e:	2b01      	cmp	r3, #1
10005210:	d002      	beq.n	10005218 <PWMSP001_SetPeriodAndCompare+0x58>
          ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
          )
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10005212:	2302      	movs	r3, #2
10005214:	617b      	str	r3, [r7, #20]
10005216:	e01a      	b.n	1000524e <PWMSP001_SetPeriodAndCompare+0x8e>
      }
      else
      {
        PeriodVal = Period;
10005218:	68bb      	ldr	r3, [r7, #8]
1000521a:	613b      	str	r3, [r7, #16]
        if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
1000521c:	68fa      	ldr	r2, [r7, #12]
1000521e:	2320      	movs	r3, #32
10005220:	5cd3      	ldrb	r3, [r2, r3]
10005222:	2b01      	cmp	r3, #1
10005224:	d104      	bne.n	10005230 <PWMSP001_SetPeriodAndCompare+0x70>
        {
          HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
10005226:	68fb      	ldr	r3, [r7, #12]
10005228:	69db      	ldr	r3, [r3, #28]
1000522a:	693a      	ldr	r2, [r7, #16]
1000522c:	0c12      	lsrs	r2, r2, #16
1000522e:	635a      	str	r2, [r3, #52]	; 0x34
        }
        /*<<<DD_PWMSP001_API_6_3>>>*/
        HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
10005230:	68fb      	ldr	r3, [r7, #12]
10005232:	699b      	ldr	r3, [r3, #24]
10005234:	693a      	ldr	r2, [r7, #16]
10005236:	0412      	lsls	r2, r2, #16
10005238:	0c12      	lsrs	r2, r2, #16
1000523a:	635a      	str	r2, [r3, #52]	; 0x34
        /* Call function as per the configured mode */
        HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
1000523c:	68fb      	ldr	r3, [r7, #12]
1000523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005240:	68f9      	ldr	r1, [r7, #12]
10005242:	687a      	ldr	r2, [r7, #4]
10005244:	1c08      	adds	r0, r1, #0
10005246:	1c11      	adds	r1, r2, #0
10005248:	4798      	blx	r3
        Status = (uint32_t)DAVEApp_SUCCESS;
1000524a:	2300      	movs	r3, #0
1000524c:	617b      	str	r3, [r7, #20]
      }
    }
  }
  return Status;
1000524e:	697b      	ldr	r3, [r7, #20]
}
10005250:	1c18      	adds	r0, r3, #0
10005252:	46bd      	mov	sp, r7
10005254:	b006      	add	sp, #24
10005256:	bd80      	pop	{r7, pc}

10005258 <PWMSP001_SetPeriod>:
status_t PWMSP001_SetPeriod
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t Period
)
{
10005258:	b590      	push	{r4, r7, lr}
1000525a:	b087      	sub	sp, #28
1000525c:	af00      	add	r7, sp, #0
1000525e:	6078      	str	r0, [r7, #4]
10005260:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005262:	2301      	movs	r3, #1
10005264:	617b      	str	r3, [r7, #20]
  uint32_t PeriodVal = 0X00U;
10005266:	2300      	movs	r3, #0
10005268:	613b      	str	r3, [r7, #16]
  uint32_t Temp1;
  
  /*<<<DD_PWMSP001_API_6_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
1000526a:	687b      	ldr	r3, [r7, #4]
1000526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000526e:	781b      	ldrb	r3, [r3, #0]
10005270:	2b00      	cmp	r3, #0
10005272:	d04d      	beq.n	10005310 <PWMSP001_SetPeriod+0xb8>
  {
    if(Period == (uint32_t)0)
10005274:	683b      	ldr	r3, [r7, #0]
10005276:	2b00      	cmp	r3, #0
10005278:	d102      	bne.n	10005280 <PWMSP001_SetPeriod+0x28>
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1000527a:	2302      	movs	r3, #2
1000527c:	617b      	str	r3, [r7, #20]
1000527e:	e047      	b.n	10005310 <PWMSP001_SetPeriod+0xb8>
    }
    else
    {
      if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
10005280:	687b      	ldr	r3, [r7, #4]
10005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10005284:	683b      	ldr	r3, [r7, #0]
10005286:	429a      	cmp	r2, r3
10005288:	d207      	bcs.n	1000529a <PWMSP001_SetPeriod+0x42>
         (HandlePtr->kTimerConcatenation != (uint8_t)SET))
1000528a:	687a      	ldr	r2, [r7, #4]
1000528c:	2320      	movs	r3, #32
1000528e:	5cd3      	ldrb	r3, [r2, r3]
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
    }
    else
    {
      if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
10005290:	2b01      	cmp	r3, #1
10005292:	d002      	beq.n	1000529a <PWMSP001_SetPeriod+0x42>
         (HandlePtr->kTimerConcatenation != (uint8_t)SET))
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10005294:	2302      	movs	r3, #2
10005296:	617b      	str	r3, [r7, #20]
10005298:	e03a      	b.n	10005310 <PWMSP001_SetPeriod+0xb8>
      }
      else
      {
        PeriodVal = Period;
1000529a:	683b      	ldr	r3, [r7, #0]
1000529c:	613b      	str	r3, [r7, #16]
        if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
1000529e:	687a      	ldr	r2, [r7, #4]
100052a0:	2320      	movs	r3, #32
100052a2:	5cd3      	ldrb	r3, [r2, r3]
100052a4:	2b01      	cmp	r3, #1
100052a6:	d104      	bne.n	100052b2 <PWMSP001_SetPeriod+0x5a>
        {
          HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
100052a8:	687b      	ldr	r3, [r7, #4]
100052aa:	69db      	ldr	r3, [r3, #28]
100052ac:	693a      	ldr	r2, [r7, #16]
100052ae:	0c12      	lsrs	r2, r2, #16
100052b0:	635a      	str	r2, [r3, #52]	; 0x34
        }
        HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
100052b2:	687b      	ldr	r3, [r7, #4]
100052b4:	699b      	ldr	r3, [r3, #24]
100052b6:	693a      	ldr	r2, [r7, #16]
100052b8:	0412      	lsls	r2, r2, #16
100052ba:	0c12      	lsrs	r2, r2, #16
100052bc:	635a      	str	r2, [r3, #52]	; 0x34
        /*Request shadow transfer for the First slice*/
        Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
100052be:	687a      	ldr	r2, [r7, #4]
100052c0:	2337      	movs	r3, #55	; 0x37
100052c2:	5cd3      	ldrb	r3, [r2, r3]
100052c4:	009b      	lsls	r3, r3, #2
100052c6:	60fb      	str	r3, [r7, #12]
        HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
100052c8:	687b      	ldr	r3, [r7, #4]
100052ca:	695b      	ldr	r3, [r3, #20]
100052cc:	687a      	ldr	r2, [r7, #4]
100052ce:	6952      	ldr	r2, [r2, #20]
100052d0:	6911      	ldr	r1, [r2, #16]
100052d2:	68fa      	ldr	r2, [r7, #12]
100052d4:	2001      	movs	r0, #1
100052d6:	1c04      	adds	r4, r0, #0
100052d8:	4094      	lsls	r4, r2
100052da:	1c22      	adds	r2, r4, #0
100052dc:	430a      	orrs	r2, r1
100052de:	611a      	str	r2, [r3, #16]
        if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100052e0:	687a      	ldr	r2, [r7, #4]
100052e2:	2320      	movs	r3, #32
100052e4:	5cd3      	ldrb	r3, [r2, r3]
100052e6:	2b01      	cmp	r3, #1
100052e8:	d110      	bne.n	1000530c <PWMSP001_SetPeriod+0xb4>
        {
          /*Request shadow transfer for the First slice*/
          Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
100052ea:	687a      	ldr	r2, [r7, #4]
100052ec:	2338      	movs	r3, #56	; 0x38
100052ee:	5cd3      	ldrb	r3, [r2, r3]
100052f0:	009b      	lsls	r3, r3, #2
100052f2:	60fb      	str	r3, [r7, #12]
          HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
100052f4:	687b      	ldr	r3, [r7, #4]
100052f6:	695b      	ldr	r3, [r3, #20]
100052f8:	687a      	ldr	r2, [r7, #4]
100052fa:	6952      	ldr	r2, [r2, #20]
100052fc:	6911      	ldr	r1, [r2, #16]
100052fe:	68fa      	ldr	r2, [r7, #12]
10005300:	2001      	movs	r0, #1
10005302:	1c04      	adds	r4, r0, #0
10005304:	4094      	lsls	r4, r2
10005306:	1c22      	adds	r2, r4, #0
10005308:	430a      	orrs	r2, r1
1000530a:	611a      	str	r2, [r3, #16]
        }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
        Status = (uint32_t)DAVEApp_SUCCESS;
1000530c:	2300      	movs	r3, #0
1000530e:	617b      	str	r3, [r7, #20]
      }
    }
  }
  return Status;
10005310:	697b      	ldr	r3, [r7, #20]
}
10005312:	1c18      	adds	r0, r3, #0
10005314:	46bd      	mov	sp, r7
10005316:	b007      	add	sp, #28
10005318:	bd90      	pop	{r4, r7, pc}
1000531a:	46c0      	nop			; (mov r8, r8)

1000531c <PWMSP001_SetPwmFreqAndDutyCycle>:
(
    const PWMSP001_HandleType* HandlePtr,
    float PwmFreq,
    float Duty
)
{
1000531c:	b580      	push	{r7, lr}
1000531e:	b088      	sub	sp, #32
10005320:	af00      	add	r7, sp, #0
10005322:	60f8      	str	r0, [r7, #12]
10005324:	60b9      	str	r1, [r7, #8]
10005326:	607a      	str	r2, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005328:	2301      	movs	r3, #1
1000532a:	61fb      	str	r3, [r7, #28]
  uint32_t PwmTime = 0UL;
1000532c:	2300      	movs	r3, #0
1000532e:	61bb      	str	r3, [r7, #24]
  float fPwmFreq ;
  /*<<<DD_PWMSP001_API_16_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
10005330:	68fb      	ldr	r3, [r7, #12]
10005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005334:	781b      	ldrb	r3, [r3, #0]
10005336:	2b00      	cmp	r3, #0
10005338:	d068      	beq.n	1000540c <PWMSP001_SetPwmFreqAndDutyCycle+0xf0>
  {
  if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
1000533a:	68b8      	ldr	r0, [r7, #8]
1000533c:	2100      	movs	r1, #0
1000533e:	f001 fee3 	bl	10007108 <__aeabi_fcmpeq>
10005342:	1c03      	adds	r3, r0, #0
10005344:	2b00      	cmp	r3, #0
10005346:	d10d      	bne.n	10005364 <PWMSP001_SetPwmFreqAndDutyCycle+0x48>
10005348:	6878      	ldr	r0, [r7, #4]
1000534a:	4933      	ldr	r1, [pc, #204]	; (10005418 <PWMSP001_SetPwmFreqAndDutyCycle+0xfc>)
1000534c:	f001 fef6 	bl	1000713c <__aeabi_fcmpgt>
10005350:	1c03      	adds	r3, r0, #0
10005352:	2b00      	cmp	r3, #0
10005354:	d106      	bne.n	10005364 <PWMSP001_SetPwmFreqAndDutyCycle+0x48>
10005356:	6878      	ldr	r0, [r7, #4]
10005358:	2100      	movs	r1, #0
1000535a:	f001 fedb 	bl	10007114 <__aeabi_fcmplt>
1000535e:	1c03      	adds	r3, r0, #0
10005360:	2b00      	cmp	r3, #0
10005362:	d002      	beq.n	1000536a <PWMSP001_SetPwmFreqAndDutyCycle+0x4e>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10005364:	2302      	movs	r3, #2
10005366:	61fb      	str	r3, [r7, #28]
10005368:	e050      	b.n	1000540c <PWMSP001_SetPwmFreqAndDutyCycle+0xf0>
  }
  else
  {
      fPwmFreq=(float)HandlePtr->kResolution;
1000536a:	68fb      	ldr	r3, [r7, #12]
1000536c:	685b      	ldr	r3, [r3, #4]
1000536e:	617b      	str	r3, [r7, #20]
	  fPwmFreq=(float)fPwmFreq*PwmFreq;
10005370:	6978      	ldr	r0, [r7, #20]
10005372:	68b9      	ldr	r1, [r7, #8]
10005374:	f002 f922 	bl	100075bc <__aeabi_fmul>
10005378:	1c03      	adds	r3, r0, #0
1000537a:	617b      	str	r3, [r7, #20]
	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
1000537c:	4827      	ldr	r0, [pc, #156]	; (1000541c <PWMSP001_SetPwmFreqAndDutyCycle+0x100>)
1000537e:	6979      	ldr	r1, [r7, #20]
10005380:	f001 ff2a 	bl	100071d8 <__aeabi_fdiv>
10005384:	1c03      	adds	r3, r0, #0
10005386:	1c18      	adds	r0, r3, #0
10005388:	f001 feec 	bl	10007164 <__aeabi_f2uiz>
1000538c:	1c03      	adds	r3, r0, #0
1000538e:	61bb      	str	r3, [r7, #24]
    /*<<<DD_PWMSP001_API_16_2>>>*/
    if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
10005390:	68fa      	ldr	r2, [r7, #12]
10005392:	2320      	movs	r3, #32
10005394:	5cd3      	ldrb	r3, [r2, r3]
10005396:	2b00      	cmp	r3, #0
10005398:	d11a      	bne.n	100053d0 <PWMSP001_SetPwmFreqAndDutyCycle+0xb4>
    {
      if(PwmTime > PWMSP001_MAX_VALUE)
1000539a:	69ba      	ldr	r2, [r7, #24]
1000539c:	4b20      	ldr	r3, [pc, #128]	; (10005420 <PWMSP001_SetPwmFreqAndDutyCycle+0x104>)
1000539e:	429a      	cmp	r2, r3
100053a0:	d902      	bls.n	100053a8 <PWMSP001_SetPwmFreqAndDutyCycle+0x8c>
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100053a2:	2302      	movs	r3, #2
100053a4:	61fb      	str	r3, [r7, #28]
100053a6:	e027      	b.n	100053f8 <PWMSP001_SetPwmFreqAndDutyCycle+0xdc>
      }
      else
      {
        if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
100053a8:	68fa      	ldr	r2, [r7, #12]
100053aa:	2336      	movs	r3, #54	; 0x36
100053ac:	5cd3      	ldrb	r3, [r2, r3]
100053ae:	2b00      	cmp	r3, #0
100053b0:	d105      	bne.n	100053be <PWMSP001_SetPwmFreqAndDutyCycle+0xa2>
        {
          HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
100053b2:	68fb      	ldr	r3, [r7, #12]
100053b4:	699b      	ldr	r3, [r3, #24]
100053b6:	69ba      	ldr	r2, [r7, #24]
100053b8:	3a01      	subs	r2, #1
100053ba:	635a      	str	r2, [r3, #52]	; 0x34
100053bc:	e005      	b.n	100053ca <PWMSP001_SetPwmFreqAndDutyCycle+0xae>
        }
        else
        {
          HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
100053be:	68fb      	ldr	r3, [r7, #12]
100053c0:	699b      	ldr	r3, [r3, #24]
100053c2:	69ba      	ldr	r2, [r7, #24]
100053c4:	3a01      	subs	r2, #1
100053c6:	0852      	lsrs	r2, r2, #1
100053c8:	635a      	str	r2, [r3, #52]	; 0x34
        }
        Status = (uint32_t)DAVEApp_SUCCESS;
100053ca:	2300      	movs	r3, #0
100053cc:	61fb      	str	r3, [r7, #28]
100053ce:	e013      	b.n	100053f8 <PWMSP001_SetPwmFreqAndDutyCycle+0xdc>
      }
    }
    else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
100053d0:	68fa      	ldr	r2, [r7, #12]
100053d2:	2320      	movs	r3, #32
100053d4:	5cd3      	ldrb	r3, [r2, r3]
100053d6:	2b01      	cmp	r3, #1
100053d8:	d106      	bne.n	100053e8 <PWMSP001_SetPwmFreqAndDutyCycle+0xcc>
100053da:	69ba      	ldr	r2, [r7, #24]
100053dc:	4b10      	ldr	r3, [pc, #64]	; (10005420 <PWMSP001_SetPwmFreqAndDutyCycle+0x104>)
100053de:	429a      	cmp	r2, r3
100053e0:	d802      	bhi.n	100053e8 <PWMSP001_SetPwmFreqAndDutyCycle+0xcc>
    		                                   (PwmTime <= PWMSP001_MAX_VALUE))
    {
    	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100053e2:	2302      	movs	r3, #2
100053e4:	61fb      	str	r3, [r7, #28]
100053e6:	e007      	b.n	100053f8 <PWMSP001_SetPwmFreqAndDutyCycle+0xdc>
    }
    /*<<<DD_PWMSP001_API_16_3>>>*/
    else
    {
      Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
100053e8:	68fa      	ldr	r2, [r7, #12]
100053ea:	69bb      	ldr	r3, [r7, #24]
100053ec:	1c10      	adds	r0, r2, #0
100053ee:	1c19      	adds	r1, r3, #0
100053f0:	f000 f8a4 	bl	1000553c <PWMSP001_lSetPwmFreqTimerConcat>
100053f4:	1c03      	adds	r3, r0, #0
100053f6:	61fb      	str	r3, [r7, #28]
    }
    if(Status == (uint32_t)DAVEApp_SUCCESS)
100053f8:	69fb      	ldr	r3, [r7, #28]
100053fa:	2b00      	cmp	r3, #0
100053fc:	d106      	bne.n	1000540c <PWMSP001_SetPwmFreqAndDutyCycle+0xf0>
    {
     /* Call the function as per configured mode */
     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
100053fe:	68fb      	ldr	r3, [r7, #12]
10005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10005402:	68f9      	ldr	r1, [r7, #12]
10005404:	687a      	ldr	r2, [r7, #4]
10005406:	1c08      	adds	r0, r1, #0
10005408:	1c11      	adds	r1, r2, #0
1000540a:	4798      	blx	r3
    }
   }
  }
  return (Status);
1000540c:	69fb      	ldr	r3, [r7, #28]
}
1000540e:	1c18      	adds	r0, r3, #0
10005410:	46bd      	mov	sp, r7
10005412:	b008      	add	sp, #32
10005414:	bd80      	pop	{r7, pc}
10005416:	46c0      	nop			; (mov r8, r8)
10005418:	42c80000 	.word	0x42c80000
1000541c:	4e6e6b28 	.word	0x4e6e6b28
10005420:	0000ffff 	.word	0x0000ffff

10005424 <PWMSP001_SetPwmFreq>:
status_t PWMSP001_SetPwmFreq
(
    const PWMSP001_HandleType* HandlePtr,
    float PwmFreq
)
{
10005424:	b5b0      	push	{r4, r5, r7, lr}
10005426:	b088      	sub	sp, #32
10005428:	af00      	add	r7, sp, #0
1000542a:	6078      	str	r0, [r7, #4]
1000542c:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1000542e:	2301      	movs	r3, #1
10005430:	61fb      	str	r3, [r7, #28]
  uint32_t PwmTime = 0x00U;
10005432:	2300      	movs	r3, #0
10005434:	61bb      	str	r3, [r7, #24]
  uint32_t Temp1;
  uint32_t Temp2;
  uint32_t Temp3;
  float fPwmFreq ;
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
10005436:	687b      	ldr	r3, [r7, #4]
10005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000543a:	781b      	ldrb	r3, [r3, #0]
1000543c:	2b00      	cmp	r3, #0
1000543e:	d100      	bne.n	10005442 <PWMSP001_SetPwmFreq+0x1e>
10005440:	e072      	b.n	10005528 <PWMSP001_SetPwmFreq+0x104>
  {
  if(PwmFreq == (float)0)
10005442:	6838      	ldr	r0, [r7, #0]
10005444:	2100      	movs	r1, #0
10005446:	f001 fe5f 	bl	10007108 <__aeabi_fcmpeq>
1000544a:	1c03      	adds	r3, r0, #0
1000544c:	2b00      	cmp	r3, #0
1000544e:	d002      	beq.n	10005456 <PWMSP001_SetPwmFreq+0x32>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10005450:	2302      	movs	r3, #2
10005452:	61fb      	str	r3, [r7, #28]
10005454:	e068      	b.n	10005528 <PWMSP001_SetPwmFreq+0x104>
  }
  else
  {
	  fPwmFreq=(float)HandlePtr->kResolution;
10005456:	687b      	ldr	r3, [r7, #4]
10005458:	685b      	ldr	r3, [r3, #4]
1000545a:	617b      	str	r3, [r7, #20]
	  fPwmFreq=(float)fPwmFreq*PwmFreq;
1000545c:	6978      	ldr	r0, [r7, #20]
1000545e:	6839      	ldr	r1, [r7, #0]
10005460:	f002 f8ac 	bl	100075bc <__aeabi_fmul>
10005464:	1c03      	adds	r3, r0, #0
10005466:	617b      	str	r3, [r7, #20]
	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
10005468:	4832      	ldr	r0, [pc, #200]	; (10005534 <PWMSP001_SetPwmFreq+0x110>)
1000546a:	6979      	ldr	r1, [r7, #20]
1000546c:	f001 feb4 	bl	100071d8 <__aeabi_fdiv>
10005470:	1c03      	adds	r3, r0, #0
10005472:	1c18      	adds	r0, r3, #0
10005474:	f001 fe76 	bl	10007164 <__aeabi_f2uiz>
10005478:	1c03      	adds	r3, r0, #0
1000547a:	61bb      	str	r3, [r7, #24]
    /*<<<DD_PWMSP001_API_16_2>>>*/
    if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
1000547c:	687a      	ldr	r2, [r7, #4]
1000547e:	2320      	movs	r3, #32
10005480:	5cd3      	ldrb	r3, [r2, r3]
10005482:	2b00      	cmp	r3, #0
10005484:	d12b      	bne.n	100054de <PWMSP001_SetPwmFreq+0xba>
    {
      if(PwmTime > PWMSP001_MAX_VALUE)
10005486:	69ba      	ldr	r2, [r7, #24]
10005488:	4b2b      	ldr	r3, [pc, #172]	; (10005538 <PWMSP001_SetPwmFreq+0x114>)
1000548a:	429a      	cmp	r2, r3
1000548c:	d902      	bls.n	10005494 <PWMSP001_SetPwmFreq+0x70>
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1000548e:	2302      	movs	r3, #2
10005490:	61fb      	str	r3, [r7, #28]
10005492:	e049      	b.n	10005528 <PWMSP001_SetPwmFreq+0x104>
      }
      else
      {
        if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
10005494:	687a      	ldr	r2, [r7, #4]
10005496:	2336      	movs	r3, #54	; 0x36
10005498:	5cd3      	ldrb	r3, [r2, r3]
1000549a:	2b00      	cmp	r3, #0
1000549c:	d105      	bne.n	100054aa <PWMSP001_SetPwmFreq+0x86>
        {
          HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
1000549e:	687b      	ldr	r3, [r7, #4]
100054a0:	699b      	ldr	r3, [r3, #24]
100054a2:	69ba      	ldr	r2, [r7, #24]
100054a4:	3a01      	subs	r2, #1
100054a6:	635a      	str	r2, [r3, #52]	; 0x34
100054a8:	e005      	b.n	100054b6 <PWMSP001_SetPwmFreq+0x92>
        }
        else
        {
          HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
100054aa:	687b      	ldr	r3, [r7, #4]
100054ac:	699b      	ldr	r3, [r3, #24]
100054ae:	69ba      	ldr	r2, [r7, #24]
100054b0:	3a01      	subs	r2, #1
100054b2:	0852      	lsrs	r2, r2, #1
100054b4:	635a      	str	r2, [r3, #52]	; 0x34
        }
        /** Update dynamic handle*/
        Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
100054b6:	687a      	ldr	r2, [r7, #4]
100054b8:	2337      	movs	r3, #55	; 0x37
100054ba:	5cd3      	ldrb	r3, [r2, r3]
100054bc:	009b      	lsls	r3, r3, #2
100054be:	613b      	str	r3, [r7, #16]
        HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
100054c0:	687b      	ldr	r3, [r7, #4]
100054c2:	695b      	ldr	r3, [r3, #20]
100054c4:	687a      	ldr	r2, [r7, #4]
100054c6:	6952      	ldr	r2, [r2, #20]
100054c8:	6911      	ldr	r1, [r2, #16]
100054ca:	693a      	ldr	r2, [r7, #16]
100054cc:	2001      	movs	r0, #1
100054ce:	1c04      	adds	r4, r0, #0
100054d0:	4094      	lsls	r4, r2
100054d2:	1c22      	adds	r2, r4, #0
100054d4:	430a      	orrs	r2, r1
100054d6:	611a      	str	r2, [r3, #16]
        Status = (uint32_t)DAVEApp_SUCCESS;
100054d8:	2300      	movs	r3, #0
100054da:	61fb      	str	r3, [r7, #28]
100054dc:	e024      	b.n	10005528 <PWMSP001_SetPwmFreq+0x104>
      }
    }
    /*<<<DD_PWMSP001_API_16_3>>>*/
    else
    {
      Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
100054de:	687a      	ldr	r2, [r7, #4]
100054e0:	69bb      	ldr	r3, [r7, #24]
100054e2:	1c10      	adds	r0, r2, #0
100054e4:	1c19      	adds	r1, r3, #0
100054e6:	f000 f829 	bl	1000553c <PWMSP001_lSetPwmFreqTimerConcat>
100054ea:	1c03      	adds	r3, r0, #0
100054ec:	61fb      	str	r3, [r7, #28]
      if(Status == (uint32_t)DAVEApp_SUCCESS)
100054ee:	69fb      	ldr	r3, [r7, #28]
100054f0:	2b00      	cmp	r3, #0
100054f2:	d119      	bne.n	10005528 <PWMSP001_SetPwmFreq+0x104>
      {
        Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
100054f4:	687a      	ldr	r2, [r7, #4]
100054f6:	2337      	movs	r3, #55	; 0x37
100054f8:	5cd3      	ldrb	r3, [r2, r3]
100054fa:	009b      	lsls	r3, r3, #2
100054fc:	60fb      	str	r3, [r7, #12]
        Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
100054fe:	687a      	ldr	r2, [r7, #4]
10005500:	2338      	movs	r3, #56	; 0x38
10005502:	5cd3      	ldrb	r3, [r2, r3]
10005504:	009b      	lsls	r3, r3, #2
10005506:	60bb      	str	r3, [r7, #8]
        HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
10005508:	687b      	ldr	r3, [r7, #4]
1000550a:	695b      	ldr	r3, [r3, #20]
1000550c:	687a      	ldr	r2, [r7, #4]
1000550e:	6952      	ldr	r2, [r2, #20]
10005510:	6911      	ldr	r1, [r2, #16]
10005512:	68fa      	ldr	r2, [r7, #12]
10005514:	2001      	movs	r0, #1
10005516:	4090      	lsls	r0, r2
            ((uint32_t)0x01 << Temp3));
10005518:	68ba      	ldr	r2, [r7, #8]
1000551a:	2401      	movs	r4, #1
1000551c:	1c25      	adds	r5, r4, #0
1000551e:	4095      	lsls	r5, r2
10005520:	1c2a      	adds	r2, r5, #0
      Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
      if(Status == (uint32_t)DAVEApp_SUCCESS)
      {
        Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
        Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
        HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
10005522:	4302      	orrs	r2, r0
10005524:	430a      	orrs	r2, r1
10005526:	611a      	str	r2, [r3, #16]
            ((uint32_t)0x01 << Temp3));
      }
    }
  }
 }
  return (Status);
10005528:	69fb      	ldr	r3, [r7, #28]
}
1000552a:	1c18      	adds	r0, r3, #0
1000552c:	46bd      	mov	sp, r7
1000552e:	b008      	add	sp, #32
10005530:	bdb0      	pop	{r4, r5, r7, pc}
10005532:	46c0      	nop			; (mov r8, r8)
10005534:	4e6e6b28 	.word	0x4e6e6b28
10005538:	0000ffff 	.word	0x0000ffff

1000553c <PWMSP001_lSetPwmFreqTimerConcat>:
status_t PWMSP001_lSetPwmFreqTimerConcat
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t PwmTime
)
{
1000553c:	b580      	push	{r7, lr}
1000553e:	b088      	sub	sp, #32
10005540:	af00      	add	r7, sp, #0
10005542:	6078      	str	r0, [r7, #4]
10005544:	6039      	str	r1, [r7, #0]
  uint32_t PeriodVal = PwmTime;
10005546:	683b      	ldr	r3, [r7, #0]
10005548:	61fb      	str	r3, [r7, #28]
  uint32_t MsbPeriodVal, LsbPeriodVal;
  uint8_t Count = 0x00U;
1000554a:	1c3b      	adds	r3, r7, #0
1000554c:	3313      	adds	r3, #19
1000554e:	2200      	movs	r2, #0
10005550:	701a      	strb	r2, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005552:	2301      	movs	r3, #1
10005554:	60fb      	str	r3, [r7, #12]

  if(PwmTime >= PWMSP001_TC_MAX_VALUE)
10005556:	683b      	ldr	r3, [r7, #0]
10005558:	3301      	adds	r3, #1
1000555a:	d102      	bne.n	10005562 <PWMSP001_lSetPwmFreqTimerConcat+0x26>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1000555c:	2302      	movs	r3, #2
1000555e:	60fb      	str	r3, [r7, #12]
10005560:	e03a      	b.n	100055d8 <PWMSP001_lSetPwmFreqTimerConcat+0x9c>
  }

  else
  {

    if(PwmTime > PWMSP001_MAX_VALUE)
10005562:	683a      	ldr	r2, [r7, #0]
10005564:	4b1f      	ldr	r3, [pc, #124]	; (100055e4 <PWMSP001_lSetPwmFreqTimerConcat+0xa8>)
10005566:	429a      	cmp	r2, r3
10005568:	d919      	bls.n	1000559e <PWMSP001_lSetPwmFreqTimerConcat+0x62>
    {
      do
      {
        PeriodVal = PeriodVal >> 1;
1000556a:	69fb      	ldr	r3, [r7, #28]
1000556c:	085b      	lsrs	r3, r3, #1
1000556e:	61fb      	str	r3, [r7, #28]
        Count++;
10005570:	1c3b      	adds	r3, r7, #0
10005572:	3313      	adds	r3, #19
10005574:	1c3a      	adds	r2, r7, #0
10005576:	3213      	adds	r2, #19
10005578:	7812      	ldrb	r2, [r2, #0]
1000557a:	3201      	adds	r2, #1
1000557c:	701a      	strb	r2, [r3, #0]
      }while(PeriodVal >= PWMSP001_MAX_VALUE);
1000557e:	69fa      	ldr	r2, [r7, #28]
10005580:	4b19      	ldr	r3, [pc, #100]	; (100055e8 <PWMSP001_lSetPwmFreqTimerConcat+0xac>)
10005582:	429a      	cmp	r2, r3
10005584:	d8f1      	bhi.n	1000556a <PWMSP001_lSetPwmFreqTimerConcat+0x2e>

      MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
10005586:	1c3b      	adds	r3, r7, #0
10005588:	3313      	adds	r3, #19
1000558a:	781b      	ldrb	r3, [r3, #0]
1000558c:	2201      	movs	r2, #1
1000558e:	1c11      	adds	r1, r2, #0
10005590:	4099      	lsls	r1, r3
10005592:	1c0b      	adds	r3, r1, #0
10005594:	3b01      	subs	r3, #1
10005596:	61bb      	str	r3, [r7, #24]
      LsbPeriodVal = PeriodVal;
10005598:	69fb      	ldr	r3, [r7, #28]
1000559a:	617b      	str	r3, [r7, #20]
1000559c:	e003      	b.n	100055a6 <PWMSP001_lSetPwmFreqTimerConcat+0x6a>
    }
    else
    {
      LsbPeriodVal = PwmTime;
1000559e:	683b      	ldr	r3, [r7, #0]
100055a0:	617b      	str	r3, [r7, #20]
      MsbPeriodVal = (uint32_t)0x00;
100055a2:	2300      	movs	r3, #0
100055a4:	61bb      	str	r3, [r7, #24]
    }

    /*<<<DD_PWMSP001_API_16_4>>>*/
    if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
100055a6:	687a      	ldr	r2, [r7, #4]
100055a8:	2336      	movs	r3, #54	; 0x36
100055aa:	5cd3      	ldrb	r3, [r2, r3]
100055ac:	2b01      	cmp	r3, #1
100055ae:	d105      	bne.n	100055bc <PWMSP001_lSetPwmFreqTimerConcat+0x80>
    {
      MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
100055b0:	69bb      	ldr	r3, [r7, #24]
100055b2:	085b      	lsrs	r3, r3, #1
100055b4:	61bb      	str	r3, [r7, #24]
      LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
100055b6:	697b      	ldr	r3, [r7, #20]
100055b8:	085b      	lsrs	r3, r3, #1
100055ba:	617b      	str	r3, [r7, #20]
    }

    HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
100055bc:	687b      	ldr	r3, [r7, #4]
100055be:	699b      	ldr	r3, [r3, #24]
100055c0:	697a      	ldr	r2, [r7, #20]
100055c2:	0412      	lsls	r2, r2, #16
100055c4:	0c12      	lsrs	r2, r2, #16
100055c6:	635a      	str	r2, [r3, #52]	; 0x34
    HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
100055c8:	687b      	ldr	r3, [r7, #4]
100055ca:	69db      	ldr	r3, [r3, #28]
100055cc:	69ba      	ldr	r2, [r7, #24]
100055ce:	0412      	lsls	r2, r2, #16
100055d0:	0c12      	lsrs	r2, r2, #16
100055d2:	635a      	str	r2, [r3, #52]	; 0x34

    /*<<<DD_PWMSP001_API_16_5>>>*/
    Status = (uint32_t)DAVEApp_SUCCESS;
100055d4:	2300      	movs	r3, #0
100055d6:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
100055d8:	68fb      	ldr	r3, [r7, #12]
}
100055da:	1c18      	adds	r0, r3, #0
100055dc:	46bd      	mov	sp, r7
100055de:	b008      	add	sp, #32
100055e0:	bd80      	pop	{r7, pc}
100055e2:	46c0      	nop			; (mov r8, r8)
100055e4:	0000ffff 	.word	0x0000ffff
100055e8:	0000fffe 	.word	0x0000fffe

100055ec <PWMSP001_SetTimerVal>:
status_t PWMSP001_SetTimerVal
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t TimerVal
)
{
100055ec:	b580      	push	{r7, lr}
100055ee:	b084      	sub	sp, #16
100055f0:	af00      	add	r7, sp, #0
100055f2:	6078      	str	r0, [r7, #4]
100055f4:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100055f6:	2301      	movs	r3, #1
100055f8:	60fb      	str	r3, [r7, #12]
  /*<<<DD_PWMSP001_API_7_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
100055fa:	687b      	ldr	r3, [r7, #4]
100055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100055fe:	781b      	ldrb	r3, [r3, #0]
10005600:	2b01      	cmp	r3, #1
10005602:	d004      	beq.n	1000560e <PWMSP001_SetTimerVal+0x22>
      (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
10005604:	687b      	ldr	r3, [r7, #4]
10005606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005608:	781b      	ldrb	r3, [r3, #0]
    uint32_t TimerVal
)
{
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  /*<<<DD_PWMSP001_API_7_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
1000560a:	2b03      	cmp	r3, #3
1000560c:	d111      	bne.n	10005632 <PWMSP001_SetTimerVal+0x46>
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  /*<<<DD_PWMSP001_API_7_1>>>*/
  else
  {
    HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
1000560e:	687b      	ldr	r3, [r7, #4]
10005610:	699b      	ldr	r3, [r3, #24]
10005612:	683a      	ldr	r2, [r7, #0]
10005614:	0412      	lsls	r2, r2, #16
10005616:	0c12      	lsrs	r2, r2, #16
10005618:	671a      	str	r2, [r3, #112]	; 0x70
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
1000561a:	687a      	ldr	r2, [r7, #4]
1000561c:	2320      	movs	r3, #32
1000561e:	5cd3      	ldrb	r3, [r2, r3]
10005620:	2b01      	cmp	r3, #1
10005622:	d104      	bne.n	1000562e <PWMSP001_SetTimerVal+0x42>
    {
      HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
10005624:	687b      	ldr	r3, [r7, #4]
10005626:	69db      	ldr	r3, [r3, #28]
10005628:	683a      	ldr	r2, [r7, #0]
1000562a:	0c12      	lsrs	r2, r2, #16
1000562c:	671a      	str	r2, [r3, #112]	; 0x70
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
1000562e:	2300      	movs	r3, #0
10005630:	60fb      	str	r3, [r7, #12]
  }
  return Status;
10005632:	68fb      	ldr	r3, [r7, #12]
}
10005634:	1c18      	adds	r0, r3, #0
10005636:	46bd      	mov	sp, r7
10005638:	b004      	add	sp, #16
1000563a:	bd80      	pop	{r7, pc}

1000563c <PWMSP001_GetTimerStatus>:
status_t PWMSP001_GetTimerStatus
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t* TimerStatus
)
{
1000563c:	b580      	push	{r7, lr}
1000563e:	b084      	sub	sp, #16
10005640:	af00      	add	r7, sp, #0
10005642:	6078      	str	r0, [r7, #4]
10005644:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005646:	2301      	movs	r3, #1
10005648:	60fb      	str	r3, [r7, #12]
  uint32_t SecondTimerStatus = (uint32_t)0;
1000564a:	2300      	movs	r3, #0
1000564c:	60bb      	str	r3, [r7, #8]
  /*<<<DD_PWMSP001_API_8_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
1000564e:	687b      	ldr	r3, [r7, #4]
10005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005652:	781b      	ldrb	r3, [r3, #0]
10005654:	2b00      	cmp	r3, #0
10005656:	d01d      	beq.n	10005694 <PWMSP001_GetTimerStatus+0x58>
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  /*<<<DD_PWMSP001_API_8_2>>>*/
  else
  {
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005658:	687a      	ldr	r2, [r7, #4]
1000565a:	2320      	movs	r3, #32
1000565c:	5cd3      	ldrb	r3, [r2, r3]
1000565e:	2b01      	cmp	r3, #1
10005660:	d10f      	bne.n	10005682 <PWMSP001_GetTimerStatus+0x46>
    {
      SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
10005662:	687b      	ldr	r3, [r7, #4]
10005664:	69db      	ldr	r3, [r3, #28]
10005666:	689a      	ldr	r2, [r3, #8]
10005668:	2301      	movs	r3, #1
1000566a:	4013      	ands	r3, r2
1000566c:	60bb      	str	r3, [r7, #8]
          CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
      *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
1000566e:	687b      	ldr	r3, [r7, #4]
10005670:	699b      	ldr	r3, [r3, #24]
10005672:	689b      	ldr	r3, [r3, #8]
10005674:	68ba      	ldr	r2, [r7, #8]
10005676:	401a      	ands	r2, r3
10005678:	2301      	movs	r3, #1
1000567a:	401a      	ands	r2, r3
1000567c:	683b      	ldr	r3, [r7, #0]
1000567e:	601a      	str	r2, [r3, #0]
10005680:	e006      	b.n	10005690 <PWMSP001_GetTimerStatus+0x54>
          SecondTimerStatus
      );
    }
    else
    {
      *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
10005682:	687b      	ldr	r3, [r7, #4]
10005684:	699b      	ldr	r3, [r3, #24]
10005686:	689a      	ldr	r2, [r3, #8]
10005688:	2301      	movs	r3, #1
1000568a:	401a      	ands	r2, r3
1000568c:	683b      	ldr	r3, [r7, #0]
1000568e:	601a      	str	r2, [r3, #0]
          CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10005690:	2300      	movs	r3, #0
10005692:	60fb      	str	r3, [r7, #12]
  }
  return Status; 
10005694:	68fb      	ldr	r3, [r7, #12]
}
10005696:	1c18      	adds	r0, r3, #0
10005698:	46bd      	mov	sp, r7
1000569a:	b004      	add	sp, #16
1000569c:	bd80      	pop	{r7, pc}
1000569e:	46c0      	nop			; (mov r8, r8)

100056a0 <PWMSP001_GetTimerRegsVal>:
status_t PWMSP001_GetTimerRegsVal
(
    const PWMSP001_HandleType* HandlePtr,
    PWMSP001_TimerRegsType* TimerRegs
)
{
100056a0:	b580      	push	{r7, lr}
100056a2:	b084      	sub	sp, #16
100056a4:	af00      	add	r7, sp, #0
100056a6:	6078      	str	r0, [r7, #4]
100056a8:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100056aa:	2301      	movs	r3, #1
100056ac:	60fb      	str	r3, [r7, #12]
  uint32_t ScndSlTMRVal = 0UL;
100056ae:	2300      	movs	r3, #0
100056b0:	60bb      	str	r3, [r7, #8]

  /*<<<DD_PWMSP001_API_9_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
100056b2:	687b      	ldr	r3, [r7, #4]
100056b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100056b6:	781b      	ldrb	r3, [r3, #0]
100056b8:	2b00      	cmp	r3, #0
100056ba:	d051      	beq.n	10005760 <PWMSP001_GetTimerRegsVal+0xc0>
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  /*<<<DD_PWMSP001_API_9_2>>>*/
  else
  {
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100056bc:	687a      	ldr	r2, [r7, #4]
100056be:	2320      	movs	r3, #32
100056c0:	5cd3      	ldrb	r3, [r2, r3]
100056c2:	2b01      	cmp	r3, #1
100056c4:	d139      	bne.n	1000573a <PWMSP001_GetTimerRegsVal+0x9a>
    {
      ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
100056c6:	687b      	ldr	r3, [r7, #4]
100056c8:	69db      	ldr	r3, [r3, #28]
100056ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100056cc:	041b      	lsls	r3, r3, #16
100056ce:	60bb      	str	r3, [r7, #8]
          CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);

      TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
          (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
100056d0:	687b      	ldr	r3, [r7, #4]
100056d2:	699b      	ldr	r3, [r3, #24]
100056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100056d6:	041b      	lsls	r3, r3, #16
100056d8:	0c1a      	lsrs	r2, r3, #16
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
    {
      ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
          CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);

      TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
100056da:	68bb      	ldr	r3, [r7, #8]
100056dc:	431a      	orrs	r2, r3
100056de:	683b      	ldr	r3, [r7, #0]
100056e0:	609a      	str	r2, [r3, #8]
          (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
              CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));

      TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
100056e2:	687b      	ldr	r3, [r7, #4]
100056e4:	69db      	ldr	r3, [r3, #28]
100056e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
100056e8:	683b      	ldr	r3, [r7, #0]
100056ea:	601a      	str	r2, [r3, #0]
      TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
100056ec:	683b      	ldr	r3, [r7, #0]
100056ee:	681a      	ldr	r2, [r3, #0]
100056f0:	687b      	ldr	r3, [r7, #4]
100056f2:	699b      	ldr	r3, [r3, #24]
100056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100056f6:	435a      	muls	r2, r3
100056f8:	683b      	ldr	r3, [r7, #0]
100056fa:	601a      	str	r2, [r3, #0]
      TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
100056fc:	683b      	ldr	r3, [r7, #0]
100056fe:	681a      	ldr	r2, [r3, #0]
10005700:	687b      	ldr	r3, [r7, #4]
10005702:	699b      	ldr	r3, [r3, #24]
10005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005706:	18d2      	adds	r2, r2, r3
10005708:	683b      	ldr	r3, [r7, #0]
1000570a:	601a      	str	r2, [r3, #0]
      TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
1000570c:	687b      	ldr	r3, [r7, #4]
1000570e:	69db      	ldr	r3, [r3, #28]
10005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005712:	1c5a      	adds	r2, r3, #1
10005714:	683b      	ldr	r3, [r7, #0]
10005716:	605a      	str	r2, [r3, #4]
      TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
10005718:	683b      	ldr	r3, [r7, #0]
1000571a:	685a      	ldr	r2, [r3, #4]
1000571c:	687b      	ldr	r3, [r7, #4]
1000571e:	699b      	ldr	r3, [r3, #24]
10005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005722:	041b      	lsls	r3, r3, #16
10005724:	0c1b      	lsrs	r3, r3, #16
10005726:	3301      	adds	r3, #1
10005728:	435a      	muls	r2, r3
1000572a:	683b      	ldr	r3, [r7, #0]
1000572c:	605a      	str	r2, [r3, #4]
      TimerRegs->PeriodReg += 1U ;
1000572e:	683b      	ldr	r3, [r7, #0]
10005730:	685b      	ldr	r3, [r3, #4]
10005732:	1c5a      	adds	r2, r3, #1
10005734:	683b      	ldr	r3, [r7, #0]
10005736:	605a      	str	r2, [r3, #4]
10005738:	e010      	b.n	1000575c <PWMSP001_GetTimerRegsVal+0xbc>
    }

    else
    {
      TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
1000573a:	687b      	ldr	r3, [r7, #4]
1000573c:	699b      	ldr	r3, [r3, #24]
1000573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10005740:	041b      	lsls	r3, r3, #16
10005742:	0c1a      	lsrs	r2, r3, #16
10005744:	683b      	ldr	r3, [r7, #0]
10005746:	609a      	str	r2, [r3, #8]
          CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);

      TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
10005748:	687b      	ldr	r3, [r7, #4]
1000574a:	699b      	ldr	r3, [r3, #24]
1000574c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000574e:	683b      	ldr	r3, [r7, #0]
10005750:	601a      	str	r2, [r3, #0]
      TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
10005752:	687b      	ldr	r3, [r7, #4]
10005754:	699b      	ldr	r3, [r3, #24]
10005756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005758:	683b      	ldr	r3, [r7, #0]
1000575a:	605a      	str	r2, [r3, #4]

    }
    Status = (uint32_t)DAVEApp_SUCCESS;
1000575c:	2300      	movs	r3, #0
1000575e:	60fb      	str	r3, [r7, #12]
  }
  return Status;
10005760:	68fb      	ldr	r3, [r7, #12]
}
10005762:	1c18      	adds	r0, r3, #0
10005764:	46bd      	mov	sp, r7
10005766:	b004      	add	sp, #16
10005768:	bd80      	pop	{r7, pc}
1000576a:	46c0      	nop			; (mov r8, r8)

1000576c <PWMSP001_GetPeriodReg>:
status_t PWMSP001_GetPeriodReg
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t* PeriodReg
)
{
1000576c:	b580      	push	{r7, lr}
1000576e:	b084      	sub	sp, #16
10005770:	af00      	add	r7, sp, #0
10005772:	6078      	str	r0, [r7, #4]
10005774:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005776:	2301      	movs	r3, #1
10005778:	60fb      	str	r3, [r7, #12]

  /*<<<DD_PWMSP001_API_15_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
1000577a:	687b      	ldr	r3, [r7, #4]
1000577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000577e:	781b      	ldrb	r3, [r3, #0]
10005780:	2b00      	cmp	r3, #0
10005782:	d022      	beq.n	100057ca <PWMSP001_GetPeriodReg+0x5e>
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005784:	687a      	ldr	r2, [r7, #4]
10005786:	2320      	movs	r3, #32
10005788:	5cd3      	ldrb	r3, [r2, r3]
1000578a:	2b01      	cmp	r3, #1
1000578c:	d116      	bne.n	100057bc <PWMSP001_GetPeriodReg+0x50>
    {
      *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
1000578e:	687b      	ldr	r3, [r7, #4]
10005790:	69db      	ldr	r3, [r3, #28]
10005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005794:	1c5a      	adds	r2, r3, #1
10005796:	683b      	ldr	r3, [r7, #0]
10005798:	601a      	str	r2, [r3, #0]
      *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
1000579a:	683b      	ldr	r3, [r7, #0]
1000579c:	681a      	ldr	r2, [r3, #0]
1000579e:	687b      	ldr	r3, [r7, #4]
100057a0:	699b      	ldr	r3, [r3, #24]
100057a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100057a4:	041b      	lsls	r3, r3, #16
100057a6:	0c1b      	lsrs	r3, r3, #16
100057a8:	3301      	adds	r3, #1
100057aa:	435a      	muls	r2, r3
100057ac:	683b      	ldr	r3, [r7, #0]
100057ae:	601a      	str	r2, [r3, #0]
      *PeriodReg  += 1U;
100057b0:	683b      	ldr	r3, [r7, #0]
100057b2:	681b      	ldr	r3, [r3, #0]
100057b4:	1c5a      	adds	r2, r3, #1
100057b6:	683b      	ldr	r3, [r7, #0]
100057b8:	601a      	str	r2, [r3, #0]
100057ba:	e004      	b.n	100057c6 <PWMSP001_GetPeriodReg+0x5a>
    }
    else
    {
      *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
100057bc:	687b      	ldr	r3, [r7, #4]
100057be:	699b      	ldr	r3, [r3, #24]
100057c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100057c2:	683b      	ldr	r3, [r7, #0]
100057c4:	601a      	str	r2, [r3, #0]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
100057c6:	2300      	movs	r3, #0
100057c8:	60fb      	str	r3, [r7, #12]
  }
  return Status;
100057ca:	68fb      	ldr	r3, [r7, #12]
}
100057cc:	1c18      	adds	r0, r3, #0
100057ce:	46bd      	mov	sp, r7
100057d0:	b004      	add	sp, #16
100057d2:	bd80      	pop	{r7, pc}

100057d4 <PWMSP001_SWRequestShadowTransfer>:
 */
status_t PWMSP001_SWRequestShadowTransfer
(
    const PWMSP001_HandleType* HandlePtr
)
{
100057d4:	b5b0      	push	{r4, r5, r7, lr}
100057d6:	b086      	sub	sp, #24
100057d8:	af00      	add	r7, sp, #0
100057da:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100057dc:	2301      	movs	r3, #1
100057de:	617b      	str	r3, [r7, #20]
  uint32_t Temp1;
  uint32_t Temp2;
  uint32_t Temp3;

  /*<<<DD_PWMSP001_API_10_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
100057e0:	687b      	ldr	r3, [r7, #4]
100057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100057e4:	781b      	ldrb	r3, [r3, #0]
100057e6:	2b00      	cmp	r3, #0
100057e8:	d032      	beq.n	10005850 <PWMSP001_SWRequestShadowTransfer+0x7c>
  }
  /*<<<DD_PWMSP001_API_10_2>>>*/
  else
  {
    /*Request shadow transfer for the First Slice*/
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100057ea:	687a      	ldr	r2, [r7, #4]
100057ec:	2320      	movs	r3, #32
100057ee:	5cd3      	ldrb	r3, [r2, r3]
100057f0:	2b01      	cmp	r3, #1
100057f2:	d11a      	bne.n	1000582a <PWMSP001_SWRequestShadowTransfer+0x56>
    {
      /*Request shadow transfer for the Second Slice*/
      Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
100057f4:	687a      	ldr	r2, [r7, #4]
100057f6:	2337      	movs	r3, #55	; 0x37
100057f8:	5cd3      	ldrb	r3, [r2, r3]
100057fa:	009b      	lsls	r3, r3, #2
100057fc:	613b      	str	r3, [r7, #16]
      Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
100057fe:	687a      	ldr	r2, [r7, #4]
10005800:	2338      	movs	r3, #56	; 0x38
10005802:	5cd3      	ldrb	r3, [r2, r3]
10005804:	009b      	lsls	r3, r3, #2
10005806:	60fb      	str	r3, [r7, #12]
      HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
10005808:	687b      	ldr	r3, [r7, #4]
1000580a:	695b      	ldr	r3, [r3, #20]
1000580c:	687a      	ldr	r2, [r7, #4]
1000580e:	6952      	ldr	r2, [r2, #20]
10005810:	6911      	ldr	r1, [r2, #16]
10005812:	693a      	ldr	r2, [r7, #16]
10005814:	2001      	movs	r0, #1
10005816:	4090      	lsls	r0, r2
10005818:	68fa      	ldr	r2, [r7, #12]
1000581a:	2401      	movs	r4, #1
1000581c:	1c25      	adds	r5, r4, #0
1000581e:	4095      	lsls	r5, r2
10005820:	1c2a      	adds	r2, r5, #0
10005822:	4302      	orrs	r2, r0
10005824:	430a      	orrs	r2, r1
10005826:	611a      	str	r2, [r3, #16]
10005828:	e010      	b.n	1000584c <PWMSP001_SWRequestShadowTransfer+0x78>
    }
    else
    {
      Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
1000582a:	687a      	ldr	r2, [r7, #4]
1000582c:	2337      	movs	r3, #55	; 0x37
1000582e:	5cd3      	ldrb	r3, [r2, r3]
10005830:	009b      	lsls	r3, r3, #2
10005832:	60bb      	str	r3, [r7, #8]
      HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
10005834:	687b      	ldr	r3, [r7, #4]
10005836:	695b      	ldr	r3, [r3, #20]
10005838:	687a      	ldr	r2, [r7, #4]
1000583a:	6952      	ldr	r2, [r2, #20]
1000583c:	6911      	ldr	r1, [r2, #16]
1000583e:	68ba      	ldr	r2, [r7, #8]
10005840:	2001      	movs	r0, #1
10005842:	1c04      	adds	r4, r0, #0
10005844:	4094      	lsls	r4, r2
10005846:	1c22      	adds	r2, r4, #0
10005848:	430a      	orrs	r2, r1
1000584a:	611a      	str	r2, [r3, #16]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
1000584c:	2300      	movs	r3, #0
1000584e:	617b      	str	r3, [r7, #20]
  }
  return Status;
10005850:	697b      	ldr	r3, [r7, #20]
}
10005852:	1c18      	adds	r0, r3, #0
10005854:	46bd      	mov	sp, r7
10005856:	b006      	add	sp, #24
10005858:	bdb0      	pop	{r4, r5, r7, pc}
1000585a:	46c0      	nop			; (mov r8, r8)

1000585c <PWMSP001_ResetTrapFlag>:
/*<<<DD_PWMSP001_API_13>>>*/
/*
 * This function resets the trap flag if trap condition is inactive
 */
void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
{
1000585c:	b580      	push	{r7, lr}
1000585e:	b082      	sub	sp, #8
10005860:	af00      	add	r7, sp, #0
10005862:	6078      	str	r0, [r7, #4]
   if (HandlePtr->kTrapExitControl == (uint8_t)SET)
10005864:	687b      	ldr	r3, [r7, #4]
10005866:	7cdb      	ldrb	r3, [r3, #19]
10005868:	2b01      	cmp	r3, #1
1000586a:	d11a      	bne.n	100058a2 <PWMSP001_ResetTrapFlag+0x46>
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
1000586c:	687b      	ldr	r3, [r7, #4]
1000586e:	699a      	ldr	r2, [r3, #24]
10005870:	687b      	ldr	r3, [r7, #4]
10005872:	6999      	ldr	r1, [r3, #24]
10005874:	23b0      	movs	r3, #176	; 0xb0
10005876:	58cb      	ldr	r3, [r1, r3]
10005878:	2180      	movs	r1, #128	; 0x80
1000587a:	00c9      	lsls	r1, r1, #3
1000587c:	4319      	orrs	r1, r3
1000587e:	23b0      	movs	r3, #176	; 0xb0
10005880:	50d1      	str	r1, [r2, r3]
      if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005882:	687a      	ldr	r2, [r7, #4]
10005884:	2320      	movs	r3, #32
10005886:	5cd3      	ldrb	r3, [r2, r3]
10005888:	2b01      	cmp	r3, #1
1000588a:	d10a      	bne.n	100058a2 <PWMSP001_ResetTrapFlag+0x46>
      {
        SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
1000588c:	687b      	ldr	r3, [r7, #4]
1000588e:	69da      	ldr	r2, [r3, #28]
10005890:	687b      	ldr	r3, [r7, #4]
10005892:	69d9      	ldr	r1, [r3, #28]
10005894:	23b0      	movs	r3, #176	; 0xb0
10005896:	58cb      	ldr	r3, [r1, r3]
10005898:	2180      	movs	r1, #128	; 0x80
1000589a:	00c9      	lsls	r1, r1, #3
1000589c:	4319      	orrs	r1, r3
1000589e:	23b0      	movs	r3, #176	; 0xb0
100058a0:	50d1      	str	r1, [r2, r3]
      }
    }
    SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
100058a2:	687b      	ldr	r3, [r7, #4]
100058a4:	699a      	ldr	r2, [r3, #24]
100058a6:	687b      	ldr	r3, [r7, #4]
100058a8:	6999      	ldr	r1, [r3, #24]
100058aa:	23b0      	movs	r3, #176	; 0xb0
100058ac:	58cb      	ldr	r3, [r1, r3]
100058ae:	2180      	movs	r1, #128	; 0x80
100058b0:	0109      	lsls	r1, r1, #4
100058b2:	4319      	orrs	r1, r3
100058b4:	23b0      	movs	r3, #176	; 0xb0
100058b6:	50d1      	str	r1, [r2, r3]
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100058b8:	687a      	ldr	r2, [r7, #4]
100058ba:	2320      	movs	r3, #32
100058bc:	5cd3      	ldrb	r3, [r2, r3]
100058be:	2b01      	cmp	r3, #1
100058c0:	d10a      	bne.n	100058d8 <PWMSP001_ResetTrapFlag+0x7c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
100058c2:	687b      	ldr	r3, [r7, #4]
100058c4:	69da      	ldr	r2, [r3, #28]
100058c6:	687b      	ldr	r3, [r7, #4]
100058c8:	69d9      	ldr	r1, [r3, #28]
100058ca:	23b0      	movs	r3, #176	; 0xb0
100058cc:	58cb      	ldr	r3, [r1, r3]
100058ce:	2180      	movs	r1, #128	; 0x80
100058d0:	0109      	lsls	r1, r1, #4
100058d2:	4319      	orrs	r1, r3
100058d4:	23b0      	movs	r3, #176	; 0xb0
100058d6:	50d1      	str	r1, [r2, r3]
    }
}
100058d8:	46bd      	mov	sp, r7
100058da:	b002      	add	sp, #8
100058dc:	bd80      	pop	{r7, pc}
100058de:	46c0      	nop			; (mov r8, r8)

100058e0 <PWMSP001_lConfigureSecondSlice>:
/*
 * This function configures second slice.
 */

void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
{
100058e0:	b5b0      	push	{r4, r5, r7, lr}
100058e2:	b082      	sub	sp, #8
100058e4:	af00      	add	r7, sp, #0
100058e6:	6078      	str	r0, [r7, #4]
  HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
100058e8:	687b      	ldr	r3, [r7, #4]
100058ea:	69db      	ldr	r3, [r3, #28]
100058ec:	2207      	movs	r2, #7
100058ee:	611a      	str	r2, [r3, #16]

  /*Set period and compare values for second slice*/
  HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
100058f0:	687b      	ldr	r3, [r7, #4]
100058f2:	69db      	ldr	r3, [r3, #28]
100058f4:	687a      	ldr	r2, [r7, #4]
100058f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
100058f8:	0c12      	lsrs	r2, r2, #16
100058fa:	635a      	str	r2, [r3, #52]	; 0x34
      >> 16U);
  HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
100058fc:	687b      	ldr	r3, [r7, #4]
100058fe:	69db      	ldr	r3, [r3, #28]
10005900:	687a      	ldr	r2, [r7, #4]
10005902:	6892      	ldr	r2, [r2, #8]
10005904:	0c12      	lsrs	r2, r2, #16
10005906:	63da      	str	r2, [r3, #60]	; 0x3c
      >> 16U);

  HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
10005908:	687b      	ldr	r3, [r7, #4]
1000590a:	69db      	ldr	r3, [r3, #28]
1000590c:	687a      	ldr	r2, [r7, #4]
1000590e:	69d2      	ldr	r2, [r2, #28]
10005910:	6852      	ldr	r2, [r2, #4]
10005912:	2180      	movs	r1, #128	; 0x80
10005914:	0349      	lsls	r1, r1, #13
10005916:	430a      	orrs	r2, r1
10005918:	605a      	str	r2, [r3, #4]

  /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
  if (HandlePtr->kExtStopTrig == (uint8_t)SET)
1000591a:	687b      	ldr	r3, [r7, #4]
1000591c:	7bdb      	ldrb	r3, [r3, #15]
1000591e:	2b01      	cmp	r3, #1
10005920:	d125      	bne.n	1000596e <PWMSP001_lConfigureSecondSlice+0x8e>
  {
    HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF1M_Msk);
10005922:	687b      	ldr	r3, [r7, #4]
10005924:	69db      	ldr	r3, [r3, #28]
10005926:	687a      	ldr	r2, [r7, #4]
10005928:	69d2      	ldr	r2, [r2, #28]
1000592a:	6811      	ldr	r1, [r2, #0]
1000592c:	4a79      	ldr	r2, [pc, #484]	; (10005b14 <PWMSP001_lConfigureSecondSlice+0x234>)
1000592e:	400a      	ands	r2, r1
10005930:	601a      	str	r2, [r3, #0]
    HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
10005932:	687b      	ldr	r3, [r7, #4]
10005934:	69db      	ldr	r3, [r3, #28]
10005936:	687a      	ldr	r2, [r7, #4]
10005938:	69d2      	ldr	r2, [r2, #28]
1000593a:	6852      	ldr	r2, [r2, #4]
1000593c:	210c      	movs	r1, #12
1000593e:	438a      	bics	r2, r1
10005940:	605a      	str	r2, [r3, #4]
    HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
10005942:	687b      	ldr	r3, [r7, #4]
10005944:	69db      	ldr	r3, [r3, #28]
10005946:	687a      	ldr	r2, [r7, #4]
10005948:	69d2      	ldr	r2, [r2, #28]
1000594a:	6811      	ldr	r1, [r2, #0]
1000594c:	6878      	ldr	r0, [r7, #4]
1000594e:	2224      	movs	r2, #36	; 0x24
10005950:	5c82      	ldrb	r2, [r0, r2]
10005952:	0490      	lsls	r0, r2, #18
10005954:	22c0      	movs	r2, #192	; 0xc0
10005956:	0312      	lsls	r2, r2, #12
10005958:	4002      	ands	r2, r0
1000595a:	430a      	orrs	r2, r1
1000595c:	601a      	str	r2, [r3, #0]
      (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
    HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
1000595e:	687b      	ldr	r3, [r7, #4]
10005960:	69db      	ldr	r3, [r3, #28]
10005962:	687a      	ldr	r2, [r7, #4]
10005964:	69d2      	ldr	r2, [r2, #28]
10005966:	6852      	ldr	r2, [r2, #4]
10005968:	2108      	movs	r1, #8
1000596a:	430a      	orrs	r2, r1
1000596c:	605a      	str	r2, [r3, #4]
      (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
  }/*End of if (HandlePtr->kExtStopTrig == SET)*/

  /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
  if (HandlePtr->kTrapEnable == (uint8_t)SET)
1000596e:	687b      	ldr	r3, [r7, #4]
10005970:	7c5b      	ldrb	r3, [r3, #17]
10005972:	2b01      	cmp	r3, #1
10005974:	d125      	bne.n	100059c2 <PWMSP001_lConfigureSecondSlice+0xe2>
  {
    HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
10005976:	687b      	ldr	r3, [r7, #4]
10005978:	69db      	ldr	r3, [r3, #28]
1000597a:	687a      	ldr	r2, [r7, #4]
1000597c:	69d2      	ldr	r2, [r2, #28]
1000597e:	6811      	ldr	r1, [r2, #0]
10005980:	4a65      	ldr	r2, [pc, #404]	; (10005b18 <PWMSP001_lConfigureSecondSlice+0x238>)
10005982:	400a      	ands	r2, r1
10005984:	601a      	str	r2, [r3, #0]
        | CCU4_CC4_INS_LPF2M_Msk);
    HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
10005986:	687b      	ldr	r3, [r7, #4]
10005988:	69db      	ldr	r3, [r3, #28]
1000598a:	687a      	ldr	r2, [r7, #4]
1000598c:	69d2      	ldr	r2, [r2, #28]
1000598e:	6851      	ldr	r1, [r2, #4]
10005990:	4a62      	ldr	r2, [pc, #392]	; (10005b1c <PWMSP001_lConfigureSecondSlice+0x23c>)
10005992:	400a      	ands	r2, r1
10005994:	605a      	str	r2, [r3, #4]
    HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
10005996:	687b      	ldr	r3, [r7, #4]
10005998:	69db      	ldr	r3, [r3, #28]
1000599a:	687a      	ldr	r2, [r7, #4]
1000599c:	69d2      	ldr	r2, [r2, #28]
1000599e:	6811      	ldr	r1, [r2, #0]
        ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
            ((((uint32_t)HandlePtr->kTrapLevel  <<	\
100059a0:	687a      	ldr	r2, [r7, #4]
100059a2:	7812      	ldrb	r2, [r2, #0]
100059a4:	0610      	lsls	r0, r2, #24
  if (HandlePtr->kTrapEnable == (uint8_t)SET)
  {
    HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
        | CCU4_CC4_INS_LPF2M_Msk);
    HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
    HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
100059a6:	2280      	movs	r2, #128	; 0x80
100059a8:	0452      	lsls	r2, r2, #17
100059aa:	4002      	ands	r2, r0
100059ac:	430a      	orrs	r2, r1
100059ae:	601a      	str	r2, [r3, #0]
        ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
            ((((uint32_t)HandlePtr->kTrapLevel  <<	\
                CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
                    CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
    HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
100059b0:	687b      	ldr	r3, [r7, #4]
100059b2:	69db      	ldr	r3, [r3, #28]
100059b4:	687a      	ldr	r2, [r7, #4]
100059b6:	69d2      	ldr	r2, [r2, #28]
100059b8:	6852      	ldr	r2, [r2, #4]
100059ba:	2180      	movs	r1, #128	; 0x80
100059bc:	0289      	lsls	r1, r1, #10
100059be:	430a      	orrs	r2, r1
100059c0:	605a      	str	r2, [r3, #4]
  }/*End of if (HandlePtr->kTrapEnable == SET)*/

  HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
100059c2:	687b      	ldr	r3, [r7, #4]
100059c4:	69db      	ldr	r3, [r3, #28]
100059c6:	687a      	ldr	r2, [r7, #4]
100059c8:	69d2      	ldr	r2, [r2, #28]
100059ca:	6951      	ldr	r1, [r2, #20]
100059cc:	4a54      	ldr	r2, [pc, #336]	; (10005b20 <PWMSP001_lConfigureSecondSlice+0x240>)
100059ce:	400a      	ands	r2, r1
100059d0:	615a      	str	r2, [r3, #20]
      | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
      | CCU4_CC4_TC_DITHE_Msk);
  HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
100059d2:	687b      	ldr	r3, [r7, #4]
100059d4:	69db      	ldr	r3, [r3, #28]
100059d6:	6879      	ldr	r1, [r7, #4]
100059d8:	2236      	movs	r2, #54	; 0x36
100059da:	5c8a      	ldrb	r2, [r1, r2]
100059dc:	1c11      	adds	r1, r2, #0
    (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
100059de:	2201      	movs	r2, #1
100059e0:	4011      	ands	r1, r2
      (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
100059e2:	687a      	ldr	r2, [r7, #4]
100059e4:	7b12      	ldrb	r2, [r2, #12]
100059e6:	0050      	lsls	r0, r2, #1
100059e8:	2202      	movs	r2, #2
100059ea:	4002      	ands	r2, r0
	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
100059ec:	4311      	orrs	r1, r2
		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
100059ee:	6878      	ldr	r0, [r7, #4]
100059f0:	2234      	movs	r2, #52	; 0x34
100059f2:	5c82      	ldrb	r2, [r0, r2]
100059f4:	0290      	lsls	r0, r2, #10
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
100059f6:	2280      	movs	r2, #128	; 0x80
100059f8:	00d2      	lsls	r2, r2, #3
100059fa:	4002      	ands	r2, r0
      | CCU4_CC4_TC_DITHE_Msk);
  HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
    (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
      (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
100059fc:	4311      	orrs	r1, r2
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
100059fe:	6878      	ldr	r0, [r7, #4]
10005a00:	2235      	movs	r2, #53	; 0x35
10005a02:	5c82      	ldrb	r2, [r0, r2]
10005a04:	0210      	lsls	r0, r2, #8
                (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
10005a06:	22c0      	movs	r2, #192	; 0xc0
10005a08:	0092      	lsls	r2, r2, #2
10005a0a:	4002      	ands	r2, r0
    (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
      (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
10005a0c:	430a      	orrs	r2, r1
  }/*End of if (HandlePtr->kTrapEnable == SET)*/

  HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
      | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
      | CCU4_CC4_TC_DITHE_Msk);
  HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
10005a0e:	615a      	str	r2, [r3, #20]
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
                (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);

  /*<<<DD_PWMSP001_API_non1_5>>>*/
  HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITHE_Pos)\
10005a10:	687b      	ldr	r3, [r7, #4]
10005a12:	69db      	ldr	r3, [r3, #28]
10005a14:	687a      	ldr	r2, [r7, #4]
10005a16:	69d2      	ldr	r2, [r2, #28]
10005a18:	6951      	ldr	r1, [r2, #20]
10005a1a:	6878      	ldr	r0, [r7, #4]
10005a1c:	2221      	movs	r2, #33	; 0x21
10005a1e:	5c82      	ldrb	r2, [r0, r2]
10005a20:	0350      	lsls	r0, r2, #13
    &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
10005a22:	22c0      	movs	r2, #192	; 0xc0
10005a24:	01d2      	lsls	r2, r2, #7
10005a26:	4002      	ands	r2, r0
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
                (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);

  /*<<<DD_PWMSP001_API_non1_5>>>*/
  HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITHE_Pos)\
10005a28:	430a      	orrs	r2, r1
10005a2a:	615a      	str	r2, [r3, #20]
    &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
  WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
10005a2c:	687b      	ldr	r3, [r7, #4]
10005a2e:	69db      	ldr	r3, [r3, #28]
10005a30:	687a      	ldr	r2, [r7, #4]
10005a32:	7b52      	ldrb	r2, [r2, #13]
10005a34:	1c11      	adds	r1, r2, #0
10005a36:	220f      	movs	r2, #15
10005a38:	4011      	ands	r1, r2
10005a3a:	687a      	ldr	r2, [r7, #4]
10005a3c:	69d2      	ldr	r2, [r2, #28]
10005a3e:	6a12      	ldr	r2, [r2, #32]
10005a40:	200f      	movs	r0, #15
10005a42:	4382      	bics	r2, r0
10005a44:	430a      	orrs	r2, r1
10005a46:	621a      	str	r2, [r3, #32]
    (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);

  /*<<<DD_PWMSP001_API_non1_6>>>*/
  WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
10005a48:	687b      	ldr	r3, [r7, #4]
10005a4a:	69db      	ldr	r3, [r3, #28]
10005a4c:	687a      	ldr	r2, [r7, #4]
10005a4e:	7c92      	ldrb	r2, [r2, #18]
10005a50:	0551      	lsls	r1, r2, #21
10005a52:	2280      	movs	r2, #128	; 0x80
10005a54:	0392      	lsls	r2, r2, #14
10005a56:	4011      	ands	r1, r2
10005a58:	687a      	ldr	r2, [r7, #4]
10005a5a:	69d2      	ldr	r2, [r2, #28]
10005a5c:	6950      	ldr	r0, [r2, #20]
10005a5e:	4a31      	ldr	r2, [pc, #196]	; (10005b24 <PWMSP001_lConfigureSecondSlice+0x244>)
10005a60:	4002      	ands	r2, r0
10005a62:	430a      	orrs	r2, r1
10005a64:	615a      	str	r2, [r3, #20]
      (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);

  WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
10005a66:	687b      	ldr	r3, [r7, #4]
10005a68:	69db      	ldr	r3, [r3, #28]
10005a6a:	687a      	ldr	r2, [r7, #4]
10005a6c:	7cd2      	ldrb	r2, [r2, #19]
10005a6e:	0591      	lsls	r1, r2, #22
10005a70:	2280      	movs	r2, #128	; 0x80
10005a72:	03d2      	lsls	r2, r2, #15
10005a74:	4011      	ands	r1, r2
10005a76:	687a      	ldr	r2, [r7, #4]
10005a78:	69d2      	ldr	r2, [r2, #28]
10005a7a:	6950      	ldr	r0, [r2, #20]
10005a7c:	4a2a      	ldr	r2, [pc, #168]	; (10005b28 <PWMSP001_lConfigureSecondSlice+0x248>)
10005a7e:	4002      	ands	r2, r0
10005a80:	430a      	orrs	r2, r1
10005a82:	615a      	str	r2, [r3, #20]
      (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);

  WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
10005a84:	687b      	ldr	r3, [r7, #4]
10005a86:	69db      	ldr	r3, [r3, #28]
10005a88:	687a      	ldr	r2, [r7, #4]
10005a8a:	7c52      	ldrb	r2, [r2, #17]
10005a8c:	0451      	lsls	r1, r2, #17
10005a8e:	2280      	movs	r2, #128	; 0x80
10005a90:	0292      	lsls	r2, r2, #10
10005a92:	4011      	ands	r1, r2
10005a94:	687a      	ldr	r2, [r7, #4]
10005a96:	69d2      	ldr	r2, [r2, #28]
10005a98:	6950      	ldr	r0, [r2, #20]
10005a9a:	4a20      	ldr	r2, [pc, #128]	; (10005b1c <PWMSP001_lConfigureSecondSlice+0x23c>)
10005a9c:	4002      	ands	r2, r0
10005a9e:	430a      	orrs	r2, r1
10005aa0:	615a      	str	r2, [r3, #20]
	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
  
  WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
10005aa2:	687b      	ldr	r3, [r7, #4]
10005aa4:	69db      	ldr	r3, [r3, #28]
10005aa6:	6879      	ldr	r1, [r7, #4]
10005aa8:	2222      	movs	r2, #34	; 0x22
10005aaa:	5c8a      	ldrb	r2, [r1, r2]
10005aac:	1c11      	adds	r1, r2, #0
10005aae:	220f      	movs	r2, #15
10005ab0:	4011      	ands	r1, r2
10005ab2:	687a      	ldr	r2, [r7, #4]
10005ab4:	69d2      	ldr	r2, [r2, #28]
10005ab6:	6a52      	ldr	r2, [r2, #36]	; 0x24
10005ab8:	200f      	movs	r0, #15
10005aba:	4382      	bics	r2, r0
10005abc:	430a      	orrs	r2, r1
10005abe:	625a      	str	r2, [r3, #36]	; 0x24
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
10005ac0:	687b      	ldr	r3, [r7, #4]
10005ac2:	69db      	ldr	r3, [r3, #28]
10005ac4:	687a      	ldr	r2, [r7, #4]
10005ac6:	7c12      	ldrb	r2, [r2, #16]
10005ac8:	619a      	str	r2, [r3, #24]

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
10005aca:	687b      	ldr	r3, [r7, #4]
10005acc:	695b      	ldr	r3, [r3, #20]
10005ace:	687a      	ldr	r2, [r7, #4]
10005ad0:	6952      	ldr	r2, [r2, #20]
10005ad2:	6911      	ldr	r1, [r2, #16]
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
10005ad4:	6878      	ldr	r0, [r7, #4]
10005ad6:	2238      	movs	r2, #56	; 0x38
10005ad8:	5c82      	ldrb	r2, [r0, r2]
10005ada:	0092      	lsls	r2, r2, #2
  WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
10005adc:	2001      	movs	r0, #1
10005ade:	4090      	lsls	r0, r2
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
10005ae0:	687c      	ldr	r4, [r7, #4]
10005ae2:	2238      	movs	r2, #56	; 0x38
10005ae4:	5ca2      	ldrb	r2, [r4, r2]

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
10005ae6:	0092      	lsls	r2, r2, #2
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
10005ae8:	3201      	adds	r2, #1

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
10005aea:	2401      	movs	r4, #1
10005aec:	1c25      	adds	r5, r4, #0
10005aee:	4095      	lsls	r5, r2
10005af0:	1c2a      	adds	r2, r5, #0
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
10005af2:	4310      	orrs	r0, r2
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
10005af4:	687c      	ldr	r4, [r7, #4]
10005af6:	2238      	movs	r2, #56	; 0x38
10005af8:	5ca2      	ldrb	r2, [r4, r2]

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
10005afa:	0092      	lsls	r2, r2, #2
		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
10005afc:	3202      	adds	r2, #2

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
10005afe:	2401      	movs	r4, #1
10005b00:	1c25      	adds	r5, r4, #0
10005b02:	4095      	lsls	r5, r2
10005b04:	1c2a      	adds	r2, r5, #0
  WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
10005b06:	4302      	orrs	r2, r0
10005b08:	430a      	orrs	r2, r1
10005b0a:	611a      	str	r2, [r3, #16]
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
}
10005b0c:	46bd      	mov	sp, r7
10005b0e:	b002      	add	sp, #8
10005b10:	bdb0      	pop	{r4, r5, r7, pc}
10005b12:	46c0      	nop			; (mov r8, r8)
10005b14:	e7f3ffff 	.word	0xe7f3ffff
10005b18:	9ecfffff 	.word	0x9ecfffff
10005b1c:	fffdffff 	.word	0xfffdffff
10005b20:	ffff98f4 	.word	0xffff98f4
10005b24:	ffdfffff 	.word	0xffdfffff
10005b28:	ffbfffff 	.word	0xffbfffff

10005b2c <PWMSP001_EnableEvent>:
status_t PWMSP001_EnableEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10005b2c:	b590      	push	{r4, r7, lr}
10005b2e:	b085      	sub	sp, #20
10005b30:	af00      	add	r7, sp, #0
10005b32:	6078      	str	r0, [r7, #4]
10005b34:	1c0a      	adds	r2, r1, #0
10005b36:	1cfb      	adds	r3, r7, #3
10005b38:	701a      	strb	r2, [r3, #0]
  status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005b3a:	2301      	movs	r3, #1
10005b3c:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10005b3e:	687b      	ldr	r3, [r7, #4]
10005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005b42:	781b      	ldrb	r3, [r3, #0]
10005b44:	2b00      	cmp	r3, #0
10005b46:	d102      	bne.n	10005b4e <PWMSP001_EnableEvent+0x22>
  {
    Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005b48:	2301      	movs	r3, #1
10005b4a:	60fb      	str	r3, [r7, #12]
10005b4c:	e025      	b.n	10005b9a <PWMSP001_EnableEvent+0x6e>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005b4e:	687a      	ldr	r2, [r7, #4]
10005b50:	2320      	movs	r3, #32
10005b52:	5cd3      	ldrb	r3, [r2, r3]
10005b54:	2b01      	cmp	r3, #1
10005b56:	d10f      	bne.n	10005b78 <PWMSP001_EnableEvent+0x4c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
10005b58:	687b      	ldr	r3, [r7, #4]
10005b5a:	69da      	ldr	r2, [r3, #28]
10005b5c:	687b      	ldr	r3, [r7, #4]
10005b5e:	69d9      	ldr	r1, [r3, #28]
10005b60:	23a4      	movs	r3, #164	; 0xa4
10005b62:	58c9      	ldr	r1, [r1, r3]
10005b64:	1cfb      	adds	r3, r7, #3
10005b66:	781b      	ldrb	r3, [r3, #0]
10005b68:	2001      	movs	r0, #1
10005b6a:	1c04      	adds	r4, r0, #0
10005b6c:	409c      	lsls	r4, r3
10005b6e:	1c23      	adds	r3, r4, #0
10005b70:	4319      	orrs	r1, r3
10005b72:	23a4      	movs	r3, #164	; 0xa4
10005b74:	50d1      	str	r1, [r2, r3]
10005b76:	e00e      	b.n	10005b96 <PWMSP001_EnableEvent+0x6a>
    }
    else
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
10005b78:	687b      	ldr	r3, [r7, #4]
10005b7a:	699a      	ldr	r2, [r3, #24]
10005b7c:	687b      	ldr	r3, [r7, #4]
10005b7e:	6999      	ldr	r1, [r3, #24]
10005b80:	23a4      	movs	r3, #164	; 0xa4
10005b82:	58c9      	ldr	r1, [r1, r3]
10005b84:	1cfb      	adds	r3, r7, #3
10005b86:	781b      	ldrb	r3, [r3, #0]
10005b88:	2001      	movs	r0, #1
10005b8a:	1c04      	adds	r4, r0, #0
10005b8c:	409c      	lsls	r4, r3
10005b8e:	1c23      	adds	r3, r4, #0
10005b90:	4319      	orrs	r1, r3
10005b92:	23a4      	movs	r3, #164	; 0xa4
10005b94:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10005b96:	2300      	movs	r3, #0
10005b98:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10005b9a:	68fb      	ldr	r3, [r7, #12]
}
10005b9c:	1c18      	adds	r0, r3, #0
10005b9e:	46bd      	mov	sp, r7
10005ba0:	b005      	add	sp, #20
10005ba2:	bd90      	pop	{r4, r7, pc}

10005ba4 <PWMSP001_DisableEvent>:
status_t PWMSP001_DisableEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10005ba4:	b590      	push	{r4, r7, lr}
10005ba6:	b085      	sub	sp, #20
10005ba8:	af00      	add	r7, sp, #0
10005baa:	6078      	str	r0, [r7, #4]
10005bac:	1c0a      	adds	r2, r1, #0
10005bae:	1cfb      	adds	r3, r7, #3
10005bb0:	701a      	strb	r2, [r3, #0]
  status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005bb2:	2301      	movs	r3, #1
10005bb4:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10005bb6:	687b      	ldr	r3, [r7, #4]
10005bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005bba:	781b      	ldrb	r3, [r3, #0]
10005bbc:	2b00      	cmp	r3, #0
10005bbe:	d102      	bne.n	10005bc6 <PWMSP001_DisableEvent+0x22>
  {
    Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005bc0:	2301      	movs	r3, #1
10005bc2:	60fb      	str	r3, [r7, #12]
10005bc4:	e027      	b.n	10005c16 <PWMSP001_DisableEvent+0x72>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005bc6:	687a      	ldr	r2, [r7, #4]
10005bc8:	2320      	movs	r3, #32
10005bca:	5cd3      	ldrb	r3, [r2, r3]
10005bcc:	2b01      	cmp	r3, #1
10005bce:	d110      	bne.n	10005bf2 <PWMSP001_DisableEvent+0x4e>
    {
      CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
10005bd0:	687b      	ldr	r3, [r7, #4]
10005bd2:	69da      	ldr	r2, [r3, #28]
10005bd4:	687b      	ldr	r3, [r7, #4]
10005bd6:	69d9      	ldr	r1, [r3, #28]
10005bd8:	23a4      	movs	r3, #164	; 0xa4
10005bda:	58cb      	ldr	r3, [r1, r3]
10005bdc:	1cf9      	adds	r1, r7, #3
10005bde:	7809      	ldrb	r1, [r1, #0]
10005be0:	2001      	movs	r0, #1
10005be2:	1c04      	adds	r4, r0, #0
10005be4:	408c      	lsls	r4, r1
10005be6:	1c21      	adds	r1, r4, #0
10005be8:	43c9      	mvns	r1, r1
10005bea:	4019      	ands	r1, r3
10005bec:	23a4      	movs	r3, #164	; 0xa4
10005bee:	50d1      	str	r1, [r2, r3]
10005bf0:	e00f      	b.n	10005c12 <PWMSP001_DisableEvent+0x6e>
    }
    else
    {
      CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
10005bf2:	687b      	ldr	r3, [r7, #4]
10005bf4:	699a      	ldr	r2, [r3, #24]
10005bf6:	687b      	ldr	r3, [r7, #4]
10005bf8:	6999      	ldr	r1, [r3, #24]
10005bfa:	23a4      	movs	r3, #164	; 0xa4
10005bfc:	58cb      	ldr	r3, [r1, r3]
10005bfe:	1cf9      	adds	r1, r7, #3
10005c00:	7809      	ldrb	r1, [r1, #0]
10005c02:	2001      	movs	r0, #1
10005c04:	1c04      	adds	r4, r0, #0
10005c06:	408c      	lsls	r4, r1
10005c08:	1c21      	adds	r1, r4, #0
10005c0a:	43c9      	mvns	r1, r1
10005c0c:	4019      	ands	r1, r3
10005c0e:	23a4      	movs	r3, #164	; 0xa4
10005c10:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10005c12:	2300      	movs	r3, #0
10005c14:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10005c16:	68fb      	ldr	r3, [r7, #12]
}
10005c18:	1c18      	adds	r0, r3, #0
10005c1a:	46bd      	mov	sp, r7
10005c1c:	b005      	add	sp, #20
10005c1e:	bd90      	pop	{r4, r7, pc}

10005c20 <PWMSP001_ClearPendingEvent>:
status_t PWMSP001_ClearPendingEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10005c20:	b590      	push	{r4, r7, lr}
10005c22:	b085      	sub	sp, #20
10005c24:	af00      	add	r7, sp, #0
10005c26:	6078      	str	r0, [r7, #4]
10005c28:	1c0a      	adds	r2, r1, #0
10005c2a:	1cfb      	adds	r3, r7, #3
10005c2c:	701a      	strb	r2, [r3, #0]
  status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005c2e:	2301      	movs	r3, #1
10005c30:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10005c32:	687b      	ldr	r3, [r7, #4]
10005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005c36:	781b      	ldrb	r3, [r3, #0]
10005c38:	2b00      	cmp	r3, #0
10005c3a:	d102      	bne.n	10005c42 <PWMSP001_ClearPendingEvent+0x22>
  {
    Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005c3c:	2301      	movs	r3, #1
10005c3e:	60fb      	str	r3, [r7, #12]
10005c40:	e025      	b.n	10005c8e <PWMSP001_ClearPendingEvent+0x6e>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005c42:	687a      	ldr	r2, [r7, #4]
10005c44:	2320      	movs	r3, #32
10005c46:	5cd3      	ldrb	r3, [r2, r3]
10005c48:	2b01      	cmp	r3, #1
10005c4a:	d10f      	bne.n	10005c6c <PWMSP001_ClearPendingEvent+0x4c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
10005c4c:	687b      	ldr	r3, [r7, #4]
10005c4e:	69da      	ldr	r2, [r3, #28]
10005c50:	687b      	ldr	r3, [r7, #4]
10005c52:	69d9      	ldr	r1, [r3, #28]
10005c54:	23b0      	movs	r3, #176	; 0xb0
10005c56:	58c9      	ldr	r1, [r1, r3]
10005c58:	1cfb      	adds	r3, r7, #3
10005c5a:	781b      	ldrb	r3, [r3, #0]
10005c5c:	2001      	movs	r0, #1
10005c5e:	1c04      	adds	r4, r0, #0
10005c60:	409c      	lsls	r4, r3
10005c62:	1c23      	adds	r3, r4, #0
10005c64:	4319      	orrs	r1, r3
10005c66:	23b0      	movs	r3, #176	; 0xb0
10005c68:	50d1      	str	r1, [r2, r3]
10005c6a:	e00e      	b.n	10005c8a <PWMSP001_ClearPendingEvent+0x6a>
    }
    else
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
10005c6c:	687b      	ldr	r3, [r7, #4]
10005c6e:	699a      	ldr	r2, [r3, #24]
10005c70:	687b      	ldr	r3, [r7, #4]
10005c72:	6999      	ldr	r1, [r3, #24]
10005c74:	23b0      	movs	r3, #176	; 0xb0
10005c76:	58c9      	ldr	r1, [r1, r3]
10005c78:	1cfb      	adds	r3, r7, #3
10005c7a:	781b      	ldrb	r3, [r3, #0]
10005c7c:	2001      	movs	r0, #1
10005c7e:	1c04      	adds	r4, r0, #0
10005c80:	409c      	lsls	r4, r3
10005c82:	1c23      	adds	r3, r4, #0
10005c84:	4319      	orrs	r1, r3
10005c86:	23b0      	movs	r3, #176	; 0xb0
10005c88:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10005c8a:	2300      	movs	r3, #0
10005c8c:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10005c8e:	68fb      	ldr	r3, [r7, #12]
}
10005c90:	1c18      	adds	r0, r3, #0
10005c92:	46bd      	mov	sp, r7
10005c94:	b005      	add	sp, #20
10005c96:	bd90      	pop	{r4, r7, pc}

10005c98 <PWMSP001_SetPendingEvent>:
status_t PWMSP001_SetPendingEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10005c98:	b590      	push	{r4, r7, lr}
10005c9a:	b085      	sub	sp, #20
10005c9c:	af00      	add	r7, sp, #0
10005c9e:	6078      	str	r0, [r7, #4]
10005ca0:	1c0a      	adds	r2, r1, #0
10005ca2:	1cfb      	adds	r3, r7, #3
10005ca4:	701a      	strb	r2, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005ca6:	2301      	movs	r3, #1
10005ca8:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10005caa:	687b      	ldr	r3, [r7, #4]
10005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005cae:	781b      	ldrb	r3, [r3, #0]
10005cb0:	2b00      	cmp	r3, #0
10005cb2:	d102      	bne.n	10005cba <PWMSP001_SetPendingEvent+0x22>
  {
    Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005cb4:	2301      	movs	r3, #1
10005cb6:	60fb      	str	r3, [r7, #12]
10005cb8:	e025      	b.n	10005d06 <PWMSP001_SetPendingEvent+0x6e>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005cba:	687a      	ldr	r2, [r7, #4]
10005cbc:	2320      	movs	r3, #32
10005cbe:	5cd3      	ldrb	r3, [r2, r3]
10005cc0:	2b01      	cmp	r3, #1
10005cc2:	d10f      	bne.n	10005ce4 <PWMSP001_SetPendingEvent+0x4c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
10005cc4:	687b      	ldr	r3, [r7, #4]
10005cc6:	69da      	ldr	r2, [r3, #28]
10005cc8:	687b      	ldr	r3, [r7, #4]
10005cca:	69d9      	ldr	r1, [r3, #28]
10005ccc:	23ac      	movs	r3, #172	; 0xac
10005cce:	58c9      	ldr	r1, [r1, r3]
10005cd0:	1cfb      	adds	r3, r7, #3
10005cd2:	781b      	ldrb	r3, [r3, #0]
10005cd4:	2001      	movs	r0, #1
10005cd6:	1c04      	adds	r4, r0, #0
10005cd8:	409c      	lsls	r4, r3
10005cda:	1c23      	adds	r3, r4, #0
10005cdc:	4319      	orrs	r1, r3
10005cde:	23ac      	movs	r3, #172	; 0xac
10005ce0:	50d1      	str	r1, [r2, r3]
10005ce2:	e00e      	b.n	10005d02 <PWMSP001_SetPendingEvent+0x6a>
    }
    else
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
10005ce4:	687b      	ldr	r3, [r7, #4]
10005ce6:	699a      	ldr	r2, [r3, #24]
10005ce8:	687b      	ldr	r3, [r7, #4]
10005cea:	6999      	ldr	r1, [r3, #24]
10005cec:	23ac      	movs	r3, #172	; 0xac
10005cee:	58c9      	ldr	r1, [r1, r3]
10005cf0:	1cfb      	adds	r3, r7, #3
10005cf2:	781b      	ldrb	r3, [r3, #0]
10005cf4:	2001      	movs	r0, #1
10005cf6:	1c04      	adds	r4, r0, #0
10005cf8:	409c      	lsls	r4, r3
10005cfa:	1c23      	adds	r3, r4, #0
10005cfc:	4319      	orrs	r1, r3
10005cfe:	23ac      	movs	r3, #172	; 0xac
10005d00:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10005d02:	2300      	movs	r3, #0
10005d04:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10005d06:	68fb      	ldr	r3, [r7, #12]
}
10005d08:	1c18      	adds	r0, r3, #0
10005d0a:	46bd      	mov	sp, r7
10005d0c:	b005      	add	sp, #20
10005d0e:	bd90      	pop	{r4, r7, pc}

10005d10 <PWMSP001_GetPendingEvent>:
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event,
    uint8_t*EvtStatus
)
{
10005d10:	b580      	push	{r7, lr}
10005d12:	b086      	sub	sp, #24
10005d14:	af00      	add	r7, sp, #0
10005d16:	60f8      	str	r0, [r7, #12]
10005d18:	607a      	str	r2, [r7, #4]
10005d1a:	1c3b      	adds	r3, r7, #0
10005d1c:	330b      	adds	r3, #11
10005d1e:	1c0a      	adds	r2, r1, #0
10005d20:	701a      	strb	r2, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005d22:	2301      	movs	r3, #1
10005d24:	617b      	str	r3, [r7, #20]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10005d26:	68fb      	ldr	r3, [r7, #12]
10005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005d2a:	781b      	ldrb	r3, [r3, #0]
10005d2c:	2b00      	cmp	r3, #0
10005d2e:	d102      	bne.n	10005d36 <PWMSP001_GetPendingEvent+0x26>
  {
    Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005d30:	2301      	movs	r3, #1
10005d32:	617b      	str	r3, [r7, #20]
10005d34:	e03d      	b.n	10005db2 <PWMSP001_GetPendingEvent+0xa2>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005d36:	68fa      	ldr	r2, [r7, #12]
10005d38:	2320      	movs	r3, #32
10005d3a:	5cd3      	ldrb	r3, [r2, r3]
10005d3c:	2b01      	cmp	r3, #1
10005d3e:	d11b      	bne.n	10005d78 <PWMSP001_GetPendingEvent+0x68>
    {

      if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event))
10005d40:	68fb      	ldr	r3, [r7, #12]
10005d42:	69da      	ldr	r2, [r3, #28]
10005d44:	23a0      	movs	r3, #160	; 0xa0
10005d46:	58d3      	ldr	r3, [r2, r3]
10005d48:	1c3a      	adds	r2, r7, #0
10005d4a:	320b      	adds	r2, #11
10005d4c:	7812      	ldrb	r2, [r2, #0]
10005d4e:	2101      	movs	r1, #1
10005d50:	1c08      	adds	r0, r1, #0
10005d52:	4090      	lsls	r0, r2
10005d54:	1c02      	adds	r2, r0, #0
10005d56:	401a      	ands	r2, r3
10005d58:	1c3b      	adds	r3, r7, #0
10005d5a:	330b      	adds	r3, #11
10005d5c:	781b      	ldrb	r3, [r3, #0]
10005d5e:	1c11      	adds	r1, r2, #0
10005d60:	40d9      	lsrs	r1, r3
10005d62:	1c0b      	adds	r3, r1, #0
10005d64:	2b00      	cmp	r3, #0
10005d66:	d003      	beq.n	10005d70 <PWMSP001_GetPendingEvent+0x60>
	  {
	      *EvtStatus = (uint8_t)SET;
10005d68:	687b      	ldr	r3, [r7, #4]
10005d6a:	2201      	movs	r2, #1
10005d6c:	701a      	strb	r2, [r3, #0]
10005d6e:	e01e      	b.n	10005dae <PWMSP001_GetPendingEvent+0x9e>
	  }
	  else
	  {
	      *EvtStatus = (uint8_t)RESET;
10005d70:	687b      	ldr	r3, [r7, #4]
10005d72:	2200      	movs	r2, #0
10005d74:	701a      	strb	r2, [r3, #0]
10005d76:	e01a      	b.n	10005dae <PWMSP001_GetPendingEvent+0x9e>
	  }
    }
    else
    {
      if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
10005d78:	68fb      	ldr	r3, [r7, #12]
10005d7a:	699a      	ldr	r2, [r3, #24]
10005d7c:	23a0      	movs	r3, #160	; 0xa0
10005d7e:	58d3      	ldr	r3, [r2, r3]
10005d80:	1c3a      	adds	r2, r7, #0
10005d82:	320b      	adds	r2, #11
10005d84:	7812      	ldrb	r2, [r2, #0]
10005d86:	2101      	movs	r1, #1
10005d88:	1c08      	adds	r0, r1, #0
10005d8a:	4090      	lsls	r0, r2
10005d8c:	1c02      	adds	r2, r0, #0
10005d8e:	401a      	ands	r2, r3
10005d90:	1c3b      	adds	r3, r7, #0
10005d92:	330b      	adds	r3, #11
10005d94:	781b      	ldrb	r3, [r3, #0]
10005d96:	1c11      	adds	r1, r2, #0
10005d98:	40d9      	lsrs	r1, r3
10005d9a:	1c0b      	adds	r3, r1, #0
10005d9c:	2b00      	cmp	r3, #0
10005d9e:	d003      	beq.n	10005da8 <PWMSP001_GetPendingEvent+0x98>
      {
        *EvtStatus = (uint8_t)SET;
10005da0:	687b      	ldr	r3, [r7, #4]
10005da2:	2201      	movs	r2, #1
10005da4:	701a      	strb	r2, [r3, #0]
10005da6:	e002      	b.n	10005dae <PWMSP001_GetPendingEvent+0x9e>
      }
      else
      {
        *EvtStatus = (uint8_t)RESET;
10005da8:	687b      	ldr	r3, [r7, #4]
10005daa:	2200      	movs	r2, #0
10005dac:	701a      	strb	r2, [r3, #0]
      }
      /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event)\
	   ? (uint8_t)SET : (uint8_t)RESET;	*/
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10005dae:	2300      	movs	r3, #0
10005db0:	617b      	str	r3, [r7, #20]
  }
  return (Status);
10005db2:	697b      	ldr	r3, [r7, #20]
}
10005db4:	1c18      	adds	r0, r3, #0
10005db6:	46bd      	mov	sp, r7
10005db8:	b006      	add	sp, #24
10005dba:	bd80      	pop	{r7, pc}

10005dbc <IO004_Init>:
/** @ingroup IO004_Func
 * @{
 */

void IO004_Init(void)
{
10005dbc:	b580      	push	{r7, lr}
10005dbe:	af00      	add	r7, sp, #0
   /* <<<DD_IO004_API_1>>> */

	   

  /* Configuration of 1 Port 2 based on User configuration */
  IO004_Handle0.PortRegs->OMR = 0U<< 2;
10005dc0:	4b0a      	ldr	r3, [pc, #40]	; (10005dec <IO004_Init+0x30>)
10005dc2:	685b      	ldr	r3, [r3, #4]
10005dc4:	2200      	movs	r2, #0
10005dc6:	605a      	str	r2, [r3, #4]
  
  IO004_Handle0.PortRegs->IOCR0 |= (0U << 19);   
10005dc8:	4b08      	ldr	r3, [pc, #32]	; (10005dec <IO004_Init+0x30>)
10005dca:	685b      	ldr	r3, [r3, #4]
10005dcc:	4a07      	ldr	r2, [pc, #28]	; (10005dec <IO004_Init+0x30>)
10005dce:	6852      	ldr	r2, [r2, #4]
10005dd0:	6912      	ldr	r2, [r2, #16]
10005dd2:	611a      	str	r2, [r3, #16]

  /* Configuration of 1 Port 3 based on User configuration */
  IO004_Handle1.PortRegs->OMR = 0U<< 3;
10005dd4:	4b06      	ldr	r3, [pc, #24]	; (10005df0 <IO004_Init+0x34>)
10005dd6:	685b      	ldr	r3, [r3, #4]
10005dd8:	2200      	movs	r2, #0
10005dda:	605a      	str	r2, [r3, #4]
  
  IO004_Handle1.PortRegs->IOCR0 |= (0U << 27);
10005ddc:	4b04      	ldr	r3, [pc, #16]	; (10005df0 <IO004_Init+0x34>)
10005dde:	685b      	ldr	r3, [r3, #4]
10005de0:	4a03      	ldr	r2, [pc, #12]	; (10005df0 <IO004_Init+0x34>)
10005de2:	6852      	ldr	r2, [r2, #4]
10005de4:	6912      	ldr	r2, [r2, #16]
10005de6:	611a      	str	r2, [r3, #16]
}
10005de8:	46bd      	mov	sp, r7
10005dea:	bd80      	pop	{r7, pc}
10005dec:	10009114 	.word	0x10009114
10005df0:	1000911c 	.word	0x1000911c

10005df4 <IO004_DisableOutputDriver>:

void IO004_DisableOutputDriver(const IO004_HandleType* Handle,IO004_InputModeType Mode)
{
10005df4:	b590      	push	{r4, r7, lr}
10005df6:	b085      	sub	sp, #20
10005df8:	af00      	add	r7, sp, #0
10005dfa:	6078      	str	r0, [r7, #4]
10005dfc:	1c0a      	adds	r2, r1, #0
10005dfe:	1cfb      	adds	r3, r7, #3
10005e00:	701a      	strb	r2, [r3, #0]
  uint8_t Pin = Handle->PortPin;
10005e02:	1c3b      	adds	r3, r7, #0
10005e04:	330f      	adds	r3, #15
10005e06:	687a      	ldr	r2, [r7, #4]
10005e08:	7852      	ldrb	r2, [r2, #1]
10005e0a:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10005e0c:	1c3b      	adds	r3, r7, #0
10005e0e:	330f      	adds	r3, #15
10005e10:	781b      	ldrb	r3, [r3, #0]
10005e12:	2b03      	cmp	r3, #3
10005e14:	d824      	bhi.n	10005e60 <IO004_DisableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
10005e16:	687b      	ldr	r3, [r7, #4]
10005e18:	685b      	ldr	r3, [r3, #4]
10005e1a:	687a      	ldr	r2, [r7, #4]
10005e1c:	6852      	ldr	r2, [r2, #4]
10005e1e:	6912      	ldr	r2, [r2, #16]
10005e20:	1c39      	adds	r1, r7, #0
10005e22:	310f      	adds	r1, #15
10005e24:	7809      	ldrb	r1, [r1, #0]
10005e26:	00c9      	lsls	r1, r1, #3
10005e28:	3103      	adds	r1, #3
10005e2a:	201f      	movs	r0, #31
10005e2c:	1c04      	adds	r4, r0, #0
10005e2e:	408c      	lsls	r4, r1
10005e30:	1c21      	adds	r1, r4, #0
10005e32:	43c9      	mvns	r1, r1
10005e34:	400a      	ands	r2, r1
10005e36:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |= (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10005e38:	687b      	ldr	r3, [r7, #4]
10005e3a:	685b      	ldr	r3, [r3, #4]
10005e3c:	687a      	ldr	r2, [r7, #4]
10005e3e:	6852      	ldr	r2, [r2, #4]
10005e40:	6911      	ldr	r1, [r2, #16]
10005e42:	1cfa      	adds	r2, r7, #3
10005e44:	7810      	ldrb	r0, [r2, #0]
10005e46:	221f      	movs	r2, #31
10005e48:	4010      	ands	r0, r2
10005e4a:	1c3a      	adds	r2, r7, #0
10005e4c:	320f      	adds	r2, #15
10005e4e:	7812      	ldrb	r2, [r2, #0]
10005e50:	00d2      	lsls	r2, r2, #3
10005e52:	3203      	adds	r2, #3
10005e54:	1c04      	adds	r4, r0, #0
10005e56:	4094      	lsls	r4, r2
10005e58:	1c22      	adds	r2, r4, #0
10005e5a:	430a      	orrs	r2, r1
10005e5c:	611a      	str	r2, [r3, #16]
10005e5e:	e0a0      	b.n	10005fa2 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10005e60:	1c3b      	adds	r3, r7, #0
10005e62:	330f      	adds	r3, #15
10005e64:	781b      	ldrb	r3, [r3, #0]
10005e66:	2b03      	cmp	r3, #3
10005e68:	d930      	bls.n	10005ecc <IO004_DisableOutputDriver+0xd8>
10005e6a:	1c3b      	adds	r3, r7, #0
10005e6c:	330f      	adds	r3, #15
10005e6e:	781b      	ldrb	r3, [r3, #0]
10005e70:	2b07      	cmp	r3, #7
10005e72:	d82b      	bhi.n	10005ecc <IO004_DisableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
10005e74:	1c3b      	adds	r3, r7, #0
10005e76:	330f      	adds	r3, #15
10005e78:	1c3a      	adds	r2, r7, #0
10005e7a:	320f      	adds	r2, #15
10005e7c:	7812      	ldrb	r2, [r2, #0]
10005e7e:	3a04      	subs	r2, #4
10005e80:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
10005e82:	687b      	ldr	r3, [r7, #4]
10005e84:	685b      	ldr	r3, [r3, #4]
10005e86:	687a      	ldr	r2, [r7, #4]
10005e88:	6852      	ldr	r2, [r2, #4]
10005e8a:	6952      	ldr	r2, [r2, #20]
10005e8c:	1c39      	adds	r1, r7, #0
10005e8e:	310f      	adds	r1, #15
10005e90:	7809      	ldrb	r1, [r1, #0]
10005e92:	00c9      	lsls	r1, r1, #3
10005e94:	3103      	adds	r1, #3
10005e96:	201f      	movs	r0, #31
10005e98:	1c04      	adds	r4, r0, #0
10005e9a:	408c      	lsls	r4, r1
10005e9c:	1c21      	adds	r1, r4, #0
10005e9e:	43c9      	mvns	r1, r1
10005ea0:	400a      	ands	r2, r1
10005ea2:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10005ea4:	687b      	ldr	r3, [r7, #4]
10005ea6:	685b      	ldr	r3, [r3, #4]
10005ea8:	687a      	ldr	r2, [r7, #4]
10005eaa:	6852      	ldr	r2, [r2, #4]
10005eac:	6951      	ldr	r1, [r2, #20]
10005eae:	1cfa      	adds	r2, r7, #3
10005eb0:	7810      	ldrb	r0, [r2, #0]
10005eb2:	221f      	movs	r2, #31
10005eb4:	4010      	ands	r0, r2
10005eb6:	1c3a      	adds	r2, r7, #0
10005eb8:	320f      	adds	r2, #15
10005eba:	7812      	ldrb	r2, [r2, #0]
10005ebc:	00d2      	lsls	r2, r2, #3
10005ebe:	3203      	adds	r2, #3
10005ec0:	1c04      	adds	r4, r0, #0
10005ec2:	4094      	lsls	r4, r2
10005ec4:	1c22      	adds	r2, r4, #0
10005ec6:	430a      	orrs	r2, r1
10005ec8:	615a      	str	r2, [r3, #20]
10005eca:	e06a      	b.n	10005fa2 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10005ecc:	1c3b      	adds	r3, r7, #0
10005ece:	330f      	adds	r3, #15
10005ed0:	781b      	ldrb	r3, [r3, #0]
10005ed2:	2b07      	cmp	r3, #7
10005ed4:	d930      	bls.n	10005f38 <IO004_DisableOutputDriver+0x144>
10005ed6:	1c3b      	adds	r3, r7, #0
10005ed8:	330f      	adds	r3, #15
10005eda:	781b      	ldrb	r3, [r3, #0]
10005edc:	2b0b      	cmp	r3, #11
10005ede:	d82b      	bhi.n	10005f38 <IO004_DisableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10005ee0:	1c3b      	adds	r3, r7, #0
10005ee2:	330f      	adds	r3, #15
10005ee4:	1c3a      	adds	r2, r7, #0
10005ee6:	320f      	adds	r2, #15
10005ee8:	7812      	ldrb	r2, [r2, #0]
10005eea:	3a08      	subs	r2, #8
10005eec:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10005eee:	687b      	ldr	r3, [r7, #4]
10005ef0:	685b      	ldr	r3, [r3, #4]
10005ef2:	687a      	ldr	r2, [r7, #4]
10005ef4:	6852      	ldr	r2, [r2, #4]
10005ef6:	6992      	ldr	r2, [r2, #24]
10005ef8:	1c39      	adds	r1, r7, #0
10005efa:	310f      	adds	r1, #15
10005efc:	7809      	ldrb	r1, [r1, #0]
10005efe:	00c9      	lsls	r1, r1, #3
10005f00:	3103      	adds	r1, #3
10005f02:	201f      	movs	r0, #31
10005f04:	1c04      	adds	r4, r0, #0
10005f06:	408c      	lsls	r4, r1
10005f08:	1c21      	adds	r1, r4, #0
10005f0a:	43c9      	mvns	r1, r1
10005f0c:	400a      	ands	r2, r1
10005f0e:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10005f10:	687b      	ldr	r3, [r7, #4]
10005f12:	685b      	ldr	r3, [r3, #4]
10005f14:	687a      	ldr	r2, [r7, #4]
10005f16:	6852      	ldr	r2, [r2, #4]
10005f18:	6991      	ldr	r1, [r2, #24]
10005f1a:	1cfa      	adds	r2, r7, #3
10005f1c:	7810      	ldrb	r0, [r2, #0]
10005f1e:	221f      	movs	r2, #31
10005f20:	4010      	ands	r0, r2
10005f22:	1c3a      	adds	r2, r7, #0
10005f24:	320f      	adds	r2, #15
10005f26:	7812      	ldrb	r2, [r2, #0]
10005f28:	00d2      	lsls	r2, r2, #3
10005f2a:	3203      	adds	r2, #3
10005f2c:	1c04      	adds	r4, r0, #0
10005f2e:	4094      	lsls	r4, r2
10005f30:	1c22      	adds	r2, r4, #0
10005f32:	430a      	orrs	r2, r1
10005f34:	619a      	str	r2, [r3, #24]
10005f36:	e034      	b.n	10005fa2 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
10005f38:	1c3b      	adds	r3, r7, #0
10005f3a:	330f      	adds	r3, #15
10005f3c:	781b      	ldrb	r3, [r3, #0]
10005f3e:	2b0b      	cmp	r3, #11
10005f40:	d92f      	bls.n	10005fa2 <IO004_DisableOutputDriver+0x1ae>
10005f42:	1c3b      	adds	r3, r7, #0
10005f44:	330f      	adds	r3, #15
10005f46:	781b      	ldrb	r3, [r3, #0]
10005f48:	2b0f      	cmp	r3, #15
10005f4a:	d82a      	bhi.n	10005fa2 <IO004_DisableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10005f4c:	1c3b      	adds	r3, r7, #0
10005f4e:	330f      	adds	r3, #15
10005f50:	1c3a      	adds	r2, r7, #0
10005f52:	320f      	adds	r2, #15
10005f54:	7812      	ldrb	r2, [r2, #0]
10005f56:	3a0c      	subs	r2, #12
10005f58:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
10005f5a:	687b      	ldr	r3, [r7, #4]
10005f5c:	685b      	ldr	r3, [r3, #4]
10005f5e:	687a      	ldr	r2, [r7, #4]
10005f60:	6852      	ldr	r2, [r2, #4]
10005f62:	69d2      	ldr	r2, [r2, #28]
10005f64:	1c39      	adds	r1, r7, #0
10005f66:	310f      	adds	r1, #15
10005f68:	7809      	ldrb	r1, [r1, #0]
10005f6a:	00c9      	lsls	r1, r1, #3
10005f6c:	3103      	adds	r1, #3
10005f6e:	201f      	movs	r0, #31
10005f70:	1c04      	adds	r4, r0, #0
10005f72:	408c      	lsls	r4, r1
10005f74:	1c21      	adds	r1, r4, #0
10005f76:	43c9      	mvns	r1, r1
10005f78:	400a      	ands	r2, r1
10005f7a:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10005f7c:	687b      	ldr	r3, [r7, #4]
10005f7e:	685b      	ldr	r3, [r3, #4]
10005f80:	687a      	ldr	r2, [r7, #4]
10005f82:	6852      	ldr	r2, [r2, #4]
10005f84:	69d1      	ldr	r1, [r2, #28]
10005f86:	1cfa      	adds	r2, r7, #3
10005f88:	7810      	ldrb	r0, [r2, #0]
10005f8a:	221f      	movs	r2, #31
10005f8c:	4010      	ands	r0, r2
10005f8e:	1c3a      	adds	r2, r7, #0
10005f90:	320f      	adds	r2, #15
10005f92:	7812      	ldrb	r2, [r2, #0]
10005f94:	00d2      	lsls	r2, r2, #3
10005f96:	3203      	adds	r2, #3
10005f98:	1c04      	adds	r4, r0, #0
10005f9a:	4094      	lsls	r4, r2
10005f9c:	1c22      	adds	r2, r4, #0
10005f9e:	430a      	orrs	r2, r1
10005fa0:	61da      	str	r2, [r3, #28]
  else
  {
	  /*Not supposed to be here */
  }

}
10005fa2:	46bd      	mov	sp, r7
10005fa4:	b005      	add	sp, #20
10005fa6:	bd90      	pop	{r4, r7, pc}

10005fa8 <IO004_EnableOutputDriver>:

void IO004_EnableOutputDriver(const IO004_HandleType* Handle,IO004_OutputModeType Mode)
{
10005fa8:	b590      	push	{r4, r7, lr}
10005faa:	b085      	sub	sp, #20
10005fac:	af00      	add	r7, sp, #0
10005fae:	6078      	str	r0, [r7, #4]
10005fb0:	1c0a      	adds	r2, r1, #0
10005fb2:	1cfb      	adds	r3, r7, #3
10005fb4:	701a      	strb	r2, [r3, #0]

  uint8_t Pin = Handle->PortPin;
10005fb6:	1c3b      	adds	r3, r7, #0
10005fb8:	330f      	adds	r3, #15
10005fba:	687a      	ldr	r2, [r7, #4]
10005fbc:	7852      	ldrb	r2, [r2, #1]
10005fbe:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10005fc0:	1c3b      	adds	r3, r7, #0
10005fc2:	330f      	adds	r3, #15
10005fc4:	781b      	ldrb	r3, [r3, #0]
10005fc6:	2b03      	cmp	r3, #3
10005fc8:	d824      	bhi.n	10006014 <IO004_EnableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
10005fca:	687b      	ldr	r3, [r7, #4]
10005fcc:	685b      	ldr	r3, [r3, #4]
10005fce:	687a      	ldr	r2, [r7, #4]
10005fd0:	6852      	ldr	r2, [r2, #4]
10005fd2:	6912      	ldr	r2, [r2, #16]
10005fd4:	1c39      	adds	r1, r7, #0
10005fd6:	310f      	adds	r1, #15
10005fd8:	7809      	ldrb	r1, [r1, #0]
10005fda:	00c9      	lsls	r1, r1, #3
10005fdc:	3103      	adds	r1, #3
10005fde:	201f      	movs	r0, #31
10005fe0:	1c04      	adds	r4, r0, #0
10005fe2:	408c      	lsls	r4, r1
10005fe4:	1c21      	adds	r1, r4, #0
10005fe6:	43c9      	mvns	r1, r1
10005fe8:	400a      	ands	r2, r1
10005fea:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10005fec:	687b      	ldr	r3, [r7, #4]
10005fee:	685b      	ldr	r3, [r3, #4]
10005ff0:	687a      	ldr	r2, [r7, #4]
10005ff2:	6852      	ldr	r2, [r2, #4]
10005ff4:	6911      	ldr	r1, [r2, #16]
10005ff6:	1cfa      	adds	r2, r7, #3
10005ff8:	7810      	ldrb	r0, [r2, #0]
10005ffa:	221f      	movs	r2, #31
10005ffc:	4010      	ands	r0, r2
10005ffe:	1c3a      	adds	r2, r7, #0
10006000:	320f      	adds	r2, #15
10006002:	7812      	ldrb	r2, [r2, #0]
10006004:	00d2      	lsls	r2, r2, #3
10006006:	3203      	adds	r2, #3
10006008:	1c04      	adds	r4, r0, #0
1000600a:	4094      	lsls	r4, r2
1000600c:	1c22      	adds	r2, r4, #0
1000600e:	430a      	orrs	r2, r1
10006010:	611a      	str	r2, [r3, #16]
10006012:	e0a0      	b.n	10006156 <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10006014:	1c3b      	adds	r3, r7, #0
10006016:	330f      	adds	r3, #15
10006018:	781b      	ldrb	r3, [r3, #0]
1000601a:	2b03      	cmp	r3, #3
1000601c:	d930      	bls.n	10006080 <IO004_EnableOutputDriver+0xd8>
1000601e:	1c3b      	adds	r3, r7, #0
10006020:	330f      	adds	r3, #15
10006022:	781b      	ldrb	r3, [r3, #0]
10006024:	2b07      	cmp	r3, #7
10006026:	d82b      	bhi.n	10006080 <IO004_EnableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
10006028:	1c3b      	adds	r3, r7, #0
1000602a:	330f      	adds	r3, #15
1000602c:	1c3a      	adds	r2, r7, #0
1000602e:	320f      	adds	r2, #15
10006030:	7812      	ldrb	r2, [r2, #0]
10006032:	3a04      	subs	r2, #4
10006034:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
10006036:	687b      	ldr	r3, [r7, #4]
10006038:	685b      	ldr	r3, [r3, #4]
1000603a:	687a      	ldr	r2, [r7, #4]
1000603c:	6852      	ldr	r2, [r2, #4]
1000603e:	6952      	ldr	r2, [r2, #20]
10006040:	1c39      	adds	r1, r7, #0
10006042:	310f      	adds	r1, #15
10006044:	7809      	ldrb	r1, [r1, #0]
10006046:	00c9      	lsls	r1, r1, #3
10006048:	3103      	adds	r1, #3
1000604a:	201f      	movs	r0, #31
1000604c:	1c04      	adds	r4, r0, #0
1000604e:	408c      	lsls	r4, r1
10006050:	1c21      	adds	r1, r4, #0
10006052:	43c9      	mvns	r1, r1
10006054:	400a      	ands	r2, r1
10006056:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10006058:	687b      	ldr	r3, [r7, #4]
1000605a:	685b      	ldr	r3, [r3, #4]
1000605c:	687a      	ldr	r2, [r7, #4]
1000605e:	6852      	ldr	r2, [r2, #4]
10006060:	6951      	ldr	r1, [r2, #20]
10006062:	1cfa      	adds	r2, r7, #3
10006064:	7810      	ldrb	r0, [r2, #0]
10006066:	221f      	movs	r2, #31
10006068:	4010      	ands	r0, r2
1000606a:	1c3a      	adds	r2, r7, #0
1000606c:	320f      	adds	r2, #15
1000606e:	7812      	ldrb	r2, [r2, #0]
10006070:	00d2      	lsls	r2, r2, #3
10006072:	3203      	adds	r2, #3
10006074:	1c04      	adds	r4, r0, #0
10006076:	4094      	lsls	r4, r2
10006078:	1c22      	adds	r2, r4, #0
1000607a:	430a      	orrs	r2, r1
1000607c:	615a      	str	r2, [r3, #20]
1000607e:	e06a      	b.n	10006156 <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10006080:	1c3b      	adds	r3, r7, #0
10006082:	330f      	adds	r3, #15
10006084:	781b      	ldrb	r3, [r3, #0]
10006086:	2b07      	cmp	r3, #7
10006088:	d930      	bls.n	100060ec <IO004_EnableOutputDriver+0x144>
1000608a:	1c3b      	adds	r3, r7, #0
1000608c:	330f      	adds	r3, #15
1000608e:	781b      	ldrb	r3, [r3, #0]
10006090:	2b0b      	cmp	r3, #11
10006092:	d82b      	bhi.n	100060ec <IO004_EnableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10006094:	1c3b      	adds	r3, r7, #0
10006096:	330f      	adds	r3, #15
10006098:	1c3a      	adds	r2, r7, #0
1000609a:	320f      	adds	r2, #15
1000609c:	7812      	ldrb	r2, [r2, #0]
1000609e:	3a08      	subs	r2, #8
100060a0:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
100060a2:	687b      	ldr	r3, [r7, #4]
100060a4:	685b      	ldr	r3, [r3, #4]
100060a6:	687a      	ldr	r2, [r7, #4]
100060a8:	6852      	ldr	r2, [r2, #4]
100060aa:	6992      	ldr	r2, [r2, #24]
100060ac:	1c39      	adds	r1, r7, #0
100060ae:	310f      	adds	r1, #15
100060b0:	7809      	ldrb	r1, [r1, #0]
100060b2:	00c9      	lsls	r1, r1, #3
100060b4:	3103      	adds	r1, #3
100060b6:	201f      	movs	r0, #31
100060b8:	1c04      	adds	r4, r0, #0
100060ba:	408c      	lsls	r4, r1
100060bc:	1c21      	adds	r1, r4, #0
100060be:	43c9      	mvns	r1, r1
100060c0:	400a      	ands	r2, r1
100060c2:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100060c4:	687b      	ldr	r3, [r7, #4]
100060c6:	685b      	ldr	r3, [r3, #4]
100060c8:	687a      	ldr	r2, [r7, #4]
100060ca:	6852      	ldr	r2, [r2, #4]
100060cc:	6991      	ldr	r1, [r2, #24]
100060ce:	1cfa      	adds	r2, r7, #3
100060d0:	7810      	ldrb	r0, [r2, #0]
100060d2:	221f      	movs	r2, #31
100060d4:	4010      	ands	r0, r2
100060d6:	1c3a      	adds	r2, r7, #0
100060d8:	320f      	adds	r2, #15
100060da:	7812      	ldrb	r2, [r2, #0]
100060dc:	00d2      	lsls	r2, r2, #3
100060de:	3203      	adds	r2, #3
100060e0:	1c04      	adds	r4, r0, #0
100060e2:	4094      	lsls	r4, r2
100060e4:	1c22      	adds	r2, r4, #0
100060e6:	430a      	orrs	r2, r1
100060e8:	619a      	str	r2, [r3, #24]
100060ea:	e034      	b.n	10006156 <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
100060ec:	1c3b      	adds	r3, r7, #0
100060ee:	330f      	adds	r3, #15
100060f0:	781b      	ldrb	r3, [r3, #0]
100060f2:	2b0b      	cmp	r3, #11
100060f4:	d92f      	bls.n	10006156 <IO004_EnableOutputDriver+0x1ae>
100060f6:	1c3b      	adds	r3, r7, #0
100060f8:	330f      	adds	r3, #15
100060fa:	781b      	ldrb	r3, [r3, #0]
100060fc:	2b0f      	cmp	r3, #15
100060fe:	d82a      	bhi.n	10006156 <IO004_EnableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10006100:	1c3b      	adds	r3, r7, #0
10006102:	330f      	adds	r3, #15
10006104:	1c3a      	adds	r2, r7, #0
10006106:	320f      	adds	r2, #15
10006108:	7812      	ldrb	r2, [r2, #0]
1000610a:	3a0c      	subs	r2, #12
1000610c:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
1000610e:	687b      	ldr	r3, [r7, #4]
10006110:	685b      	ldr	r3, [r3, #4]
10006112:	687a      	ldr	r2, [r7, #4]
10006114:	6852      	ldr	r2, [r2, #4]
10006116:	69d2      	ldr	r2, [r2, #28]
10006118:	1c39      	adds	r1, r7, #0
1000611a:	310f      	adds	r1, #15
1000611c:	7809      	ldrb	r1, [r1, #0]
1000611e:	00c9      	lsls	r1, r1, #3
10006120:	3103      	adds	r1, #3
10006122:	201f      	movs	r0, #31
10006124:	1c04      	adds	r4, r0, #0
10006126:	408c      	lsls	r4, r1
10006128:	1c21      	adds	r1, r4, #0
1000612a:	43c9      	mvns	r1, r1
1000612c:	400a      	ands	r2, r1
1000612e:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10006130:	687b      	ldr	r3, [r7, #4]
10006132:	685b      	ldr	r3, [r3, #4]
10006134:	687a      	ldr	r2, [r7, #4]
10006136:	6852      	ldr	r2, [r2, #4]
10006138:	69d1      	ldr	r1, [r2, #28]
1000613a:	1cfa      	adds	r2, r7, #3
1000613c:	7810      	ldrb	r0, [r2, #0]
1000613e:	221f      	movs	r2, #31
10006140:	4010      	ands	r0, r2
10006142:	1c3a      	adds	r2, r7, #0
10006144:	320f      	adds	r2, #15
10006146:	7812      	ldrb	r2, [r2, #0]
10006148:	00d2      	lsls	r2, r2, #3
1000614a:	3203      	adds	r2, #3
1000614c:	1c04      	adds	r4, r0, #0
1000614e:	4094      	lsls	r4, r2
10006150:	1c22      	adds	r2, r4, #0
10006152:	430a      	orrs	r2, r1
10006154:	61da      	str	r2, [r3, #28]
  }
  else
  {
	  /*Not supposed to be here */
  }
}
10006156:	46bd      	mov	sp, r7
10006158:	b005      	add	sp, #20
1000615a:	bd90      	pop	{r4, r7, pc}

1000615c <DAVE_Init>:
// @Parameters    None
//
//****************************************************************************

void DAVE_Init(void)
{
1000615c:	b580      	push	{r7, lr}
1000615e:	af00      	add	r7, sp, #0

//****************************************************************************
// @Initialization of APPs Init Functions
//****************************************************************************
	//  MUX configurations
	DAVE_MUX_PreInit(); 
10006160:	f000 f89a 	bl	10006298 <DAVE_MUX_PreInit>
	//  Initialization of app 'CLK002'		     
	CLK002_Init();
10006164:	f000 f8a4 	bl	100062b0 <CLK002_Init>
	 
	//  Initialization of app 'UART001'		     
	UART001_Init();
10006168:	f7fd fcc4 	bl	10003af4 <UART001_Init>
	 
	//  Initialization of app 'CCU4GLOBAL'		     
	CCU4GLOBAL_Init();
1000616c:	f000 f9b4 	bl	100064d8 <CCU4GLOBAL_Init>
	 
	//  Initialization of app 'PWMSP001'		     
	PWMSP001_Init();
10006170:	f7fe faae 	bl	100046d0 <PWMSP001_Init>
	 
	//  Initialization of app 'IO004'		     
	IO004_Init();
10006174:	f7ff fe22 	bl	10005dbc <IO004_Init>
	 
	//  Initialization of app 'SYSTM001'		     
	SYSTM001_Init();
10006178:	f7fe f910 	bl	1000439c <SYSTM001_Init>
	
      
	//  MUX configurations
	DAVE_MUX_Init();	
1000617c:	f000 f802 	bl	10006184 <DAVE_MUX_Init>
} //  End of function DAVE_Init
10006180:	46bd      	mov	sp, r7
10006182:	bd80      	pop	{r7, pc}

10006184 <DAVE_MUX_Init>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
           
void DAVE_MUX_Init(void)
{  
10006184:	b580      	push	{r7, lr}
10006186:	b086      	sub	sp, #24
10006188:	af00      	add	r7, sp, #0
//********* MODULE USIC CONFIGURATIONS *************************	        
        
           
   /* Disable mode before configuring all USIC registers to avoid unintended edges */   
      /* Variable to store the CCR_MODE values for various USIC channels */ 
      uint32_t UsicCcrMode[6] = {0};
1000618a:	1c3b      	adds	r3, r7, #0
1000618c:	2200      	movs	r2, #0
1000618e:	601a      	str	r2, [r3, #0]
10006190:	3304      	adds	r3, #4
10006192:	2200      	movs	r2, #0
10006194:	601a      	str	r2, [r3, #0]
10006196:	3304      	adds	r3, #4
10006198:	2200      	movs	r2, #0
1000619a:	601a      	str	r2, [r3, #0]
1000619c:	3304      	adds	r3, #4
1000619e:	2200      	movs	r2, #0
100061a0:	601a      	str	r2, [r3, #0]
100061a2:	3304      	adds	r3, #4
100061a4:	2200      	movs	r2, #0
100061a6:	601a      	str	r2, [r3, #0]
100061a8:	3304      	adds	r3, #4
100061aa:	2200      	movs	r2, #0
100061ac:	601a      	str	r2, [r3, #0]
100061ae:	3304      	adds	r3, #4
           
    UsicCcrMode[0] |= (uint32_t) RD_REG(USIC0_CH0->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos);
100061b0:	1c3b      	adds	r3, r7, #0
100061b2:	681a      	ldr	r2, [r3, #0]
100061b4:	2390      	movs	r3, #144	; 0x90
100061b6:	05db      	lsls	r3, r3, #23
100061b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
100061ba:	230f      	movs	r3, #15
100061bc:	400b      	ands	r3, r1
100061be:	431a      	orrs	r2, r3
100061c0:	1c3b      	adds	r3, r7, #0
100061c2:	601a      	str	r2, [r3, #0]
    WR_REG(USIC0_CH0->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,0);  
100061c4:	2390      	movs	r3, #144	; 0x90
100061c6:	05db      	lsls	r3, r3, #23
100061c8:	2290      	movs	r2, #144	; 0x90
100061ca:	05d2      	lsls	r2, r2, #23
100061cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
100061ce:	210f      	movs	r1, #15
100061d0:	438a      	bics	r2, r1
100061d2:	641a      	str	r2, [r3, #64]	; 0x40
                        
      
    						
   /*USIC 0 Channel 0 Mux Related SFR/Bitfields Configurations*/ 						         
 WR_REG(USIC0_CH0->DX0CR, USIC_CH_DX0CR_DSEL_Msk, USIC_CH_DX0CR_DSEL_Pos,6); 
100061d4:	2390      	movs	r3, #144	; 0x90
100061d6:	05db      	lsls	r3, r3, #23
100061d8:	2290      	movs	r2, #144	; 0x90
100061da:	05d2      	lsls	r2, r2, #23
100061dc:	69d2      	ldr	r2, [r2, #28]
100061de:	2107      	movs	r1, #7
100061e0:	438a      	bics	r2, r1
100061e2:	2106      	movs	r1, #6
100061e4:	430a      	orrs	r2, r1
100061e6:	61da      	str	r2, [r3, #28]
  			  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
                 
   // Data Pointer & Buffer Size for Transmitter Buffer Control  
 WR_REG(USIC0_CH0->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk, USIC_CH_TBCTR_DPTRSIZE_Pos,0x04000010);		/*    DPTR = 16,  SIZE = 4 */ 
100061e8:	2390      	movs	r3, #144	; 0x90
100061ea:	05da      	lsls	r2, r3, #23
100061ec:	2390      	movs	r3, #144	; 0x90
100061ee:	05d9      	lsls	r1, r3, #23
100061f0:	2384      	movs	r3, #132	; 0x84
100061f2:	005b      	lsls	r3, r3, #1
100061f4:	58c9      	ldr	r1, [r1, r3]
100061f6:	4b23      	ldr	r3, [pc, #140]	; (10006284 <DAVE_MUX_Init+0x100>)
100061f8:	400b      	ands	r3, r1
100061fa:	4923      	ldr	r1, [pc, #140]	; (10006288 <DAVE_MUX_Init+0x104>)
100061fc:	4319      	orrs	r1, r3
100061fe:	2384      	movs	r3, #132	; 0x84
10006200:	005b      	lsls	r3, r3, #1
10006202:	50d1      	str	r1, [r2, r3]
         
  // Data Pointer & Buffer Size for Receiver Buffer Control  
 WR_REG(USIC0_CH0->RBCTR, USIC_CH_RBCTR_DPTRSIZE_Msk, USIC_CH_RBCTR_DPTRSIZE_Pos,0x04000000);		/*    DPTR = 0,  SIZE = 4 */ 
10006204:	2390      	movs	r3, #144	; 0x90
10006206:	05da      	lsls	r2, r3, #23
10006208:	2390      	movs	r3, #144	; 0x90
1000620a:	05d9      	lsls	r1, r3, #23
1000620c:	2386      	movs	r3, #134	; 0x86
1000620e:	005b      	lsls	r3, r3, #1
10006210:	58c9      	ldr	r1, [r1, r3]
10006212:	4b1c      	ldr	r3, [pc, #112]	; (10006284 <DAVE_MUX_Init+0x100>)
10006214:	400b      	ands	r3, r1
10006216:	2180      	movs	r1, #128	; 0x80
10006218:	04c9      	lsls	r1, r1, #19
1000621a:	4319      	orrs	r1, r3
1000621c:	2386      	movs	r3, #134	; 0x86
1000621e:	005b      	lsls	r3, r3, #1
10006220:	50d1      	str	r1, [r2, r3]
   /*USIC 2 Channel 1 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
         
  
  /* Enable mode after configuring all USIC registers to avoid unintended edges */  
            
   WR_REG(USIC0_CH0->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,UsicCcrMode[0]); 
10006222:	2390      	movs	r3, #144	; 0x90
10006224:	05db      	lsls	r3, r3, #23
10006226:	1c3a      	adds	r2, r7, #0
10006228:	6811      	ldr	r1, [r2, #0]
1000622a:	220f      	movs	r2, #15
1000622c:	4011      	ands	r1, r2
1000622e:	2290      	movs	r2, #144	; 0x90
10006230:	05d2      	lsls	r2, r2, #23
10006232:	6c12      	ldr	r2, [r2, #64]	; 0x40
10006234:	200f      	movs	r0, #15
10006236:	4382      	bics	r2, r0
10006238:	430a      	orrs	r2, r1
1000623a:	641a      	str	r2, [r3, #64]	; 0x40
   	 
            	         
                                                 

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                                      
  WR_REG(PORT1->IOCR0, 0xb8U, PORT_IOCR_PC0_PCR_Pos, 0x12U);                /*P1.0 : PORT1_IOCR0_PC0_PCR and PORT1_IOCR0_PC0_OE */					   
1000623c:	4b13      	ldr	r3, [pc, #76]	; (1000628c <DAVE_MUX_Init+0x108>)
1000623e:	4a13      	ldr	r2, [pc, #76]	; (1000628c <DAVE_MUX_Init+0x108>)
10006240:	6912      	ldr	r2, [r2, #16]
10006242:	21b8      	movs	r1, #184	; 0xb8
10006244:	438a      	bics	r2, r1
10006246:	2190      	movs	r1, #144	; 0x90
10006248:	430a      	orrs	r2, r1
1000624a:	611a      	str	r2, [r3, #16]
					                         
  WR_REG(PORT1->IOCR0, 0xb800U, PORT_IOCR_PC1_PCR_Pos, 0x12U);                /*P1.1 : PORT1_IOCR0_PC1_PCR and PORT1_IOCR0_PC1_OE */					   
1000624c:	4b0f      	ldr	r3, [pc, #60]	; (1000628c <DAVE_MUX_Init+0x108>)
1000624e:	4a0f      	ldr	r2, [pc, #60]	; (1000628c <DAVE_MUX_Init+0x108>)
10006250:	6911      	ldr	r1, [r2, #16]
10006252:	4a0f      	ldr	r2, [pc, #60]	; (10006290 <DAVE_MUX_Init+0x10c>)
10006254:	400a      	ands	r2, r1
10006256:	2190      	movs	r1, #144	; 0x90
10006258:	0209      	lsls	r1, r1, #8
1000625a:	430a      	orrs	r2, r1
1000625c:	611a      	str	r2, [r3, #16]
					  
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS1_Msk, PORT2_PDISC_PDIS1_Pos, PORT_PDISC_PDIS0);            /*    P2.1 : PORT2_PDISC_PDIS1 */                       
1000625e:	4b0d      	ldr	r3, [pc, #52]	; (10006294 <DAVE_MUX_Init+0x110>)
10006260:	4a0c      	ldr	r2, [pc, #48]	; (10006294 <DAVE_MUX_Init+0x110>)
10006262:	6e12      	ldr	r2, [r2, #96]	; 0x60
10006264:	2102      	movs	r1, #2
10006266:	438a      	bics	r2, r1
10006268:	661a      	str	r2, [r3, #96]	; 0x60
  WR_REG(PORT2->IOCR0, 0xb800U, PORT_IOCR_PC1_PCR_Pos, 0x16U);                /*P2.1 : PORT2_IOCR0_PC1_PCR and PORT2_IOCR0_PC1_OE */					   
1000626a:	4b0a      	ldr	r3, [pc, #40]	; (10006294 <DAVE_MUX_Init+0x110>)
1000626c:	4a09      	ldr	r2, [pc, #36]	; (10006294 <DAVE_MUX_Init+0x110>)
1000626e:	6911      	ldr	r1, [r2, #16]
10006270:	4a07      	ldr	r2, [pc, #28]	; (10006290 <DAVE_MUX_Init+0x10c>)
10006272:	400a      	ands	r2, r1
10006274:	21b0      	movs	r1, #176	; 0xb0
10006276:	0209      	lsls	r1, r1, #8
10006278:	430a      	orrs	r2, r1
1000627a:	611a      	str	r2, [r3, #16]
					      
}
1000627c:	46bd      	mov	sp, r7
1000627e:	b006      	add	sp, #24
10006280:	bd80      	pop	{r7, pc}
10006282:	46c0      	nop			; (mov r8, r8)
10006284:	f8ffffc0 	.word	0xf8ffffc0
10006288:	04000010 	.word	0x04000010
1000628c:	40040100 	.word	0x40040100
10006290:	ffff47ff 	.word	0xffff47ff
10006294:	40040200 	.word	0x40040200

10006298 <DAVE_MUX_PreInit>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
 
void DAVE_MUX_PreInit(void)
{                
10006298:	b580      	push	{r7, lr}
1000629a:	af00      	add	r7, sp, #0

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */               
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS2_Msk, PORT2_PDISC_PDIS2_Pos, PORT_PDISC_PDIS0);            /*    P2.2 : PORT2_PDISC_PDIS2 */    
1000629c:	4b03      	ldr	r3, [pc, #12]	; (100062ac <DAVE_MUX_PreInit+0x14>)
1000629e:	4a03      	ldr	r2, [pc, #12]	; (100062ac <DAVE_MUX_PreInit+0x14>)
100062a0:	6e12      	ldr	r2, [r2, #96]	; 0x60
100062a2:	2104      	movs	r1, #4
100062a4:	438a      	bics	r2, r1
100062a6:	661a      	str	r2, [r3, #96]	; 0x60
}
100062a8:	46bd      	mov	sp, r7
100062aa:	bd80      	pop	{r7, pc}
100062ac:	40040200 	.word	0x40040200

100062b0 <CLK002_Init>:
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
100062b0:	b580      	push	{r7, lr}
100062b2:	af00      	add	r7, sp, #0
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
100062b4:	4b0a      	ldr	r3, [pc, #40]	; (100062e0 <CLK002_Init+0x30>)
100062b6:	22c0      	movs	r2, #192	; 0xc0
100062b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
100062ba:	46c0      	nop			; (mov r8, r8)
100062bc:	4b08      	ldr	r3, [pc, #32]	; (100062e0 <CLK002_Init+0x30>)
100062be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100062c0:	2304      	movs	r3, #4
100062c2:	4013      	ands	r3, r2
100062c4:	d1fa      	bne.n	100062bc <CLK002_Init+0xc>
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
100062c6:	4b07      	ldr	r3, [pc, #28]	; (100062e4 <CLK002_Init+0x34>)
100062c8:	4a06      	ldr	r2, [pc, #24]	; (100062e4 <CLK002_Init+0x34>)
100062ca:	6812      	ldr	r2, [r2, #0]
100062cc:	601a      	str	r2, [r3, #0]
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();
100062ce:	f000 f811 	bl	100062f4 <CLK002_lDivUpdate>

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
100062d2:	4b03      	ldr	r3, [pc, #12]	; (100062e0 <CLK002_Init+0x30>)
100062d4:	22c3      	movs	r2, #195	; 0xc3
100062d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update the clock variable */
    SystemCoreClockUpdate();
100062d8:	f7fc feee 	bl	100030b8 <SystemCoreClockUpdate>
}
100062dc:	46bd      	mov	sp, r7
100062de:	bd80      	pop	{r7, pc}
100062e0:	40010000 	.word	0x40010000
100062e4:	40010300 	.word	0x40010300

100062e8 <AllowClkInitByStartup>:
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
100062e8:	b580      	push	{r7, lr}
100062ea:	af00      	add	r7, sp, #0
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
100062ec:	2300      	movs	r3, #0
}
100062ee:	1c18      	adds	r0, r3, #0
100062f0:	46bd      	mov	sp, r7
100062f2:	bd80      	pop	{r7, pc}

100062f4 <CLK002_lDivUpdate>:
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
100062f4:	b580      	push	{r7, lr}
100062f6:	b084      	sub	sp, #16
100062f8:	af00      	add	r7, sp, #0
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
100062fa:	2300      	movs	r3, #0
100062fc:	60fb      	str	r3, [r7, #12]
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
100062fe:	2300      	movs	r3, #0
10006300:	60bb      	str	r3, [r7, #8]
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10006302:	4b18      	ldr	r3, [pc, #96]	; (10006364 <CLK002_lDivUpdate+0x70>)
10006304:	681a      	ldr	r2, [r3, #0]
10006306:	23ff      	movs	r3, #255	; 0xff
10006308:	021b      	lsls	r3, r3, #8
1000630a:	4013      	ands	r3, r2
1000630c:	0a1b      	lsrs	r3, r3, #8
1000630e:	60fb      	str	r3, [r7, #12]
 lTargetidiv = CLK002_CLKCR_IDIV;
10006310:	2301      	movs	r3, #1
10006312:	60bb      	str	r3, [r7, #8]

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
10006314:	4b13      	ldr	r3, [pc, #76]	; (10006364 <CLK002_lDivUpdate+0x70>)
10006316:	681b      	ldr	r3, [r3, #0]
10006318:	607b      	str	r3, [r7, #4]
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
1000631a:	687b      	ldr	r3, [r7, #4]
1000631c:	22ff      	movs	r2, #255	; 0xff
1000631e:	4393      	bics	r3, r2
10006320:	607b      	str	r3, [r7, #4]
  SCU_CLK->CLKCR = lCLKCR;
10006322:	4b10      	ldr	r3, [pc, #64]	; (10006364 <CLK002_lDivUpdate+0x70>)
10006324:	687a      	ldr	r2, [r7, #4]
10006326:	601a      	str	r2, [r3, #0]

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10006328:	4b0e      	ldr	r3, [pc, #56]	; (10006364 <CLK002_lDivUpdate+0x70>)
1000632a:	4a0e      	ldr	r2, [pc, #56]	; (10006364 <CLK002_lDivUpdate+0x70>)
1000632c:	6812      	ldr	r2, [r2, #0]
1000632e:	490e      	ldr	r1, [pc, #56]	; (10006368 <CLK002_lDivUpdate+0x74>)
10006330:	430a      	orrs	r2, r1
10006332:	601a      	str	r2, [r3, #0]
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10006334:	46c0      	nop			; (mov r8, r8)
10006336:	4b0b      	ldr	r3, [pc, #44]	; (10006364 <CLK002_lDivUpdate+0x70>)
10006338:	681a      	ldr	r2, [r3, #0]
1000633a:	2380      	movs	r3, #128	; 0x80
1000633c:	05db      	lsls	r3, r3, #23
1000633e:	4013      	ands	r3, r2
10006340:	d1f9      	bne.n	10006336 <CLK002_lDivUpdate+0x42>
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
10006342:	68fa      	ldr	r2, [r7, #12]
10006344:	68bb      	ldr	r3, [r7, #8]
10006346:	429a      	cmp	r2, r3
10006348:	d008      	beq.n	1000635c <CLK002_lDivUpdate+0x68>
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
1000634a:	68fa      	ldr	r2, [r7, #12]
1000634c:	68bb      	ldr	r3, [r7, #8]
1000634e:	429a      	cmp	r2, r3
10006350:	d202      	bcs.n	10006358 <CLK002_lDivUpdate+0x64>
  {
    CLK002_lFrequencyDownScaling();
10006352:	f000 f869 	bl	10006428 <CLK002_lFrequencyDownScaling>
10006356:	e001      	b.n	1000635c <CLK002_lDivUpdate+0x68>
  }
  else
   {
     CLK002_lFrequencyUpScaling();
10006358:	f000 f808 	bl	1000636c <CLK002_lFrequencyUpScaling>
   }

}
1000635c:	46bd      	mov	sp, r7
1000635e:	b004      	add	sp, #16
10006360:	bd80      	pop	{r7, pc}
10006362:	46c0      	nop			; (mov r8, r8)
10006364:	40010300 	.word	0x40010300
10006368:	3ff00000 	.word	0x3ff00000

1000636c <CLK002_lFrequencyUpScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
1000636c:	b580      	push	{r7, lr}
1000636e:	b084      	sub	sp, #16
10006370:	af00      	add	r7, sp, #0
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10006372:	4b2a      	ldr	r3, [pc, #168]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
10006374:	681a      	ldr	r2, [r3, #0]
10006376:	23ff      	movs	r3, #255	; 0xff
10006378:	021b      	lsls	r3, r3, #8
1000637a:	4013      	ands	r3, r2
1000637c:	0a1b      	lsrs	r3, r3, #8
1000637e:	60fb      	str	r3, [r7, #12]
  TargetIdiv = CLK002_CLKCR_IDIV;
10006380:	2301      	movs	r3, #1
10006382:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
10006384:	68bb      	ldr	r3, [r7, #8]
10006386:	009a      	lsls	r2, r3, #2
10006388:	68fb      	ldr	r3, [r7, #12]
1000638a:	429a      	cmp	r2, r3
1000638c:	d224      	bcs.n	100063d8 <CLK002_lFrequencyUpScaling+0x6c>
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
1000638e:	68fb      	ldr	r3, [r7, #12]
10006390:	2203      	movs	r2, #3
10006392:	4393      	bics	r3, r2
10006394:	3304      	adds	r3, #4
10006396:	60fb      	str	r3, [r7, #12]
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
10006398:	68fb      	ldr	r3, [r7, #12]
1000639a:	089b      	lsrs	r3, r3, #2
1000639c:	60fb      	str	r3, [r7, #12]
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
1000639e:	4b1f      	ldr	r3, [pc, #124]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
100063a0:	681b      	ldr	r3, [r3, #0]
100063a2:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
100063a4:	68fb      	ldr	r3, [r7, #12]
100063a6:	021b      	lsls	r3, r3, #8
100063a8:	041b      	lsls	r3, r3, #16
100063aa:	0c1a      	lsrs	r2, r3, #16
100063ac:	6879      	ldr	r1, [r7, #4]
100063ae:	4b1c      	ldr	r3, [pc, #112]	; (10006420 <CLK002_lFrequencyUpScaling+0xb4>)
100063b0:	400b      	ands	r3, r1
100063b2:	4313      	orrs	r3, r2
100063b4:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
100063b6:	4b19      	ldr	r3, [pc, #100]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
100063b8:	687a      	ldr	r2, [r7, #4]
100063ba:	601a      	str	r2, [r3, #0]

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100063bc:	4b17      	ldr	r3, [pc, #92]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
100063be:	4a17      	ldr	r2, [pc, #92]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
100063c0:	6812      	ldr	r2, [r2, #0]
100063c2:	4918      	ldr	r1, [pc, #96]	; (10006424 <CLK002_lFrequencyUpScaling+0xb8>)
100063c4:	430a      	orrs	r2, r1
100063c6:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100063c8:	46c0      	nop			; (mov r8, r8)
100063ca:	4b14      	ldr	r3, [pc, #80]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
100063cc:	681a      	ldr	r2, [r3, #0]
100063ce:	2380      	movs	r3, #128	; 0x80
100063d0:	05db      	lsls	r3, r3, #23
100063d2:	4013      	ands	r3, r2
100063d4:	d1f9      	bne.n	100063ca <CLK002_lFrequencyUpScaling+0x5e>
100063d6:	e01c      	b.n	10006412 <CLK002_lFrequencyUpScaling+0xa6>
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
100063d8:	4b10      	ldr	r3, [pc, #64]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
100063da:	681b      	ldr	r3, [r3, #0]
100063dc:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
100063de:	68bb      	ldr	r3, [r7, #8]
100063e0:	021b      	lsls	r3, r3, #8
100063e2:	041b      	lsls	r3, r3, #16
100063e4:	0c1a      	lsrs	r2, r3, #16
100063e6:	6879      	ldr	r1, [r7, #4]
100063e8:	4b0d      	ldr	r3, [pc, #52]	; (10006420 <CLK002_lFrequencyUpScaling+0xb4>)
100063ea:	400b      	ands	r3, r1
100063ec:	4313      	orrs	r3, r2
100063ee:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
100063f0:	4b0a      	ldr	r3, [pc, #40]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
100063f2:	687a      	ldr	r2, [r7, #4]
100063f4:	601a      	str	r2, [r3, #0]
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100063f6:	4b09      	ldr	r3, [pc, #36]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
100063f8:	4a08      	ldr	r2, [pc, #32]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
100063fa:	6812      	ldr	r2, [r2, #0]
100063fc:	4909      	ldr	r1, [pc, #36]	; (10006424 <CLK002_lFrequencyUpScaling+0xb8>)
100063fe:	430a      	orrs	r2, r1
10006400:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10006402:	46c0      	nop			; (mov r8, r8)
10006404:	4b05      	ldr	r3, [pc, #20]	; (1000641c <CLK002_lFrequencyUpScaling+0xb0>)
10006406:	681a      	ldr	r2, [r3, #0]
10006408:	2380      	movs	r3, #128	; 0x80
1000640a:	05db      	lsls	r3, r3, #23
1000640c:	4013      	ands	r3, r2
1000640e:	d1f9      	bne.n	10006404 <CLK002_lFrequencyUpScaling+0x98>
        {
            ;
        }
        break;
10006410:	e000      	b.n	10006414 <CLK002_lFrequencyUpScaling+0xa8>
    }

  }
10006412:	e7b7      	b.n	10006384 <CLK002_lFrequencyUpScaling+0x18>

}
10006414:	46bd      	mov	sp, r7
10006416:	b004      	add	sp, #16
10006418:	bd80      	pop	{r7, pc}
1000641a:	46c0      	nop			; (mov r8, r8)
1000641c:	40010300 	.word	0x40010300
10006420:	ffff00ff 	.word	0xffff00ff
10006424:	3ff00000 	.word	0x3ff00000

10006428 <CLK002_lFrequencyDownScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
10006428:	b580      	push	{r7, lr}
1000642a:	b084      	sub	sp, #16
1000642c:	af00      	add	r7, sp, #0
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
1000642e:	4b27      	ldr	r3, [pc, #156]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
10006430:	681a      	ldr	r2, [r3, #0]
10006432:	23ff      	movs	r3, #255	; 0xff
10006434:	021b      	lsls	r3, r3, #8
10006436:	4013      	ands	r3, r2
10006438:	0a1b      	lsrs	r3, r3, #8
1000643a:	60fb      	str	r3, [r7, #12]
    TargetIdiv = CLK002_CLKCR_IDIV;
1000643c:	2301      	movs	r3, #1
1000643e:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
10006440:	68fb      	ldr	r3, [r7, #12]
10006442:	009a      	lsls	r2, r3, #2
10006444:	68bb      	ldr	r3, [r7, #8]
10006446:	429a      	cmp	r2, r3
10006448:	d21f      	bcs.n	1000648a <CLK002_lFrequencyDownScaling+0x62>
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
1000644a:	68fb      	ldr	r3, [r7, #12]
1000644c:	009b      	lsls	r3, r3, #2
1000644e:	60fb      	str	r3, [r7, #12]
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
10006450:	4b1e      	ldr	r3, [pc, #120]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
10006452:	681b      	ldr	r3, [r3, #0]
10006454:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10006456:	68fb      	ldr	r3, [r7, #12]
10006458:	021b      	lsls	r3, r3, #8
1000645a:	041b      	lsls	r3, r3, #16
1000645c:	0c1a      	lsrs	r2, r3, #16
1000645e:	6879      	ldr	r1, [r7, #4]
10006460:	4b1b      	ldr	r3, [pc, #108]	; (100064d0 <CLK002_lFrequencyDownScaling+0xa8>)
10006462:	400b      	ands	r3, r1
10006464:	4313      	orrs	r3, r2
10006466:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10006468:	4b18      	ldr	r3, [pc, #96]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
1000646a:	687a      	ldr	r2, [r7, #4]
1000646c:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
1000646e:	4b17      	ldr	r3, [pc, #92]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
10006470:	4a16      	ldr	r2, [pc, #88]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
10006472:	6812      	ldr	r2, [r2, #0]
10006474:	4917      	ldr	r1, [pc, #92]	; (100064d4 <CLK002_lFrequencyDownScaling+0xac>)
10006476:	430a      	orrs	r2, r1
10006478:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
1000647a:	46c0      	nop			; (mov r8, r8)
1000647c:	4b13      	ldr	r3, [pc, #76]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
1000647e:	681a      	ldr	r2, [r3, #0]
10006480:	2380      	movs	r3, #128	; 0x80
10006482:	05db      	lsls	r3, r3, #23
10006484:	4013      	ands	r3, r2
10006486:	d1f9      	bne.n	1000647c <CLK002_lFrequencyDownScaling+0x54>
10006488:	e01c      	b.n	100064c4 <CLK002_lFrequencyDownScaling+0x9c>
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
1000648a:	4b10      	ldr	r3, [pc, #64]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
1000648c:	681b      	ldr	r3, [r3, #0]
1000648e:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10006490:	68bb      	ldr	r3, [r7, #8]
10006492:	021b      	lsls	r3, r3, #8
10006494:	041b      	lsls	r3, r3, #16
10006496:	0c1a      	lsrs	r2, r3, #16
10006498:	6879      	ldr	r1, [r7, #4]
1000649a:	4b0d      	ldr	r3, [pc, #52]	; (100064d0 <CLK002_lFrequencyDownScaling+0xa8>)
1000649c:	400b      	ands	r3, r1
1000649e:	4313      	orrs	r3, r2
100064a0:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
100064a2:	4b0a      	ldr	r3, [pc, #40]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
100064a4:	687a      	ldr	r2, [r7, #4]
100064a6:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100064a8:	4b08      	ldr	r3, [pc, #32]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
100064aa:	4a08      	ldr	r2, [pc, #32]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
100064ac:	6812      	ldr	r2, [r2, #0]
100064ae:	4909      	ldr	r1, [pc, #36]	; (100064d4 <CLK002_lFrequencyDownScaling+0xac>)
100064b0:	430a      	orrs	r2, r1
100064b2:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100064b4:	46c0      	nop			; (mov r8, r8)
100064b6:	4b05      	ldr	r3, [pc, #20]	; (100064cc <CLK002_lFrequencyDownScaling+0xa4>)
100064b8:	681a      	ldr	r2, [r3, #0]
100064ba:	2380      	movs	r3, #128	; 0x80
100064bc:	05db      	lsls	r3, r3, #23
100064be:	4013      	ands	r3, r2
100064c0:	d1f9      	bne.n	100064b6 <CLK002_lFrequencyDownScaling+0x8e>
            {
                ;
            }
             break;
100064c2:	e000      	b.n	100064c6 <CLK002_lFrequencyDownScaling+0x9e>
        }

	  }
100064c4:	e7bc      	b.n	10006440 <CLK002_lFrequencyDownScaling+0x18>
}
100064c6:	46bd      	mov	sp, r7
100064c8:	b004      	add	sp, #16
100064ca:	bd80      	pop	{r7, pc}
100064cc:	40010300 	.word	0x40010300
100064d0:	ffff00ff 	.word	0xffff00ff
100064d4:	3ff00000 	.word	0x3ff00000

100064d8 <CCU4GLOBAL_Init>:
/**
 * @cond INTERNAL_DOCS
 */

void CCU4GLOBAL_Init(void)
{
100064d8:	b580      	push	{r7, lr}
100064da:	b082      	sub	sp, #8
100064dc:	af00      	add	r7, sp, #0
  static uint32_t CCU4InitCalled = (uint32_t)0U;
  uint32_t Count = 0U;
100064de:	2300      	movs	r3, #0
100064e0:	607b      	str	r3, [r7, #4]
  
  if(CCU4InitCalled == (uint32_t)0U)
100064e2:	4b0d      	ldr	r3, [pc, #52]	; (10006518 <CCU4GLOBAL_Init+0x40>)
100064e4:	681b      	ldr	r3, [r3, #0]
100064e6:	2b00      	cmp	r3, #0
100064e8:	d112      	bne.n	10006510 <CCU4GLOBAL_Init+0x38>
  {
    /*
     * Each instance of the App brings the module out of reset and enable 
     * the prescalar clock
     */
    for (Count = 0U; Count<(uint32_t)CCU4GLOBAL_NUM_INSTANCES; Count++)
100064ea:	2300      	movs	r3, #0
100064ec:	607b      	str	r3, [r7, #4]
100064ee:	e009      	b.n	10006504 <CCU4GLOBAL_Init+0x2c>
    {
  	  CCU4Global_lInit(CCU4Global_HandleArray[Count]);
100064f0:	4b0a      	ldr	r3, [pc, #40]	; (1000651c <CCU4GLOBAL_Init+0x44>)
100064f2:	687a      	ldr	r2, [r7, #4]
100064f4:	0092      	lsls	r2, r2, #2
100064f6:	58d3      	ldr	r3, [r2, r3]
100064f8:	1c18      	adds	r0, r3, #0
100064fa:	f000 f811 	bl	10006520 <CCU4Global_lInit>
  {
    /*
     * Each instance of the App brings the module out of reset and enable 
     * the prescalar clock
     */
    for (Count = 0U; Count<(uint32_t)CCU4GLOBAL_NUM_INSTANCES; Count++)
100064fe:	687b      	ldr	r3, [r7, #4]
10006500:	3301      	adds	r3, #1
10006502:	607b      	str	r3, [r7, #4]
10006504:	687b      	ldr	r3, [r7, #4]
10006506:	2b00      	cmp	r3, #0
10006508:	d0f2      	beq.n	100064f0 <CCU4GLOBAL_Init+0x18>
    {
  	  CCU4Global_lInit(CCU4Global_HandleArray[Count]);
    }

    CCU4InitCalled = (uint32_t)1;
1000650a:	4b03      	ldr	r3, [pc, #12]	; (10006518 <CCU4GLOBAL_Init+0x40>)
1000650c:	2201      	movs	r2, #1
1000650e:	601a      	str	r2, [r3, #0]
  }
}
10006510:	46bd      	mov	sp, r7
10006512:	b002      	add	sp, #8
10006514:	bd80      	pop	{r7, pc}
10006516:	46c0      	nop			; (mov r8, r8)
10006518:	20000b18 	.word	0x20000b18
1000651c:	20001194 	.word	0x20001194

10006520 <CCU4Global_lInit>:

static void CCU4Global_lInit(const CCU4Global_HandleType * Handle)
{
10006520:	b590      	push	{r4, r7, lr}
10006522:	b083      	sub	sp, #12
10006524:	af00      	add	r7, sp, #0
10006526:	6078      	str	r0, [r7, #4]
    if( Handle->KernelNumber <= 2 )
10006528:	687b      	ldr	r3, [r7, #4]
1000652a:	685b      	ldr	r3, [r3, #4]
1000652c:	2b02      	cmp	r3, #2
1000652e:	d823      	bhi.n	10006578 <CCU4Global_lInit+0x58>
	{
		/* Disables the gating for CCU4 kernel */      
		/*This is applicable for XMC4400,XMC4200 and XMC1xxx Devices*/
		#if (UC_FAMILY == XMC1 )
			if (!((uint32_t)SCU_CLK->CGATCLR0 & Handle->ClockGating))
10006530:	4b17      	ldr	r3, [pc, #92]	; (10006590 <CCU4Global_lInit+0x70>)
10006532:	691a      	ldr	r2, [r3, #16]
10006534:	687b      	ldr	r3, [r7, #4]
10006536:	689b      	ldr	r3, [r3, #8]
10006538:	4013      	ands	r3, r2
1000653a:	d11d      	bne.n	10006578 <CCU4Global_lInit+0x58>
			{ 
				SCU_GENERAL->PASSWD = 0x000000C0UL;
1000653c:	4b15      	ldr	r3, [pc, #84]	; (10006594 <CCU4Global_lInit+0x74>)
1000653e:	22c0      	movs	r2, #192	; 0xc0
10006540:	625a      	str	r2, [r3, #36]	; 0x24
				WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, 
10006542:	4b13      	ldr	r3, [pc, #76]	; (10006590 <CCU4Global_lInit+0x70>)
10006544:	4a12      	ldr	r2, [pc, #72]	; (10006590 <CCU4Global_lInit+0x70>)
10006546:	6812      	ldr	r2, [r2, #0]
10006548:	4913      	ldr	r1, [pc, #76]	; (10006598 <CCU4Global_lInit+0x78>)
1000654a:	430a      	orrs	r2, r1
1000654c:	601a      	str	r2, [r3, #0]
					   SCU_CLK_CLKCR_CNTADJ_Pos,CCU4GLOBAL_DELAYCNT);
				
				SET_BIT(SCU_CLK->CGATCLR0, Handle->ClockGating);
1000654e:	4b10      	ldr	r3, [pc, #64]	; (10006590 <CCU4Global_lInit+0x70>)
10006550:	4a0f      	ldr	r2, [pc, #60]	; (10006590 <CCU4Global_lInit+0x70>)
10006552:	6911      	ldr	r1, [r2, #16]
10006554:	687a      	ldr	r2, [r7, #4]
10006556:	6892      	ldr	r2, [r2, #8]
10006558:	2001      	movs	r0, #1
1000655a:	1c04      	adds	r4, r0, #0
1000655c:	4094      	lsls	r4, r2
1000655e:	1c22      	adds	r2, r4, #0
10006560:	430a      	orrs	r2, r1
10006562:	611a      	str	r2, [r3, #16]
				while ((uint32_t)SCU_CLK->CLKCR & 
10006564:	46c0      	nop			; (mov r8, r8)
10006566:	4b0a      	ldr	r3, [pc, #40]	; (10006590 <CCU4Global_lInit+0x70>)
10006568:	681a      	ldr	r2, [r3, #0]
1000656a:	2380      	movs	r3, #128	; 0x80
1000656c:	05db      	lsls	r3, r3, #23
1000656e:	4013      	ands	r3, r2
10006570:	d1f9      	bne.n	10006566 <CCU4Global_lInit+0x46>
					   (uint32_t)SCU_CLK_CLKCR_VDDC2LOW_Msk)
				{
					;
				}
				SCU_GENERAL->PASSWD = 0x000000C3UL;
10006572:	4b08      	ldr	r3, [pc, #32]	; (10006594 <CCU4Global_lInit+0x74>)
10006574:	22c3      	movs	r2, #195	; 0xc3
10006576:	625a      	str	r2, [r3, #36]	; 0x24
		RESET001_DeassertReset(Handle->PeripheralReset);
	#endif    

		
    /* Sets Run bit of the Prescalar */
    SET_BIT(Handle->CC4yKernRegsPtr->GIDLC,CCU4_GIDLC_SPRB_Pos);
10006578:	687b      	ldr	r3, [r7, #4]
1000657a:	681b      	ldr	r3, [r3, #0]
1000657c:	687a      	ldr	r2, [r7, #4]
1000657e:	6812      	ldr	r2, [r2, #0]
10006580:	68d2      	ldr	r2, [r2, #12]
10006582:	2180      	movs	r1, #128	; 0x80
10006584:	0049      	lsls	r1, r1, #1
10006586:	430a      	orrs	r2, r1
10006588:	60da      	str	r2, [r3, #12]

}
1000658a:	46bd      	mov	sp, r7
1000658c:	b003      	add	sp, #12
1000658e:	bd90      	pop	{r4, r7, pc}
10006590:	40010300 	.word	0x40010300
10006594:	40010000 	.word	0x40010000
10006598:	3ff00000 	.word	0x3ff00000

1000659c <etLogger_logError>:
#include "debugging/etLogger.h"

#include <stdarg.h>


void etLogger_logError(const char* message){
1000659c:	b580      	push	{r7, lr}
1000659e:	b082      	sub	sp, #8
100065a0:	af00      	add	r7, sp, #0
100065a2:	6078      	str	r0, [r7, #4]
#ifdef ET_LOGGER_ACTIVATE
	printf("ERROR:   %s\n", message);
#endif
}
100065a4:	46bd      	mov	sp, r7
100065a6:	b002      	add	sp, #8
100065a8:	bd80      	pop	{r7, pc}
100065aa:	46c0      	nop			; (mov r8, r8)

100065ac <etLogger_logWarning>:

void etLogger_logWarning(const char* message){
100065ac:	b580      	push	{r7, lr}
100065ae:	b082      	sub	sp, #8
100065b0:	af00      	add	r7, sp, #0
100065b2:	6078      	str	r0, [r7, #4]
#ifdef ET_LOGGER_ACTIVATE
	printf("WARNING: %s\n", message);
#endif
}
100065b4:	46bd      	mov	sp, r7
100065b6:	b002      	add	sp, #8
100065b8:	bd80      	pop	{r7, pc}
100065ba:	46c0      	nop			; (mov r8, r8)

100065bc <etLogger_logInfo>:

void etLogger_logInfo(const char* message){
100065bc:	b580      	push	{r7, lr}
100065be:	b082      	sub	sp, #8
100065c0:	af00      	add	r7, sp, #0
100065c2:	6078      	str	r0, [r7, #4]
#ifdef ET_LOGGER_ACTIVATE
	printf("INFO:    %s\n", message);
#endif
}
100065c4:	46bd      	mov	sp, r7
100065c6:	b002      	add	sp, #8
100065c8:	bd80      	pop	{r7, pc}
100065ca:	46c0      	nop			; (mov r8, r8)

100065cc <etLogger_logErrorF>:

void etLogger_logErrorF(const char* format, ... ){
100065cc:	b40f      	push	{r0, r1, r2, r3}
100065ce:	b580      	push	{r7, lr}
100065d0:	af00      	add	r7, sp, #0
	va_start( arglist, format );
	vprintf( format, arglist );
	va_end( arglist );
	printf("\n");
#endif
}
100065d2:	46bd      	mov	sp, r7
100065d4:	bc80      	pop	{r7}
100065d6:	bc08      	pop	{r3}
100065d8:	b004      	add	sp, #16
100065da:	4718      	bx	r3

100065dc <etLogger_logWarningF>:

void etLogger_logWarningF(const char* format, ... ){
100065dc:	b40f      	push	{r0, r1, r2, r3}
100065de:	b580      	push	{r7, lr}
100065e0:	af00      	add	r7, sp, #0
	va_start( arglist, format );
	vprintf( format, arglist );
	va_end( arglist );
	printf("\n");
#endif
}
100065e2:	46bd      	mov	sp, r7
100065e4:	bc80      	pop	{r7}
100065e6:	bc08      	pop	{r3}
100065e8:	b004      	add	sp, #16
100065ea:	4718      	bx	r3

100065ec <etLogger_logInfoF>:

void etLogger_logInfoF(const char* format, ... ){
100065ec:	b40f      	push	{r0, r1, r2, r3}
100065ee:	b580      	push	{r7, lr}
100065f0:	af00      	add	r7, sp, #0
	va_start( arglist, format );
	vprintf( format, arglist );
	va_end( arglist );
	printf("\n");
#endif
}
100065f2:	46bd      	mov	sp, r7
100065f4:	bc80      	pop	{r7}
100065f6:	bc08      	pop	{r3}
100065f8:	b004      	add	sp, #16
100065fa:	4718      	bx	r3

100065fc <etLogger_fopen>:

etFileHandle etLogger_fopen(const char* filename, const char* mode){
100065fc:	b580      	push	{r7, lr}
100065fe:	b082      	sub	sp, #8
10006600:	af00      	add	r7, sp, #0
10006602:	6078      	str	r0, [r7, #4]
10006604:	6039      	str	r1, [r7, #0]
#ifdef ET_LOGGER_ACTIVATE
	return( fopen(filename, mode) );
#else
	return (0);
10006606:	2300      	movs	r3, #0
#endif
}
10006608:	1c18      	adds	r0, r3, #0
1000660a:	46bd      	mov	sp, r7
1000660c:	b002      	add	sp, #8
1000660e:	bd80      	pop	{r7, pc}

10006610 <etLogger_fclose>:

int etLogger_fclose(etFileHandle file){
10006610:	b580      	push	{r7, lr}
10006612:	b082      	sub	sp, #8
10006614:	af00      	add	r7, sp, #0
10006616:	6078      	str	r0, [r7, #4]
#ifdef ET_LOGGER_ACTIVATE
	return( fclose(file) );
#else
	return(0);
10006618:	2300      	movs	r3, #0
#endif
}
1000661a:	1c18      	adds	r0, r3, #0
1000661c:	46bd      	mov	sp, r7
1000661e:	b002      	add	sp, #8
10006620:	bd80      	pop	{r7, pc}
10006622:	46c0      	nop			; (mov r8, r8)

10006624 <etLogger_fprintf>:

void etLogger_fprintf(etFileHandle file, const char* format, ... ){
10006624:	b40e      	push	{r1, r2, r3}
10006626:	b580      	push	{r7, lr}
10006628:	b083      	sub	sp, #12
1000662a:	af00      	add	r7, sp, #0
1000662c:	6078      	str	r0, [r7, #4]
	va_list arglist;
	va_start( arglist, format );
	vfprintf(file, format, arglist );
	va_end( arglist );
#endif
}
1000662e:	46bd      	mov	sp, r7
10006630:	b003      	add	sp, #12
10006632:	bc80      	pop	{r7}
10006634:	bc08      	pop	{r3}
10006636:	b003      	add	sp, #12
10006638:	4718      	bx	r3
1000663a:	46c0      	nop			; (mov r8, r8)

1000663c <etUserEntry>:
void etThread_execute(etThread* self);

void DAVE_Init(void);
void StartDaveTimer(void);

void etUserEntry(void){
1000663c:	b580      	push	{r7, lr}
1000663e:	af00      	add	r7, sp, #0
	DAVE_Init();
10006640:	f7ff fd8c 	bl	1000615c <DAVE_Init>
//	initHw();
}
10006644:	46bd      	mov	sp, r7
10006646:	bd80      	pop	{r7, pc}

10006648 <etUserPreRun>:


void etUserPreRun(void){
10006648:	b580      	push	{r7, lr}
1000664a:	af00      	add	r7, sp, #0
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
1000664c:	b662      	cpsie	i
	__enable_irq();
	StartDaveTimer();
1000664e:	f7fc fd6b 	bl	10003128 <StartDaveTimer>
	etThread_execute(noThread);
10006652:	4b03      	ldr	r3, [pc, #12]	; (10006660 <etUserPreRun+0x18>)
10006654:	681b      	ldr	r3, [r3, #0]
10006656:	1c18      	adds	r0, r3, #0
10006658:	f000 f838 	bl	100066cc <etThread_execute>
}
1000665c:	46bd      	mov	sp, r7
1000665e:	bd80      	pop	{r7, pc}
10006660:	20000b1c 	.word	0x20000b1c

10006664 <etUserPostRun>:

void etUserPostRun(void){ }
10006664:	b580      	push	{r7, lr}
10006666:	af00      	add	r7, sp, #0
10006668:	46bd      	mov	sp, r7
1000666a:	bd80      	pop	{r7, pc}

1000666c <etUserExit>:
void etUserExit(void){ }
1000666c:	b580      	push	{r7, lr}
1000666e:	af00      	add	r7, sp, #0
10006670:	46bd      	mov	sp, r7
10006672:	bd80      	pop	{r7, pc}

10006674 <etThread_construct>:
		etStacksize stacksize,
		etPriority priority,
		etThreadname threadName,
		etThreadFunction threadFunction,
		void* threadFunctionData)
{
10006674:	b580      	push	{r7, lr}
10006676:	b084      	sub	sp, #16
10006678:	af00      	add	r7, sp, #0
1000667a:	60f8      	str	r0, [r7, #12]
1000667c:	60b9      	str	r1, [r7, #8]
1000667e:	607a      	str	r2, [r7, #4]
10006680:	603b      	str	r3, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "construct")

	/* fill in data */
	self->stacksize = stacksize;
10006682:	68fb      	ldr	r3, [r7, #12]
10006684:	68ba      	ldr	r2, [r7, #8]
10006686:	609a      	str	r2, [r3, #8]
	self->priority = priority;
10006688:	68fb      	ldr	r3, [r7, #12]
1000668a:	687a      	ldr	r2, [r7, #4]
1000668c:	60da      	str	r2, [r3, #12]
	self->threadName = threadName;
1000668e:	68fb      	ldr	r3, [r7, #12]
10006690:	683a      	ldr	r2, [r7, #0]
10006692:	611a      	str	r2, [r3, #16]
	self->threadFunction = threadFunction;
10006694:	68fb      	ldr	r3, [r7, #12]
10006696:	69ba      	ldr	r2, [r7, #24]
10006698:	615a      	str	r2, [r3, #20]
	self->threadFunctionData = threadFunctionData;
1000669a:	68fb      	ldr	r3, [r7, #12]
1000669c:	69fa      	ldr	r2, [r7, #28]
1000669e:	619a      	str	r2, [r3, #24]
	// for the single threaded port stacksize and prio is not needed
	// save the Threadpointer as singleton
	if(noThread==0){
100066a0:	4b05      	ldr	r3, [pc, #20]	; (100066b8 <etThread_construct+0x44>)
100066a2:	681b      	ldr	r3, [r3, #0]
100066a4:	2b00      	cmp	r3, #0
100066a6:	d103      	bne.n	100066b0 <etThread_construct+0x3c>
		noThread=self;
100066a8:	4b03      	ldr	r3, [pc, #12]	; (100066b8 <etThread_construct+0x44>)
100066aa:	68fa      	ldr	r2, [r7, #12]
100066ac:	601a      	str	r2, [r3, #0]
100066ae:	e000      	b.n	100066b2 <etThread_construct+0x3e>
		}else{
			while(1){};
100066b0:	e7fe      	b.n	100066b0 <etThread_construct+0x3c>
		}
	ET_MSC_LOGGER_SYNC_EXIT
}
100066b2:	46bd      	mov	sp, r7
100066b4:	b004      	add	sp, #16
100066b6:	bd80      	pop	{r7, pc}
100066b8:	20000b1c 	.word	0x20000b1c

100066bc <etThread_start>:

void etThread_start(etThread* self) {
100066bc:	b580      	push	{r7, lr}
100066be:	b082      	sub	sp, #8
100066c0:	af00      	add	r7, sp, #0
100066c2:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "start")
	ET_MSC_LOGGER_SYNC_EXIT
}
100066c4:	46bd      	mov	sp, r7
100066c6:	b002      	add	sp, #8
100066c8:	bd80      	pop	{r7, pc}
100066ca:	46c0      	nop			; (mov r8, r8)

100066cc <etThread_execute>:

void etThread_execute(etThread* self){
100066cc:	b580      	push	{r7, lr}
100066ce:	b082      	sub	sp, #8
100066d0:	af00      	add	r7, sp, #0
100066d2:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "execute")
	/* etThread_execute redirects the call from the thread to the execute function in the eTrice runtime to enable correct synchronous MSC logging */
	self->threadFunction(self->threadFunctionData);
100066d4:	687b      	ldr	r3, [r7, #4]
100066d6:	695a      	ldr	r2, [r3, #20]
100066d8:	687b      	ldr	r3, [r7, #4]
100066da:	699b      	ldr	r3, [r3, #24]
100066dc:	1c18      	adds	r0, r3, #0
100066de:	4790      	blx	r2
	ET_MSC_LOGGER_SYNC_EXIT
}
100066e0:	46bd      	mov	sp, r7
100066e2:	b002      	add	sp, #8
100066e4:	bd80      	pop	{r7, pc}
100066e6:	46c0      	nop			; (mov r8, r8)

100066e8 <etThread_destruct>:

void etThread_destruct(etThread* self){
100066e8:	b580      	push	{r7, lr}
100066ea:	b082      	sub	sp, #8
100066ec:	af00      	add	r7, sp, #0
100066ee:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "destruct")

	ET_MSC_LOGGER_SYNC_EXIT
}
100066f0:	46bd      	mov	sp, r7
100066f2:	b002      	add	sp, #8
100066f4:	bd80      	pop	{r7, pc}
100066f6:	46c0      	nop			; (mov r8, r8)

100066f8 <etThread_sleep>:

void etThread_sleep(etInt32 millis){
100066f8:	b580      	push	{r7, lr}
100066fa:	b082      	sub	sp, #8
100066fc:	af00      	add	r7, sp, #0
100066fe:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "sleep")

	ET_MSC_LOGGER_SYNC_EXIT
}
10006700:	46bd      	mov	sp, r7
10006702:	b002      	add	sp, #8
10006704:	bd80      	pop	{r7, pc}
10006706:	46c0      	nop			; (mov r8, r8)

10006708 <etTime_init>:
#include "osal/etTime.h"
#include "XMC1100.h"

etTime targetTime;

void etTime_init(void){
10006708:	b580      	push	{r7, lr}
1000670a:	af00      	add	r7, sp, #0
	targetTime.nSec=0;
1000670c:	4b03      	ldr	r3, [pc, #12]	; (1000671c <etTime_init+0x14>)
1000670e:	2200      	movs	r2, #0
10006710:	605a      	str	r2, [r3, #4]
	targetTime.sec=0;
10006712:	4b02      	ldr	r3, [pc, #8]	; (1000671c <etTime_init+0x14>)
10006714:	2200      	movs	r2, #0
10006716:	601a      	str	r2, [r3, #0]
}
10006718:	46bd      	mov	sp, r7
1000671a:	bd80      	pop	{r7, pc}
1000671c:	2000110c 	.word	0x2000110c

10006720 <getTimeFromTarget>:


void getTimeFromTarget(etTime *t) {
10006720:	b580      	push	{r7, lr}
10006722:	b082      	sub	sp, #8
10006724:	af00      	add	r7, sp, #0
10006726:	6078      	str	r0, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10006728:	b672      	cpsid	i
	__disable_irq();
	*t = targetTime;
1000672a:	687b      	ldr	r3, [r7, #4]
1000672c:	4a03      	ldr	r2, [pc, #12]	; (1000673c <getTimeFromTarget+0x1c>)
1000672e:	ca03      	ldmia	r2!, {r0, r1}
10006730:	c303      	stmia	r3!, {r0, r1}
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
10006732:	b662      	cpsie	i
	__enable_irq();
}
10006734:	46bd      	mov	sp, r7
10006736:	b002      	add	sp, #8
10006738:	bd80      	pop	{r7, pc}
1000673a:	46c0      	nop			; (mov r8, r8)
1000673c:	2000110c 	.word	0x2000110c

10006740 <etTick_Handler>:

/* the timer interrupt */

void etTick_Handler(void) {
10006740:	b580      	push	{r7, lr}
10006742:	af00      	add	r7, sp, #0
// this interrupt will be called every 1ms
	targetTime.nSec += 1000000L;
10006744:	4b0b      	ldr	r3, [pc, #44]	; (10006774 <etTick_Handler+0x34>)
10006746:	685b      	ldr	r3, [r3, #4]
10006748:	490b      	ldr	r1, [pc, #44]	; (10006778 <etTick_Handler+0x38>)
1000674a:	185a      	adds	r2, r3, r1
1000674c:	4b09      	ldr	r3, [pc, #36]	; (10006774 <etTick_Handler+0x34>)
1000674e:	605a      	str	r2, [r3, #4]

	if (targetTime.nSec >= 1000000000L) {
10006750:	4b08      	ldr	r3, [pc, #32]	; (10006774 <etTick_Handler+0x34>)
10006752:	685a      	ldr	r2, [r3, #4]
10006754:	4b09      	ldr	r3, [pc, #36]	; (1000677c <etTick_Handler+0x3c>)
10006756:	429a      	cmp	r2, r3
10006758:	dd0a      	ble.n	10006770 <etTick_Handler+0x30>
		targetTime.nSec -= 1000000000L;
1000675a:	4b06      	ldr	r3, [pc, #24]	; (10006774 <etTick_Handler+0x34>)
1000675c:	685b      	ldr	r3, [r3, #4]
1000675e:	4908      	ldr	r1, [pc, #32]	; (10006780 <etTick_Handler+0x40>)
10006760:	185a      	adds	r2, r3, r1
10006762:	4b04      	ldr	r3, [pc, #16]	; (10006774 <etTick_Handler+0x34>)
10006764:	605a      	str	r2, [r3, #4]
		targetTime.sec++;
10006766:	4b03      	ldr	r3, [pc, #12]	; (10006774 <etTick_Handler+0x34>)
10006768:	681b      	ldr	r3, [r3, #0]
1000676a:	1c5a      	adds	r2, r3, #1
1000676c:	4b01      	ldr	r3, [pc, #4]	; (10006774 <etTick_Handler+0x34>)
1000676e:	601a      	str	r2, [r3, #0]
	}
}
10006770:	46bd      	mov	sp, r7
10006772:	bd80      	pop	{r7, pc}
10006774:	2000110c 	.word	0x2000110c
10006778:	000f4240 	.word	0x000f4240
1000677c:	3b9ac9ff 	.word	0x3b9ac9ff
10006780:	c4653600 	.word	0xc4653600

10006784 <handleSystemEvent>:
 *
 *******************************************************************************/

#include "modelbase/etActor.h"

etBool handleSystemEvent(InterfaceItemBase* ifitem, int evt, void* generic_data) {
10006784:	b580      	push	{r7, lr}
10006786:	b084      	sub	sp, #16
10006788:	af00      	add	r7, sp, #0
1000678a:	60f8      	str	r0, [r7, #12]
1000678c:	60b9      	str	r1, [r7, #8]
1000678e:	607a      	str	r2, [r7, #4]
	/* TODO */
	return ET_FALSE;
10006790:	2300      	movs	r3, #0
}
10006792:	1c18      	adds	r0, r3, #0
10006794:	46bd      	mov	sp, r7
10006796:	b004      	add	sp, #16
10006798:	bd80      	pop	{r7, pc}
1000679a:	46c0      	nop			; (mov r8, r8)

1000679c <etPort_sendMessage>:
		(self->receiveMessageFunc)(self->myActor, (void*)self, msg);
	ET_MSC_LOGGER_SYNC_EXIT
}
*/

void etPort_sendMessage(const etPort* self, etInt16 evtId, int size, void* data) {
1000679c:	b580      	push	{r7, lr}
1000679e:	b088      	sub	sp, #32
100067a0:	af00      	add	r7, sp, #0
100067a2:	60f8      	str	r0, [r7, #12]
100067a4:	607a      	str	r2, [r7, #4]
100067a6:	603b      	str	r3, [r7, #0]
100067a8:	1c3b      	adds	r3, r7, #0
100067aa:	330a      	adds	r3, #10
100067ac:	1c0a      	adds	r2, r1, #0
100067ae:	801a      	strh	r2, [r3, #0]
	int offset = MEM_CEIL(sizeof(etMessage));
100067b0:	2308      	movs	r3, #8
100067b2:	61fb      	str	r3, [r7, #28]
	int totalSize = offset+size;
100067b4:	69fa      	ldr	r2, [r7, #28]
100067b6:	687b      	ldr	r3, [r7, #4]
100067b8:	18d3      	adds	r3, r2, r3
100067ba:	61bb      	str	r3, [r7, #24]
	etMessage* msg = NULL;
100067bc:	2300      	movs	r3, #0
100067be:	617b      	str	r3, [r7, #20]
	ET_MSC_LOGGER_SYNC_ENTRY("etPort", "sendMessage")
	msg = etMessageService_getMessageBuffer(self->msgService, totalSize);
100067c0:	68fb      	ldr	r3, [r7, #12]
100067c2:	685a      	ldr	r2, [r3, #4]
100067c4:	69bb      	ldr	r3, [r7, #24]
100067c6:	b29b      	uxth	r3, r3
100067c8:	1c10      	adds	r0, r2, #0
100067ca:	1c19      	adds	r1, r3, #0
100067cc:	f000 f954 	bl	10006a78 <etMessageService_getMessageBuffer>
100067d0:	1c03      	adds	r3, r0, #0
100067d2:	617b      	str	r3, [r7, #20]
	if (msg!=NULL) {
100067d4:	697b      	ldr	r3, [r7, #20]
100067d6:	2b00      	cmp	r3, #0
100067d8:	d020      	beq.n	1000681c <etPort_sendMessage+0x80>
		msg->address = self->peerAddress;
100067da:	68fb      	ldr	r3, [r7, #12]
100067dc:	7a1b      	ldrb	r3, [r3, #8]
100067de:	1c1a      	adds	r2, r3, #0
100067e0:	697b      	ldr	r3, [r7, #20]
100067e2:	809a      	strh	r2, [r3, #4]
		msg->evtID = evtId;
100067e4:	697b      	ldr	r3, [r7, #20]
100067e6:	1c3a      	adds	r2, r7, #0
100067e8:	320a      	adds	r2, #10
100067ea:	8812      	ldrh	r2, [r2, #0]
100067ec:	80da      	strh	r2, [r3, #6]

		if (size>0 && data!=NULL) {
100067ee:	687b      	ldr	r3, [r7, #4]
100067f0:	2b00      	cmp	r3, #0
100067f2:	dd0c      	ble.n	1000680e <etPort_sendMessage+0x72>
100067f4:	683b      	ldr	r3, [r7, #0]
100067f6:	2b00      	cmp	r3, #0
100067f8:	d009      	beq.n	1000680e <etPort_sendMessage+0x72>
			memcpy(((char*)msg)+offset, data, size);
100067fa:	69fb      	ldr	r3, [r7, #28]
100067fc:	697a      	ldr	r2, [r7, #20]
100067fe:	18d1      	adds	r1, r2, r3
10006800:	687b      	ldr	r3, [r7, #4]
10006802:	683a      	ldr	r2, [r7, #0]
10006804:	1c08      	adds	r0, r1, #0
10006806:	1c11      	adds	r1, r2, #0
10006808:	1c1a      	adds	r2, r3, #0
1000680a:	f002 fa29 	bl	10008c60 <memcpy>
		}

		etMessageService_pushMessage(self->msgService, msg);
1000680e:	68fb      	ldr	r3, [r7, #12]
10006810:	685a      	ldr	r2, [r3, #4]
10006812:	697b      	ldr	r3, [r7, #20]
10006814:	1c10      	adds	r0, r2, #0
10006816:	1c19      	adds	r1, r3, #0
10006818:	f000 f8f6 	bl	10006a08 <etMessageService_pushMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000681c:	46bd      	mov	sp, r7
1000681e:	b008      	add	sp, #32
10006820:	bd80      	pop	{r7, pc}
10006822:	46c0      	nop			; (mov r8, r8)

10006824 <etMessageService_init>:
		etUInt16 blockSize,
		etStacksize stacksize,
		etPriority priority,
		etTime interval,
		etDispatcherReceiveMessage msgDispatcher,
		etMessageService_execmode execmode){
10006824:	b590      	push	{r4, r7, lr}
10006826:	b087      	sub	sp, #28
10006828:	af02      	add	r7, sp, #8
1000682a:	60f8      	str	r0, [r7, #12]
1000682c:	60b9      	str	r1, [r7, #8]
1000682e:	1c11      	adds	r1, r2, #0
10006830:	1c1a      	adds	r2, r3, #0
10006832:	1dbb      	adds	r3, r7, #6
10006834:	8019      	strh	r1, [r3, #0]
10006836:	1d3b      	adds	r3, r7, #4
10006838:	801a      	strh	r2, [r3, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "init")

	/* copy init data to self */
	self->messageBuffer.buffer = buffer;
1000683a:	68fb      	ldr	r3, [r7, #12]
1000683c:	68ba      	ldr	r2, [r7, #8]
1000683e:	621a      	str	r2, [r3, #32]
	self->messageBuffer.maxBlocks = maxBlocks;
10006840:	68fb      	ldr	r3, [r7, #12]
10006842:	1dba      	adds	r2, r7, #6
10006844:	8812      	ldrh	r2, [r2, #0]
10006846:	849a      	strh	r2, [r3, #36]	; 0x24
	self->messageBuffer.blockSize = blockSize;
10006848:	68fb      	ldr	r3, [r7, #12]
1000684a:	1d3a      	adds	r2, r7, #4
1000684c:	8812      	ldrh	r2, [r2, #0]
1000684e:	84da      	strh	r2, [r3, #38]	; 0x26
	self->msgDispatcher = msgDispatcher;
10006850:	68fb      	ldr	r3, [r7, #12]
10006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10006854:	629a      	str	r2, [r3, #40]	; 0x28
	self->execmode = execmode;
10006856:	68fa      	ldr	r2, [r7, #12]
10006858:	1c39      	adds	r1, r7, #0
1000685a:	3134      	adds	r1, #52	; 0x34
1000685c:	2368      	movs	r3, #104	; 0x68
1000685e:	7809      	ldrb	r1, [r1, #0]
10006860:	54d1      	strb	r1, [r2, r3]

	/* init queue and pool */
	etMessageQueue_init( &(self->messagePool) ); 	/* the pool is also a queue*/
10006862:	68fb      	ldr	r3, [r7, #12]
10006864:	3310      	adds	r3, #16
10006866:	1c18      	adds	r0, r3, #0
10006868:	f000 fb1c 	bl	10006ea4 <etMessageQueue_init>
	etMessageQueue_init( &(self->messageQueue) );
1000686c:	68fb      	ldr	r3, [r7, #12]
1000686e:	1c18      	adds	r0, r3, #0
10006870:	f000 fb18 	bl	10006ea4 <etMessageQueue_init>
	etMessageService_initMessagePool(self);
10006874:	68fb      	ldr	r3, [r7, #12]
10006876:	1c18      	adds	r0, r3, #0
10006878:	f000 f892 	bl	100069a0 <etMessageService_initMessagePool>

	/* init mutexes and semaphores */
	etMutex_construct( &(self->poolMutex) );
1000687c:	68fb      	ldr	r3, [r7, #12]
1000687e:	3348      	adds	r3, #72	; 0x48
10006880:	1c18      	adds	r0, r3, #0
10006882:	f000 fa8d 	bl	10006da0 <etMutex_construct>
	etMutex_construct( &(self->queueMutex) );
10006886:	68fb      	ldr	r3, [r7, #12]
10006888:	334c      	adds	r3, #76	; 0x4c
1000688a:	1c18      	adds	r0, r3, #0
1000688c:	f000 fa88 	bl	10006da0 <etMutex_construct>
	etSema_construct( &(self->executionSemaphore) );
10006890:	68fb      	ldr	r3, [r7, #12]
10006892:	3350      	adds	r3, #80	; 0x50
10006894:	1c18      	adds	r0, r3, #0
10006896:	f000 faa3 	bl	10006de0 <etSema_construct>

	/* init thread */
	etThread_construct(&self->thread, stacksize, priority, "MessageService", (etThreadFunction) etMessageService_deliverAllMessages, self);
1000689a:	68fb      	ldr	r3, [r7, #12]
1000689c:	1c18      	adds	r0, r3, #0
1000689e:	302c      	adds	r0, #44	; 0x2c
100068a0:	6a39      	ldr	r1, [r7, #32]
100068a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100068a4:	4b0e      	ldr	r3, [pc, #56]	; (100068e0 <etMessageService_init+0xbc>)
100068a6:	4c0f      	ldr	r4, [pc, #60]	; (100068e4 <etMessageService_init+0xc0>)
100068a8:	9400      	str	r4, [sp, #0]
100068aa:	68fc      	ldr	r4, [r7, #12]
100068ac:	9401      	str	r4, [sp, #4]
100068ae:	f7ff fee1 	bl	10006674 <etThread_construct>

	if (execmode==EXECMODE_POLLED || execmode==EXECMODE_MIXED) {
100068b2:	1c3b      	adds	r3, r7, #0
100068b4:	3334      	adds	r3, #52	; 0x34
100068b6:	781b      	ldrb	r3, [r3, #0]
100068b8:	2b00      	cmp	r3, #0
100068ba:	d004      	beq.n	100068c6 <etMessageService_init+0xa2>
100068bc:	1c3b      	adds	r3, r7, #0
100068be:	3334      	adds	r3, #52	; 0x34
100068c0:	781b      	ldrb	r3, [r3, #0]
100068c2:	2b02      	cmp	r3, #2
100068c4:	d108      	bne.n	100068d8 <etMessageService_init+0xb4>
		/* init timer */
		etTimer_construct(&self->timer, &interval, etMessageService_timerCallback, self);
100068c6:	68fb      	ldr	r3, [r7, #12]
100068c8:	1c18      	adds	r0, r3, #0
100068ca:	3054      	adds	r0, #84	; 0x54
100068cc:	1c39      	adds	r1, r7, #0
100068ce:	3128      	adds	r1, #40	; 0x28
100068d0:	4a05      	ldr	r2, [pc, #20]	; (100068e8 <etMessageService_init+0xc4>)
100068d2:	68fb      	ldr	r3, [r7, #12]
100068d4:	f000 faae 	bl	10006e34 <etTimer_construct>
	}

	ET_MSC_LOGGER_SYNC_EXIT
}
100068d8:	46bd      	mov	sp, r7
100068da:	b005      	add	sp, #20
100068dc:	bd90      	pop	{r4, r7, pc}
100068de:	46c0      	nop			; (mov r8, r8)
100068e0:	10009130 	.word	0x10009130
100068e4:	10006b3d 	.word	0x10006b3d
100068e8:	10006bed 	.word	0x10006bed

100068ec <etMessageService_start>:

void etMessageService_start(etMessageService* self){
100068ec:	b580      	push	{r7, lr}
100068ee:	b082      	sub	sp, #8
100068f0:	af00      	add	r7, sp, #0
100068f2:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "start")
	etThread_start( &(self->thread) );
100068f4:	687b      	ldr	r3, [r7, #4]
100068f6:	332c      	adds	r3, #44	; 0x2c
100068f8:	1c18      	adds	r0, r3, #0
100068fa:	f7ff fedf 	bl	100066bc <etThread_start>
	if (self->execmode==EXECMODE_POLLED || self->execmode==EXECMODE_MIXED) {
100068fe:	687a      	ldr	r2, [r7, #4]
10006900:	2368      	movs	r3, #104	; 0x68
10006902:	5cd3      	ldrb	r3, [r2, r3]
10006904:	2b00      	cmp	r3, #0
10006906:	d004      	beq.n	10006912 <etMessageService_start+0x26>
10006908:	687a      	ldr	r2, [r7, #4]
1000690a:	2368      	movs	r3, #104	; 0x68
1000690c:	5cd3      	ldrb	r3, [r2, r3]
1000690e:	2b02      	cmp	r3, #2
10006910:	d104      	bne.n	1000691c <etMessageService_start+0x30>
		etTimer_start(&self->timer);
10006912:	687b      	ldr	r3, [r7, #4]
10006914:	3354      	adds	r3, #84	; 0x54
10006916:	1c18      	adds	r0, r3, #0
10006918:	f000 faac 	bl	10006e74 <etTimer_start>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000691c:	46bd      	mov	sp, r7
1000691e:	b002      	add	sp, #8
10006920:	bd80      	pop	{r7, pc}
10006922:	46c0      	nop			; (mov r8, r8)

10006924 <etMessageService_stop>:

void etMessageService_stop(etMessageService* self){
10006924:	b580      	push	{r7, lr}
10006926:	b086      	sub	sp, #24
10006928:	af00      	add	r7, sp, #0
1000692a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "stop")

	if (self->execmode==EXECMODE_POLLED || self->execmode==EXECMODE_MIXED) {
1000692c:	687a      	ldr	r2, [r7, #4]
1000692e:	2368      	movs	r3, #104	; 0x68
10006930:	5cd3      	ldrb	r3, [r2, r3]
10006932:	2b00      	cmp	r3, #0
10006934:	d004      	beq.n	10006940 <etMessageService_stop+0x1c>
10006936:	687a      	ldr	r2, [r7, #4]
10006938:	2368      	movs	r3, #104	; 0x68
1000693a:	5cd3      	ldrb	r3, [r2, r3]
1000693c:	2b02      	cmp	r3, #2
1000693e:	d104      	bne.n	1000694a <etMessageService_stop+0x26>
		etTimer_stop(&self->timer);
10006940:	687b      	ldr	r3, [r7, #4]
10006942:	3354      	adds	r3, #84	; 0x54
10006944:	1c18      	adds	r0, r3, #0
10006946:	f000 fa9d 	bl	10006e84 <etTimer_stop>
	}

	/* create a temporary port struct and send the terminate message */
	etSystemProtocolConjPort port;
	port.localId = 0;
1000694a:	1c3b      	adds	r3, r7, #0
1000694c:	330c      	adds	r3, #12
1000694e:	2200      	movs	r2, #0
10006950:	725a      	strb	r2, [r3, #9]
	port.msgService = self;
10006952:	1c3b      	adds	r3, r7, #0
10006954:	330c      	adds	r3, #12
10006956:	687a      	ldr	r2, [r7, #4]
10006958:	605a      	str	r2, [r3, #4]
	port.peerAddress = MESSAGESERVICE_ADDRESS;
1000695a:	1c3b      	adds	r3, r7, #0
1000695c:	330c      	adds	r3, #12
1000695e:	2201      	movs	r2, #1
10006960:	721a      	strb	r2, [r3, #8]
	etSystemProtocolConjPort_terminate(&port);
10006962:	1c3b      	adds	r3, r7, #0
10006964:	330c      	adds	r3, #12
10006966:	1c18      	adds	r0, r3, #0
10006968:	f000 f9ae 	bl	10006cc8 <etSystemProtocolConjPort_terminate>

	ET_MSC_LOGGER_SYNC_EXIT
}
1000696c:	46bd      	mov	sp, r7
1000696e:	b006      	add	sp, #24
10006970:	bd80      	pop	{r7, pc}
10006972:	46c0      	nop			; (mov r8, r8)

10006974 <etMessageService_destroy>:

void etMessageService_destroy(etMessageService* self){
10006974:	b580      	push	{r7, lr}
10006976:	b082      	sub	sp, #8
10006978:	af00      	add	r7, sp, #0
1000697a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "destroy")
	etMutex_destruct( &(self->poolMutex) );
1000697c:	687b      	ldr	r3, [r7, #4]
1000697e:	3348      	adds	r3, #72	; 0x48
10006980:	1c18      	adds	r0, r3, #0
10006982:	f000 fa15 	bl	10006db0 <etMutex_destruct>
	etMutex_destruct( &(self->queueMutex) );
10006986:	687b      	ldr	r3, [r7, #4]
10006988:	334c      	adds	r3, #76	; 0x4c
1000698a:	1c18      	adds	r0, r3, #0
1000698c:	f000 fa10 	bl	10006db0 <etMutex_destruct>
	etSema_destruct( &(self->executionSemaphore) );
10006990:	687b      	ldr	r3, [r7, #4]
10006992:	3350      	adds	r3, #80	; 0x50
10006994:	1c18      	adds	r0, r3, #0
10006996:	f000 fa2b 	bl	10006df0 <etSema_destruct>
	ET_MSC_LOGGER_SYNC_EXIT
}
1000699a:	46bd      	mov	sp, r7
1000699c:	b002      	add	sp, #8
1000699e:	bd80      	pop	{r7, pc}

100069a0 <etMessageService_initMessagePool>:

/*
 * initialize message pool with block buffer
 * all blocks are added to pool
 */
void etMessageService_initMessagePool(etMessageService* self){
100069a0:	b580      	push	{r7, lr}
100069a2:	b084      	sub	sp, #16
100069a4:	af00      	add	r7, sp, #0
100069a6:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "initMessagePool")
	etInt16 i;

	for (i=0; i<self->messageBuffer.maxBlocks; i++){
100069a8:	1c3b      	adds	r3, r7, #0
100069aa:	330e      	adds	r3, #14
100069ac:	2200      	movs	r2, #0
100069ae:	801a      	strh	r2, [r3, #0]
100069b0:	e019      	b.n	100069e6 <etMessageService_initMessagePool+0x46>
		etMessage* block = (etMessage*) &self->messageBuffer.buffer[i*self->messageBuffer.blockSize];
100069b2:	687b      	ldr	r3, [r7, #4]
100069b4:	6a1a      	ldr	r2, [r3, #32]
100069b6:	1c3b      	adds	r3, r7, #0
100069b8:	330e      	adds	r3, #14
100069ba:	2100      	movs	r1, #0
100069bc:	5e5b      	ldrsh	r3, [r3, r1]
100069be:	6879      	ldr	r1, [r7, #4]
100069c0:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
100069c2:	434b      	muls	r3, r1
100069c4:	18d3      	adds	r3, r2, r3
100069c6:	60bb      	str	r3, [r7, #8]
		etMessageQueue_push(&self->messagePool, block);
100069c8:	687b      	ldr	r3, [r7, #4]
100069ca:	1c1a      	adds	r2, r3, #0
100069cc:	3210      	adds	r2, #16
100069ce:	68bb      	ldr	r3, [r7, #8]
100069d0:	1c10      	adds	r0, r2, #0
100069d2:	1c19      	adds	r1, r3, #0
100069d4:	f000 fa7c 	bl	10006ed0 <etMessageQueue_push>
 */
void etMessageService_initMessagePool(etMessageService* self){
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "initMessagePool")
	etInt16 i;

	for (i=0; i<self->messageBuffer.maxBlocks; i++){
100069d8:	1c3b      	adds	r3, r7, #0
100069da:	330e      	adds	r3, #14
100069dc:	1c3a      	adds	r2, r7, #0
100069de:	320e      	adds	r2, #14
100069e0:	8812      	ldrh	r2, [r2, #0]
100069e2:	3201      	adds	r2, #1
100069e4:	801a      	strh	r2, [r3, #0]
100069e6:	1c3b      	adds	r3, r7, #0
100069e8:	330e      	adds	r3, #14
100069ea:	2100      	movs	r1, #0
100069ec:	5e5a      	ldrsh	r2, [r3, r1]
100069ee:	687b      	ldr	r3, [r7, #4]
100069f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
100069f2:	429a      	cmp	r2, r3
100069f4:	dbdd      	blt.n	100069b2 <etMessageService_initMessagePool+0x12>
		etMessage* block = (etMessage*) &self->messageBuffer.buffer[i*self->messageBuffer.blockSize];
		etMessageQueue_push(&self->messagePool, block);
	}
	etMessageQueue_resetLowWaterMark(&self->messagePool);
100069f6:	687b      	ldr	r3, [r7, #4]
100069f8:	3310      	adds	r3, #16
100069fa:	1c18      	adds	r0, r3, #0
100069fc:	f000 fb1c 	bl	10007038 <etMessageQueue_resetLowWaterMark>
	ET_MSC_LOGGER_SYNC_EXIT
}
10006a00:	46bd      	mov	sp, r7
10006a02:	b004      	add	sp, #16
10006a04:	bd80      	pop	{r7, pc}
10006a06:	46c0      	nop			; (mov r8, r8)

10006a08 <etMessageService_pushMessage>:

void etMessageService_pushMessage(etMessageService* self, etMessage* msg){
10006a08:	b580      	push	{r7, lr}
10006a0a:	b082      	sub	sp, #8
10006a0c:	af00      	add	r7, sp, #0
10006a0e:	6078      	str	r0, [r7, #4]
10006a10:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "pushMessage")
	etMutex_enter(&self->queueMutex);
10006a12:	687b      	ldr	r3, [r7, #4]
10006a14:	334c      	adds	r3, #76	; 0x4c
10006a16:	1c18      	adds	r0, r3, #0
10006a18:	f000 f9d2 	bl	10006dc0 <etMutex_enter>
	etMessageQueue_push(&self->messageQueue, msg);
10006a1c:	687a      	ldr	r2, [r7, #4]
10006a1e:	683b      	ldr	r3, [r7, #0]
10006a20:	1c10      	adds	r0, r2, #0
10006a22:	1c19      	adds	r1, r3, #0
10006a24:	f000 fa54 	bl	10006ed0 <etMessageQueue_push>
	etSema_wakeup(&self->executionSemaphore);
10006a28:	687b      	ldr	r3, [r7, #4]
10006a2a:	3350      	adds	r3, #80	; 0x50
10006a2c:	1c18      	adds	r0, r3, #0
10006a2e:	f000 f9e7 	bl	10006e00 <etSema_wakeup>
	etMutex_leave(&self->queueMutex);
10006a32:	687b      	ldr	r3, [r7, #4]
10006a34:	334c      	adds	r3, #76	; 0x4c
10006a36:	1c18      	adds	r0, r3, #0
10006a38:	f000 f9ca 	bl	10006dd0 <etMutex_leave>
	ET_MSC_LOGGER_SYNC_EXIT
}
10006a3c:	46bd      	mov	sp, r7
10006a3e:	b002      	add	sp, #8
10006a40:	bd80      	pop	{r7, pc}
10006a42:	46c0      	nop			; (mov r8, r8)

10006a44 <etMessageService_popMessage>:

etMessage* etMessageService_popMessage(etMessageService* self){
10006a44:	b580      	push	{r7, lr}
10006a46:	b084      	sub	sp, #16
10006a48:	af00      	add	r7, sp, #0
10006a4a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "popMessage")
	etMutex_enter(&self->queueMutex);
10006a4c:	687b      	ldr	r3, [r7, #4]
10006a4e:	334c      	adds	r3, #76	; 0x4c
10006a50:	1c18      	adds	r0, r3, #0
10006a52:	f000 f9b5 	bl	10006dc0 <etMutex_enter>
	etMessage* msg = etMessageQueue_pop(&self->messageQueue);
10006a56:	687b      	ldr	r3, [r7, #4]
10006a58:	1c18      	adds	r0, r3, #0
10006a5a:	f000 fa6b 	bl	10006f34 <etMessageQueue_pop>
10006a5e:	1c03      	adds	r3, r0, #0
10006a60:	60fb      	str	r3, [r7, #12]
	etMutex_leave(&self->queueMutex);
10006a62:	687b      	ldr	r3, [r7, #4]
10006a64:	334c      	adds	r3, #76	; 0x4c
10006a66:	1c18      	adds	r0, r3, #0
10006a68:	f000 f9b2 	bl	10006dd0 <etMutex_leave>
	ET_MSC_LOGGER_SYNC_EXIT
	return msg;
10006a6c:	68fb      	ldr	r3, [r7, #12]
}
10006a6e:	1c18      	adds	r0, r3, #0
10006a70:	46bd      	mov	sp, r7
10006a72:	b004      	add	sp, #16
10006a74:	bd80      	pop	{r7, pc}
10006a76:	46c0      	nop			; (mov r8, r8)

10006a78 <etMessageService_getMessageBuffer>:


etMessage* etMessageService_getMessageBuffer(etMessageService* self, etUInt16 size){
10006a78:	b580      	push	{r7, lr}
10006a7a:	b084      	sub	sp, #16
10006a7c:	af00      	add	r7, sp, #0
10006a7e:	6078      	str	r0, [r7, #4]
10006a80:	1c0a      	adds	r2, r1, #0
10006a82:	1cbb      	adds	r3, r7, #2
10006a84:	801a      	strh	r2, [r3, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "getMessageBuffer")
	etMutex_enter(&self->poolMutex);
10006a86:	687b      	ldr	r3, [r7, #4]
10006a88:	3348      	adds	r3, #72	; 0x48
10006a8a:	1c18      	adds	r0, r3, #0
10006a8c:	f000 f998 	bl	10006dc0 <etMutex_enter>
	if (size<=self->messageBuffer.blockSize){
10006a90:	687b      	ldr	r3, [r7, #4]
10006a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
10006a94:	1cba      	adds	r2, r7, #2
10006a96:	8812      	ldrh	r2, [r2, #0]
10006a98:	429a      	cmp	r2, r3
10006a9a:	d81d      	bhi.n	10006ad8 <etMessageService_getMessageBuffer+0x60>
		if (self->messagePool.size>0){
10006a9c:	687b      	ldr	r3, [r7, #4]
10006a9e:	8b9b      	ldrh	r3, [r3, #28]
10006aa0:	b21b      	sxth	r3, r3
10006aa2:	2b00      	cmp	r3, #0
10006aa4:	dd0d      	ble.n	10006ac2 <etMessageService_getMessageBuffer+0x4a>
			etMessage* msg = etMessageQueue_pop(&self->messagePool);
10006aa6:	687b      	ldr	r3, [r7, #4]
10006aa8:	3310      	adds	r3, #16
10006aaa:	1c18      	adds	r0, r3, #0
10006aac:	f000 fa42 	bl	10006f34 <etMessageQueue_pop>
10006ab0:	1c03      	adds	r3, r0, #0
10006ab2:	60fb      	str	r3, [r7, #12]
			etMutex_leave(&self->poolMutex);
10006ab4:	687b      	ldr	r3, [r7, #4]
10006ab6:	3348      	adds	r3, #72	; 0x48
10006ab8:	1c18      	adds	r0, r3, #0
10006aba:	f000 f989 	bl	10006dd0 <etMutex_leave>
			ET_MSC_LOGGER_SYNC_EXIT
			return msg;
10006abe:	68fb      	ldr	r3, [r7, #12]
10006ac0:	e01a      	b.n	10006af8 <etMessageService_getMessageBuffer+0x80>
		}
		else {
			etLogger_logErrorF("etMessageService_getMessageBuffer: message pool empty: %d", etMessageService_getMessagePoolLowWaterMark(self));
10006ac2:	687b      	ldr	r3, [r7, #4]
10006ac4:	1c18      	adds	r0, r3, #0
10006ac6:	f000 f87b 	bl	10006bc0 <etMessageService_getMessagePoolLowWaterMark>
10006aca:	1c03      	adds	r3, r0, #0
10006acc:	4a0c      	ldr	r2, [pc, #48]	; (10006b00 <etMessageService_getMessageBuffer+0x88>)
10006ace:	1c10      	adds	r0, r2, #0
10006ad0:	1c19      	adds	r1, r3, #0
10006ad2:	f7ff fd7b 	bl	100065cc <etLogger_logErrorF>
10006ad6:	e009      	b.n	10006aec <etMessageService_getMessageBuffer+0x74>
		}
	}
	else {
		etLogger_logErrorF("etMessageService_getMessageBuffer: message too big: %d, blockSize: %d", size, self->messageBuffer.blockSize);
10006ad8:	1cbb      	adds	r3, r7, #2
10006ada:	881a      	ldrh	r2, [r3, #0]
10006adc:	687b      	ldr	r3, [r7, #4]
10006ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
10006ae0:	4908      	ldr	r1, [pc, #32]	; (10006b04 <etMessageService_getMessageBuffer+0x8c>)
10006ae2:	1c08      	adds	r0, r1, #0
10006ae4:	1c11      	adds	r1, r2, #0
10006ae6:	1c1a      	adds	r2, r3, #0
10006ae8:	f7ff fd70 	bl	100065cc <etLogger_logErrorF>
	}
	etMutex_leave(&self->poolMutex);
10006aec:	687b      	ldr	r3, [r7, #4]
10006aee:	3348      	adds	r3, #72	; 0x48
10006af0:	1c18      	adds	r0, r3, #0
10006af2:	f000 f96d 	bl	10006dd0 <etMutex_leave>
	ET_MSC_LOGGER_SYNC_EXIT
	return NULL;
10006af6:	2300      	movs	r3, #0
}
10006af8:	1c18      	adds	r0, r3, #0
10006afa:	46bd      	mov	sp, r7
10006afc:	b004      	add	sp, #16
10006afe:	bd80      	pop	{r7, pc}
10006b00:	10009140 	.word	0x10009140
10006b04:	1000917c 	.word	0x1000917c

10006b08 <etMessageService_returnMessageBuffer>:

void etMessageService_returnMessageBuffer(etMessageService* self, etMessage* buffer){
10006b08:	b580      	push	{r7, lr}
10006b0a:	b082      	sub	sp, #8
10006b0c:	af00      	add	r7, sp, #0
10006b0e:	6078      	str	r0, [r7, #4]
10006b10:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "returnMessageBuffer")
	etMutex_enter(&self->poolMutex);
10006b12:	687b      	ldr	r3, [r7, #4]
10006b14:	3348      	adds	r3, #72	; 0x48
10006b16:	1c18      	adds	r0, r3, #0
10006b18:	f000 f952 	bl	10006dc0 <etMutex_enter>
	etMessageQueue_push(&self->messagePool, buffer);
10006b1c:	687b      	ldr	r3, [r7, #4]
10006b1e:	1c1a      	adds	r2, r3, #0
10006b20:	3210      	adds	r2, #16
10006b22:	683b      	ldr	r3, [r7, #0]
10006b24:	1c10      	adds	r0, r2, #0
10006b26:	1c19      	adds	r1, r3, #0
10006b28:	f000 f9d2 	bl	10006ed0 <etMessageQueue_push>
	etMutex_leave(&self->poolMutex);
10006b2c:	687b      	ldr	r3, [r7, #4]
10006b2e:	3348      	adds	r3, #72	; 0x48
10006b30:	1c18      	adds	r0, r3, #0
10006b32:	f000 f94d 	bl	10006dd0 <etMutex_leave>
	ET_MSC_LOGGER_SYNC_EXIT
}
10006b36:	46bd      	mov	sp, r7
10006b38:	b002      	add	sp, #8
10006b3a:	bd80      	pop	{r7, pc}

10006b3c <etMessageService_deliverAllMessages>:

static void etMessageService_deliverAllMessages(etMessageService* self){
10006b3c:	b580      	push	{r7, lr}
10006b3e:	b084      	sub	sp, #16
10006b40:	af00      	add	r7, sp, #0
10006b42:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "deliverAllMessages")
	{
		etBool cont = ET_TRUE;
10006b44:	1c3b      	adds	r3, r7, #0
10006b46:	330f      	adds	r3, #15
10006b48:	2201      	movs	r2, #1
10006b4a:	701a      	strb	r2, [r3, #0]
		while (cont){
10006b4c:	e02f      	b.n	10006bae <etMessageService_deliverAllMessages+0x72>
			while (etMessageQueue_isNotEmpty(&self->messageQueue) && cont){
				etMessage* msg = etMessageService_popMessage(self);
10006b4e:	687b      	ldr	r3, [r7, #4]
10006b50:	1c18      	adds	r0, r3, #0
10006b52:	f7ff ff77 	bl	10006a44 <etMessageService_popMessage>
10006b56:	1c03      	adds	r3, r0, #0
10006b58:	60bb      	str	r3, [r7, #8]
				if (!self->msgDispatcher(msg))
10006b5a:	687b      	ldr	r3, [r7, #4]
10006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006b5e:	68ba      	ldr	r2, [r7, #8]
10006b60:	1c10      	adds	r0, r2, #0
10006b62:	4798      	blx	r3
10006b64:	1c03      	adds	r3, r0, #0
10006b66:	2b00      	cmp	r3, #0
10006b68:	d103      	bne.n	10006b72 <etMessageService_deliverAllMessages+0x36>
					cont = ET_FALSE;
10006b6a:	1c3b      	adds	r3, r7, #0
10006b6c:	330f      	adds	r3, #15
10006b6e:	2200      	movs	r2, #0
10006b70:	701a      	strb	r2, [r3, #0]
				etMessageService_returnMessageBuffer(self, msg);
10006b72:	687a      	ldr	r2, [r7, #4]
10006b74:	68bb      	ldr	r3, [r7, #8]
10006b76:	1c10      	adds	r0, r2, #0
10006b78:	1c19      	adds	r1, r3, #0
10006b7a:	f7ff ffc5 	bl	10006b08 <etMessageService_returnMessageBuffer>
10006b7e:	e000      	b.n	10006b82 <etMessageService_deliverAllMessages+0x46>
static void etMessageService_deliverAllMessages(etMessageService* self){
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "deliverAllMessages")
	{
		etBool cont = ET_TRUE;
		while (cont){
			while (etMessageQueue_isNotEmpty(&self->messageQueue) && cont){
10006b80:	46c0      	nop			; (mov r8, r8)
10006b82:	687b      	ldr	r3, [r7, #4]
10006b84:	1c18      	adds	r0, r3, #0
10006b86:	f000 fa31 	bl	10006fec <etMessageQueue_isNotEmpty>
10006b8a:	1c03      	adds	r3, r0, #0
10006b8c:	2b00      	cmp	r3, #0
10006b8e:	d004      	beq.n	10006b9a <etMessageService_deliverAllMessages+0x5e>
10006b90:	1c3b      	adds	r3, r7, #0
10006b92:	330f      	adds	r3, #15
10006b94:	781b      	ldrb	r3, [r3, #0]
10006b96:	2b00      	cmp	r3, #0
10006b98:	d1d9      	bne.n	10006b4e <etMessageService_deliverAllMessages+0x12>
				etMessage* msg = etMessageService_popMessage(self);
				if (!self->msgDispatcher(msg))
					cont = ET_FALSE;
				etMessageService_returnMessageBuffer(self, msg);
			}
			if (cont)
10006b9a:	1c3b      	adds	r3, r7, #0
10006b9c:	330f      	adds	r3, #15
10006b9e:	781b      	ldrb	r3, [r3, #0]
10006ba0:	2b00      	cmp	r3, #0
10006ba2:	d004      	beq.n	10006bae <etMessageService_deliverAllMessages+0x72>
				etSema_waitForWakeup(&self->executionSemaphore);
10006ba4:	687b      	ldr	r3, [r7, #4]
10006ba6:	3350      	adds	r3, #80	; 0x50
10006ba8:	1c18      	adds	r0, r3, #0
10006baa:	f000 f931 	bl	10006e10 <etSema_waitForWakeup>

static void etMessageService_deliverAllMessages(etMessageService* self){
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "deliverAllMessages")
	{
		etBool cont = ET_TRUE;
		while (cont){
10006bae:	1c3b      	adds	r3, r7, #0
10006bb0:	330f      	adds	r3, #15
10006bb2:	781b      	ldrb	r3, [r3, #0]
10006bb4:	2b00      	cmp	r3, #0
10006bb6:	d1e3      	bne.n	10006b80 <etMessageService_deliverAllMessages+0x44>
			if (cont)
				etSema_waitForWakeup(&self->executionSemaphore);
		}
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10006bb8:	46bd      	mov	sp, r7
10006bba:	b004      	add	sp, #16
10006bbc:	bd80      	pop	{r7, pc}
10006bbe:	46c0      	nop			; (mov r8, r8)

10006bc0 <etMessageService_getMessagePoolLowWaterMark>:

etInt16 etMessageService_getMessagePoolLowWaterMark(etMessageService* self){
10006bc0:	b590      	push	{r4, r7, lr}
10006bc2:	b085      	sub	sp, #20
10006bc4:	af00      	add	r7, sp, #0
10006bc6:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "getMessagePoolLowWaterMark")
	etInt16 lowWaterMark = etMessageQueue_getLowWaterMark(&self->messagePool);
10006bc8:	687b      	ldr	r3, [r7, #4]
10006bca:	3310      	adds	r3, #16
10006bcc:	1c3c      	adds	r4, r7, #0
10006bce:	340e      	adds	r4, #14
10006bd0:	1c18      	adds	r0, r3, #0
10006bd2:	f000 fa25 	bl	10007020 <etMessageQueue_getLowWaterMark>
10006bd6:	1c03      	adds	r3, r0, #0
10006bd8:	8023      	strh	r3, [r4, #0]
	ET_MSC_LOGGER_SYNC_EXIT
	return lowWaterMark;
10006bda:	1c3b      	adds	r3, r7, #0
10006bdc:	330e      	adds	r3, #14
10006bde:	881b      	ldrh	r3, [r3, #0]
10006be0:	b21b      	sxth	r3, r3
}
10006be2:	1c18      	adds	r0, r3, #0
10006be4:	46bd      	mov	sp, r7
10006be6:	b005      	add	sp, #20
10006be8:	bd90      	pop	{r4, r7, pc}
10006bea:	46c0      	nop			; (mov r8, r8)

10006bec <etMessageService_timerCallback>:

static void etMessageService_timerCallback(void* data) {
10006bec:	b580      	push	{r7, lr}
10006bee:	b086      	sub	sp, #24
10006bf0:	af00      	add	r7, sp, #0
10006bf2:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "timerCallback")
	{
		etMessageService* self = (etMessageService*) data;
10006bf4:	687b      	ldr	r3, [r7, #4]
10006bf6:	617b      	str	r3, [r7, #20]

		/* create a temporary port struct and send the poll message */
		etSystemProtocolConjPort port;
		port.localId = 0;
10006bf8:	1c3b      	adds	r3, r7, #0
10006bfa:	3308      	adds	r3, #8
10006bfc:	2200      	movs	r2, #0
10006bfe:	725a      	strb	r2, [r3, #9]
		port.msgService = self;
10006c00:	1c3b      	adds	r3, r7, #0
10006c02:	3308      	adds	r3, #8
10006c04:	697a      	ldr	r2, [r7, #20]
10006c06:	605a      	str	r2, [r3, #4]
		port.peerAddress = MESSAGESERVICE_ADDRESS;
10006c08:	1c3b      	adds	r3, r7, #0
10006c0a:	3308      	adds	r3, #8
10006c0c:	2201      	movs	r2, #1
10006c0e:	721a      	strb	r2, [r3, #8]
		etSystemProtocolConjPort_poll(&port);
10006c10:	1c3b      	adds	r3, r7, #0
10006c12:	3308      	adds	r3, #8
10006c14:	1c18      	adds	r0, r3, #0
10006c16:	f000 f80f 	bl	10006c38 <etSystemProtocolConjPort_poll>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10006c1a:	46bd      	mov	sp, r7
10006c1c:	b006      	add	sp, #24
10006c1e:	bd80      	pop	{r7, pc}

10006c20 <etSystemProtocolReplPort_getReplication>:

/*--------------------- port methods */


/* getReplication */
etInt32 etSystemProtocolReplPort_getReplication(const etSystemProtocolReplPort* self) {
10006c20:	b580      	push	{r7, lr}
10006c22:	b082      	sub	sp, #8
10006c24:	af00      	add	r7, sp, #0
10006c26:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10006c28:	687b      	ldr	r3, [r7, #4]
10006c2a:	881b      	ldrh	r3, [r3, #0]
10006c2c:	b21b      	sxth	r3, r3
}
10006c2e:	1c18      	adds	r0, r3, #0
10006c30:	46bd      	mov	sp, r7
10006c32:	b002      	add	sp, #8
10006c34:	bd80      	pop	{r7, pc}
10006c36:	46c0      	nop			; (mov r8, r8)

10006c38 <etSystemProtocolConjPort_poll>:



void etSystemProtocolConjPort_poll(const etSystemProtocolConjPort* self) {
10006c38:	b580      	push	{r7, lr}
10006c3a:	b082      	sub	sp, #8
10006c3c:	af00      	add	r7, sp, #0
10006c3e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjPort", "poll")
		etPort_sendMessage(self, etSystemProtocol_IN_poll, 0, NULL);
10006c40:	687b      	ldr	r3, [r7, #4]
10006c42:	1c18      	adds	r0, r3, #0
10006c44:	2101      	movs	r1, #1
10006c46:	2200      	movs	r2, #0
10006c48:	2300      	movs	r3, #0
10006c4a:	f7ff fda7 	bl	1000679c <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
10006c4e:	46bd      	mov	sp, r7
10006c50:	b002      	add	sp, #8
10006c52:	bd80      	pop	{r7, pc}

10006c54 <etSystemProtocolConjReplPort_poll_broadcast>:

void etSystemProtocolConjReplPort_poll_broadcast(const etSystemProtocolConjReplPort* self) {
10006c54:	b580      	push	{r7, lr}
10006c56:	b084      	sub	sp, #16
10006c58:	af00      	add	r7, sp, #0
10006c5a:	6078      	str	r0, [r7, #4]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "poll")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10006c5c:	2300      	movs	r3, #0
10006c5e:	60fb      	str	r3, [r7, #12]
10006c60:	e00d      	b.n	10006c7e <etSystemProtocolConjReplPort_poll_broadcast+0x2a>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[i]), etSystemProtocol_IN_poll, 0, NULL);
10006c62:	687b      	ldr	r3, [r7, #4]
10006c64:	685a      	ldr	r2, [r3, #4]
10006c66:	68fb      	ldr	r3, [r7, #12]
10006c68:	011b      	lsls	r3, r3, #4
10006c6a:	18d3      	adds	r3, r2, r3
10006c6c:	1c18      	adds	r0, r3, #0
10006c6e:	2101      	movs	r1, #1
10006c70:	2200      	movs	r2, #0
10006c72:	2300      	movs	r3, #0
10006c74:	f7ff fd92 	bl	1000679c <etPort_sendMessage>
}

void etSystemProtocolConjReplPort_poll_broadcast(const etSystemProtocolConjReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "poll")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10006c78:	68fb      	ldr	r3, [r7, #12]
10006c7a:	3301      	adds	r3, #1
10006c7c:	60fb      	str	r3, [r7, #12]
10006c7e:	687b      	ldr	r3, [r7, #4]
10006c80:	881b      	ldrh	r3, [r3, #0]
10006c82:	b21a      	sxth	r2, r3
10006c84:	68fb      	ldr	r3, [r7, #12]
10006c86:	429a      	cmp	r2, r3
10006c88:	dceb      	bgt.n	10006c62 <etSystemProtocolConjReplPort_poll_broadcast+0xe>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[i]), etSystemProtocol_IN_poll, 0, NULL);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10006c8a:	46bd      	mov	sp, r7
10006c8c:	b004      	add	sp, #16
10006c8e:	bd80      	pop	{r7, pc}

10006c90 <etSystemProtocolConjReplPort_poll>:

void etSystemProtocolConjReplPort_poll(const etSystemProtocolConjReplPort* self, int idx) {
10006c90:	b580      	push	{r7, lr}
10006c92:	b082      	sub	sp, #8
10006c94:	af00      	add	r7, sp, #0
10006c96:	6078      	str	r0, [r7, #4]
10006c98:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "poll")
	if (0<=idx && idx<((etReplPort*)self)->size) {
10006c9a:	683b      	ldr	r3, [r7, #0]
10006c9c:	2b00      	cmp	r3, #0
10006c9e:	db10      	blt.n	10006cc2 <etSystemProtocolConjReplPort_poll+0x32>
10006ca0:	687b      	ldr	r3, [r7, #4]
10006ca2:	881b      	ldrh	r3, [r3, #0]
10006ca4:	b21a      	sxth	r2, r3
10006ca6:	683b      	ldr	r3, [r7, #0]
10006ca8:	429a      	cmp	r2, r3
10006caa:	dd0a      	ble.n	10006cc2 <etSystemProtocolConjReplPort_poll+0x32>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[idx]), etSystemProtocol_IN_poll, 0, NULL);
10006cac:	687b      	ldr	r3, [r7, #4]
10006cae:	685a      	ldr	r2, [r3, #4]
10006cb0:	683b      	ldr	r3, [r7, #0]
10006cb2:	011b      	lsls	r3, r3, #4
10006cb4:	18d3      	adds	r3, r2, r3
10006cb6:	1c18      	adds	r0, r3, #0
10006cb8:	2101      	movs	r1, #1
10006cba:	2200      	movs	r2, #0
10006cbc:	2300      	movs	r3, #0
10006cbe:	f7ff fd6d 	bl	1000679c <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10006cc2:	46bd      	mov	sp, r7
10006cc4:	b002      	add	sp, #8
10006cc6:	bd80      	pop	{r7, pc}

10006cc8 <etSystemProtocolConjPort_terminate>:

void etSystemProtocolConjPort_terminate(const etSystemProtocolConjPort* self) {
10006cc8:	b580      	push	{r7, lr}
10006cca:	b082      	sub	sp, #8
10006ccc:	af00      	add	r7, sp, #0
10006cce:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjPort", "terminate")
		etPort_sendMessage(self, etSystemProtocol_IN_terminate, 0, NULL);
10006cd0:	687b      	ldr	r3, [r7, #4]
10006cd2:	1c18      	adds	r0, r3, #0
10006cd4:	2102      	movs	r1, #2
10006cd6:	2200      	movs	r2, #0
10006cd8:	2300      	movs	r3, #0
10006cda:	f7ff fd5f 	bl	1000679c <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
10006cde:	46bd      	mov	sp, r7
10006ce0:	b002      	add	sp, #8
10006ce2:	bd80      	pop	{r7, pc}

10006ce4 <etSystemProtocolConjReplPort_terminate_broadcast>:

void etSystemProtocolConjReplPort_terminate_broadcast(const etSystemProtocolConjReplPort* self) {
10006ce4:	b580      	push	{r7, lr}
10006ce6:	b084      	sub	sp, #16
10006ce8:	af00      	add	r7, sp, #0
10006cea:	6078      	str	r0, [r7, #4]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "terminate")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10006cec:	2300      	movs	r3, #0
10006cee:	60fb      	str	r3, [r7, #12]
10006cf0:	e00d      	b.n	10006d0e <etSystemProtocolConjReplPort_terminate_broadcast+0x2a>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[i]), etSystemProtocol_IN_terminate, 0, NULL);
10006cf2:	687b      	ldr	r3, [r7, #4]
10006cf4:	685a      	ldr	r2, [r3, #4]
10006cf6:	68fb      	ldr	r3, [r7, #12]
10006cf8:	011b      	lsls	r3, r3, #4
10006cfa:	18d3      	adds	r3, r2, r3
10006cfc:	1c18      	adds	r0, r3, #0
10006cfe:	2102      	movs	r1, #2
10006d00:	2200      	movs	r2, #0
10006d02:	2300      	movs	r3, #0
10006d04:	f7ff fd4a 	bl	1000679c <etPort_sendMessage>
}

void etSystemProtocolConjReplPort_terminate_broadcast(const etSystemProtocolConjReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "terminate")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10006d08:	68fb      	ldr	r3, [r7, #12]
10006d0a:	3301      	adds	r3, #1
10006d0c:	60fb      	str	r3, [r7, #12]
10006d0e:	687b      	ldr	r3, [r7, #4]
10006d10:	881b      	ldrh	r3, [r3, #0]
10006d12:	b21a      	sxth	r2, r3
10006d14:	68fb      	ldr	r3, [r7, #12]
10006d16:	429a      	cmp	r2, r3
10006d18:	dceb      	bgt.n	10006cf2 <etSystemProtocolConjReplPort_terminate_broadcast+0xe>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[i]), etSystemProtocol_IN_terminate, 0, NULL);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10006d1a:	46bd      	mov	sp, r7
10006d1c:	b004      	add	sp, #16
10006d1e:	bd80      	pop	{r7, pc}

10006d20 <etSystemProtocolConjReplPort_terminate>:

void etSystemProtocolConjReplPort_terminate(const etSystemProtocolConjReplPort* self, int idx) {
10006d20:	b580      	push	{r7, lr}
10006d22:	b082      	sub	sp, #8
10006d24:	af00      	add	r7, sp, #0
10006d26:	6078      	str	r0, [r7, #4]
10006d28:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "terminate")
	if (0<=idx && idx<((etReplPort*)self)->size) {
10006d2a:	683b      	ldr	r3, [r7, #0]
10006d2c:	2b00      	cmp	r3, #0
10006d2e:	db10      	blt.n	10006d52 <etSystemProtocolConjReplPort_terminate+0x32>
10006d30:	687b      	ldr	r3, [r7, #4]
10006d32:	881b      	ldrh	r3, [r3, #0]
10006d34:	b21a      	sxth	r2, r3
10006d36:	683b      	ldr	r3, [r7, #0]
10006d38:	429a      	cmp	r2, r3
10006d3a:	dd0a      	ble.n	10006d52 <etSystemProtocolConjReplPort_terminate+0x32>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[idx]), etSystemProtocol_IN_terminate, 0, NULL);
10006d3c:	687b      	ldr	r3, [r7, #4]
10006d3e:	685a      	ldr	r2, [r3, #4]
10006d40:	683b      	ldr	r3, [r7, #0]
10006d42:	011b      	lsls	r3, r3, #4
10006d44:	18d3      	adds	r3, r2, r3
10006d46:	1c18      	adds	r0, r3, #0
10006d48:	2102      	movs	r1, #2
10006d4a:	2200      	movs	r2, #0
10006d4c:	2300      	movs	r3, #0
10006d4e:	f7ff fd25 	bl	1000679c <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10006d52:	46bd      	mov	sp, r7
10006d54:	b002      	add	sp, #8
10006d56:	bd80      	pop	{r7, pc}

10006d58 <etSystemProtocolConjReplPort_getReplication>:


/* getReplication */
etInt32 etSystemProtocolConjReplPort_getReplication(const etSystemProtocolConjReplPort* self) {
10006d58:	b580      	push	{r7, lr}
10006d5a:	b082      	sub	sp, #8
10006d5c:	af00      	add	r7, sp, #0
10006d5e:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10006d60:	687b      	ldr	r3, [r7, #4]
10006d62:	881b      	ldrh	r3, [r3, #0]
10006d64:	b21b      	sxth	r3, r3
}
10006d66:	1c18      	adds	r0, r3, #0
10006d68:	46bd      	mov	sp, r7
10006d6a:	b002      	add	sp, #8
10006d6c:	bd80      	pop	{r7, pc}
10006d6e:	46c0      	nop			; (mov r8, r8)

10006d70 <etSystemProtocol_getMessageString>:
/*--------------------- debug helpers */

/* message names as strings for debugging (generate MSC) */
static const char* const etSystemProtocol_messageStrings[] = {"MIN", "poll", "terminate", "MAX"};

const char* etSystemProtocol_getMessageString(int msg_id) {
10006d70:	b580      	push	{r7, lr}
10006d72:	b082      	sub	sp, #8
10006d74:	af00      	add	r7, sp, #0
10006d76:	6078      	str	r0, [r7, #4]
	if (msg_id<etSystemProtocol_MSG_MIN || msg_id>etSystemProtocol_MSG_MAX+1){
10006d78:	687b      	ldr	r3, [r7, #4]
10006d7a:	2b00      	cmp	r3, #0
10006d7c:	db02      	blt.n	10006d84 <etSystemProtocol_getMessageString+0x14>
10006d7e:	687b      	ldr	r3, [r7, #4]
10006d80:	2b04      	cmp	r3, #4
10006d82:	dd01      	ble.n	10006d88 <etSystemProtocol_getMessageString+0x18>
		/* id out of range */
		return "Message ID out of range";
10006d84:	4b04      	ldr	r3, [pc, #16]	; (10006d98 <etSystemProtocol_getMessageString+0x28>)
10006d86:	e003      	b.n	10006d90 <etSystemProtocol_getMessageString+0x20>
	}
	else{
		return etSystemProtocol_messageStrings[msg_id];
10006d88:	4b04      	ldr	r3, [pc, #16]	; (10006d9c <etSystemProtocol_getMessageString+0x2c>)
10006d8a:	687a      	ldr	r2, [r7, #4]
10006d8c:	0092      	lsls	r2, r2, #2
10006d8e:	58d3      	ldr	r3, [r2, r3]
	}
}
10006d90:	1c18      	adds	r0, r3, #0
10006d92:	46bd      	mov	sp, r7
10006d94:	b002      	add	sp, #8
10006d96:	bd80      	pop	{r7, pc}
10006d98:	100091f0 	.word	0x100091f0
10006d9c:	100091e0 	.word	0x100091e0

10006da0 <etMutex_construct>:

#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "XMC1100.h"

void etMutex_construct(etMutex* self){
10006da0:	b580      	push	{r7, lr}
10006da2:	b082      	sub	sp, #8
10006da4:	af00      	add	r7, sp, #0
10006da6:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMutex", "construct")

	ET_MSC_LOGGER_SYNC_EXIT
}
10006da8:	46bd      	mov	sp, r7
10006daa:	b002      	add	sp, #8
10006dac:	bd80      	pop	{r7, pc}
10006dae:	46c0      	nop			; (mov r8, r8)

10006db0 <etMutex_destruct>:
void etMutex_destruct(etMutex* self){
10006db0:	b580      	push	{r7, lr}
10006db2:	b082      	sub	sp, #8
10006db4:	af00      	add	r7, sp, #0
10006db6:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMutex", "destruct")

	ET_MSC_LOGGER_SYNC_EXIT
}
10006db8:	46bd      	mov	sp, r7
10006dba:	b002      	add	sp, #8
10006dbc:	bd80      	pop	{r7, pc}
10006dbe:	46c0      	nop			; (mov r8, r8)

10006dc0 <etMutex_enter>:

void etMutex_enter(etMutex* self){
10006dc0:	b580      	push	{r7, lr}
10006dc2:	b082      	sub	sp, #8
10006dc4:	af00      	add	r7, sp, #0
10006dc6:	6078      	str	r0, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10006dc8:	b672      	cpsid	i
	ET_MSC_LOGGER_SYNC_ENTRY("etMutex", "enter")
		__disable_irq();
	ET_MSC_LOGGER_SYNC_EXIT
}
10006dca:	46bd      	mov	sp, r7
10006dcc:	b002      	add	sp, #8
10006dce:	bd80      	pop	{r7, pc}

10006dd0 <etMutex_leave>:
void etMutex_leave(etMutex* self){
10006dd0:	b580      	push	{r7, lr}
10006dd2:	b082      	sub	sp, #8
10006dd4:	af00      	add	r7, sp, #0
10006dd6:	6078      	str	r0, [r7, #4]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
10006dd8:	b662      	cpsie	i
	ET_MSC_LOGGER_SYNC_ENTRY("etMutex", "leave")
		__enable_irq();
	ET_MSC_LOGGER_SYNC_EXIT
}
10006dda:	46bd      	mov	sp, r7
10006ddc:	b002      	add	sp, #8
10006dde:	bd80      	pop	{r7, pc}

10006de0 <etSema_construct>:

#include "debugging/etMSCLogger.h"

extern etTimer * singleThreadedTimer;

void etSema_construct(etSema* self){
10006de0:	b580      	push	{r7, lr}
10006de2:	b082      	sub	sp, #8
10006de4:	af00      	add	r7, sp, #0
10006de6:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSema", "construct")

	ET_MSC_LOGGER_SYNC_EXIT
}
10006de8:	46bd      	mov	sp, r7
10006dea:	b002      	add	sp, #8
10006dec:	bd80      	pop	{r7, pc}
10006dee:	46c0      	nop			; (mov r8, r8)

10006df0 <etSema_destruct>:
void etSema_destruct(etSema* self){
10006df0:	b580      	push	{r7, lr}
10006df2:	b082      	sub	sp, #8
10006df4:	af00      	add	r7, sp, #0
10006df6:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSema", "destruct")

	ET_MSC_LOGGER_SYNC_EXIT
}
10006df8:	46bd      	mov	sp, r7
10006dfa:	b002      	add	sp, #8
10006dfc:	bd80      	pop	{r7, pc}
10006dfe:	46c0      	nop			; (mov r8, r8)

10006e00 <etSema_wakeup>:

void etSema_wakeup(etSema* self){
10006e00:	b580      	push	{r7, lr}
10006e02:	b082      	sub	sp, #8
10006e04:	af00      	add	r7, sp, #0
10006e06:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSema", "wakeup")

	ET_MSC_LOGGER_SYNC_EXIT
}
10006e08:	46bd      	mov	sp, r7
10006e0a:	b002      	add	sp, #8
10006e0c:	bd80      	pop	{r7, pc}
10006e0e:	46c0      	nop			; (mov r8, r8)

10006e10 <etSema_waitForWakeup>:

void etSema_waitForWakeup(etSema* self){
10006e10:	b580      	push	{r7, lr}
10006e12:	b082      	sub	sp, #8
10006e14:	af00      	add	r7, sp, #0
10006e16:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSema", "waitForWakeup")
	// call the execute function
	singleThreadedTimer->timerFunction(singleThreadedTimer->timerFunctionData);
10006e18:	4b05      	ldr	r3, [pc, #20]	; (10006e30 <etSema_waitForWakeup+0x20>)
10006e1a:	681b      	ldr	r3, [r3, #0]
10006e1c:	689a      	ldr	r2, [r3, #8]
10006e1e:	4b04      	ldr	r3, [pc, #16]	; (10006e30 <etSema_waitForWakeup+0x20>)
10006e20:	681b      	ldr	r3, [r3, #0]
10006e22:	68db      	ldr	r3, [r3, #12]
10006e24:	1c18      	adds	r0, r3, #0
10006e26:	4790      	blx	r2
	ET_MSC_LOGGER_SYNC_EXIT
}
10006e28:	46bd      	mov	sp, r7
10006e2a:	b002      	add	sp, #8
10006e2c:	bd80      	pop	{r7, pc}
10006e2e:	46c0      	nop			; (mov r8, r8)
10006e30:	20001114 	.word	0x20001114

10006e34 <etTimer_construct>:
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"

etTimer * singleThreadedTimer;

void etTimer_construct(etTimer* self, etTime* timerInterval, etTimerFunction timerFunction, void* timerFunctionData){
10006e34:	b580      	push	{r7, lr}
10006e36:	b084      	sub	sp, #16
10006e38:	af00      	add	r7, sp, #0
10006e3a:	60f8      	str	r0, [r7, #12]
10006e3c:	60b9      	str	r1, [r7, #8]
10006e3e:	607a      	str	r2, [r7, #4]
10006e40:	603b      	str	r3, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etTimer", "construct")
	{
		self->osTimerData = NULL;
10006e42:	68fb      	ldr	r3, [r7, #12]
10006e44:	2200      	movs	r2, #0
10006e46:	611a      	str	r2, [r3, #16]
		self->timerInterval.sec = timerInterval->sec;
10006e48:	68bb      	ldr	r3, [r7, #8]
10006e4a:	681a      	ldr	r2, [r3, #0]
10006e4c:	68fb      	ldr	r3, [r7, #12]
10006e4e:	601a      	str	r2, [r3, #0]
		self->timerInterval.nSec = timerInterval->nSec;
10006e50:	68bb      	ldr	r3, [r7, #8]
10006e52:	685a      	ldr	r2, [r3, #4]
10006e54:	68fb      	ldr	r3, [r7, #12]
10006e56:	605a      	str	r2, [r3, #4]
		self->timerFunction = timerFunction;
10006e58:	68fb      	ldr	r3, [r7, #12]
10006e5a:	687a      	ldr	r2, [r7, #4]
10006e5c:	609a      	str	r2, [r3, #8]
		self->timerFunctionData = timerFunctionData;
10006e5e:	68fb      	ldr	r3, [r7, #12]
10006e60:	683a      	ldr	r2, [r7, #0]
10006e62:	60da      	str	r2, [r3, #12]


	}
	// store the timer, it will be needed to call the do actions
	singleThreadedTimer = self;
10006e64:	4b02      	ldr	r3, [pc, #8]	; (10006e70 <etTimer_construct+0x3c>)
10006e66:	68fa      	ldr	r2, [r7, #12]
10006e68:	601a      	str	r2, [r3, #0]

	ET_MSC_LOGGER_SYNC_EXIT
}
10006e6a:	46bd      	mov	sp, r7
10006e6c:	b004      	add	sp, #16
10006e6e:	bd80      	pop	{r7, pc}
10006e70:	20001114 	.word	0x20001114

10006e74 <etTimer_start>:

void etTimer_start(etTimer* self){
10006e74:	b580      	push	{r7, lr}
10006e76:	b082      	sub	sp, #8
10006e78:	af00      	add	r7, sp, #0
10006e7a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etTimer", "start")

	ET_MSC_LOGGER_SYNC_EXIT
}
10006e7c:	46bd      	mov	sp, r7
10006e7e:	b002      	add	sp, #8
10006e80:	bd80      	pop	{r7, pc}
10006e82:	46c0      	nop			; (mov r8, r8)

10006e84 <etTimer_stop>:


void etTimer_stop(etTimer* self){
10006e84:	b580      	push	{r7, lr}
10006e86:	b082      	sub	sp, #8
10006e88:	af00      	add	r7, sp, #0
10006e8a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etTimer", "stop")

	ET_MSC_LOGGER_SYNC_EXIT
}
10006e8c:	46bd      	mov	sp, r7
10006e8e:	b002      	add	sp, #8
10006e90:	bd80      	pop	{r7, pc}
10006e92:	46c0      	nop			; (mov r8, r8)

10006e94 <etTimer_destruct>:

void etTimer_destruct(etTimer* self){
10006e94:	b580      	push	{r7, lr}
10006e96:	b082      	sub	sp, #8
10006e98:	af00      	add	r7, sp, #0
10006e9a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etTimer", "destruct")

	ET_MSC_LOGGER_SYNC_EXIT
}
10006e9c:	46bd      	mov	sp, r7
10006e9e:	b002      	add	sp, #8
10006ea0:	bd80      	pop	{r7, pc}
10006ea2:	46c0      	nop			; (mov r8, r8)

10006ea4 <etMessageQueue_init>:

#include "messaging/etMessageQueue.h"

#include "debugging/etMSCLogger.h"

void etMessageQueue_init(etMessageQueue* self){
10006ea4:	b580      	push	{r7, lr}
10006ea6:	b082      	sub	sp, #8
10006ea8:	af00      	add	r7, sp, #0
10006eaa:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "init")
	self->first = NULL;
10006eac:	687b      	ldr	r3, [r7, #4]
10006eae:	2200      	movs	r2, #0
10006eb0:	601a      	str	r2, [r3, #0]
	self->last = NULL;
10006eb2:	687b      	ldr	r3, [r7, #4]
10006eb4:	2200      	movs	r2, #0
10006eb6:	605a      	str	r2, [r3, #4]
	self->highWaterMark = 0;
10006eb8:	687b      	ldr	r3, [r7, #4]
10006eba:	2200      	movs	r2, #0
10006ebc:	811a      	strh	r2, [r3, #8]
	self->lowWaterMark = 0;
10006ebe:	687b      	ldr	r3, [r7, #4]
10006ec0:	2200      	movs	r2, #0
10006ec2:	815a      	strh	r2, [r3, #10]
	self->size = 0;
10006ec4:	687b      	ldr	r3, [r7, #4]
10006ec6:	2200      	movs	r2, #0
10006ec8:	819a      	strh	r2, [r3, #12]
	ET_MSC_LOGGER_SYNC_EXIT
}
10006eca:	46bd      	mov	sp, r7
10006ecc:	b002      	add	sp, #8
10006ece:	bd80      	pop	{r7, pc}

10006ed0 <etMessageQueue_push>:


void etMessageQueue_push(etMessageQueue* self, etMessage* msg){
10006ed0:	b580      	push	{r7, lr}
10006ed2:	b082      	sub	sp, #8
10006ed4:	af00      	add	r7, sp, #0
10006ed6:	6078      	str	r0, [r7, #4]
10006ed8:	6039      	str	r1, [r7, #0]
	/* TODO: optimize queue for concurrent push / pop */
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "push")
	if (self->first == NULL) {
10006eda:	687b      	ldr	r3, [r7, #4]
10006edc:	681b      	ldr	r3, [r3, #0]
10006ede:	2b00      	cmp	r3, #0
10006ee0:	d107      	bne.n	10006ef2 <etMessageQueue_push+0x22>
		/*no message in queue*/
		self->first = self->last = msg;
10006ee2:	687b      	ldr	r3, [r7, #4]
10006ee4:	683a      	ldr	r2, [r7, #0]
10006ee6:	605a      	str	r2, [r3, #4]
10006ee8:	687b      	ldr	r3, [r7, #4]
10006eea:	685a      	ldr	r2, [r3, #4]
10006eec:	687b      	ldr	r3, [r7, #4]
10006eee:	601a      	str	r2, [r3, #0]
10006ef0:	e006      	b.n	10006f00 <etMessageQueue_push+0x30>
	}
	else {
		/*at least one message in queue*/
		self->last->next = msg;
10006ef2:	687b      	ldr	r3, [r7, #4]
10006ef4:	685b      	ldr	r3, [r3, #4]
10006ef6:	683a      	ldr	r2, [r7, #0]
10006ef8:	601a      	str	r2, [r3, #0]
		self->last = msg;
10006efa:	687b      	ldr	r3, [r7, #4]
10006efc:	683a      	ldr	r2, [r7, #0]
10006efe:	605a      	str	r2, [r3, #4]
	}
	msg->next = NULL; /*TODO: optimization: this line could be removed if we assume that all messages are initialized*/
10006f00:	683b      	ldr	r3, [r7, #0]
10006f02:	2200      	movs	r2, #0
10006f04:	601a      	str	r2, [r3, #0]

	if (++self->size > self->highWaterMark)
10006f06:	687b      	ldr	r3, [r7, #4]
10006f08:	899b      	ldrh	r3, [r3, #12]
10006f0a:	3301      	adds	r3, #1
10006f0c:	b29a      	uxth	r2, r3
10006f0e:	687b      	ldr	r3, [r7, #4]
10006f10:	819a      	strh	r2, [r3, #12]
10006f12:	687b      	ldr	r3, [r7, #4]
10006f14:	899a      	ldrh	r2, [r3, #12]
10006f16:	687b      	ldr	r3, [r7, #4]
10006f18:	891b      	ldrh	r3, [r3, #8]
10006f1a:	b212      	sxth	r2, r2
10006f1c:	b21b      	sxth	r3, r3
10006f1e:	429a      	cmp	r2, r3
10006f20:	dd05      	ble.n	10006f2e <etMessageQueue_push+0x5e>
		self->highWaterMark++;
10006f22:	687b      	ldr	r3, [r7, #4]
10006f24:	891b      	ldrh	r3, [r3, #8]
10006f26:	3301      	adds	r3, #1
10006f28:	b29a      	uxth	r2, r3
10006f2a:	687b      	ldr	r3, [r7, #4]
10006f2c:	811a      	strh	r2, [r3, #8]

	ET_MSC_LOGGER_SYNC_EXIT
}
10006f2e:	46bd      	mov	sp, r7
10006f30:	b002      	add	sp, #8
10006f32:	bd80      	pop	{r7, pc}

10006f34 <etMessageQueue_pop>:

etMessage* etMessageQueue_pop(etMessageQueue* self){
10006f34:	b580      	push	{r7, lr}
10006f36:	b084      	sub	sp, #16
10006f38:	af00      	add	r7, sp, #0
10006f3a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "pop")
	etMessage* pop_msg = self->first;
10006f3c:	687b      	ldr	r3, [r7, #4]
10006f3e:	681b      	ldr	r3, [r3, #0]
10006f40:	60fb      	str	r3, [r7, #12]
	if(self->first == NULL){
10006f42:	687b      	ldr	r3, [r7, #4]
10006f44:	681b      	ldr	r3, [r3, #0]
10006f46:	2b00      	cmp	r3, #0
10006f48:	d101      	bne.n	10006f4e <etMessageQueue_pop+0x1a>
		/*no message in queue*/
		ET_MSC_LOGGER_SYNC_EXIT
		return NULL;
10006f4a:	2300      	movs	r3, #0
10006f4c:	e029      	b.n	10006fa2 <etMessageQueue_pop+0x6e>
	}
	if (self->first->next==NULL){
10006f4e:	687b      	ldr	r3, [r7, #4]
10006f50:	681b      	ldr	r3, [r3, #0]
10006f52:	681b      	ldr	r3, [r3, #0]
10006f54:	2b00      	cmp	r3, #0
10006f56:	d107      	bne.n	10006f68 <etMessageQueue_pop+0x34>
		/*only one message in queue*/
		self->first = self->last = NULL;
10006f58:	687b      	ldr	r3, [r7, #4]
10006f5a:	2200      	movs	r2, #0
10006f5c:	605a      	str	r2, [r3, #4]
10006f5e:	687b      	ldr	r3, [r7, #4]
10006f60:	685a      	ldr	r2, [r3, #4]
10006f62:	687b      	ldr	r3, [r7, #4]
10006f64:	601a      	str	r2, [r3, #0]
10006f66:	e004      	b.n	10006f72 <etMessageQueue_pop+0x3e>
	}
	else {
		/*more than one message in queue -> set first to nex message*/
		self->first = self->first->next;
10006f68:	687b      	ldr	r3, [r7, #4]
10006f6a:	681b      	ldr	r3, [r3, #0]
10006f6c:	681a      	ldr	r2, [r3, #0]
10006f6e:	687b      	ldr	r3, [r7, #4]
10006f70:	601a      	str	r2, [r3, #0]
	}

	pop_msg->next=NULL;
10006f72:	68fb      	ldr	r3, [r7, #12]
10006f74:	2200      	movs	r2, #0
10006f76:	601a      	str	r2, [r3, #0]
	self->size--;
10006f78:	687b      	ldr	r3, [r7, #4]
10006f7a:	899b      	ldrh	r3, [r3, #12]
10006f7c:	3b01      	subs	r3, #1
10006f7e:	b29a      	uxth	r2, r3
10006f80:	687b      	ldr	r3, [r7, #4]
10006f82:	819a      	strh	r2, [r3, #12]

	if (self->size < self->lowWaterMark)
10006f84:	687b      	ldr	r3, [r7, #4]
10006f86:	899a      	ldrh	r2, [r3, #12]
10006f88:	687b      	ldr	r3, [r7, #4]
10006f8a:	895b      	ldrh	r3, [r3, #10]
10006f8c:	b212      	sxth	r2, r2
10006f8e:	b21b      	sxth	r3, r3
10006f90:	429a      	cmp	r2, r3
10006f92:	da05      	bge.n	10006fa0 <etMessageQueue_pop+0x6c>
		self->lowWaterMark--;
10006f94:	687b      	ldr	r3, [r7, #4]
10006f96:	895b      	ldrh	r3, [r3, #10]
10006f98:	3b01      	subs	r3, #1
10006f9a:	b29a      	uxth	r2, r3
10006f9c:	687b      	ldr	r3, [r7, #4]
10006f9e:	815a      	strh	r2, [r3, #10]

	ET_MSC_LOGGER_SYNC_EXIT
	return pop_msg;
10006fa0:	68fb      	ldr	r3, [r7, #12]
}
10006fa2:	1c18      	adds	r0, r3, #0
10006fa4:	46bd      	mov	sp, r7
10006fa6:	b004      	add	sp, #16
10006fa8:	bd80      	pop	{r7, pc}
10006faa:	46c0      	nop			; (mov r8, r8)

10006fac <etMessageQueue_getSize>:

etInt16 etMessageQueue_getSize(etMessageQueue* self) {
10006fac:	b580      	push	{r7, lr}
10006fae:	b082      	sub	sp, #8
10006fb0:	af00      	add	r7, sp, #0
10006fb2:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getSize")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->size;
10006fb4:	687b      	ldr	r3, [r7, #4]
10006fb6:	899b      	ldrh	r3, [r3, #12]
10006fb8:	b21b      	sxth	r3, r3
}
10006fba:	1c18      	adds	r0, r3, #0
10006fbc:	46bd      	mov	sp, r7
10006fbe:	b002      	add	sp, #8
10006fc0:	bd80      	pop	{r7, pc}
10006fc2:	46c0      	nop			; (mov r8, r8)

10006fc4 <etMessageQueue_getFirst>:

etMessage* etMessageQueue_getFirst(etMessageQueue* self){
10006fc4:	b580      	push	{r7, lr}
10006fc6:	b082      	sub	sp, #8
10006fc8:	af00      	add	r7, sp, #0
10006fca:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getFirst")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->first;
10006fcc:	687b      	ldr	r3, [r7, #4]
10006fce:	681b      	ldr	r3, [r3, #0]
}
10006fd0:	1c18      	adds	r0, r3, #0
10006fd2:	46bd      	mov	sp, r7
10006fd4:	b002      	add	sp, #8
10006fd6:	bd80      	pop	{r7, pc}

10006fd8 <etMessageQueue_getLast>:

etMessage* etMessageQueue_getLast(etMessageQueue* self){
10006fd8:	b580      	push	{r7, lr}
10006fda:	b082      	sub	sp, #8
10006fdc:	af00      	add	r7, sp, #0
10006fde:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getLast")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->last;
10006fe0:	687b      	ldr	r3, [r7, #4]
10006fe2:	685b      	ldr	r3, [r3, #4]
}
10006fe4:	1c18      	adds	r0, r3, #0
10006fe6:	46bd      	mov	sp, r7
10006fe8:	b002      	add	sp, #8
10006fea:	bd80      	pop	{r7, pc}

10006fec <etMessageQueue_isNotEmpty>:

etBool etMessageQueue_isNotEmpty(etMessageQueue* self){
10006fec:	b580      	push	{r7, lr}
10006fee:	b082      	sub	sp, #8
10006ff0:	af00      	add	r7, sp, #0
10006ff2:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "isNotEmpty")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->last != NULL;
10006ff4:	687b      	ldr	r3, [r7, #4]
10006ff6:	685b      	ldr	r3, [r3, #4]
10006ff8:	1e5a      	subs	r2, r3, #1
10006ffa:	4193      	sbcs	r3, r2
10006ffc:	b2db      	uxtb	r3, r3
}
10006ffe:	1c18      	adds	r0, r3, #0
10007000:	46bd      	mov	sp, r7
10007002:	b002      	add	sp, #8
10007004:	bd80      	pop	{r7, pc}
10007006:	46c0      	nop			; (mov r8, r8)

10007008 <etMessageQueue_getHighWaterMark>:

etInt16 etMessageQueue_getHighWaterMark(etMessageQueue* self) {
10007008:	b580      	push	{r7, lr}
1000700a:	b082      	sub	sp, #8
1000700c:	af00      	add	r7, sp, #0
1000700e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getHighWaterMark")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->highWaterMark;
10007010:	687b      	ldr	r3, [r7, #4]
10007012:	891b      	ldrh	r3, [r3, #8]
10007014:	b21b      	sxth	r3, r3
}
10007016:	1c18      	adds	r0, r3, #0
10007018:	46bd      	mov	sp, r7
1000701a:	b002      	add	sp, #8
1000701c:	bd80      	pop	{r7, pc}
1000701e:	46c0      	nop			; (mov r8, r8)

10007020 <etMessageQueue_getLowWaterMark>:

etInt16 etMessageQueue_getLowWaterMark(etMessageQueue* self) {
10007020:	b580      	push	{r7, lr}
10007022:	b082      	sub	sp, #8
10007024:	af00      	add	r7, sp, #0
10007026:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getLowWaterMark")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->lowWaterMark;
10007028:	687b      	ldr	r3, [r7, #4]
1000702a:	895b      	ldrh	r3, [r3, #10]
1000702c:	b21b      	sxth	r3, r3
}
1000702e:	1c18      	adds	r0, r3, #0
10007030:	46bd      	mov	sp, r7
10007032:	b002      	add	sp, #8
10007034:	bd80      	pop	{r7, pc}
10007036:	46c0      	nop			; (mov r8, r8)

10007038 <etMessageQueue_resetLowWaterMark>:

void etMessageQueue_resetLowWaterMark(etMessageQueue* self) {
10007038:	b580      	push	{r7, lr}
1000703a:	b082      	sub	sp, #8
1000703c:	af00      	add	r7, sp, #0
1000703e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "resetLowWaterMark")
	self->lowWaterMark = self->size;
10007040:	687b      	ldr	r3, [r7, #4]
10007042:	899a      	ldrh	r2, [r3, #12]
10007044:	687b      	ldr	r3, [r7, #4]
10007046:	815a      	strh	r2, [r3, #10]
	ET_MSC_LOGGER_SYNC_EXIT
}
10007048:	46bd      	mov	sp, r7
1000704a:	b002      	add	sp, #8
1000704c:	bd80      	pop	{r7, pc}
1000704e:	46c0      	nop			; (mov r8, r8)

10007050 <__aeabi_uidiv>:
10007050:	2900      	cmp	r1, #0
10007052:	d034      	beq.n	100070be <.udivsi3_skip_div0_test+0x6a>

10007054 <.udivsi3_skip_div0_test>:
10007054:	2301      	movs	r3, #1
10007056:	2200      	movs	r2, #0
10007058:	b410      	push	{r4}
1000705a:	4288      	cmp	r0, r1
1000705c:	d32c      	bcc.n	100070b8 <.udivsi3_skip_div0_test+0x64>
1000705e:	2401      	movs	r4, #1
10007060:	0724      	lsls	r4, r4, #28
10007062:	42a1      	cmp	r1, r4
10007064:	d204      	bcs.n	10007070 <.udivsi3_skip_div0_test+0x1c>
10007066:	4281      	cmp	r1, r0
10007068:	d202      	bcs.n	10007070 <.udivsi3_skip_div0_test+0x1c>
1000706a:	0109      	lsls	r1, r1, #4
1000706c:	011b      	lsls	r3, r3, #4
1000706e:	e7f8      	b.n	10007062 <.udivsi3_skip_div0_test+0xe>
10007070:	00e4      	lsls	r4, r4, #3
10007072:	42a1      	cmp	r1, r4
10007074:	d204      	bcs.n	10007080 <.udivsi3_skip_div0_test+0x2c>
10007076:	4281      	cmp	r1, r0
10007078:	d202      	bcs.n	10007080 <.udivsi3_skip_div0_test+0x2c>
1000707a:	0049      	lsls	r1, r1, #1
1000707c:	005b      	lsls	r3, r3, #1
1000707e:	e7f8      	b.n	10007072 <.udivsi3_skip_div0_test+0x1e>
10007080:	4288      	cmp	r0, r1
10007082:	d301      	bcc.n	10007088 <.udivsi3_skip_div0_test+0x34>
10007084:	1a40      	subs	r0, r0, r1
10007086:	431a      	orrs	r2, r3
10007088:	084c      	lsrs	r4, r1, #1
1000708a:	42a0      	cmp	r0, r4
1000708c:	d302      	bcc.n	10007094 <.udivsi3_skip_div0_test+0x40>
1000708e:	1b00      	subs	r0, r0, r4
10007090:	085c      	lsrs	r4, r3, #1
10007092:	4322      	orrs	r2, r4
10007094:	088c      	lsrs	r4, r1, #2
10007096:	42a0      	cmp	r0, r4
10007098:	d302      	bcc.n	100070a0 <.udivsi3_skip_div0_test+0x4c>
1000709a:	1b00      	subs	r0, r0, r4
1000709c:	089c      	lsrs	r4, r3, #2
1000709e:	4322      	orrs	r2, r4
100070a0:	08cc      	lsrs	r4, r1, #3
100070a2:	42a0      	cmp	r0, r4
100070a4:	d302      	bcc.n	100070ac <.udivsi3_skip_div0_test+0x58>
100070a6:	1b00      	subs	r0, r0, r4
100070a8:	08dc      	lsrs	r4, r3, #3
100070aa:	4322      	orrs	r2, r4
100070ac:	2800      	cmp	r0, #0
100070ae:	d003      	beq.n	100070b8 <.udivsi3_skip_div0_test+0x64>
100070b0:	091b      	lsrs	r3, r3, #4
100070b2:	d001      	beq.n	100070b8 <.udivsi3_skip_div0_test+0x64>
100070b4:	0909      	lsrs	r1, r1, #4
100070b6:	e7e3      	b.n	10007080 <.udivsi3_skip_div0_test+0x2c>
100070b8:	1c10      	adds	r0, r2, #0
100070ba:	bc10      	pop	{r4}
100070bc:	4770      	bx	lr
100070be:	2800      	cmp	r0, #0
100070c0:	d001      	beq.n	100070c6 <.udivsi3_skip_div0_test+0x72>
100070c2:	2000      	movs	r0, #0
100070c4:	43c0      	mvns	r0, r0
100070c6:	b407      	push	{r0, r1, r2}
100070c8:	4802      	ldr	r0, [pc, #8]	; (100070d4 <.udivsi3_skip_div0_test+0x80>)
100070ca:	a102      	add	r1, pc, #8	; (adr r1, 100070d4 <.udivsi3_skip_div0_test+0x80>)
100070cc:	1840      	adds	r0, r0, r1
100070ce:	9002      	str	r0, [sp, #8]
100070d0:	bd03      	pop	{r0, r1, pc}
100070d2:	46c0      	nop			; (mov r8, r8)
100070d4:	00000019 	.word	0x00000019

100070d8 <__aeabi_uidivmod>:
100070d8:	2900      	cmp	r1, #0
100070da:	d0f0      	beq.n	100070be <.udivsi3_skip_div0_test+0x6a>
100070dc:	b503      	push	{r0, r1, lr}
100070de:	f7ff ffb9 	bl	10007054 <.udivsi3_skip_div0_test>
100070e2:	bc0e      	pop	{r1, r2, r3}
100070e4:	4342      	muls	r2, r0
100070e6:	1a89      	subs	r1, r1, r2
100070e8:	4718      	bx	r3
100070ea:	46c0      	nop			; (mov r8, r8)

100070ec <__aeabi_idiv0>:
100070ec:	4770      	bx	lr
100070ee:	46c0      	nop			; (mov r8, r8)

100070f0 <__aeabi_cfrcmple>:
100070f0:	4684      	mov	ip, r0
100070f2:	1c08      	adds	r0, r1, #0
100070f4:	4661      	mov	r1, ip
100070f6:	e7ff      	b.n	100070f8 <__aeabi_cfcmpeq>

100070f8 <__aeabi_cfcmpeq>:
100070f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100070fa:	f000 fa17 	bl	1000752c <__lesf2>
100070fe:	2800      	cmp	r0, #0
10007100:	d401      	bmi.n	10007106 <__aeabi_cfcmpeq+0xe>
10007102:	2100      	movs	r1, #0
10007104:	42c8      	cmn	r0, r1
10007106:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10007108 <__aeabi_fcmpeq>:
10007108:	b510      	push	{r4, lr}
1000710a:	f000 f99f 	bl	1000744c <__eqsf2>
1000710e:	4240      	negs	r0, r0
10007110:	3001      	adds	r0, #1
10007112:	bd10      	pop	{r4, pc}

10007114 <__aeabi_fcmplt>:
10007114:	b510      	push	{r4, lr}
10007116:	f000 fa09 	bl	1000752c <__lesf2>
1000711a:	2800      	cmp	r0, #0
1000711c:	db01      	blt.n	10007122 <__aeabi_fcmplt+0xe>
1000711e:	2000      	movs	r0, #0
10007120:	bd10      	pop	{r4, pc}
10007122:	2001      	movs	r0, #1
10007124:	bd10      	pop	{r4, pc}
10007126:	46c0      	nop			; (mov r8, r8)

10007128 <__aeabi_fcmple>:
10007128:	b510      	push	{r4, lr}
1000712a:	f000 f9ff 	bl	1000752c <__lesf2>
1000712e:	2800      	cmp	r0, #0
10007130:	dd01      	ble.n	10007136 <__aeabi_fcmple+0xe>
10007132:	2000      	movs	r0, #0
10007134:	bd10      	pop	{r4, pc}
10007136:	2001      	movs	r0, #1
10007138:	bd10      	pop	{r4, pc}
1000713a:	46c0      	nop			; (mov r8, r8)

1000713c <__aeabi_fcmpgt>:
1000713c:	b510      	push	{r4, lr}
1000713e:	f000 f9ad 	bl	1000749c <__gesf2>
10007142:	2800      	cmp	r0, #0
10007144:	dc01      	bgt.n	1000714a <__aeabi_fcmpgt+0xe>
10007146:	2000      	movs	r0, #0
10007148:	bd10      	pop	{r4, pc}
1000714a:	2001      	movs	r0, #1
1000714c:	bd10      	pop	{r4, pc}
1000714e:	46c0      	nop			; (mov r8, r8)

10007150 <__aeabi_fcmpge>:
10007150:	b510      	push	{r4, lr}
10007152:	f000 f9a3 	bl	1000749c <__gesf2>
10007156:	2800      	cmp	r0, #0
10007158:	da01      	bge.n	1000715e <__aeabi_fcmpge+0xe>
1000715a:	2000      	movs	r0, #0
1000715c:	bd10      	pop	{r4, pc}
1000715e:	2001      	movs	r0, #1
10007160:	bd10      	pop	{r4, pc}
10007162:	46c0      	nop			; (mov r8, r8)

10007164 <__aeabi_f2uiz>:
10007164:	219e      	movs	r1, #158	; 0x9e
10007166:	b510      	push	{r4, lr}
10007168:	05c9      	lsls	r1, r1, #23
1000716a:	1c04      	adds	r4, r0, #0
1000716c:	f7ff fff0 	bl	10007150 <__aeabi_fcmpge>
10007170:	2800      	cmp	r0, #0
10007172:	d103      	bne.n	1000717c <__aeabi_f2uiz+0x18>
10007174:	1c20      	adds	r0, r4, #0
10007176:	f000 fd2b 	bl	10007bd0 <__aeabi_f2iz>
1000717a:	bd10      	pop	{r4, pc}
1000717c:	229e      	movs	r2, #158	; 0x9e
1000717e:	1c20      	adds	r0, r4, #0
10007180:	05d1      	lsls	r1, r2, #23
10007182:	f000 fb4b 	bl	1000781c <__aeabi_fsub>
10007186:	f000 fd23 	bl	10007bd0 <__aeabi_f2iz>
1000718a:	2380      	movs	r3, #128	; 0x80
1000718c:	061c      	lsls	r4, r3, #24
1000718e:	1900      	adds	r0, r0, r4
10007190:	e7f3      	b.n	1000717a <__aeabi_f2uiz+0x16>
10007192:	46c0      	nop			; (mov r8, r8)
10007194:	0000      	movs	r0, r0
	...

10007198 <__aeabi_d2uiz>:
10007198:	b538      	push	{r3, r4, r5, lr}
1000719a:	4b0e      	ldr	r3, [pc, #56]	; (100071d4 <__aeabi_d2uiz+0x3c>)
1000719c:	4a0c      	ldr	r2, [pc, #48]	; (100071d0 <__aeabi_d2uiz+0x38>)
1000719e:	1c04      	adds	r4, r0, #0
100071a0:	1c0d      	adds	r5, r1, #0
100071a2:	f001 fc17 	bl	100089d4 <__aeabi_dcmpge>
100071a6:	2800      	cmp	r0, #0
100071a8:	d104      	bne.n	100071b4 <__aeabi_d2uiz+0x1c>
100071aa:	1c20      	adds	r0, r4, #0
100071ac:	1c29      	adds	r1, r5, #0
100071ae:	f001 fb77 	bl	100088a0 <__aeabi_d2iz>
100071b2:	bd38      	pop	{r3, r4, r5, pc}
100071b4:	4b07      	ldr	r3, [pc, #28]	; (100071d4 <__aeabi_d2uiz+0x3c>)
100071b6:	4a06      	ldr	r2, [pc, #24]	; (100071d0 <__aeabi_d2uiz+0x38>)
100071b8:	1c20      	adds	r0, r4, #0
100071ba:	1c29      	adds	r1, r5, #0
100071bc:	f000 ffee 	bl	1000819c <__aeabi_dsub>
100071c0:	f001 fb6e 	bl	100088a0 <__aeabi_d2iz>
100071c4:	2380      	movs	r3, #128	; 0x80
100071c6:	0619      	lsls	r1, r3, #24
100071c8:	1840      	adds	r0, r0, r1
100071ca:	e7f2      	b.n	100071b2 <__aeabi_d2uiz+0x1a>
100071cc:	46c0      	nop			; (mov r8, r8)
100071ce:	46c0      	nop			; (mov r8, r8)
100071d0:	00000000 	.word	0x00000000
100071d4:	41e00000 	.word	0x41e00000

100071d8 <__aeabi_fdiv>:
100071d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100071da:	465f      	mov	r7, fp
100071dc:	4656      	mov	r6, sl
100071de:	464d      	mov	r5, r9
100071e0:	4644      	mov	r4, r8
100071e2:	b4f0      	push	{r4, r5, r6, r7}
100071e4:	0245      	lsls	r5, r0, #9
100071e6:	0044      	lsls	r4, r0, #1
100071e8:	b083      	sub	sp, #12
100071ea:	1c0e      	adds	r6, r1, #0
100071ec:	0a6d      	lsrs	r5, r5, #9
100071ee:	0e24      	lsrs	r4, r4, #24
100071f0:	0fc7      	lsrs	r7, r0, #31
100071f2:	2c00      	cmp	r4, #0
100071f4:	d107      	bne.n	10007206 <__aeabi_fdiv+0x2e>
100071f6:	2d00      	cmp	r5, #0
100071f8:	d000      	beq.n	100071fc <__aeabi_fdiv+0x24>
100071fa:	e091      	b.n	10007320 <__aeabi_fdiv+0x148>
100071fc:	2104      	movs	r1, #4
100071fe:	2201      	movs	r2, #1
10007200:	4688      	mov	r8, r1
10007202:	4692      	mov	sl, r2
10007204:	e009      	b.n	1000721a <__aeabi_fdiv+0x42>
10007206:	2cff      	cmp	r4, #255	; 0xff
10007208:	d055      	beq.n	100072b6 <__aeabi_fdiv+0xde>
1000720a:	2380      	movs	r3, #128	; 0x80
1000720c:	0418      	lsls	r0, r3, #16
1000720e:	2100      	movs	r1, #0
10007210:	4305      	orrs	r5, r0
10007212:	00ed      	lsls	r5, r5, #3
10007214:	3c7f      	subs	r4, #127	; 0x7f
10007216:	4688      	mov	r8, r1
10007218:	468a      	mov	sl, r1
1000721a:	1c33      	adds	r3, r6, #0
1000721c:	0058      	lsls	r0, r3, #1
1000721e:	0276      	lsls	r6, r6, #9
10007220:	0fd9      	lsrs	r1, r3, #31
10007222:	0a76      	lsrs	r6, r6, #9
10007224:	0e00      	lsrs	r0, r0, #24
10007226:	468b      	mov	fp, r1
10007228:	d14c      	bne.n	100072c4 <__aeabi_fdiv+0xec>
1000722a:	2201      	movs	r2, #1
1000722c:	4694      	mov	ip, r2
1000722e:	2e00      	cmp	r6, #0
10007230:	d000      	beq.n	10007234 <__aeabi_fdiv+0x5c>
10007232:	e081      	b.n	10007338 <__aeabi_fdiv+0x160>
10007234:	465b      	mov	r3, fp
10007236:	407b      	eors	r3, r7
10007238:	4662      	mov	r2, ip
1000723a:	4641      	mov	r1, r8
1000723c:	9301      	str	r3, [sp, #4]
1000723e:	430a      	orrs	r2, r1
10007240:	2a0f      	cmp	r2, #15
10007242:	d950      	bls.n	100072e6 <__aeabi_fdiv+0x10e>
10007244:	1a20      	subs	r0, r4, r0
10007246:	0169      	lsls	r1, r5, #5
10007248:	4681      	mov	r9, r0
1000724a:	0175      	lsls	r5, r6, #5
1000724c:	42a9      	cmp	r1, r5
1000724e:	d300      	bcc.n	10007252 <__aeabi_fdiv+0x7a>
10007250:	e0b3      	b.n	100073ba <__aeabi_fdiv+0x1e2>
10007252:	2201      	movs	r2, #1
10007254:	4253      	negs	r3, r2
10007256:	4499      	add	r9, r3
10007258:	241b      	movs	r4, #27
1000725a:	2600      	movs	r6, #0
1000725c:	2701      	movs	r7, #1
1000725e:	1e62      	subs	r2, r4, #1
10007260:	1c38      	adds	r0, r7, #0
10007262:	4010      	ands	r0, r2
10007264:	004b      	lsls	r3, r1, #1
10007266:	0076      	lsls	r6, r6, #1
10007268:	2900      	cmp	r1, #0
1000726a:	da00      	bge.n	1000726e <__aeabi_fdiv+0x96>
1000726c:	e0a9      	b.n	100073c2 <__aeabi_fdiv+0x1ea>
1000726e:	429d      	cmp	r5, r3
10007270:	d800      	bhi.n	10007274 <__aeabi_fdiv+0x9c>
10007272:	e0a6      	b.n	100073c2 <__aeabi_fdiv+0x1ea>
10007274:	3c01      	subs	r4, #1
10007276:	2c00      	cmp	r4, #0
10007278:	dc00      	bgt.n	1000727c <__aeabi_fdiv+0xa4>
1000727a:	e0ab      	b.n	100073d4 <__aeabi_fdiv+0x1fc>
1000727c:	2800      	cmp	r0, #0
1000727e:	d00c      	beq.n	1000729a <__aeabi_fdiv+0xc2>
10007280:	1c19      	adds	r1, r3, #0
10007282:	0076      	lsls	r6, r6, #1
10007284:	005b      	lsls	r3, r3, #1
10007286:	2900      	cmp	r1, #0
10007288:	db01      	blt.n	1000728e <__aeabi_fdiv+0xb6>
1000728a:	429d      	cmp	r5, r3
1000728c:	d801      	bhi.n	10007292 <__aeabi_fdiv+0xba>
1000728e:	1b5b      	subs	r3, r3, r5
10007290:	433e      	orrs	r6, r7
10007292:	3c01      	subs	r4, #1
10007294:	2c00      	cmp	r4, #0
10007296:	dc00      	bgt.n	1000729a <__aeabi_fdiv+0xc2>
10007298:	e09c      	b.n	100073d4 <__aeabi_fdiv+0x1fc>
1000729a:	0059      	lsls	r1, r3, #1
1000729c:	0072      	lsls	r2, r6, #1
1000729e:	2b00      	cmp	r3, #0
100072a0:	db01      	blt.n	100072a6 <__aeabi_fdiv+0xce>
100072a2:	428d      	cmp	r5, r1
100072a4:	d801      	bhi.n	100072aa <__aeabi_fdiv+0xd2>
100072a6:	1b49      	subs	r1, r1, r5
100072a8:	433a      	orrs	r2, r7
100072aa:	3c01      	subs	r4, #1
100072ac:	004b      	lsls	r3, r1, #1
100072ae:	0056      	lsls	r6, r2, #1
100072b0:	2900      	cmp	r1, #0
100072b2:	daea      	bge.n	1000728a <__aeabi_fdiv+0xb2>
100072b4:	e7eb      	b.n	1000728e <__aeabi_fdiv+0xb6>
100072b6:	2d00      	cmp	r5, #0
100072b8:	d12d      	bne.n	10007316 <__aeabi_fdiv+0x13e>
100072ba:	2008      	movs	r0, #8
100072bc:	2102      	movs	r1, #2
100072be:	4680      	mov	r8, r0
100072c0:	468a      	mov	sl, r1
100072c2:	e7aa      	b.n	1000721a <__aeabi_fdiv+0x42>
100072c4:	28ff      	cmp	r0, #255	; 0xff
100072c6:	d020      	beq.n	1000730a <__aeabi_fdiv+0x132>
100072c8:	2280      	movs	r2, #128	; 0x80
100072ca:	0413      	lsls	r3, r2, #16
100072cc:	2100      	movs	r1, #0
100072ce:	431e      	orrs	r6, r3
100072d0:	468c      	mov	ip, r1
100072d2:	465b      	mov	r3, fp
100072d4:	407b      	eors	r3, r7
100072d6:	4662      	mov	r2, ip
100072d8:	4641      	mov	r1, r8
100072da:	00f6      	lsls	r6, r6, #3
100072dc:	387f      	subs	r0, #127	; 0x7f
100072de:	9301      	str	r3, [sp, #4]
100072e0:	430a      	orrs	r2, r1
100072e2:	2a0f      	cmp	r2, #15
100072e4:	d8ae      	bhi.n	10007244 <__aeabi_fdiv+0x6c>
100072e6:	4956      	ldr	r1, [pc, #344]	; (10007440 <__aeabi_fdiv+0x268>)
100072e8:	0092      	lsls	r2, r2, #2
100072ea:	588a      	ldr	r2, [r1, r2]
100072ec:	4697      	mov	pc, r2
100072ee:	9b01      	ldr	r3, [sp, #4]
100072f0:	26ff      	movs	r6, #255	; 0xff
100072f2:	2500      	movs	r5, #0
100072f4:	05f0      	lsls	r0, r6, #23
100072f6:	4328      	orrs	r0, r5
100072f8:	07de      	lsls	r6, r3, #31
100072fa:	4330      	orrs	r0, r6
100072fc:	b003      	add	sp, #12
100072fe:	bc3c      	pop	{r2, r3, r4, r5}
10007300:	4690      	mov	r8, r2
10007302:	4699      	mov	r9, r3
10007304:	46a2      	mov	sl, r4
10007306:	46ab      	mov	fp, r5
10007308:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000730a:	1c33      	adds	r3, r6, #0
1000730c:	1e5a      	subs	r2, r3, #1
1000730e:	4193      	sbcs	r3, r2
10007310:	3302      	adds	r3, #2
10007312:	469c      	mov	ip, r3
10007314:	e78e      	b.n	10007234 <__aeabi_fdiv+0x5c>
10007316:	220c      	movs	r2, #12
10007318:	2303      	movs	r3, #3
1000731a:	4690      	mov	r8, r2
1000731c:	469a      	mov	sl, r3
1000731e:	e77c      	b.n	1000721a <__aeabi_fdiv+0x42>
10007320:	1c28      	adds	r0, r5, #0
10007322:	f001 fb61 	bl	100089e8 <__clzsi2>
10007326:	2276      	movs	r2, #118	; 0x76
10007328:	1f44      	subs	r4, r0, #5
1000732a:	4253      	negs	r3, r2
1000732c:	40a5      	lsls	r5, r4
1000732e:	1a1c      	subs	r4, r3, r0
10007330:	2000      	movs	r0, #0
10007332:	4680      	mov	r8, r0
10007334:	4682      	mov	sl, r0
10007336:	e770      	b.n	1000721a <__aeabi_fdiv+0x42>
10007338:	1c30      	adds	r0, r6, #0
1000733a:	f001 fb55 	bl	100089e8 <__clzsi2>
1000733e:	2376      	movs	r3, #118	; 0x76
10007340:	1f41      	subs	r1, r0, #5
10007342:	408e      	lsls	r6, r1
10007344:	425a      	negs	r2, r3
10007346:	2100      	movs	r1, #0
10007348:	1a10      	subs	r0, r2, r0
1000734a:	468c      	mov	ip, r1
1000734c:	e772      	b.n	10007234 <__aeabi_fdiv+0x5c>
1000734e:	2300      	movs	r3, #0
10007350:	4d3c      	ldr	r5, [pc, #240]	; (10007444 <__aeabi_fdiv+0x26c>)
10007352:	26ff      	movs	r6, #255	; 0xff
10007354:	e7ce      	b.n	100072f4 <__aeabi_fdiv+0x11c>
10007356:	465f      	mov	r7, fp
10007358:	1c35      	adds	r5, r6, #0
1000735a:	9701      	str	r7, [sp, #4]
1000735c:	4663      	mov	r3, ip
1000735e:	2b02      	cmp	r3, #2
10007360:	d0c5      	beq.n	100072ee <__aeabi_fdiv+0x116>
10007362:	2b03      	cmp	r3, #3
10007364:	d063      	beq.n	1000742e <__aeabi_fdiv+0x256>
10007366:	2b01      	cmp	r3, #1
10007368:	d043      	beq.n	100073f2 <__aeabi_fdiv+0x21a>
1000736a:	4649      	mov	r1, r9
1000736c:	317f      	adds	r1, #127	; 0x7f
1000736e:	2900      	cmp	r1, #0
10007370:	dd35      	ble.n	100073de <__aeabi_fdiv+0x206>
10007372:	270f      	movs	r7, #15
10007374:	402f      	ands	r7, r5
10007376:	2f04      	cmp	r7, #4
10007378:	d000      	beq.n	1000737c <__aeabi_fdiv+0x1a4>
1000737a:	3504      	adds	r5, #4
1000737c:	012b      	lsls	r3, r5, #4
1000737e:	d503      	bpl.n	10007388 <__aeabi_fdiv+0x1b0>
10007380:	4a31      	ldr	r2, [pc, #196]	; (10007448 <__aeabi_fdiv+0x270>)
10007382:	4649      	mov	r1, r9
10007384:	4015      	ands	r5, r2
10007386:	3180      	adds	r1, #128	; 0x80
10007388:	29fe      	cmp	r1, #254	; 0xfe
1000738a:	dcb0      	bgt.n	100072ee <__aeabi_fdiv+0x116>
1000738c:	01a8      	lsls	r0, r5, #6
1000738e:	0a45      	lsrs	r5, r0, #9
10007390:	b2ce      	uxtb	r6, r1
10007392:	9b01      	ldr	r3, [sp, #4]
10007394:	e7ae      	b.n	100072f4 <__aeabi_fdiv+0x11c>
10007396:	2600      	movs	r6, #0
10007398:	2500      	movs	r5, #0
1000739a:	e7ab      	b.n	100072f4 <__aeabi_fdiv+0x11c>
1000739c:	2080      	movs	r0, #128	; 0x80
1000739e:	03c1      	lsls	r1, r0, #15
100073a0:	420d      	tst	r5, r1
100073a2:	d011      	beq.n	100073c8 <__aeabi_fdiv+0x1f0>
100073a4:	420e      	tst	r6, r1
100073a6:	d10f      	bne.n	100073c8 <__aeabi_fdiv+0x1f0>
100073a8:	430e      	orrs	r6, r1
100073aa:	0273      	lsls	r3, r6, #9
100073ac:	0a5d      	lsrs	r5, r3, #9
100073ae:	26ff      	movs	r6, #255	; 0xff
100073b0:	465b      	mov	r3, fp
100073b2:	e79f      	b.n	100072f4 <__aeabi_fdiv+0x11c>
100073b4:	9701      	str	r7, [sp, #4]
100073b6:	4653      	mov	r3, sl
100073b8:	e7d1      	b.n	1000735e <__aeabi_fdiv+0x186>
100073ba:	1b49      	subs	r1, r1, r5
100073bc:	241a      	movs	r4, #26
100073be:	2601      	movs	r6, #1
100073c0:	e74c      	b.n	1000725c <__aeabi_fdiv+0x84>
100073c2:	1b5b      	subs	r3, r3, r5
100073c4:	433e      	orrs	r6, r7
100073c6:	e755      	b.n	10007274 <__aeabi_fdiv+0x9c>
100073c8:	430d      	orrs	r5, r1
100073ca:	026a      	lsls	r2, r5, #9
100073cc:	0a55      	lsrs	r5, r2, #9
100073ce:	1c3b      	adds	r3, r7, #0
100073d0:	26ff      	movs	r6, #255	; 0xff
100073d2:	e78f      	b.n	100072f4 <__aeabi_fdiv+0x11c>
100073d4:	1c1d      	adds	r5, r3, #0
100073d6:	1e6b      	subs	r3, r5, #1
100073d8:	419d      	sbcs	r5, r3
100073da:	4335      	orrs	r5, r6
100073dc:	e7c5      	b.n	1000736a <__aeabi_fdiv+0x192>
100073de:	247e      	movs	r4, #126	; 0x7e
100073e0:	4267      	negs	r7, r4
100073e2:	464a      	mov	r2, r9
100073e4:	1ab9      	subs	r1, r7, r2
100073e6:	291b      	cmp	r1, #27
100073e8:	dd08      	ble.n	100073fc <__aeabi_fdiv+0x224>
100073ea:	9b01      	ldr	r3, [sp, #4]
100073ec:	2600      	movs	r6, #0
100073ee:	2500      	movs	r5, #0
100073f0:	e780      	b.n	100072f4 <__aeabi_fdiv+0x11c>
100073f2:	9d01      	ldr	r5, [sp, #4]
100073f4:	2600      	movs	r6, #0
100073f6:	402b      	ands	r3, r5
100073f8:	2500      	movs	r5, #0
100073fa:	e77b      	b.n	100072f4 <__aeabi_fdiv+0x11c>
100073fc:	464e      	mov	r6, r9
100073fe:	369e      	adds	r6, #158	; 0x9e
10007400:	1c28      	adds	r0, r5, #0
10007402:	40b5      	lsls	r5, r6
10007404:	1c2b      	adds	r3, r5, #0
10007406:	1e5d      	subs	r5, r3, #1
10007408:	41ab      	sbcs	r3, r5
1000740a:	40c8      	lsrs	r0, r1
1000740c:	4303      	orrs	r3, r0
1000740e:	250f      	movs	r5, #15
10007410:	401d      	ands	r5, r3
10007412:	2d04      	cmp	r5, #4
10007414:	d000      	beq.n	10007418 <__aeabi_fdiv+0x240>
10007416:	3304      	adds	r3, #4
10007418:	015a      	lsls	r2, r3, #5
1000741a:	d503      	bpl.n	10007424 <__aeabi_fdiv+0x24c>
1000741c:	9b01      	ldr	r3, [sp, #4]
1000741e:	2601      	movs	r6, #1
10007420:	2500      	movs	r5, #0
10007422:	e767      	b.n	100072f4 <__aeabi_fdiv+0x11c>
10007424:	019c      	lsls	r4, r3, #6
10007426:	0a65      	lsrs	r5, r4, #9
10007428:	9b01      	ldr	r3, [sp, #4]
1000742a:	2600      	movs	r6, #0
1000742c:	e762      	b.n	100072f4 <__aeabi_fdiv+0x11c>
1000742e:	2780      	movs	r7, #128	; 0x80
10007430:	03fc      	lsls	r4, r7, #15
10007432:	4325      	orrs	r5, r4
10007434:	026e      	lsls	r6, r5, #9
10007436:	0a75      	lsrs	r5, r6, #9
10007438:	9b01      	ldr	r3, [sp, #4]
1000743a:	26ff      	movs	r6, #255	; 0xff
1000743c:	e75a      	b.n	100072f4 <__aeabi_fdiv+0x11c>
1000743e:	46c0      	nop			; (mov r8, r8)
10007440:	10009208 	.word	0x10009208
10007444:	007fffff 	.word	0x007fffff
10007448:	f7ffffff 	.word	0xf7ffffff

1000744c <__eqsf2>:
1000744c:	0243      	lsls	r3, r0, #9
1000744e:	0042      	lsls	r2, r0, #1
10007450:	b570      	push	{r4, r5, r6, lr}
10007452:	0a5c      	lsrs	r4, r3, #9
10007454:	0fc6      	lsrs	r6, r0, #31
10007456:	0e13      	lsrs	r3, r2, #24
10007458:	0248      	lsls	r0, r1, #9
1000745a:	004a      	lsls	r2, r1, #1
1000745c:	0a45      	lsrs	r5, r0, #9
1000745e:	0e12      	lsrs	r2, r2, #24
10007460:	0fc9      	lsrs	r1, r1, #31
10007462:	2bff      	cmp	r3, #255	; 0xff
10007464:	d005      	beq.n	10007472 <__eqsf2+0x26>
10007466:	2aff      	cmp	r2, #255	; 0xff
10007468:	d008      	beq.n	1000747c <__eqsf2+0x30>
1000746a:	2001      	movs	r0, #1
1000746c:	4293      	cmp	r3, r2
1000746e:	d00b      	beq.n	10007488 <__eqsf2+0x3c>
10007470:	bd70      	pop	{r4, r5, r6, pc}
10007472:	2001      	movs	r0, #1
10007474:	2c00      	cmp	r4, #0
10007476:	d1fb      	bne.n	10007470 <__eqsf2+0x24>
10007478:	2aff      	cmp	r2, #255	; 0xff
1000747a:	d1f6      	bne.n	1000746a <__eqsf2+0x1e>
1000747c:	2001      	movs	r0, #1
1000747e:	2d00      	cmp	r5, #0
10007480:	d1f6      	bne.n	10007470 <__eqsf2+0x24>
10007482:	2001      	movs	r0, #1
10007484:	4293      	cmp	r3, r2
10007486:	d1f3      	bne.n	10007470 <__eqsf2+0x24>
10007488:	42ac      	cmp	r4, r5
1000748a:	d1f1      	bne.n	10007470 <__eqsf2+0x24>
1000748c:	428e      	cmp	r6, r1
1000748e:	d003      	beq.n	10007498 <__eqsf2+0x4c>
10007490:	2b00      	cmp	r3, #0
10007492:	d1ed      	bne.n	10007470 <__eqsf2+0x24>
10007494:	2c00      	cmp	r4, #0
10007496:	d1eb      	bne.n	10007470 <__eqsf2+0x24>
10007498:	2000      	movs	r0, #0
1000749a:	e7e9      	b.n	10007470 <__eqsf2+0x24>

1000749c <__gesf2>:
1000749c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000749e:	0243      	lsls	r3, r0, #9
100074a0:	0042      	lsls	r2, r0, #1
100074a2:	004f      	lsls	r7, r1, #1
100074a4:	0fc6      	lsrs	r6, r0, #31
100074a6:	0248      	lsls	r0, r1, #9
100074a8:	0a5c      	lsrs	r4, r3, #9
100074aa:	0a45      	lsrs	r5, r0, #9
100074ac:	0e13      	lsrs	r3, r2, #24
100074ae:	0fc9      	lsrs	r1, r1, #31
100074b0:	0e3a      	lsrs	r2, r7, #24
100074b2:	2bff      	cmp	r3, #255	; 0xff
100074b4:	d026      	beq.n	10007504 <__gesf2+0x68>
100074b6:	2aff      	cmp	r2, #255	; 0xff
100074b8:	d029      	beq.n	1000750e <__gesf2+0x72>
100074ba:	2b00      	cmp	r3, #0
100074bc:	d10c      	bne.n	100074d8 <__gesf2+0x3c>
100074be:	4260      	negs	r0, r4
100074c0:	4160      	adcs	r0, r4
100074c2:	4684      	mov	ip, r0
100074c4:	2a00      	cmp	r2, #0
100074c6:	d00a      	beq.n	100074de <__gesf2+0x42>
100074c8:	2800      	cmp	r0, #0
100074ca:	d116      	bne.n	100074fa <__gesf2+0x5e>
100074cc:	428e      	cmp	r6, r1
100074ce:	d021      	beq.n	10007514 <__gesf2+0x78>
100074d0:	2e00      	cmp	r6, #0
100074d2:	d114      	bne.n	100074fe <__gesf2+0x62>
100074d4:	2001      	movs	r0, #1
100074d6:	e014      	b.n	10007502 <__gesf2+0x66>
100074d8:	2a00      	cmp	r2, #0
100074da:	d1f7      	bne.n	100074cc <__gesf2+0x30>
100074dc:	4694      	mov	ip, r2
100074de:	426f      	negs	r7, r5
100074e0:	416f      	adcs	r7, r5
100074e2:	4660      	mov	r0, ip
100074e4:	2800      	cmp	r0, #0
100074e6:	d105      	bne.n	100074f4 <__gesf2+0x58>
100074e8:	2f00      	cmp	r7, #0
100074ea:	d0ef      	beq.n	100074cc <__gesf2+0x30>
100074ec:	2001      	movs	r0, #1
100074ee:	2e00      	cmp	r6, #0
100074f0:	d007      	beq.n	10007502 <__gesf2+0x66>
100074f2:	e004      	b.n	100074fe <__gesf2+0x62>
100074f4:	2000      	movs	r0, #0
100074f6:	2f00      	cmp	r7, #0
100074f8:	d103      	bne.n	10007502 <__gesf2+0x66>
100074fa:	2900      	cmp	r1, #0
100074fc:	d1ea      	bne.n	100074d4 <__gesf2+0x38>
100074fe:	2101      	movs	r1, #1
10007500:	4248      	negs	r0, r1
10007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007504:	2c00      	cmp	r4, #0
10007506:	d0d6      	beq.n	100074b6 <__gesf2+0x1a>
10007508:	2202      	movs	r2, #2
1000750a:	4250      	negs	r0, r2
1000750c:	e7f9      	b.n	10007502 <__gesf2+0x66>
1000750e:	2d00      	cmp	r5, #0
10007510:	d0d3      	beq.n	100074ba <__gesf2+0x1e>
10007512:	e7f9      	b.n	10007508 <__gesf2+0x6c>
10007514:	4293      	cmp	r3, r2
10007516:	dcdb      	bgt.n	100074d0 <__gesf2+0x34>
10007518:	db04      	blt.n	10007524 <__gesf2+0x88>
1000751a:	42ac      	cmp	r4, r5
1000751c:	d8d8      	bhi.n	100074d0 <__gesf2+0x34>
1000751e:	2000      	movs	r0, #0
10007520:	42ac      	cmp	r4, r5
10007522:	d2ee      	bcs.n	10007502 <__gesf2+0x66>
10007524:	2e00      	cmp	r6, #0
10007526:	d0ea      	beq.n	100074fe <__gesf2+0x62>
10007528:	2001      	movs	r0, #1
1000752a:	e7ea      	b.n	10007502 <__gesf2+0x66>

1000752c <__lesf2>:
1000752c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000752e:	0243      	lsls	r3, r0, #9
10007530:	0042      	lsls	r2, r0, #1
10007532:	004f      	lsls	r7, r1, #1
10007534:	0fc6      	lsrs	r6, r0, #31
10007536:	0248      	lsls	r0, r1, #9
10007538:	0a5c      	lsrs	r4, r3, #9
1000753a:	0a45      	lsrs	r5, r0, #9
1000753c:	0e13      	lsrs	r3, r2, #24
1000753e:	0fc9      	lsrs	r1, r1, #31
10007540:	0e3a      	lsrs	r2, r7, #24
10007542:	2bff      	cmp	r3, #255	; 0xff
10007544:	d026      	beq.n	10007594 <__lesf2+0x68>
10007546:	2aff      	cmp	r2, #255	; 0xff
10007548:	d028      	beq.n	1000759c <__lesf2+0x70>
1000754a:	2b00      	cmp	r3, #0
1000754c:	d00f      	beq.n	1000756e <__lesf2+0x42>
1000754e:	2a00      	cmp	r2, #0
10007550:	d114      	bne.n	1000757c <__lesf2+0x50>
10007552:	4694      	mov	ip, r2
10007554:	426f      	negs	r7, r5
10007556:	416f      	adcs	r7, r5
10007558:	4660      	mov	r0, ip
1000755a:	2800      	cmp	r0, #0
1000755c:	d014      	beq.n	10007588 <__lesf2+0x5c>
1000755e:	2000      	movs	r0, #0
10007560:	2f00      	cmp	r7, #0
10007562:	d103      	bne.n	1000756c <__lesf2+0x40>
10007564:	2900      	cmp	r1, #0
10007566:	d10d      	bne.n	10007584 <__lesf2+0x58>
10007568:	2101      	movs	r1, #1
1000756a:	4248      	negs	r0, r1
1000756c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000756e:	4260      	negs	r0, r4
10007570:	4160      	adcs	r0, r4
10007572:	4684      	mov	ip, r0
10007574:	2a00      	cmp	r2, #0
10007576:	d0ed      	beq.n	10007554 <__lesf2+0x28>
10007578:	2800      	cmp	r0, #0
1000757a:	d1f3      	bne.n	10007564 <__lesf2+0x38>
1000757c:	428e      	cmp	r6, r1
1000757e:	d011      	beq.n	100075a4 <__lesf2+0x78>
10007580:	2e00      	cmp	r6, #0
10007582:	d1f1      	bne.n	10007568 <__lesf2+0x3c>
10007584:	2001      	movs	r0, #1
10007586:	e7f1      	b.n	1000756c <__lesf2+0x40>
10007588:	2f00      	cmp	r7, #0
1000758a:	d0f7      	beq.n	1000757c <__lesf2+0x50>
1000758c:	2001      	movs	r0, #1
1000758e:	2e00      	cmp	r6, #0
10007590:	d0ec      	beq.n	1000756c <__lesf2+0x40>
10007592:	e7e9      	b.n	10007568 <__lesf2+0x3c>
10007594:	2002      	movs	r0, #2
10007596:	2c00      	cmp	r4, #0
10007598:	d1e8      	bne.n	1000756c <__lesf2+0x40>
1000759a:	e7d4      	b.n	10007546 <__lesf2+0x1a>
1000759c:	2002      	movs	r0, #2
1000759e:	2d00      	cmp	r5, #0
100075a0:	d1e4      	bne.n	1000756c <__lesf2+0x40>
100075a2:	e7d2      	b.n	1000754a <__lesf2+0x1e>
100075a4:	4293      	cmp	r3, r2
100075a6:	dceb      	bgt.n	10007580 <__lesf2+0x54>
100075a8:	db04      	blt.n	100075b4 <__lesf2+0x88>
100075aa:	42ac      	cmp	r4, r5
100075ac:	d8e8      	bhi.n	10007580 <__lesf2+0x54>
100075ae:	2000      	movs	r0, #0
100075b0:	42ac      	cmp	r4, r5
100075b2:	d2db      	bcs.n	1000756c <__lesf2+0x40>
100075b4:	2e00      	cmp	r6, #0
100075b6:	d0d7      	beq.n	10007568 <__lesf2+0x3c>
100075b8:	2001      	movs	r0, #1
100075ba:	e7d7      	b.n	1000756c <__lesf2+0x40>

100075bc <__aeabi_fmul>:
100075bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100075be:	465f      	mov	r7, fp
100075c0:	4656      	mov	r6, sl
100075c2:	464d      	mov	r5, r9
100075c4:	4644      	mov	r4, r8
100075c6:	b4f0      	push	{r4, r5, r6, r7}
100075c8:	0245      	lsls	r5, r0, #9
100075ca:	0046      	lsls	r6, r0, #1
100075cc:	b083      	sub	sp, #12
100075ce:	1c0f      	adds	r7, r1, #0
100075d0:	0a6d      	lsrs	r5, r5, #9
100075d2:	0e36      	lsrs	r6, r6, #24
100075d4:	0fc4      	lsrs	r4, r0, #31
100075d6:	2e00      	cmp	r6, #0
100075d8:	d106      	bne.n	100075e8 <__aeabi_fmul+0x2c>
100075da:	2d00      	cmp	r5, #0
100075dc:	d170      	bne.n	100076c0 <__aeabi_fmul+0x104>
100075de:	2104      	movs	r1, #4
100075e0:	2201      	movs	r2, #1
100075e2:	4688      	mov	r8, r1
100075e4:	4692      	mov	sl, r2
100075e6:	e009      	b.n	100075fc <__aeabi_fmul+0x40>
100075e8:	2eff      	cmp	r6, #255	; 0xff
100075ea:	d043      	beq.n	10007674 <__aeabi_fmul+0xb8>
100075ec:	2380      	movs	r3, #128	; 0x80
100075ee:	0418      	lsls	r0, r3, #16
100075f0:	2100      	movs	r1, #0
100075f2:	4305      	orrs	r5, r0
100075f4:	00ed      	lsls	r5, r5, #3
100075f6:	3e7f      	subs	r6, #127	; 0x7f
100075f8:	4688      	mov	r8, r1
100075fa:	468a      	mov	sl, r1
100075fc:	1c38      	adds	r0, r7, #0
100075fe:	0043      	lsls	r3, r0, #1
10007600:	027f      	lsls	r7, r7, #9
10007602:	0fc1      	lsrs	r1, r0, #31
10007604:	0a7f      	lsrs	r7, r7, #9
10007606:	0e1b      	lsrs	r3, r3, #24
10007608:	468b      	mov	fp, r1
1000760a:	d13a      	bne.n	10007682 <__aeabi_fmul+0xc6>
1000760c:	2101      	movs	r1, #1
1000760e:	2f00      	cmp	r7, #0
10007610:	d162      	bne.n	100076d8 <__aeabi_fmul+0x11c>
10007612:	4658      	mov	r0, fp
10007614:	4060      	eors	r0, r4
10007616:	4642      	mov	r2, r8
10007618:	9001      	str	r0, [sp, #4]
1000761a:	430a      	orrs	r2, r1
1000761c:	2a0f      	cmp	r2, #15
1000761e:	d93f      	bls.n	100076a0 <__aeabi_fmul+0xe4>
10007620:	042c      	lsls	r4, r5, #16
10007622:	18f0      	adds	r0, r6, r3
10007624:	0c26      	lsrs	r6, r4, #16
10007626:	043b      	lsls	r3, r7, #16
10007628:	0c1a      	lsrs	r2, r3, #16
1000762a:	1c31      	adds	r1, r6, #0
1000762c:	4351      	muls	r1, r2
1000762e:	0c3f      	lsrs	r7, r7, #16
10007630:	0c2d      	lsrs	r5, r5, #16
10007632:	437e      	muls	r6, r7
10007634:	436a      	muls	r2, r5
10007636:	4681      	mov	r9, r0
10007638:	0c08      	lsrs	r0, r1, #16
1000763a:	1836      	adds	r6, r6, r0
1000763c:	1c2c      	adds	r4, r5, #0
1000763e:	18b3      	adds	r3, r6, r2
10007640:	437c      	muls	r4, r7
10007642:	429a      	cmp	r2, r3
10007644:	d900      	bls.n	10007648 <__aeabi_fmul+0x8c>
10007646:	e09a      	b.n	1000777e <__aeabi_fmul+0x1c2>
10007648:	0409      	lsls	r1, r1, #16
1000764a:	041d      	lsls	r5, r3, #16
1000764c:	0c08      	lsrs	r0, r1, #16
1000764e:	182e      	adds	r6, r5, r0
10007650:	01b5      	lsls	r5, r6, #6
10007652:	0c1b      	lsrs	r3, r3, #16
10007654:	1e69      	subs	r1, r5, #1
10007656:	418d      	sbcs	r5, r1
10007658:	0eb2      	lsrs	r2, r6, #26
1000765a:	18e7      	adds	r7, r4, r3
1000765c:	4315      	orrs	r5, r2
1000765e:	01bc      	lsls	r4, r7, #6
10007660:	4325      	orrs	r5, r4
10007662:	012b      	lsls	r3, r5, #4
10007664:	d54b      	bpl.n	100076fe <__aeabi_fmul+0x142>
10007666:	2001      	movs	r0, #1
10007668:	4028      	ands	r0, r5
1000766a:	2101      	movs	r1, #1
1000766c:	086d      	lsrs	r5, r5, #1
1000766e:	4489      	add	r9, r1
10007670:	4305      	orrs	r5, r0
10007672:	e044      	b.n	100076fe <__aeabi_fmul+0x142>
10007674:	2d00      	cmp	r5, #0
10007676:	d11e      	bne.n	100076b6 <__aeabi_fmul+0xfa>
10007678:	2008      	movs	r0, #8
1000767a:	2102      	movs	r1, #2
1000767c:	4680      	mov	r8, r0
1000767e:	468a      	mov	sl, r1
10007680:	e7bc      	b.n	100075fc <__aeabi_fmul+0x40>
10007682:	2bff      	cmp	r3, #255	; 0xff
10007684:	d012      	beq.n	100076ac <__aeabi_fmul+0xf0>
10007686:	2280      	movs	r2, #128	; 0x80
10007688:	0410      	lsls	r0, r2, #16
1000768a:	4307      	orrs	r7, r0
1000768c:	4658      	mov	r0, fp
1000768e:	2100      	movs	r1, #0
10007690:	4060      	eors	r0, r4
10007692:	4642      	mov	r2, r8
10007694:	00ff      	lsls	r7, r7, #3
10007696:	3b7f      	subs	r3, #127	; 0x7f
10007698:	9001      	str	r0, [sp, #4]
1000769a:	430a      	orrs	r2, r1
1000769c:	2a0f      	cmp	r2, #15
1000769e:	d8bf      	bhi.n	10007620 <__aeabi_fmul+0x64>
100076a0:	0090      	lsls	r0, r2, #2
100076a2:	4a5b      	ldr	r2, [pc, #364]	; (10007810 <__aeabi_fmul+0x254>)
100076a4:	4684      	mov	ip, r0
100076a6:	4462      	add	r2, ip
100076a8:	6810      	ldr	r0, [r2, #0]
100076aa:	4687      	mov	pc, r0
100076ac:	1c39      	adds	r1, r7, #0
100076ae:	1e4a      	subs	r2, r1, #1
100076b0:	4191      	sbcs	r1, r2
100076b2:	3102      	adds	r1, #2
100076b4:	e7ad      	b.n	10007612 <__aeabi_fmul+0x56>
100076b6:	220c      	movs	r2, #12
100076b8:	2303      	movs	r3, #3
100076ba:	4690      	mov	r8, r2
100076bc:	469a      	mov	sl, r3
100076be:	e79d      	b.n	100075fc <__aeabi_fmul+0x40>
100076c0:	1c28      	adds	r0, r5, #0
100076c2:	f001 f991 	bl	100089e8 <__clzsi2>
100076c6:	2276      	movs	r2, #118	; 0x76
100076c8:	1f46      	subs	r6, r0, #5
100076ca:	4253      	negs	r3, r2
100076cc:	40b5      	lsls	r5, r6
100076ce:	1a1e      	subs	r6, r3, r0
100076d0:	2000      	movs	r0, #0
100076d2:	4680      	mov	r8, r0
100076d4:	4682      	mov	sl, r0
100076d6:	e791      	b.n	100075fc <__aeabi_fmul+0x40>
100076d8:	1c38      	adds	r0, r7, #0
100076da:	f001 f985 	bl	100089e8 <__clzsi2>
100076de:	2176      	movs	r1, #118	; 0x76
100076e0:	1f43      	subs	r3, r0, #5
100076e2:	424a      	negs	r2, r1
100076e4:	409f      	lsls	r7, r3
100076e6:	2100      	movs	r1, #0
100076e8:	1a13      	subs	r3, r2, r0
100076ea:	e792      	b.n	10007612 <__aeabi_fmul+0x56>
100076ec:	9401      	str	r4, [sp, #4]
100076ee:	4651      	mov	r1, sl
100076f0:	2902      	cmp	r1, #2
100076f2:	d02c      	beq.n	1000774e <__aeabi_fmul+0x192>
100076f4:	2903      	cmp	r1, #3
100076f6:	d100      	bne.n	100076fa <__aeabi_fmul+0x13e>
100076f8:	e080      	b.n	100077fc <__aeabi_fmul+0x240>
100076fa:	2901      	cmp	r1, #1
100076fc:	d048      	beq.n	10007790 <__aeabi_fmul+0x1d4>
100076fe:	464e      	mov	r6, r9
10007700:	367f      	adds	r6, #127	; 0x7f
10007702:	2e00      	cmp	r6, #0
10007704:	dd51      	ble.n	100077aa <__aeabi_fmul+0x1ee>
10007706:	240f      	movs	r4, #15
10007708:	402c      	ands	r4, r5
1000770a:	2c04      	cmp	r4, #4
1000770c:	d000      	beq.n	10007710 <__aeabi_fmul+0x154>
1000770e:	3504      	adds	r5, #4
10007710:	012a      	lsls	r2, r5, #4
10007712:	d503      	bpl.n	1000771c <__aeabi_fmul+0x160>
10007714:	493f      	ldr	r1, [pc, #252]	; (10007814 <__aeabi_fmul+0x258>)
10007716:	464e      	mov	r6, r9
10007718:	400d      	ands	r5, r1
1000771a:	3680      	adds	r6, #128	; 0x80
1000771c:	2efe      	cmp	r6, #254	; 0xfe
1000771e:	dd3d      	ble.n	1000779c <__aeabi_fmul+0x1e0>
10007720:	9b01      	ldr	r3, [sp, #4]
10007722:	2401      	movs	r4, #1
10007724:	401c      	ands	r4, r3
10007726:	21ff      	movs	r1, #255	; 0xff
10007728:	2500      	movs	r5, #0
1000772a:	05c8      	lsls	r0, r1, #23
1000772c:	07e2      	lsls	r2, r4, #31
1000772e:	4328      	orrs	r0, r5
10007730:	4310      	orrs	r0, r2
10007732:	b003      	add	sp, #12
10007734:	bc3c      	pop	{r2, r3, r4, r5}
10007736:	4690      	mov	r8, r2
10007738:	4699      	mov	r9, r3
1000773a:	46a2      	mov	sl, r4
1000773c:	46ab      	mov	fp, r5
1000773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007740:	2400      	movs	r4, #0
10007742:	4d35      	ldr	r5, [pc, #212]	; (10007818 <__aeabi_fmul+0x25c>)
10007744:	21ff      	movs	r1, #255	; 0xff
10007746:	e7f0      	b.n	1000772a <__aeabi_fmul+0x16e>
10007748:	4651      	mov	r1, sl
1000774a:	2902      	cmp	r1, #2
1000774c:	d1d2      	bne.n	100076f4 <__aeabi_fmul+0x138>
1000774e:	9d01      	ldr	r5, [sp, #4]
10007750:	2401      	movs	r4, #1
10007752:	402c      	ands	r4, r5
10007754:	21ff      	movs	r1, #255	; 0xff
10007756:	2500      	movs	r5, #0
10007758:	e7e7      	b.n	1000772a <__aeabi_fmul+0x16e>
1000775a:	465e      	mov	r6, fp
1000775c:	1c3d      	adds	r5, r7, #0
1000775e:	9601      	str	r6, [sp, #4]
10007760:	e7c6      	b.n	100076f0 <__aeabi_fmul+0x134>
10007762:	1c3d      	adds	r5, r7, #0
10007764:	e7c4      	b.n	100076f0 <__aeabi_fmul+0x134>
10007766:	2680      	movs	r6, #128	; 0x80
10007768:	03f3      	lsls	r3, r6, #15
1000776a:	421d      	tst	r5, r3
1000776c:	d00b      	beq.n	10007786 <__aeabi_fmul+0x1ca>
1000776e:	421f      	tst	r7, r3
10007770:	d109      	bne.n	10007786 <__aeabi_fmul+0x1ca>
10007772:	431f      	orrs	r7, r3
10007774:	027a      	lsls	r2, r7, #9
10007776:	0a55      	lsrs	r5, r2, #9
10007778:	465c      	mov	r4, fp
1000777a:	21ff      	movs	r1, #255	; 0xff
1000777c:	e7d5      	b.n	1000772a <__aeabi_fmul+0x16e>
1000777e:	2280      	movs	r2, #128	; 0x80
10007780:	0257      	lsls	r7, r2, #9
10007782:	19e4      	adds	r4, r4, r7
10007784:	e760      	b.n	10007648 <__aeabi_fmul+0x8c>
10007786:	431d      	orrs	r5, r3
10007788:	026f      	lsls	r7, r5, #9
1000778a:	0a7d      	lsrs	r5, r7, #9
1000778c:	21ff      	movs	r1, #255	; 0xff
1000778e:	e7cc      	b.n	1000772a <__aeabi_fmul+0x16e>
10007790:	9b01      	ldr	r3, [sp, #4]
10007792:	2500      	movs	r5, #0
10007794:	4019      	ands	r1, r3
10007796:	b2cc      	uxtb	r4, r1
10007798:	2100      	movs	r1, #0
1000779a:	e7c6      	b.n	1000772a <__aeabi_fmul+0x16e>
1000779c:	9801      	ldr	r0, [sp, #4]
1000779e:	01ad      	lsls	r5, r5, #6
100077a0:	2401      	movs	r4, #1
100077a2:	0a6d      	lsrs	r5, r5, #9
100077a4:	b2f1      	uxtb	r1, r6
100077a6:	4004      	ands	r4, r0
100077a8:	e7bf      	b.n	1000772a <__aeabi_fmul+0x16e>
100077aa:	267e      	movs	r6, #126	; 0x7e
100077ac:	4273      	negs	r3, r6
100077ae:	464a      	mov	r2, r9
100077b0:	1a9f      	subs	r7, r3, r2
100077b2:	2f1b      	cmp	r7, #27
100077b4:	dd05      	ble.n	100077c2 <__aeabi_fmul+0x206>
100077b6:	9d01      	ldr	r5, [sp, #4]
100077b8:	2401      	movs	r4, #1
100077ba:	402c      	ands	r4, r5
100077bc:	2100      	movs	r1, #0
100077be:	2500      	movs	r5, #0
100077c0:	e7b3      	b.n	1000772a <__aeabi_fmul+0x16e>
100077c2:	4649      	mov	r1, r9
100077c4:	319e      	adds	r1, #158	; 0x9e
100077c6:	1c2c      	adds	r4, r5, #0
100077c8:	408d      	lsls	r5, r1
100077ca:	1c2e      	adds	r6, r5, #0
100077cc:	40fc      	lsrs	r4, r7
100077ce:	1e75      	subs	r5, r6, #1
100077d0:	41ae      	sbcs	r6, r5
100077d2:	4326      	orrs	r6, r4
100077d4:	200f      	movs	r0, #15
100077d6:	4030      	ands	r0, r6
100077d8:	2804      	cmp	r0, #4
100077da:	d000      	beq.n	100077de <__aeabi_fmul+0x222>
100077dc:	3604      	adds	r6, #4
100077de:	0170      	lsls	r0, r6, #5
100077e0:	d505      	bpl.n	100077ee <__aeabi_fmul+0x232>
100077e2:	9f01      	ldr	r7, [sp, #4]
100077e4:	2401      	movs	r4, #1
100077e6:	403c      	ands	r4, r7
100077e8:	2101      	movs	r1, #1
100077ea:	2500      	movs	r5, #0
100077ec:	e79d      	b.n	1000772a <__aeabi_fmul+0x16e>
100077ee:	9a01      	ldr	r2, [sp, #4]
100077f0:	01b3      	lsls	r3, r6, #6
100077f2:	2401      	movs	r4, #1
100077f4:	0a5d      	lsrs	r5, r3, #9
100077f6:	4014      	ands	r4, r2
100077f8:	2100      	movs	r1, #0
100077fa:	e796      	b.n	1000772a <__aeabi_fmul+0x16e>
100077fc:	2280      	movs	r2, #128	; 0x80
100077fe:	03d0      	lsls	r0, r2, #15
10007800:	4305      	orrs	r5, r0
10007802:	026c      	lsls	r4, r5, #9
10007804:	9901      	ldr	r1, [sp, #4]
10007806:	0a65      	lsrs	r5, r4, #9
10007808:	2401      	movs	r4, #1
1000780a:	400c      	ands	r4, r1
1000780c:	21ff      	movs	r1, #255	; 0xff
1000780e:	e78c      	b.n	1000772a <__aeabi_fmul+0x16e>
10007810:	10009248 	.word	0x10009248
10007814:	f7ffffff 	.word	0xf7ffffff
10007818:	007fffff 	.word	0x007fffff

1000781c <__aeabi_fsub>:
1000781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000781e:	0243      	lsls	r3, r0, #9
10007820:	0045      	lsls	r5, r0, #1
10007822:	024f      	lsls	r7, r1, #9
10007824:	004c      	lsls	r4, r1, #1
10007826:	0fc2      	lsrs	r2, r0, #31
10007828:	0998      	lsrs	r0, r3, #6
1000782a:	4684      	mov	ip, r0
1000782c:	0e2d      	lsrs	r5, r5, #24
1000782e:	0e20      	lsrs	r0, r4, #24
10007830:	0fc9      	lsrs	r1, r1, #31
10007832:	09bf      	lsrs	r7, r7, #6
10007834:	28ff      	cmp	r0, #255	; 0xff
10007836:	d054      	beq.n	100078e2 <__aeabi_fsub+0xc6>
10007838:	2601      	movs	r6, #1
1000783a:	4071      	eors	r1, r6
1000783c:	428a      	cmp	r2, r1
1000783e:	d03b      	beq.n	100078b8 <__aeabi_fsub+0x9c>
10007840:	1a2c      	subs	r4, r5, r0
10007842:	2c00      	cmp	r4, #0
10007844:	dc00      	bgt.n	10007848 <__aeabi_fsub+0x2c>
10007846:	e089      	b.n	1000795c <__aeabi_fsub+0x140>
10007848:	2800      	cmp	r0, #0
1000784a:	d125      	bne.n	10007898 <__aeabi_fsub+0x7c>
1000784c:	2f00      	cmp	r7, #0
1000784e:	d14b      	bne.n	100078e8 <__aeabi_fsub+0xcc>
10007850:	1c6e      	adds	r6, r5, #1
10007852:	1c2c      	adds	r4, r5, #0
10007854:	4663      	mov	r3, ip
10007856:	1c15      	adds	r5, r2, #0
10007858:	220f      	movs	r2, #15
1000785a:	401a      	ands	r2, r3
1000785c:	2a04      	cmp	r2, #4
1000785e:	d000      	beq.n	10007862 <__aeabi_fsub+0x46>
10007860:	3304      	adds	r3, #4
10007862:	2780      	movs	r7, #128	; 0x80
10007864:	04f9      	lsls	r1, r7, #19
10007866:	2201      	movs	r2, #1
10007868:	4019      	ands	r1, r3
1000786a:	402a      	ands	r2, r5
1000786c:	2900      	cmp	r1, #0
1000786e:	d006      	beq.n	1000787e <__aeabi_fsub+0x62>
10007870:	2eff      	cmp	r6, #255	; 0xff
10007872:	d100      	bne.n	10007876 <__aeabi_fsub+0x5a>
10007874:	e081      	b.n	1000797a <__aeabi_fsub+0x15e>
10007876:	4db1      	ldr	r5, [pc, #708]	; (10007b3c <__aeabi_fsub+0x320>)
10007878:	1c34      	adds	r4, r6, #0
1000787a:	402b      	ands	r3, r5
1000787c:	3601      	adds	r6, #1
1000787e:	b2f6      	uxtb	r6, r6
10007880:	08dd      	lsrs	r5, r3, #3
10007882:	2e01      	cmp	r6, #1
10007884:	dd62      	ble.n	1000794c <__aeabi_fsub+0x130>
10007886:	026b      	lsls	r3, r5, #9
10007888:	0a5d      	lsrs	r5, r3, #9
1000788a:	b2e4      	uxtb	r4, r4
1000788c:	05e4      	lsls	r4, r4, #23
1000788e:	4325      	orrs	r5, r4
10007890:	1c28      	adds	r0, r5, #0
10007892:	07d2      	lsls	r2, r2, #31
10007894:	4310      	orrs	r0, r2
10007896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10007898:	2dff      	cmp	r5, #255	; 0xff
1000789a:	d051      	beq.n	10007940 <__aeabi_fsub+0x124>
1000789c:	2180      	movs	r1, #128	; 0x80
1000789e:	04cb      	lsls	r3, r1, #19
100078a0:	431f      	orrs	r7, r3
100078a2:	2601      	movs	r6, #1
100078a4:	2c1b      	cmp	r4, #27
100078a6:	dd70      	ble.n	1000798a <__aeabi_fsub+0x16e>
100078a8:	4667      	mov	r7, ip
100078aa:	1c2c      	adds	r4, r5, #0
100078ac:	1bbb      	subs	r3, r7, r6
100078ae:	1c15      	adds	r5, r2, #0
100078b0:	0158      	lsls	r0, r3, #5
100078b2:	d422      	bmi.n	100078fa <__aeabi_fsub+0xde>
100078b4:	1c66      	adds	r6, r4, #1
100078b6:	e7cf      	b.n	10007858 <__aeabi_fsub+0x3c>
100078b8:	1a2e      	subs	r6, r5, r0
100078ba:	2e00      	cmp	r6, #0
100078bc:	dd76      	ble.n	100079ac <__aeabi_fsub+0x190>
100078be:	2800      	cmp	r0, #0
100078c0:	d032      	beq.n	10007928 <__aeabi_fsub+0x10c>
100078c2:	2dff      	cmp	r5, #255	; 0xff
100078c4:	d03c      	beq.n	10007940 <__aeabi_fsub+0x124>
100078c6:	2480      	movs	r4, #128	; 0x80
100078c8:	04e1      	lsls	r1, r4, #19
100078ca:	430f      	orrs	r7, r1
100078cc:	2301      	movs	r3, #1
100078ce:	2e1b      	cmp	r6, #27
100078d0:	dc00      	bgt.n	100078d4 <__aeabi_fsub+0xb8>
100078d2:	e0d1      	b.n	10007a78 <__aeabi_fsub+0x25c>
100078d4:	4463      	add	r3, ip
100078d6:	1c2c      	adds	r4, r5, #0
100078d8:	0158      	lsls	r0, r3, #5
100078da:	d47a      	bmi.n	100079d2 <__aeabi_fsub+0x1b6>
100078dc:	1c66      	adds	r6, r4, #1
100078de:	1c15      	adds	r5, r2, #0
100078e0:	e7ba      	b.n	10007858 <__aeabi_fsub+0x3c>
100078e2:	2f00      	cmp	r7, #0
100078e4:	d1aa      	bne.n	1000783c <__aeabi_fsub+0x20>
100078e6:	e7a7      	b.n	10007838 <__aeabi_fsub+0x1c>
100078e8:	3c01      	subs	r4, #1
100078ea:	2c00      	cmp	r4, #0
100078ec:	d16d      	bne.n	100079ca <__aeabi_fsub+0x1ae>
100078ee:	4663      	mov	r3, ip
100078f0:	1c2c      	adds	r4, r5, #0
100078f2:	1bdb      	subs	r3, r3, r7
100078f4:	1c15      	adds	r5, r2, #0
100078f6:	0158      	lsls	r0, r3, #5
100078f8:	d5dc      	bpl.n	100078b4 <__aeabi_fsub+0x98>
100078fa:	019a      	lsls	r2, r3, #6
100078fc:	0996      	lsrs	r6, r2, #6
100078fe:	1c30      	adds	r0, r6, #0
10007900:	f001 f872 	bl	100089e8 <__clzsi2>
10007904:	3805      	subs	r0, #5
10007906:	4086      	lsls	r6, r0
10007908:	4284      	cmp	r4, r0
1000790a:	dc39      	bgt.n	10007980 <__aeabi_fsub+0x164>
1000790c:	1b00      	subs	r0, r0, r4
1000790e:	231f      	movs	r3, #31
10007910:	1a1a      	subs	r2, r3, r0
10007912:	1c33      	adds	r3, r6, #0
10007914:	1c31      	adds	r1, r6, #0
10007916:	1c44      	adds	r4, r0, #1
10007918:	4093      	lsls	r3, r2
1000791a:	40e1      	lsrs	r1, r4
1000791c:	1e5e      	subs	r6, r3, #1
1000791e:	41b3      	sbcs	r3, r6
10007920:	430b      	orrs	r3, r1
10007922:	2601      	movs	r6, #1
10007924:	2400      	movs	r4, #0
10007926:	e797      	b.n	10007858 <__aeabi_fsub+0x3c>
10007928:	2f00      	cmp	r7, #0
1000792a:	d100      	bne.n	1000792e <__aeabi_fsub+0x112>
1000792c:	e790      	b.n	10007850 <__aeabi_fsub+0x34>
1000792e:	3e01      	subs	r6, #1
10007930:	2e00      	cmp	r6, #0
10007932:	d103      	bne.n	1000793c <__aeabi_fsub+0x120>
10007934:	4664      	mov	r4, ip
10007936:	193b      	adds	r3, r7, r4
10007938:	1c2c      	adds	r4, r5, #0
1000793a:	e7cd      	b.n	100078d8 <__aeabi_fsub+0xbc>
1000793c:	2dff      	cmp	r5, #255	; 0xff
1000793e:	d1c5      	bne.n	100078cc <__aeabi_fsub+0xb0>
10007940:	1c15      	adds	r5, r2, #0
10007942:	2280      	movs	r2, #128	; 0x80
10007944:	4663      	mov	r3, ip
10007946:	0056      	lsls	r6, r2, #1
10007948:	24ff      	movs	r4, #255	; 0xff
1000794a:	e785      	b.n	10007858 <__aeabi_fsub+0x3c>
1000794c:	2d00      	cmp	r5, #0
1000794e:	d09c      	beq.n	1000788a <__aeabi_fsub+0x6e>
10007950:	2c00      	cmp	r4, #0
10007952:	d028      	beq.n	100079a6 <__aeabi_fsub+0x18a>
10007954:	2080      	movs	r0, #128	; 0x80
10007956:	03c7      	lsls	r7, r0, #15
10007958:	433d      	orrs	r5, r7
1000795a:	e794      	b.n	10007886 <__aeabi_fsub+0x6a>
1000795c:	2c00      	cmp	r4, #0
1000795e:	d145      	bne.n	100079ec <__aeabi_fsub+0x1d0>
10007960:	1c6b      	adds	r3, r5, #1
10007962:	b2d8      	uxtb	r0, r3
10007964:	2801      	cmp	r0, #1
10007966:	dc00      	bgt.n	1000796a <__aeabi_fsub+0x14e>
10007968:	e090      	b.n	10007a8c <__aeabi_fsub+0x270>
1000796a:	4664      	mov	r4, ip
1000796c:	1be6      	subs	r6, r4, r7
1000796e:	0173      	lsls	r3, r6, #5
10007970:	d557      	bpl.n	10007a22 <__aeabi_fsub+0x206>
10007972:	1b3e      	subs	r6, r7, r4
10007974:	1c2c      	adds	r4, r5, #0
10007976:	1c0d      	adds	r5, r1, #0
10007978:	e7c1      	b.n	100078fe <__aeabi_fsub+0xe2>
1000797a:	24ff      	movs	r4, #255	; 0xff
1000797c:	2500      	movs	r5, #0
1000797e:	e785      	b.n	1000788c <__aeabi_fsub+0x70>
10007980:	4b6e      	ldr	r3, [pc, #440]	; (10007b3c <__aeabi_fsub+0x320>)
10007982:	1a24      	subs	r4, r4, r0
10007984:	4033      	ands	r3, r6
10007986:	1c66      	adds	r6, r4, #1
10007988:	e766      	b.n	10007858 <__aeabi_fsub+0x3c>
1000798a:	1c38      	adds	r0, r7, #0
1000798c:	2120      	movs	r1, #32
1000798e:	40e0      	lsrs	r0, r4
10007990:	1b0c      	subs	r4, r1, r4
10007992:	40a7      	lsls	r7, r4
10007994:	1c3e      	adds	r6, r7, #0
10007996:	1e77      	subs	r7, r6, #1
10007998:	41be      	sbcs	r6, r7
1000799a:	4306      	orrs	r6, r0
1000799c:	4667      	mov	r7, ip
1000799e:	1c2c      	adds	r4, r5, #0
100079a0:	1bbb      	subs	r3, r7, r6
100079a2:	1c15      	adds	r5, r2, #0
100079a4:	e784      	b.n	100078b0 <__aeabi_fsub+0x94>
100079a6:	0269      	lsls	r1, r5, #9
100079a8:	0a4d      	lsrs	r5, r1, #9
100079aa:	e76f      	b.n	1000788c <__aeabi_fsub+0x70>
100079ac:	2e00      	cmp	r6, #0
100079ae:	d179      	bne.n	10007aa4 <__aeabi_fsub+0x288>
100079b0:	1c6c      	adds	r4, r5, #1
100079b2:	b2e0      	uxtb	r0, r4
100079b4:	2801      	cmp	r0, #1
100079b6:	dd4b      	ble.n	10007a50 <__aeabi_fsub+0x234>
100079b8:	2cff      	cmp	r4, #255	; 0xff
100079ba:	d100      	bne.n	100079be <__aeabi_fsub+0x1a2>
100079bc:	e098      	b.n	10007af0 <__aeabi_fsub+0x2d4>
100079be:	4661      	mov	r1, ip
100079c0:	187f      	adds	r7, r7, r1
100079c2:	1cae      	adds	r6, r5, #2
100079c4:	087b      	lsrs	r3, r7, #1
100079c6:	1c15      	adds	r5, r2, #0
100079c8:	e746      	b.n	10007858 <__aeabi_fsub+0x3c>
100079ca:	2dff      	cmp	r5, #255	; 0xff
100079cc:	d000      	beq.n	100079d0 <__aeabi_fsub+0x1b4>
100079ce:	e768      	b.n	100078a2 <__aeabi_fsub+0x86>
100079d0:	e7b6      	b.n	10007940 <__aeabi_fsub+0x124>
100079d2:	1c67      	adds	r7, r4, #1
100079d4:	2fff      	cmp	r7, #255	; 0xff
100079d6:	d036      	beq.n	10007a46 <__aeabi_fsub+0x22a>
100079d8:	4858      	ldr	r0, [pc, #352]	; (10007b3c <__aeabi_fsub+0x320>)
100079da:	2101      	movs	r1, #1
100079dc:	4019      	ands	r1, r3
100079de:	4003      	ands	r3, r0
100079e0:	085b      	lsrs	r3, r3, #1
100079e2:	1ca6      	adds	r6, r4, #2
100079e4:	430b      	orrs	r3, r1
100079e6:	1c3c      	adds	r4, r7, #0
100079e8:	1c15      	adds	r5, r2, #0
100079ea:	e735      	b.n	10007858 <__aeabi_fsub+0x3c>
100079ec:	4266      	negs	r6, r4
100079ee:	2d00      	cmp	r5, #0
100079f0:	d01e      	beq.n	10007a30 <__aeabi_fsub+0x214>
100079f2:	28ff      	cmp	r0, #255	; 0xff
100079f4:	d06f      	beq.n	10007ad6 <__aeabi_fsub+0x2ba>
100079f6:	2580      	movs	r5, #128	; 0x80
100079f8:	4662      	mov	r2, ip
100079fa:	04eb      	lsls	r3, r5, #19
100079fc:	431a      	orrs	r2, r3
100079fe:	4694      	mov	ip, r2
10007a00:	2501      	movs	r5, #1
10007a02:	2e1b      	cmp	r6, #27
10007a04:	dc09      	bgt.n	10007a1a <__aeabi_fsub+0x1fe>
10007a06:	4662      	mov	r2, ip
10007a08:	2320      	movs	r3, #32
10007a0a:	40f2      	lsrs	r2, r6
10007a0c:	4664      	mov	r4, ip
10007a0e:	1b9e      	subs	r6, r3, r6
10007a10:	40b4      	lsls	r4, r6
10007a12:	1c25      	adds	r5, r4, #0
10007a14:	1e6c      	subs	r4, r5, #1
10007a16:	41a5      	sbcs	r5, r4
10007a18:	4315      	orrs	r5, r2
10007a1a:	1b7b      	subs	r3, r7, r5
10007a1c:	1c04      	adds	r4, r0, #0
10007a1e:	1c0d      	adds	r5, r1, #0
10007a20:	e769      	b.n	100078f6 <__aeabi_fsub+0xda>
10007a22:	2e00      	cmp	r6, #0
10007a24:	d10c      	bne.n	10007a40 <__aeabi_fsub+0x224>
10007a26:	2200      	movs	r2, #0
10007a28:	2601      	movs	r6, #1
10007a2a:	2304      	movs	r3, #4
10007a2c:	2400      	movs	r4, #0
10007a2e:	e726      	b.n	1000787e <__aeabi_fsub+0x62>
10007a30:	4664      	mov	r4, ip
10007a32:	2c00      	cmp	r4, #0
10007a34:	d155      	bne.n	10007ae2 <__aeabi_fsub+0x2c6>
10007a36:	1c46      	adds	r6, r0, #1
10007a38:	1c3b      	adds	r3, r7, #0
10007a3a:	1c04      	adds	r4, r0, #0
10007a3c:	1c0d      	adds	r5, r1, #0
10007a3e:	e70b      	b.n	10007858 <__aeabi_fsub+0x3c>
10007a40:	1c2c      	adds	r4, r5, #0
10007a42:	1c15      	adds	r5, r2, #0
10007a44:	e75b      	b.n	100078fe <__aeabi_fsub+0xe2>
10007a46:	2380      	movs	r3, #128	; 0x80
10007a48:	005e      	lsls	r6, r3, #1
10007a4a:	24ff      	movs	r4, #255	; 0xff
10007a4c:	2304      	movs	r3, #4
10007a4e:	e716      	b.n	1000787e <__aeabi_fsub+0x62>
10007a50:	2d00      	cmp	r5, #0
10007a52:	d000      	beq.n	10007a56 <__aeabi_fsub+0x23a>
10007a54:	e08d      	b.n	10007b72 <__aeabi_fsub+0x356>
10007a56:	4665      	mov	r5, ip
10007a58:	2d00      	cmp	r5, #0
10007a5a:	d100      	bne.n	10007a5e <__aeabi_fsub+0x242>
10007a5c:	e0ad      	b.n	10007bba <__aeabi_fsub+0x39e>
10007a5e:	2f00      	cmp	r7, #0
10007a60:	d100      	bne.n	10007a64 <__aeabi_fsub+0x248>
10007a62:	e081      	b.n	10007b68 <__aeabi_fsub+0x34c>
10007a64:	197b      	adds	r3, r7, r5
10007a66:	015c      	lsls	r4, r3, #5
10007a68:	d400      	bmi.n	10007a6c <__aeabi_fsub+0x250>
10007a6a:	e07e      	b.n	10007b6a <__aeabi_fsub+0x34e>
10007a6c:	4f33      	ldr	r7, [pc, #204]	; (10007b3c <__aeabi_fsub+0x320>)
10007a6e:	1c15      	adds	r5, r2, #0
10007a70:	403b      	ands	r3, r7
10007a72:	2602      	movs	r6, #2
10007a74:	2401      	movs	r4, #1
10007a76:	e6ef      	b.n	10007858 <__aeabi_fsub+0x3c>
10007a78:	1c38      	adds	r0, r7, #0
10007a7a:	2320      	movs	r3, #32
10007a7c:	40f0      	lsrs	r0, r6
10007a7e:	1b9e      	subs	r6, r3, r6
10007a80:	40b7      	lsls	r7, r6
10007a82:	1c3b      	adds	r3, r7, #0
10007a84:	1e5f      	subs	r7, r3, #1
10007a86:	41bb      	sbcs	r3, r7
10007a88:	4303      	orrs	r3, r0
10007a8a:	e723      	b.n	100078d4 <__aeabi_fsub+0xb8>
10007a8c:	2d00      	cmp	r5, #0
10007a8e:	d115      	bne.n	10007abc <__aeabi_fsub+0x2a0>
10007a90:	4665      	mov	r5, ip
10007a92:	2d00      	cmp	r5, #0
10007a94:	d147      	bne.n	10007b26 <__aeabi_fsub+0x30a>
10007a96:	2f00      	cmp	r7, #0
10007a98:	d0c5      	beq.n	10007a26 <__aeabi_fsub+0x20a>
10007a9a:	1c3b      	adds	r3, r7, #0
10007a9c:	1c0d      	adds	r5, r1, #0
10007a9e:	2601      	movs	r6, #1
10007aa0:	2400      	movs	r4, #0
10007aa2:	e6d9      	b.n	10007858 <__aeabi_fsub+0x3c>
10007aa4:	4276      	negs	r6, r6
10007aa6:	2d00      	cmp	r5, #0
10007aa8:	d126      	bne.n	10007af8 <__aeabi_fsub+0x2dc>
10007aaa:	4665      	mov	r5, ip
10007aac:	2d00      	cmp	r5, #0
10007aae:	d000      	beq.n	10007ab2 <__aeabi_fsub+0x296>
10007ab0:	e07d      	b.n	10007bae <__aeabi_fsub+0x392>
10007ab2:	1c46      	adds	r6, r0, #1
10007ab4:	1c3b      	adds	r3, r7, #0
10007ab6:	1c04      	adds	r4, r0, #0
10007ab8:	1c15      	adds	r5, r2, #0
10007aba:	e6cd      	b.n	10007858 <__aeabi_fsub+0x3c>
10007abc:	4665      	mov	r5, ip
10007abe:	2d00      	cmp	r5, #0
10007ac0:	d140      	bne.n	10007b44 <__aeabi_fsub+0x328>
10007ac2:	2f00      	cmp	r7, #0
10007ac4:	d107      	bne.n	10007ad6 <__aeabi_fsub+0x2ba>
10007ac6:	2180      	movs	r1, #128	; 0x80
10007ac8:	2200      	movs	r2, #0
10007aca:	004e      	lsls	r6, r1, #1
10007acc:	4b1c      	ldr	r3, [pc, #112]	; (10007b40 <__aeabi_fsub+0x324>)
10007ace:	24ff      	movs	r4, #255	; 0xff
10007ad0:	e6d5      	b.n	1000787e <__aeabi_fsub+0x62>
10007ad2:	28ff      	cmp	r0, #255	; 0xff
10007ad4:	d194      	bne.n	10007a00 <__aeabi_fsub+0x1e4>
10007ad6:	2080      	movs	r0, #128	; 0x80
10007ad8:	1c3b      	adds	r3, r7, #0
10007ada:	1c0d      	adds	r5, r1, #0
10007adc:	0046      	lsls	r6, r0, #1
10007ade:	24ff      	movs	r4, #255	; 0xff
10007ae0:	e6ba      	b.n	10007858 <__aeabi_fsub+0x3c>
10007ae2:	3e01      	subs	r6, #1
10007ae4:	2e00      	cmp	r6, #0
10007ae6:	d1f4      	bne.n	10007ad2 <__aeabi_fsub+0x2b6>
10007ae8:	1b3b      	subs	r3, r7, r4
10007aea:	1c0d      	adds	r5, r1, #0
10007aec:	1c04      	adds	r4, r0, #0
10007aee:	e702      	b.n	100078f6 <__aeabi_fsub+0xda>
10007af0:	2580      	movs	r5, #128	; 0x80
10007af2:	006e      	lsls	r6, r5, #1
10007af4:	2304      	movs	r3, #4
10007af6:	e6c2      	b.n	1000787e <__aeabi_fsub+0x62>
10007af8:	28ff      	cmp	r0, #255	; 0xff
10007afa:	d052      	beq.n	10007ba2 <__aeabi_fsub+0x386>
10007afc:	2480      	movs	r4, #128	; 0x80
10007afe:	4661      	mov	r1, ip
10007b00:	04e3      	lsls	r3, r4, #19
10007b02:	4319      	orrs	r1, r3
10007b04:	468c      	mov	ip, r1
10007b06:	2301      	movs	r3, #1
10007b08:	2e1b      	cmp	r6, #27
10007b0a:	dc09      	bgt.n	10007b20 <__aeabi_fsub+0x304>
10007b0c:	2120      	movs	r1, #32
10007b0e:	4664      	mov	r4, ip
10007b10:	40f4      	lsrs	r4, r6
10007b12:	4665      	mov	r5, ip
10007b14:	1b8e      	subs	r6, r1, r6
10007b16:	40b5      	lsls	r5, r6
10007b18:	1c2b      	adds	r3, r5, #0
10007b1a:	1e59      	subs	r1, r3, #1
10007b1c:	418b      	sbcs	r3, r1
10007b1e:	4323      	orrs	r3, r4
10007b20:	19db      	adds	r3, r3, r7
10007b22:	1c04      	adds	r4, r0, #0
10007b24:	e6d8      	b.n	100078d8 <__aeabi_fsub+0xbc>
10007b26:	2f00      	cmp	r7, #0
10007b28:	d01e      	beq.n	10007b68 <__aeabi_fsub+0x34c>
10007b2a:	1beb      	subs	r3, r5, r7
10007b2c:	0158      	lsls	r0, r3, #5
10007b2e:	d54b      	bpl.n	10007bc8 <__aeabi_fsub+0x3ac>
10007b30:	1b7b      	subs	r3, r7, r5
10007b32:	2601      	movs	r6, #1
10007b34:	1c0d      	adds	r5, r1, #0
10007b36:	2400      	movs	r4, #0
10007b38:	e68e      	b.n	10007858 <__aeabi_fsub+0x3c>
10007b3a:	46c0      	nop			; (mov r8, r8)
10007b3c:	fbffffff 	.word	0xfbffffff
10007b40:	03fffffc 	.word	0x03fffffc
10007b44:	2f00      	cmp	r7, #0
10007b46:	d100      	bne.n	10007b4a <__aeabi_fsub+0x32e>
10007b48:	e6fa      	b.n	10007940 <__aeabi_fsub+0x124>
10007b4a:	2080      	movs	r0, #128	; 0x80
10007b4c:	08eb      	lsrs	r3, r5, #3
10007b4e:	03c4      	lsls	r4, r0, #15
10007b50:	4223      	tst	r3, r4
10007b52:	d037      	beq.n	10007bc4 <__aeabi_fsub+0x3a8>
10007b54:	08ff      	lsrs	r7, r7, #3
10007b56:	4227      	tst	r7, r4
10007b58:	d134      	bne.n	10007bc4 <__aeabi_fsub+0x3a8>
10007b5a:	1c3b      	adds	r3, r7, #0
10007b5c:	1c0d      	adds	r5, r1, #0
10007b5e:	2280      	movs	r2, #128	; 0x80
10007b60:	00db      	lsls	r3, r3, #3
10007b62:	0056      	lsls	r6, r2, #1
10007b64:	24ff      	movs	r4, #255	; 0xff
10007b66:	e677      	b.n	10007858 <__aeabi_fsub+0x3c>
10007b68:	4663      	mov	r3, ip
10007b6a:	1c15      	adds	r5, r2, #0
10007b6c:	2601      	movs	r6, #1
10007b6e:	2400      	movs	r4, #0
10007b70:	e672      	b.n	10007858 <__aeabi_fsub+0x3c>
10007b72:	4664      	mov	r4, ip
10007b74:	2c00      	cmp	r4, #0
10007b76:	d014      	beq.n	10007ba2 <__aeabi_fsub+0x386>
10007b78:	2f00      	cmp	r7, #0
10007b7a:	d100      	bne.n	10007b7e <__aeabi_fsub+0x362>
10007b7c:	e6e0      	b.n	10007940 <__aeabi_fsub+0x124>
10007b7e:	2380      	movs	r3, #128	; 0x80
10007b80:	08e6      	lsrs	r6, r4, #3
10007b82:	03d8      	lsls	r0, r3, #15
10007b84:	1c31      	adds	r1, r6, #0
10007b86:	4206      	tst	r6, r0
10007b88:	d003      	beq.n	10007b92 <__aeabi_fsub+0x376>
10007b8a:	08f9      	lsrs	r1, r7, #3
10007b8c:	4201      	tst	r1, r0
10007b8e:	d000      	beq.n	10007b92 <__aeabi_fsub+0x376>
10007b90:	1c31      	adds	r1, r6, #0
10007b92:	1c15      	adds	r5, r2, #0
10007b94:	2280      	movs	r2, #128	; 0x80
10007b96:	00cb      	lsls	r3, r1, #3
10007b98:	0056      	lsls	r6, r2, #1
10007b9a:	24ff      	movs	r4, #255	; 0xff
10007b9c:	e65c      	b.n	10007858 <__aeabi_fsub+0x3c>
10007b9e:	28ff      	cmp	r0, #255	; 0xff
10007ba0:	d1b1      	bne.n	10007b06 <__aeabi_fsub+0x2ea>
10007ba2:	2080      	movs	r0, #128	; 0x80
10007ba4:	1c3b      	adds	r3, r7, #0
10007ba6:	1c15      	adds	r5, r2, #0
10007ba8:	0046      	lsls	r6, r0, #1
10007baa:	24ff      	movs	r4, #255	; 0xff
10007bac:	e654      	b.n	10007858 <__aeabi_fsub+0x3c>
10007bae:	3e01      	subs	r6, #1
10007bb0:	2e00      	cmp	r6, #0
10007bb2:	d1f4      	bne.n	10007b9e <__aeabi_fsub+0x382>
10007bb4:	197b      	adds	r3, r7, r5
10007bb6:	1c04      	adds	r4, r0, #0
10007bb8:	e68e      	b.n	100078d8 <__aeabi_fsub+0xbc>
10007bba:	1c3b      	adds	r3, r7, #0
10007bbc:	1c15      	adds	r5, r2, #0
10007bbe:	2601      	movs	r6, #1
10007bc0:	2400      	movs	r4, #0
10007bc2:	e649      	b.n	10007858 <__aeabi_fsub+0x3c>
10007bc4:	1c15      	adds	r5, r2, #0
10007bc6:	e7ca      	b.n	10007b5e <__aeabi_fsub+0x342>
10007bc8:	2b00      	cmp	r3, #0
10007bca:	d100      	bne.n	10007bce <__aeabi_fsub+0x3b2>
10007bcc:	e72b      	b.n	10007a26 <__aeabi_fsub+0x20a>
10007bce:	e7cc      	b.n	10007b6a <__aeabi_fsub+0x34e>

10007bd0 <__aeabi_f2iz>:
10007bd0:	0243      	lsls	r3, r0, #9
10007bd2:	0042      	lsls	r2, r0, #1
10007bd4:	0a59      	lsrs	r1, r3, #9
10007bd6:	0e13      	lsrs	r3, r2, #24
10007bd8:	0fc2      	lsrs	r2, r0, #31
10007bda:	2000      	movs	r0, #0
10007bdc:	2b7e      	cmp	r3, #126	; 0x7e
10007bde:	dd0d      	ble.n	10007bfc <__aeabi_f2iz+0x2c>
10007be0:	2b9d      	cmp	r3, #157	; 0x9d
10007be2:	dc0c      	bgt.n	10007bfe <__aeabi_f2iz+0x2e>
10007be4:	2080      	movs	r0, #128	; 0x80
10007be6:	0400      	lsls	r0, r0, #16
10007be8:	4301      	orrs	r1, r0
10007bea:	2b95      	cmp	r3, #149	; 0x95
10007bec:	dc0a      	bgt.n	10007c04 <__aeabi_f2iz+0x34>
10007bee:	2096      	movs	r0, #150	; 0x96
10007bf0:	1ac3      	subs	r3, r0, r3
10007bf2:	40d9      	lsrs	r1, r3
10007bf4:	4248      	negs	r0, r1
10007bf6:	2a00      	cmp	r2, #0
10007bf8:	d100      	bne.n	10007bfc <__aeabi_f2iz+0x2c>
10007bfa:	1c08      	adds	r0, r1, #0
10007bfc:	4770      	bx	lr
10007bfe:	4903      	ldr	r1, [pc, #12]	; (10007c0c <__aeabi_f2iz+0x3c>)
10007c00:	1850      	adds	r0, r2, r1
10007c02:	e7fb      	b.n	10007bfc <__aeabi_f2iz+0x2c>
10007c04:	3b96      	subs	r3, #150	; 0x96
10007c06:	4099      	lsls	r1, r3
10007c08:	e7f4      	b.n	10007bf4 <__aeabi_f2iz+0x24>
10007c0a:	46c0      	nop			; (mov r8, r8)
10007c0c:	7fffffff 	.word	0x7fffffff

10007c10 <__aeabi_ui2f>:
10007c10:	b510      	push	{r4, lr}
10007c12:	1e04      	subs	r4, r0, #0
10007c14:	d034      	beq.n	10007c80 <__aeabi_ui2f+0x70>
10007c16:	f000 fee7 	bl	100089e8 <__clzsi2>
10007c1a:	239e      	movs	r3, #158	; 0x9e
10007c1c:	1a1b      	subs	r3, r3, r0
10007c1e:	2b96      	cmp	r3, #150	; 0x96
10007c20:	dc07      	bgt.n	10007c32 <__aeabi_ui2f+0x22>
10007c22:	3808      	subs	r0, #8
10007c24:	4084      	lsls	r4, r0
10007c26:	0264      	lsls	r4, r4, #9
10007c28:	0a61      	lsrs	r1, r4, #9
10007c2a:	b2db      	uxtb	r3, r3
10007c2c:	05d8      	lsls	r0, r3, #23
10007c2e:	4308      	orrs	r0, r1
10007c30:	bd10      	pop	{r4, pc}
10007c32:	2b99      	cmp	r3, #153	; 0x99
10007c34:	dd0a      	ble.n	10007c4c <__aeabi_ui2f+0x3c>
10007c36:	1c02      	adds	r2, r0, #0
10007c38:	321b      	adds	r2, #27
10007c3a:	1c21      	adds	r1, r4, #0
10007c3c:	4091      	lsls	r1, r2
10007c3e:	1c0a      	adds	r2, r1, #0
10007c40:	1e51      	subs	r1, r2, #1
10007c42:	418a      	sbcs	r2, r1
10007c44:	2105      	movs	r1, #5
10007c46:	1a09      	subs	r1, r1, r0
10007c48:	40cc      	lsrs	r4, r1
10007c4a:	4314      	orrs	r4, r2
10007c4c:	2805      	cmp	r0, #5
10007c4e:	dc1a      	bgt.n	10007c86 <__aeabi_ui2f+0x76>
10007c50:	4a18      	ldr	r2, [pc, #96]	; (10007cb4 <__aeabi_ui2f+0xa4>)
10007c52:	210f      	movs	r1, #15
10007c54:	4022      	ands	r2, r4
10007c56:	400c      	ands	r4, r1
10007c58:	2c04      	cmp	r4, #4
10007c5a:	d000      	beq.n	10007c5e <__aeabi_ui2f+0x4e>
10007c5c:	3204      	adds	r2, #4
10007c5e:	0151      	lsls	r1, r2, #5
10007c60:	d505      	bpl.n	10007c6e <__aeabi_ui2f+0x5e>
10007c62:	249f      	movs	r4, #159	; 0x9f
10007c64:	1a23      	subs	r3, r4, r0
10007c66:	2bff      	cmp	r3, #255	; 0xff
10007c68:	d021      	beq.n	10007cae <__aeabi_ui2f+0x9e>
10007c6a:	4812      	ldr	r0, [pc, #72]	; (10007cb4 <__aeabi_ui2f+0xa4>)
10007c6c:	4002      	ands	r2, r0
10007c6e:	1c59      	adds	r1, r3, #1
10007c70:	b2cc      	uxtb	r4, r1
10007c72:	08d2      	lsrs	r2, r2, #3
10007c74:	2c01      	cmp	r4, #1
10007c76:	dd09      	ble.n	10007c8c <__aeabi_ui2f+0x7c>
10007c78:	0250      	lsls	r0, r2, #9
10007c7a:	0a41      	lsrs	r1, r0, #9
10007c7c:	b2db      	uxtb	r3, r3
10007c7e:	e7d5      	b.n	10007c2c <__aeabi_ui2f+0x1c>
10007c80:	2300      	movs	r3, #0
10007c82:	2100      	movs	r1, #0
10007c84:	e7d2      	b.n	10007c2c <__aeabi_ui2f+0x1c>
10007c86:	1f42      	subs	r2, r0, #5
10007c88:	4094      	lsls	r4, r2
10007c8a:	e7e1      	b.n	10007c50 <__aeabi_ui2f+0x40>
10007c8c:	2a00      	cmp	r2, #0
10007c8e:	d00b      	beq.n	10007ca8 <__aeabi_ui2f+0x98>
10007c90:	2b00      	cmp	r3, #0
10007c92:	d006      	beq.n	10007ca2 <__aeabi_ui2f+0x92>
10007c94:	2180      	movs	r1, #128	; 0x80
10007c96:	03cc      	lsls	r4, r1, #15
10007c98:	4322      	orrs	r2, r4
10007c9a:	0252      	lsls	r2, r2, #9
10007c9c:	0a51      	lsrs	r1, r2, #9
10007c9e:	b2db      	uxtb	r3, r3
10007ca0:	e7c4      	b.n	10007c2c <__aeabi_ui2f+0x1c>
10007ca2:	0250      	lsls	r0, r2, #9
10007ca4:	0a41      	lsrs	r1, r0, #9
10007ca6:	e7c1      	b.n	10007c2c <__aeabi_ui2f+0x1c>
10007ca8:	b2db      	uxtb	r3, r3
10007caa:	2100      	movs	r1, #0
10007cac:	e7be      	b.n	10007c2c <__aeabi_ui2f+0x1c>
10007cae:	23ff      	movs	r3, #255	; 0xff
10007cb0:	2100      	movs	r1, #0
10007cb2:	e7bb      	b.n	10007c2c <__aeabi_ui2f+0x1c>
10007cb4:	fbffffff 	.word	0xfbffffff

10007cb8 <__aeabi_dmul>:
10007cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10007cba:	4656      	mov	r6, sl
10007cbc:	4644      	mov	r4, r8
10007cbe:	465f      	mov	r7, fp
10007cc0:	464d      	mov	r5, r9
10007cc2:	b4f0      	push	{r4, r5, r6, r7}
10007cc4:	004f      	lsls	r7, r1, #1
10007cc6:	1c1d      	adds	r5, r3, #0
10007cc8:	030b      	lsls	r3, r1, #12
10007cca:	1c14      	adds	r4, r2, #0
10007ccc:	0b1a      	lsrs	r2, r3, #12
10007cce:	0d7b      	lsrs	r3, r7, #21
10007cd0:	b087      	sub	sp, #28
10007cd2:	1c06      	adds	r6, r0, #0
10007cd4:	4692      	mov	sl, r2
10007cd6:	4698      	mov	r8, r3
10007cd8:	0fcf      	lsrs	r7, r1, #31
10007cda:	2b00      	cmp	r3, #0
10007cdc:	d121      	bne.n	10007d22 <__aeabi_dmul+0x6a>
10007cde:	4302      	orrs	r2, r0
10007ce0:	d100      	bne.n	10007ce4 <__aeabi_dmul+0x2c>
10007ce2:	e149      	b.n	10007f78 <__aeabi_dmul+0x2c0>
10007ce4:	4653      	mov	r3, sl
10007ce6:	2b00      	cmp	r3, #0
10007ce8:	d100      	bne.n	10007cec <__aeabi_dmul+0x34>
10007cea:	e1e4      	b.n	100080b6 <__aeabi_dmul+0x3fe>
10007cec:	4650      	mov	r0, sl
10007cee:	f000 fe7b 	bl	100089e8 <__clzsi2>
10007cf2:	1e03      	subs	r3, r0, #0
10007cf4:	2b27      	cmp	r3, #39	; 0x27
10007cf6:	dd00      	ble.n	10007cfa <__aeabi_dmul+0x42>
10007cf8:	e1d8      	b.n	100080ac <__aeabi_dmul+0x3f4>
10007cfa:	3b08      	subs	r3, #8
10007cfc:	4651      	mov	r1, sl
10007cfe:	4099      	lsls	r1, r3
10007d00:	2228      	movs	r2, #40	; 0x28
10007d02:	4688      	mov	r8, r1
10007d04:	1a11      	subs	r1, r2, r0
10007d06:	1c32      	adds	r2, r6, #0
10007d08:	40ca      	lsrs	r2, r1
10007d0a:	4641      	mov	r1, r8
10007d0c:	430a      	orrs	r2, r1
10007d0e:	4692      	mov	sl, r2
10007d10:	409e      	lsls	r6, r3
10007d12:	4bd8      	ldr	r3, [pc, #864]	; (10008074 <__aeabi_dmul+0x3bc>)
10007d14:	2200      	movs	r2, #0
10007d16:	1a18      	subs	r0, r3, r0
10007d18:	2100      	movs	r1, #0
10007d1a:	4680      	mov	r8, r0
10007d1c:	4691      	mov	r9, r2
10007d1e:	9103      	str	r1, [sp, #12]
10007d20:	e011      	b.n	10007d46 <__aeabi_dmul+0x8e>
10007d22:	48d5      	ldr	r0, [pc, #852]	; (10008078 <__aeabi_dmul+0x3c0>)
10007d24:	4283      	cmp	r3, r0
10007d26:	d03e      	beq.n	10007da6 <__aeabi_dmul+0xee>
10007d28:	2180      	movs	r1, #128	; 0x80
10007d2a:	4653      	mov	r3, sl
10007d2c:	034a      	lsls	r2, r1, #13
10007d2e:	431a      	orrs	r2, r3
10007d30:	00d0      	lsls	r0, r2, #3
10007d32:	0f71      	lsrs	r1, r6, #29
10007d34:	4308      	orrs	r0, r1
10007d36:	4ad1      	ldr	r2, [pc, #836]	; (1000807c <__aeabi_dmul+0x3c4>)
10007d38:	4682      	mov	sl, r0
10007d3a:	2300      	movs	r3, #0
10007d3c:	2000      	movs	r0, #0
10007d3e:	00f6      	lsls	r6, r6, #3
10007d40:	4490      	add	r8, r2
10007d42:	4699      	mov	r9, r3
10007d44:	9003      	str	r0, [sp, #12]
10007d46:	1c29      	adds	r1, r5, #0
10007d48:	1c20      	adds	r0, r4, #0
10007d4a:	1c25      	adds	r5, r4, #0
10007d4c:	004a      	lsls	r2, r1, #1
10007d4e:	030c      	lsls	r4, r1, #12
10007d50:	0fcb      	lsrs	r3, r1, #31
10007d52:	0b24      	lsrs	r4, r4, #12
10007d54:	0d52      	lsrs	r2, r2, #21
10007d56:	469b      	mov	fp, r3
10007d58:	d131      	bne.n	10007dbe <__aeabi_dmul+0x106>
10007d5a:	1c21      	adds	r1, r4, #0
10007d5c:	4301      	orrs	r1, r0
10007d5e:	d100      	bne.n	10007d62 <__aeabi_dmul+0xaa>
10007d60:	e112      	b.n	10007f88 <__aeabi_dmul+0x2d0>
10007d62:	2c00      	cmp	r4, #0
10007d64:	d100      	bne.n	10007d68 <__aeabi_dmul+0xb0>
10007d66:	e19d      	b.n	100080a4 <__aeabi_dmul+0x3ec>
10007d68:	1c20      	adds	r0, r4, #0
10007d6a:	f000 fe3d 	bl	100089e8 <__clzsi2>
10007d6e:	2827      	cmp	r0, #39	; 0x27
10007d70:	dd00      	ble.n	10007d74 <__aeabi_dmul+0xbc>
10007d72:	e191      	b.n	10008098 <__aeabi_dmul+0x3e0>
10007d74:	1c03      	adds	r3, r0, #0
10007d76:	2228      	movs	r2, #40	; 0x28
10007d78:	3b08      	subs	r3, #8
10007d7a:	1c29      	adds	r1, r5, #0
10007d7c:	1a12      	subs	r2, r2, r0
10007d7e:	409c      	lsls	r4, r3
10007d80:	40d1      	lsrs	r1, r2
10007d82:	430c      	orrs	r4, r1
10007d84:	409d      	lsls	r5, r3
10007d86:	4bbb      	ldr	r3, [pc, #748]	; (10008074 <__aeabi_dmul+0x3bc>)
10007d88:	4659      	mov	r1, fp
10007d8a:	1a1a      	subs	r2, r3, r0
10007d8c:	4079      	eors	r1, r7
10007d8e:	2000      	movs	r0, #0
10007d90:	464b      	mov	r3, r9
10007d92:	9101      	str	r1, [sp, #4]
10007d94:	4303      	orrs	r3, r0
10007d96:	2b0f      	cmp	r3, #15
10007d98:	d826      	bhi.n	10007de8 <__aeabi_dmul+0x130>
10007d9a:	0099      	lsls	r1, r3, #2
10007d9c:	4bb8      	ldr	r3, [pc, #736]	; (10008080 <__aeabi_dmul+0x3c8>)
10007d9e:	468c      	mov	ip, r1
10007da0:	4463      	add	r3, ip
10007da2:	6819      	ldr	r1, [r3, #0]
10007da4:	468f      	mov	pc, r1
10007da6:	1c11      	adds	r1, r2, #0
10007da8:	4331      	orrs	r1, r6
10007daa:	d000      	beq.n	10007dae <__aeabi_dmul+0xf6>
10007dac:	e0df      	b.n	10007f6e <__aeabi_dmul+0x2b6>
10007dae:	2608      	movs	r6, #8
10007db0:	2000      	movs	r0, #0
10007db2:	2102      	movs	r1, #2
10007db4:	46b1      	mov	r9, r6
10007db6:	4682      	mov	sl, r0
10007db8:	2600      	movs	r6, #0
10007dba:	9103      	str	r1, [sp, #12]
10007dbc:	e7c3      	b.n	10007d46 <__aeabi_dmul+0x8e>
10007dbe:	48ae      	ldr	r0, [pc, #696]	; (10008078 <__aeabi_dmul+0x3c0>)
10007dc0:	4282      	cmp	r2, r0
10007dc2:	d100      	bne.n	10007dc6 <__aeabi_dmul+0x10e>
10007dc4:	e0c9      	b.n	10007f5a <__aeabi_dmul+0x2a2>
10007dc6:	2180      	movs	r1, #128	; 0x80
10007dc8:	034b      	lsls	r3, r1, #13
10007dca:	431c      	orrs	r4, r3
10007dcc:	49ab      	ldr	r1, [pc, #684]	; (1000807c <__aeabi_dmul+0x3c4>)
10007dce:	0f68      	lsrs	r0, r5, #29
10007dd0:	00e4      	lsls	r4, r4, #3
10007dd2:	4304      	orrs	r4, r0
10007dd4:	00ed      	lsls	r5, r5, #3
10007dd6:	1852      	adds	r2, r2, r1
10007dd8:	2000      	movs	r0, #0
10007dda:	4659      	mov	r1, fp
10007ddc:	4079      	eors	r1, r7
10007dde:	464b      	mov	r3, r9
10007de0:	9101      	str	r1, [sp, #4]
10007de2:	4303      	orrs	r3, r0
10007de4:	2b0f      	cmp	r3, #15
10007de6:	d9d8      	bls.n	10007d9a <__aeabi_dmul+0xe2>
10007de8:	4442      	add	r2, r8
10007dea:	0433      	lsls	r3, r6, #16
10007dec:	0429      	lsls	r1, r5, #16
10007dee:	9204      	str	r2, [sp, #16]
10007df0:	0c1a      	lsrs	r2, r3, #16
10007df2:	0c0f      	lsrs	r7, r1, #16
10007df4:	1c10      	adds	r0, r2, #0
10007df6:	4378      	muls	r0, r7
10007df8:	0c36      	lsrs	r6, r6, #16
10007dfa:	1c33      	adds	r3, r6, #0
10007dfc:	4680      	mov	r8, r0
10007dfe:	0c2d      	lsrs	r5, r5, #16
10007e00:	437b      	muls	r3, r7
10007e02:	1c30      	adds	r0, r6, #0
10007e04:	4368      	muls	r0, r5
10007e06:	1c11      	adds	r1, r2, #0
10007e08:	4369      	muls	r1, r5
10007e0a:	469c      	mov	ip, r3
10007e0c:	4643      	mov	r3, r8
10007e0e:	4683      	mov	fp, r0
10007e10:	0c18      	lsrs	r0, r3, #16
10007e12:	1808      	adds	r0, r1, r0
10007e14:	4460      	add	r0, ip
10007e16:	4584      	cmp	ip, r0
10007e18:	d900      	bls.n	10007e1c <__aeabi_dmul+0x164>
10007e1a:	e11f      	b.n	1000805c <__aeabi_dmul+0x3a4>
10007e1c:	0c01      	lsrs	r1, r0, #16
10007e1e:	4643      	mov	r3, r8
10007e20:	9103      	str	r1, [sp, #12]
10007e22:	0419      	lsls	r1, r3, #16
10007e24:	0c0b      	lsrs	r3, r1, #16
10007e26:	0400      	lsls	r0, r0, #16
10007e28:	18c0      	adds	r0, r0, r3
10007e2a:	0421      	lsls	r1, r4, #16
10007e2c:	0c24      	lsrs	r4, r4, #16
10007e2e:	9005      	str	r0, [sp, #20]
10007e30:	1c10      	adds	r0, r2, #0
10007e32:	4362      	muls	r2, r4
10007e34:	0c09      	lsrs	r1, r1, #16
10007e36:	9202      	str	r2, [sp, #8]
10007e38:	4348      	muls	r0, r1
10007e3a:	1c32      	adds	r2, r6, #0
10007e3c:	4366      	muls	r6, r4
10007e3e:	434a      	muls	r2, r1
10007e40:	9b02      	ldr	r3, [sp, #8]
10007e42:	46b1      	mov	r9, r6
10007e44:	0c06      	lsrs	r6, r0, #16
10007e46:	4690      	mov	r8, r2
10007e48:	46b4      	mov	ip, r6
10007e4a:	1c1a      	adds	r2, r3, #0
10007e4c:	4462      	add	r2, ip
10007e4e:	4442      	add	r2, r8
10007e50:	4590      	cmp	r8, r2
10007e52:	d902      	bls.n	10007e5a <__aeabi_dmul+0x1a2>
10007e54:	2680      	movs	r6, #128	; 0x80
10007e56:	0273      	lsls	r3, r6, #9
10007e58:	4499      	add	r9, r3
10007e5a:	0c16      	lsrs	r6, r2, #16
10007e5c:	46b0      	mov	r8, r6
10007e5e:	44c1      	add	r9, r8
10007e60:	0400      	lsls	r0, r0, #16
10007e62:	464b      	mov	r3, r9
10007e64:	0c06      	lsrs	r6, r0, #16
10007e66:	0412      	lsls	r2, r2, #16
10007e68:	9302      	str	r3, [sp, #8]
10007e6a:	1993      	adds	r3, r2, r6
10007e6c:	4656      	mov	r6, sl
10007e6e:	0432      	lsls	r2, r6, #16
10007e70:	0c10      	lsrs	r0, r2, #16
10007e72:	1c02      	adds	r2, r0, #0
10007e74:	436a      	muls	r2, r5
10007e76:	469c      	mov	ip, r3
10007e78:	1c03      	adds	r3, r0, #0
10007e7a:	437b      	muls	r3, r7
10007e7c:	4691      	mov	r9, r2
10007e7e:	0c32      	lsrs	r2, r6, #16
10007e80:	4357      	muls	r7, r2
10007e82:	4698      	mov	r8, r3
10007e84:	0c1b      	lsrs	r3, r3, #16
10007e86:	469a      	mov	sl, r3
10007e88:	44d1      	add	r9, sl
10007e8a:	44b9      	add	r9, r7
10007e8c:	4355      	muls	r5, r2
10007e8e:	454f      	cmp	r7, r9
10007e90:	d902      	bls.n	10007e98 <__aeabi_dmul+0x1e0>
10007e92:	2780      	movs	r7, #128	; 0x80
10007e94:	027e      	lsls	r6, r7, #9
10007e96:	19ad      	adds	r5, r5, r6
10007e98:	464b      	mov	r3, r9
10007e9a:	0c1f      	lsrs	r7, r3, #16
10007e9c:	4646      	mov	r6, r8
10007e9e:	19ed      	adds	r5, r5, r7
10007ea0:	041f      	lsls	r7, r3, #16
10007ea2:	0433      	lsls	r3, r6, #16
10007ea4:	0c1e      	lsrs	r6, r3, #16
10007ea6:	1c03      	adds	r3, r0, #0
10007ea8:	434b      	muls	r3, r1
10007eaa:	4360      	muls	r0, r4
10007eac:	4351      	muls	r1, r2
10007eae:	4354      	muls	r4, r2
10007eb0:	0c1a      	lsrs	r2, r3, #16
10007eb2:	1880      	adds	r0, r0, r2
10007eb4:	46b0      	mov	r8, r6
10007eb6:	1840      	adds	r0, r0, r1
10007eb8:	4447      	add	r7, r8
10007eba:	469a      	mov	sl, r3
10007ebc:	4281      	cmp	r1, r0
10007ebe:	d902      	bls.n	10007ec6 <__aeabi_dmul+0x20e>
10007ec0:	2180      	movs	r1, #128	; 0x80
10007ec2:	024e      	lsls	r6, r1, #9
10007ec4:	19a4      	adds	r4, r4, r6
10007ec6:	9b03      	ldr	r3, [sp, #12]
10007ec8:	1c1a      	adds	r2, r3, #0
10007eca:	4462      	add	r2, ip
10007ecc:	445a      	add	r2, fp
10007ece:	4562      	cmp	r2, ip
10007ed0:	4189      	sbcs	r1, r1
10007ed2:	424e      	negs	r6, r1
10007ed4:	4651      	mov	r1, sl
10007ed6:	46b3      	mov	fp, r6
10007ed8:	0403      	lsls	r3, r0, #16
10007eda:	040e      	lsls	r6, r1, #16
10007edc:	469c      	mov	ip, r3
10007ede:	9902      	ldr	r1, [sp, #8]
10007ee0:	0c33      	lsrs	r3, r6, #16
10007ee2:	4463      	add	r3, ip
10007ee4:	18ce      	adds	r6, r1, r3
10007ee6:	46b0      	mov	r8, r6
10007ee8:	46c2      	mov	sl, r8
10007eea:	44da      	add	sl, fp
10007eec:	19d2      	adds	r2, r2, r7
10007eee:	42ba      	cmp	r2, r7
10007ef0:	41bf      	sbcs	r7, r7
10007ef2:	4651      	mov	r1, sl
10007ef4:	427b      	negs	r3, r7
10007ef6:	186f      	adds	r7, r5, r1
10007ef8:	18f9      	adds	r1, r7, r3
10007efa:	4699      	mov	r9, r3
10007efc:	45da      	cmp	sl, fp
10007efe:	419b      	sbcs	r3, r3
10007f00:	425e      	negs	r6, r3
10007f02:	9b02      	ldr	r3, [sp, #8]
10007f04:	46b3      	mov	fp, r6
10007f06:	4598      	cmp	r8, r3
10007f08:	41b6      	sbcs	r6, r6
10007f0a:	4276      	negs	r6, r6
10007f0c:	465b      	mov	r3, fp
10007f0e:	431e      	orrs	r6, r3
10007f10:	0c00      	lsrs	r0, r0, #16
10007f12:	4549      	cmp	r1, r9
10007f14:	419b      	sbcs	r3, r3
10007f16:	42af      	cmp	r7, r5
10007f18:	41ad      	sbcs	r5, r5
10007f1a:	1836      	adds	r6, r6, r0
10007f1c:	426f      	negs	r7, r5
10007f1e:	4258      	negs	r0, r3
10007f20:	4338      	orrs	r0, r7
10007f22:	1836      	adds	r6, r6, r0
10007f24:	9805      	ldr	r0, [sp, #20]
10007f26:	1934      	adds	r4, r6, r4
10007f28:	0256      	lsls	r6, r2, #9
10007f2a:	4306      	orrs	r6, r0
10007f2c:	0dcb      	lsrs	r3, r1, #23
10007f2e:	0264      	lsls	r4, r4, #9
10007f30:	1e70      	subs	r0, r6, #1
10007f32:	4186      	sbcs	r6, r0
10007f34:	0dd2      	lsrs	r2, r2, #23
10007f36:	4316      	orrs	r6, r2
10007f38:	0249      	lsls	r1, r1, #9
10007f3a:	431c      	orrs	r4, r3
10007f3c:	430e      	orrs	r6, r1
10007f3e:	01e0      	lsls	r0, r4, #7
10007f40:	d52f      	bpl.n	10007fa2 <__aeabi_dmul+0x2ea>
10007f42:	2701      	movs	r7, #1
10007f44:	9d04      	ldr	r5, [sp, #16]
10007f46:	4037      	ands	r7, r6
10007f48:	0873      	lsrs	r3, r6, #1
10007f4a:	1c3e      	adds	r6, r7, #0
10007f4c:	07e0      	lsls	r0, r4, #31
10007f4e:	3501      	adds	r5, #1
10007f50:	431e      	orrs	r6, r3
10007f52:	9504      	str	r5, [sp, #16]
10007f54:	4306      	orrs	r6, r0
10007f56:	0864      	lsrs	r4, r4, #1
10007f58:	e023      	b.n	10007fa2 <__aeabi_dmul+0x2ea>
10007f5a:	1c23      	adds	r3, r4, #0
10007f5c:	432b      	orrs	r3, r5
10007f5e:	2003      	movs	r0, #3
10007f60:	2b00      	cmp	r3, #0
10007f62:	d000      	beq.n	10007f66 <__aeabi_dmul+0x2ae>
10007f64:	e739      	b.n	10007dda <__aeabi_dmul+0x122>
10007f66:	2400      	movs	r4, #0
10007f68:	2500      	movs	r5, #0
10007f6a:	2002      	movs	r0, #2
10007f6c:	e735      	b.n	10007dda <__aeabi_dmul+0x122>
10007f6e:	220c      	movs	r2, #12
10007f70:	2303      	movs	r3, #3
10007f72:	4691      	mov	r9, r2
10007f74:	9303      	str	r3, [sp, #12]
10007f76:	e6e6      	b.n	10007d46 <__aeabi_dmul+0x8e>
10007f78:	2604      	movs	r6, #4
10007f7a:	2300      	movs	r3, #0
10007f7c:	2001      	movs	r0, #1
10007f7e:	46b1      	mov	r9, r6
10007f80:	469a      	mov	sl, r3
10007f82:	2600      	movs	r6, #0
10007f84:	9003      	str	r0, [sp, #12]
10007f86:	e6de      	b.n	10007d46 <__aeabi_dmul+0x8e>
10007f88:	2400      	movs	r4, #0
10007f8a:	2500      	movs	r5, #0
10007f8c:	2001      	movs	r0, #1
10007f8e:	e724      	b.n	10007dda <__aeabi_dmul+0x122>
10007f90:	9803      	ldr	r0, [sp, #12]
10007f92:	4654      	mov	r4, sl
10007f94:	2802      	cmp	r0, #2
10007f96:	d044      	beq.n	10008022 <__aeabi_dmul+0x36a>
10007f98:	2803      	cmp	r0, #3
10007f9a:	d100      	bne.n	10007f9e <__aeabi_dmul+0x2e6>
10007f9c:	e0ea      	b.n	10008174 <__aeabi_dmul+0x4bc>
10007f9e:	2801      	cmp	r0, #1
10007fa0:	d060      	beq.n	10008064 <__aeabi_dmul+0x3ac>
10007fa2:	9a04      	ldr	r2, [sp, #16]
10007fa4:	4937      	ldr	r1, [pc, #220]	; (10008084 <__aeabi_dmul+0x3cc>)
10007fa6:	1850      	adds	r0, r2, r1
10007fa8:	2800      	cmp	r0, #0
10007faa:	dc00      	bgt.n	10007fae <__aeabi_dmul+0x2f6>
10007fac:	e095      	b.n	100080da <__aeabi_dmul+0x422>
10007fae:	270f      	movs	r7, #15
10007fb0:	4037      	ands	r7, r6
10007fb2:	2f04      	cmp	r7, #4
10007fb4:	d005      	beq.n	10007fc2 <__aeabi_dmul+0x30a>
10007fb6:	1d31      	adds	r1, r6, #4
10007fb8:	42b1      	cmp	r1, r6
10007fba:	41b6      	sbcs	r6, r6
10007fbc:	4275      	negs	r5, r6
10007fbe:	1964      	adds	r4, r4, r5
10007fc0:	1c0e      	adds	r6, r1, #0
10007fc2:	01e1      	lsls	r1, r4, #7
10007fc4:	d505      	bpl.n	10007fd2 <__aeabi_dmul+0x31a>
10007fc6:	4830      	ldr	r0, [pc, #192]	; (10008088 <__aeabi_dmul+0x3d0>)
10007fc8:	9a04      	ldr	r2, [sp, #16]
10007fca:	2380      	movs	r3, #128	; 0x80
10007fcc:	00df      	lsls	r7, r3, #3
10007fce:	4004      	ands	r4, r0
10007fd0:	19d0      	adds	r0, r2, r7
10007fd2:	492e      	ldr	r1, [pc, #184]	; (1000808c <__aeabi_dmul+0x3d4>)
10007fd4:	4288      	cmp	r0, r1
10007fd6:	dc24      	bgt.n	10008022 <__aeabi_dmul+0x36a>
10007fd8:	9b01      	ldr	r3, [sp, #4]
10007fda:	0765      	lsls	r5, r4, #29
10007fdc:	08f6      	lsrs	r6, r6, #3
10007fde:	0264      	lsls	r4, r4, #9
10007fe0:	0542      	lsls	r2, r0, #21
10007fe2:	2701      	movs	r7, #1
10007fe4:	432e      	orrs	r6, r5
10007fe6:	0b24      	lsrs	r4, r4, #12
10007fe8:	0d52      	lsrs	r2, r2, #21
10007fea:	401f      	ands	r7, r3
10007fec:	2000      	movs	r0, #0
10007fee:	2100      	movs	r1, #0
10007ff0:	0d09      	lsrs	r1, r1, #20
10007ff2:	050d      	lsls	r5, r1, #20
10007ff4:	4325      	orrs	r5, r4
10007ff6:	4c26      	ldr	r4, [pc, #152]	; (10008090 <__aeabi_dmul+0x3d8>)
10007ff8:	0512      	lsls	r2, r2, #20
10007ffa:	402c      	ands	r4, r5
10007ffc:	4314      	orrs	r4, r2
10007ffe:	0063      	lsls	r3, r4, #1
10008000:	1c30      	adds	r0, r6, #0
10008002:	085e      	lsrs	r6, r3, #1
10008004:	07ff      	lsls	r7, r7, #31
10008006:	1c31      	adds	r1, r6, #0
10008008:	4339      	orrs	r1, r7
1000800a:	b007      	add	sp, #28
1000800c:	bc3c      	pop	{r2, r3, r4, r5}
1000800e:	4690      	mov	r8, r2
10008010:	4699      	mov	r9, r3
10008012:	46a2      	mov	sl, r4
10008014:	46ab      	mov	fp, r5
10008016:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008018:	465a      	mov	r2, fp
1000801a:	1c2e      	adds	r6, r5, #0
1000801c:	9201      	str	r2, [sp, #4]
1000801e:	2802      	cmp	r0, #2
10008020:	d1ba      	bne.n	10007f98 <__aeabi_dmul+0x2e0>
10008022:	9e01      	ldr	r6, [sp, #4]
10008024:	2701      	movs	r7, #1
10008026:	4037      	ands	r7, r6
10008028:	4a13      	ldr	r2, [pc, #76]	; (10008078 <__aeabi_dmul+0x3c0>)
1000802a:	2400      	movs	r4, #0
1000802c:	2600      	movs	r6, #0
1000802e:	e7dd      	b.n	10007fec <__aeabi_dmul+0x334>
10008030:	4654      	mov	r4, sl
10008032:	9701      	str	r7, [sp, #4]
10008034:	9803      	ldr	r0, [sp, #12]
10008036:	e7ad      	b.n	10007f94 <__aeabi_dmul+0x2dc>
10008038:	2601      	movs	r6, #1
1000803a:	2700      	movs	r7, #0
1000803c:	4c15      	ldr	r4, [pc, #84]	; (10008094 <__aeabi_dmul+0x3dc>)
1000803e:	4276      	negs	r6, r6
10008040:	4a0d      	ldr	r2, [pc, #52]	; (10008078 <__aeabi_dmul+0x3c0>)
10008042:	e7d3      	b.n	10007fec <__aeabi_dmul+0x334>
10008044:	1c2e      	adds	r6, r5, #0
10008046:	e7a5      	b.n	10007f94 <__aeabi_dmul+0x2dc>
10008048:	2280      	movs	r2, #128	; 0x80
1000804a:	0313      	lsls	r3, r2, #12
1000804c:	4651      	mov	r1, sl
1000804e:	4219      	tst	r1, r3
10008050:	d135      	bne.n	100080be <__aeabi_dmul+0x406>
10008052:	430b      	orrs	r3, r1
10008054:	031d      	lsls	r5, r3, #12
10008056:	0b2c      	lsrs	r4, r5, #12
10008058:	4a07      	ldr	r2, [pc, #28]	; (10008078 <__aeabi_dmul+0x3c0>)
1000805a:	e7c7      	b.n	10007fec <__aeabi_dmul+0x334>
1000805c:	2180      	movs	r1, #128	; 0x80
1000805e:	024b      	lsls	r3, r1, #9
10008060:	449b      	add	fp, r3
10008062:	e6db      	b.n	10007e1c <__aeabi_dmul+0x164>
10008064:	9b01      	ldr	r3, [sp, #4]
10008066:	2200      	movs	r2, #0
10008068:	4018      	ands	r0, r3
1000806a:	b2c7      	uxtb	r7, r0
1000806c:	2400      	movs	r4, #0
1000806e:	2600      	movs	r6, #0
10008070:	e7bc      	b.n	10007fec <__aeabi_dmul+0x334>
10008072:	46c0      	nop			; (mov r8, r8)
10008074:	fffffc0d 	.word	0xfffffc0d
10008078:	000007ff 	.word	0x000007ff
1000807c:	fffffc01 	.word	0xfffffc01
10008080:	10009288 	.word	0x10009288
10008084:	000003ff 	.word	0x000003ff
10008088:	feffffff 	.word	0xfeffffff
1000808c:	000007fe 	.word	0x000007fe
10008090:	800fffff 	.word	0x800fffff
10008094:	000fffff 	.word	0x000fffff
10008098:	1c04      	adds	r4, r0, #0
1000809a:	3c28      	subs	r4, #40	; 0x28
1000809c:	40a5      	lsls	r5, r4
1000809e:	1c2c      	adds	r4, r5, #0
100080a0:	2500      	movs	r5, #0
100080a2:	e670      	b.n	10007d86 <__aeabi_dmul+0xce>
100080a4:	f000 fca0 	bl	100089e8 <__clzsi2>
100080a8:	3020      	adds	r0, #32
100080aa:	e660      	b.n	10007d6e <__aeabi_dmul+0xb6>
100080ac:	3b28      	subs	r3, #40	; 0x28
100080ae:	409e      	lsls	r6, r3
100080b0:	46b2      	mov	sl, r6
100080b2:	2600      	movs	r6, #0
100080b4:	e62d      	b.n	10007d12 <__aeabi_dmul+0x5a>
100080b6:	f000 fc97 	bl	100089e8 <__clzsi2>
100080ba:	3020      	adds	r0, #32
100080bc:	e619      	b.n	10007cf2 <__aeabi_dmul+0x3a>
100080be:	421c      	tst	r4, r3
100080c0:	d106      	bne.n	100080d0 <__aeabi_dmul+0x418>
100080c2:	431c      	orrs	r4, r3
100080c4:	0326      	lsls	r6, r4, #12
100080c6:	0b34      	lsrs	r4, r6, #12
100080c8:	465f      	mov	r7, fp
100080ca:	1c2e      	adds	r6, r5, #0
100080cc:	4a2e      	ldr	r2, [pc, #184]	; (10008188 <__aeabi_dmul+0x4d0>)
100080ce:	e78d      	b.n	10007fec <__aeabi_dmul+0x334>
100080d0:	430b      	orrs	r3, r1
100080d2:	0318      	lsls	r0, r3, #12
100080d4:	0b04      	lsrs	r4, r0, #12
100080d6:	4a2c      	ldr	r2, [pc, #176]	; (10008188 <__aeabi_dmul+0x4d0>)
100080d8:	e788      	b.n	10007fec <__aeabi_dmul+0x334>
100080da:	4f2c      	ldr	r7, [pc, #176]	; (1000818c <__aeabi_dmul+0x4d4>)
100080dc:	9d04      	ldr	r5, [sp, #16]
100080de:	1b7b      	subs	r3, r7, r5
100080e0:	2b38      	cmp	r3, #56	; 0x38
100080e2:	dd06      	ble.n	100080f2 <__aeabi_dmul+0x43a>
100080e4:	9e01      	ldr	r6, [sp, #4]
100080e6:	2701      	movs	r7, #1
100080e8:	4037      	ands	r7, r6
100080ea:	2200      	movs	r2, #0
100080ec:	2400      	movs	r4, #0
100080ee:	2600      	movs	r6, #0
100080f0:	e77c      	b.n	10007fec <__aeabi_dmul+0x334>
100080f2:	2b1f      	cmp	r3, #31
100080f4:	dc21      	bgt.n	1000813a <__aeabi_dmul+0x482>
100080f6:	9a04      	ldr	r2, [sp, #16]
100080f8:	4f25      	ldr	r7, [pc, #148]	; (10008190 <__aeabi_dmul+0x4d8>)
100080fa:	1c35      	adds	r5, r6, #0
100080fc:	19d1      	adds	r1, r2, r7
100080fe:	1c20      	adds	r0, r4, #0
10008100:	408e      	lsls	r6, r1
10008102:	40dd      	lsrs	r5, r3
10008104:	4088      	lsls	r0, r1
10008106:	1c32      	adds	r2, r6, #0
10008108:	4328      	orrs	r0, r5
1000810a:	1e56      	subs	r6, r2, #1
1000810c:	41b2      	sbcs	r2, r6
1000810e:	1c06      	adds	r6, r0, #0
10008110:	4316      	orrs	r6, r2
10008112:	40dc      	lsrs	r4, r3
10008114:	230f      	movs	r3, #15
10008116:	4033      	ands	r3, r6
10008118:	2b04      	cmp	r3, #4
1000811a:	d005      	beq.n	10008128 <__aeabi_dmul+0x470>
1000811c:	1d37      	adds	r7, r6, #4
1000811e:	42b7      	cmp	r7, r6
10008120:	41b6      	sbcs	r6, r6
10008122:	4271      	negs	r1, r6
10008124:	1864      	adds	r4, r4, r1
10008126:	1c3e      	adds	r6, r7, #0
10008128:	0225      	lsls	r5, r4, #8
1000812a:	d517      	bpl.n	1000815c <__aeabi_dmul+0x4a4>
1000812c:	9b01      	ldr	r3, [sp, #4]
1000812e:	2701      	movs	r7, #1
10008130:	401f      	ands	r7, r3
10008132:	2201      	movs	r2, #1
10008134:	2400      	movs	r4, #0
10008136:	2600      	movs	r6, #0
10008138:	e758      	b.n	10007fec <__aeabi_dmul+0x334>
1000813a:	4816      	ldr	r0, [pc, #88]	; (10008194 <__aeabi_dmul+0x4dc>)
1000813c:	9a04      	ldr	r2, [sp, #16]
1000813e:	1c21      	adds	r1, r4, #0
10008140:	1a87      	subs	r7, r0, r2
10008142:	40f9      	lsrs	r1, r7
10008144:	1c0d      	adds	r5, r1, #0
10008146:	2b20      	cmp	r3, #32
10008148:	d012      	beq.n	10008170 <__aeabi_dmul+0x4b8>
1000814a:	4b13      	ldr	r3, [pc, #76]	; (10008198 <__aeabi_dmul+0x4e0>)
1000814c:	18d0      	adds	r0, r2, r3
1000814e:	4084      	lsls	r4, r0
10008150:	4326      	orrs	r6, r4
10008152:	1e72      	subs	r2, r6, #1
10008154:	4196      	sbcs	r6, r2
10008156:	432e      	orrs	r6, r5
10008158:	2400      	movs	r4, #0
1000815a:	e7db      	b.n	10008114 <__aeabi_dmul+0x45c>
1000815c:	9a01      	ldr	r2, [sp, #4]
1000815e:	0765      	lsls	r5, r4, #29
10008160:	08f6      	lsrs	r6, r6, #3
10008162:	0260      	lsls	r0, r4, #9
10008164:	2701      	movs	r7, #1
10008166:	4017      	ands	r7, r2
10008168:	432e      	orrs	r6, r5
1000816a:	0b04      	lsrs	r4, r0, #12
1000816c:	2200      	movs	r2, #0
1000816e:	e73d      	b.n	10007fec <__aeabi_dmul+0x334>
10008170:	2400      	movs	r4, #0
10008172:	e7ed      	b.n	10008150 <__aeabi_dmul+0x498>
10008174:	2180      	movs	r1, #128	; 0x80
10008176:	030f      	lsls	r7, r1, #12
10008178:	433c      	orrs	r4, r7
1000817a:	9801      	ldr	r0, [sp, #4]
1000817c:	0324      	lsls	r4, r4, #12
1000817e:	2701      	movs	r7, #1
10008180:	0b24      	lsrs	r4, r4, #12
10008182:	4007      	ands	r7, r0
10008184:	4a00      	ldr	r2, [pc, #0]	; (10008188 <__aeabi_dmul+0x4d0>)
10008186:	e731      	b.n	10007fec <__aeabi_dmul+0x334>
10008188:	000007ff 	.word	0x000007ff
1000818c:	fffffc02 	.word	0xfffffc02
10008190:	0000041e 	.word	0x0000041e
10008194:	fffffbe2 	.word	0xfffffbe2
10008198:	0000043e 	.word	0x0000043e

1000819c <__aeabi_dsub>:
1000819c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000819e:	4657      	mov	r7, sl
100081a0:	464e      	mov	r6, r9
100081a2:	4645      	mov	r5, r8
100081a4:	b4e0      	push	{r5, r6, r7}
100081a6:	1c07      	adds	r7, r0, #0
100081a8:	030d      	lsls	r5, r1, #12
100081aa:	004e      	lsls	r6, r1, #1
100081ac:	0a68      	lsrs	r0, r5, #9
100081ae:	0fcc      	lsrs	r4, r1, #31
100081b0:	0f79      	lsrs	r1, r7, #29
100081b2:	4308      	orrs	r0, r1
100081b4:	4684      	mov	ip, r0
100081b6:	1c11      	adds	r1, r2, #0
100081b8:	0318      	lsls	r0, r3, #12
100081ba:	005a      	lsls	r2, r3, #1
100081bc:	00fd      	lsls	r5, r7, #3
100081be:	0a40      	lsrs	r0, r0, #9
100081c0:	0fdf      	lsrs	r7, r3, #31
100081c2:	0f4b      	lsrs	r3, r1, #29
100081c4:	4318      	orrs	r0, r3
100081c6:	4bca      	ldr	r3, [pc, #808]	; (100084f0 <__aeabi_dsub+0x354>)
100081c8:	00c9      	lsls	r1, r1, #3
100081ca:	0d76      	lsrs	r6, r6, #21
100081cc:	0d52      	lsrs	r2, r2, #21
100081ce:	468a      	mov	sl, r1
100081d0:	429a      	cmp	r2, r3
100081d2:	d100      	bne.n	100081d6 <__aeabi_dsub+0x3a>
100081d4:	e0e0      	b.n	10008398 <__aeabi_dsub+0x1fc>
100081d6:	2301      	movs	r3, #1
100081d8:	405f      	eors	r7, r3
100081da:	46b9      	mov	r9, r7
100081dc:	42bc      	cmp	r4, r7
100081de:	d100      	bne.n	100081e2 <__aeabi_dsub+0x46>
100081e0:	e0a8      	b.n	10008334 <__aeabi_dsub+0x198>
100081e2:	1ab7      	subs	r7, r6, r2
100081e4:	2f00      	cmp	r7, #0
100081e6:	dc00      	bgt.n	100081ea <__aeabi_dsub+0x4e>
100081e8:	e110      	b.n	1000840c <__aeabi_dsub+0x270>
100081ea:	2a00      	cmp	r2, #0
100081ec:	d112      	bne.n	10008214 <__aeabi_dsub+0x78>
100081ee:	4652      	mov	r2, sl
100081f0:	4302      	orrs	r2, r0
100081f2:	d100      	bne.n	100081f6 <__aeabi_dsub+0x5a>
100081f4:	e0d4      	b.n	100083a0 <__aeabi_dsub+0x204>
100081f6:	3f01      	subs	r7, #1
100081f8:	2f00      	cmp	r7, #0
100081fa:	d000      	beq.n	100081fe <__aeabi_dsub+0x62>
100081fc:	e160      	b.n	100084c0 <__aeabi_dsub+0x324>
100081fe:	4651      	mov	r1, sl
10008200:	1a6f      	subs	r7, r5, r1
10008202:	42bd      	cmp	r5, r7
10008204:	41ad      	sbcs	r5, r5
10008206:	4662      	mov	r2, ip
10008208:	426b      	negs	r3, r5
1000820a:	1a10      	subs	r0, r2, r0
1000820c:	1c3d      	adds	r5, r7, #0
1000820e:	1ac3      	subs	r3, r0, r3
10008210:	1c37      	adds	r7, r6, #0
10008212:	e024      	b.n	1000825e <__aeabi_dsub+0xc2>
10008214:	4ab6      	ldr	r2, [pc, #728]	; (100084f0 <__aeabi_dsub+0x354>)
10008216:	4296      	cmp	r6, r2
10008218:	d100      	bne.n	1000821c <__aeabi_dsub+0x80>
1000821a:	e0e3      	b.n	100083e4 <__aeabi_dsub+0x248>
1000821c:	2180      	movs	r1, #128	; 0x80
1000821e:	040b      	lsls	r3, r1, #16
10008220:	4318      	orrs	r0, r3
10008222:	2f38      	cmp	r7, #56	; 0x38
10008224:	dd00      	ble.n	10008228 <__aeabi_dsub+0x8c>
10008226:	e123      	b.n	10008470 <__aeabi_dsub+0x2d4>
10008228:	2f1f      	cmp	r7, #31
1000822a:	dd00      	ble.n	1000822e <__aeabi_dsub+0x92>
1000822c:	e166      	b.n	100084fc <__aeabi_dsub+0x360>
1000822e:	2120      	movs	r1, #32
10008230:	1bc9      	subs	r1, r1, r7
10008232:	1c02      	adds	r2, r0, #0
10008234:	4653      	mov	r3, sl
10008236:	408a      	lsls	r2, r1
10008238:	40fb      	lsrs	r3, r7
1000823a:	431a      	orrs	r2, r3
1000823c:	4653      	mov	r3, sl
1000823e:	408b      	lsls	r3, r1
10008240:	1c19      	adds	r1, r3, #0
10008242:	1e4b      	subs	r3, r1, #1
10008244:	4199      	sbcs	r1, r3
10008246:	1c03      	adds	r3, r0, #0
10008248:	430a      	orrs	r2, r1
1000824a:	40fb      	lsrs	r3, r7
1000824c:	1aaa      	subs	r2, r5, r2
1000824e:	4667      	mov	r7, ip
10008250:	4295      	cmp	r5, r2
10008252:	41ad      	sbcs	r5, r5
10008254:	1af8      	subs	r0, r7, r3
10008256:	426b      	negs	r3, r5
10008258:	1ac3      	subs	r3, r0, r3
1000825a:	1c15      	adds	r5, r2, #0
1000825c:	1c37      	adds	r7, r6, #0
1000825e:	021a      	lsls	r2, r3, #8
10008260:	d400      	bmi.n	10008264 <__aeabi_dsub+0xc8>
10008262:	e0c7      	b.n	100083f4 <__aeabi_dsub+0x258>
10008264:	025e      	lsls	r6, r3, #9
10008266:	0a71      	lsrs	r1, r6, #9
10008268:	4688      	mov	r8, r1
1000826a:	4642      	mov	r2, r8
1000826c:	2a00      	cmp	r2, #0
1000826e:	d100      	bne.n	10008272 <__aeabi_dsub+0xd6>
10008270:	e0f0      	b.n	10008454 <__aeabi_dsub+0x2b8>
10008272:	4640      	mov	r0, r8
10008274:	f000 fbb8 	bl	100089e8 <__clzsi2>
10008278:	1c02      	adds	r2, r0, #0
1000827a:	3a08      	subs	r2, #8
1000827c:	2a1f      	cmp	r2, #31
1000827e:	dd00      	ble.n	10008282 <__aeabi_dsub+0xe6>
10008280:	e0f1      	b.n	10008466 <__aeabi_dsub+0x2ca>
10008282:	2328      	movs	r3, #40	; 0x28
10008284:	1a18      	subs	r0, r3, r0
10008286:	1c2e      	adds	r6, r5, #0
10008288:	4641      	mov	r1, r8
1000828a:	40c6      	lsrs	r6, r0
1000828c:	4091      	lsls	r1, r2
1000828e:	1c33      	adds	r3, r6, #0
10008290:	430b      	orrs	r3, r1
10008292:	4095      	lsls	r5, r2
10008294:	4297      	cmp	r7, r2
10008296:	dd00      	ble.n	1000829a <__aeabi_dsub+0xfe>
10008298:	e0a9      	b.n	100083ee <__aeabi_dsub+0x252>
1000829a:	1bd0      	subs	r0, r2, r7
1000829c:	1c41      	adds	r1, r0, #1
1000829e:	291f      	cmp	r1, #31
100082a0:	dd00      	ble.n	100082a4 <__aeabi_dsub+0x108>
100082a2:	e112      	b.n	100084ca <__aeabi_dsub+0x32e>
100082a4:	271f      	movs	r7, #31
100082a6:	1a3a      	subs	r2, r7, r0
100082a8:	1c2e      	adds	r6, r5, #0
100082aa:	1c18      	adds	r0, r3, #0
100082ac:	40ce      	lsrs	r6, r1
100082ae:	4090      	lsls	r0, r2
100082b0:	4095      	lsls	r5, r2
100082b2:	4330      	orrs	r0, r6
100082b4:	1e6a      	subs	r2, r5, #1
100082b6:	4195      	sbcs	r5, r2
100082b8:	40cb      	lsrs	r3, r1
100082ba:	4305      	orrs	r5, r0
100082bc:	2101      	movs	r1, #1
100082be:	2700      	movs	r7, #0
100082c0:	260f      	movs	r6, #15
100082c2:	402e      	ands	r6, r5
100082c4:	2e04      	cmp	r6, #4
100082c6:	d100      	bne.n	100082ca <__aeabi_dsub+0x12e>
100082c8:	e072      	b.n	100083b0 <__aeabi_dsub+0x214>
100082ca:	1d2e      	adds	r6, r5, #4
100082cc:	42ae      	cmp	r6, r5
100082ce:	41ad      	sbcs	r5, r5
100082d0:	4268      	negs	r0, r5
100082d2:	2280      	movs	r2, #128	; 0x80
100082d4:	181b      	adds	r3, r3, r0
100082d6:	2501      	movs	r5, #1
100082d8:	0410      	lsls	r0, r2, #16
100082da:	4018      	ands	r0, r3
100082dc:	402c      	ands	r4, r5
100082de:	2800      	cmp	r0, #0
100082e0:	d007      	beq.n	100082f2 <__aeabi_dsub+0x156>
100082e2:	4f83      	ldr	r7, [pc, #524]	; (100084f0 <__aeabi_dsub+0x354>)
100082e4:	42b9      	cmp	r1, r7
100082e6:	d100      	bne.n	100082ea <__aeabi_dsub+0x14e>
100082e8:	e0b0      	b.n	1000844c <__aeabi_dsub+0x2b0>
100082ea:	4a82      	ldr	r2, [pc, #520]	; (100084f4 <__aeabi_dsub+0x358>)
100082ec:	1c0f      	adds	r7, r1, #0
100082ee:	4013      	ands	r3, r2
100082f0:	3101      	adds	r1, #1
100082f2:	08f2      	lsrs	r2, r6, #3
100082f4:	0549      	lsls	r1, r1, #21
100082f6:	075e      	lsls	r6, r3, #29
100082f8:	4332      	orrs	r2, r6
100082fa:	08db      	lsrs	r3, r3, #3
100082fc:	0d48      	lsrs	r0, r1, #21
100082fe:	2801      	cmp	r0, #1
10008300:	dc00      	bgt.n	10008304 <__aeabi_dsub+0x168>
10008302:	e079      	b.n	100083f8 <__aeabi_dsub+0x25c>
10008304:	031b      	lsls	r3, r3, #12
10008306:	0578      	lsls	r0, r7, #21
10008308:	0b1e      	lsrs	r6, r3, #12
1000830a:	0d47      	lsrs	r7, r0, #21
1000830c:	2000      	movs	r0, #0
1000830e:	2100      	movs	r1, #0
10008310:	0d09      	lsrs	r1, r1, #20
10008312:	057d      	lsls	r5, r7, #21
10008314:	050b      	lsls	r3, r1, #20
10008316:	4f78      	ldr	r7, [pc, #480]	; (100084f8 <__aeabi_dsub+0x35c>)
10008318:	431e      	orrs	r6, r3
1000831a:	1c10      	adds	r0, r2, #0
1000831c:	4037      	ands	r7, r6
1000831e:	086a      	lsrs	r2, r5, #1
10008320:	4317      	orrs	r7, r2
10008322:	007e      	lsls	r6, r7, #1
10008324:	0871      	lsrs	r1, r6, #1
10008326:	07e4      	lsls	r4, r4, #31
10008328:	4321      	orrs	r1, r4
1000832a:	bc1c      	pop	{r2, r3, r4}
1000832c:	4690      	mov	r8, r2
1000832e:	4699      	mov	r9, r3
10008330:	46a2      	mov	sl, r4
10008332:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008334:	1ab3      	subs	r3, r6, r2
10008336:	2b00      	cmp	r3, #0
10008338:	dc00      	bgt.n	1000833c <__aeabi_dsub+0x1a0>
1000833a:	e0a6      	b.n	1000848a <__aeabi_dsub+0x2ee>
1000833c:	2a00      	cmp	r2, #0
1000833e:	d03e      	beq.n	100083be <__aeabi_dsub+0x222>
10008340:	4a6b      	ldr	r2, [pc, #428]	; (100084f0 <__aeabi_dsub+0x354>)
10008342:	4296      	cmp	r6, r2
10008344:	d04e      	beq.n	100083e4 <__aeabi_dsub+0x248>
10008346:	2180      	movs	r1, #128	; 0x80
10008348:	040f      	lsls	r7, r1, #16
1000834a:	4338      	orrs	r0, r7
1000834c:	2b38      	cmp	r3, #56	; 0x38
1000834e:	dc00      	bgt.n	10008352 <__aeabi_dsub+0x1b6>
10008350:	e118      	b.n	10008584 <__aeabi_dsub+0x3e8>
10008352:	4653      	mov	r3, sl
10008354:	4318      	orrs	r0, r3
10008356:	2700      	movs	r7, #0
10008358:	2200      	movs	r2, #0
1000835a:	2800      	cmp	r0, #0
1000835c:	d000      	beq.n	10008360 <__aeabi_dsub+0x1c4>
1000835e:	2201      	movs	r2, #1
10008360:	1952      	adds	r2, r2, r5
10008362:	42aa      	cmp	r2, r5
10008364:	41ad      	sbcs	r5, r5
10008366:	4467      	add	r7, ip
10008368:	426b      	negs	r3, r5
1000836a:	18fb      	adds	r3, r7, r3
1000836c:	1c15      	adds	r5, r2, #0
1000836e:	1c37      	adds	r7, r6, #0
10008370:	021e      	lsls	r6, r3, #8
10008372:	d53f      	bpl.n	100083f4 <__aeabi_dsub+0x258>
10008374:	485e      	ldr	r0, [pc, #376]	; (100084f0 <__aeabi_dsub+0x354>)
10008376:	1c7e      	adds	r6, r7, #1
10008378:	4286      	cmp	r6, r0
1000837a:	d100      	bne.n	1000837e <__aeabi_dsub+0x1e2>
1000837c:	e17b      	b.n	10008676 <__aeabi_dsub+0x4da>
1000837e:	495d      	ldr	r1, [pc, #372]	; (100084f4 <__aeabi_dsub+0x358>)
10008380:	2201      	movs	r2, #1
10008382:	402a      	ands	r2, r5
10008384:	400b      	ands	r3, r1
10008386:	0868      	lsrs	r0, r5, #1
10008388:	1c15      	adds	r5, r2, #0
1000838a:	07d9      	lsls	r1, r3, #31
1000838c:	4305      	orrs	r5, r0
1000838e:	430d      	orrs	r5, r1
10008390:	085b      	lsrs	r3, r3, #1
10008392:	1cb9      	adds	r1, r7, #2
10008394:	1c37      	adds	r7, r6, #0
10008396:	e793      	b.n	100082c0 <__aeabi_dsub+0x124>
10008398:	4301      	orrs	r1, r0
1000839a:	d100      	bne.n	1000839e <__aeabi_dsub+0x202>
1000839c:	e71b      	b.n	100081d6 <__aeabi_dsub+0x3a>
1000839e:	e71c      	b.n	100081da <__aeabi_dsub+0x3e>
100083a0:	1c71      	adds	r1, r6, #1
100083a2:	1c37      	adds	r7, r6, #0
100083a4:	260f      	movs	r6, #15
100083a6:	4663      	mov	r3, ip
100083a8:	402e      	ands	r6, r5
100083aa:	2e04      	cmp	r6, #4
100083ac:	d000      	beq.n	100083b0 <__aeabi_dsub+0x214>
100083ae:	e78c      	b.n	100082ca <__aeabi_dsub+0x12e>
100083b0:	2280      	movs	r2, #128	; 0x80
100083b2:	2601      	movs	r6, #1
100083b4:	0410      	lsls	r0, r2, #16
100083b6:	4034      	ands	r4, r6
100083b8:	4018      	ands	r0, r3
100083ba:	1c2e      	adds	r6, r5, #0
100083bc:	e78f      	b.n	100082de <__aeabi_dsub+0x142>
100083be:	4652      	mov	r2, sl
100083c0:	4302      	orrs	r2, r0
100083c2:	d0ed      	beq.n	100083a0 <__aeabi_dsub+0x204>
100083c4:	3b01      	subs	r3, #1
100083c6:	2b00      	cmp	r3, #0
100083c8:	d109      	bne.n	100083de <__aeabi_dsub+0x242>
100083ca:	4657      	mov	r7, sl
100083cc:	1979      	adds	r1, r7, r5
100083ce:	42a9      	cmp	r1, r5
100083d0:	4192      	sbcs	r2, r2
100083d2:	4255      	negs	r5, r2
100083d4:	4460      	add	r0, ip
100083d6:	1943      	adds	r3, r0, r5
100083d8:	1c37      	adds	r7, r6, #0
100083da:	1c0d      	adds	r5, r1, #0
100083dc:	e7c8      	b.n	10008370 <__aeabi_dsub+0x1d4>
100083de:	4944      	ldr	r1, [pc, #272]	; (100084f0 <__aeabi_dsub+0x354>)
100083e0:	428e      	cmp	r6, r1
100083e2:	d1b3      	bne.n	1000834c <__aeabi_dsub+0x1b0>
100083e4:	2080      	movs	r0, #128	; 0x80
100083e6:	4663      	mov	r3, ip
100083e8:	0101      	lsls	r1, r0, #4
100083ea:	1c37      	adds	r7, r6, #0
100083ec:	e768      	b.n	100082c0 <__aeabi_dsub+0x124>
100083ee:	1abf      	subs	r7, r7, r2
100083f0:	4a40      	ldr	r2, [pc, #256]	; (100084f4 <__aeabi_dsub+0x358>)
100083f2:	4013      	ands	r3, r2
100083f4:	1c79      	adds	r1, r7, #1
100083f6:	e763      	b.n	100082c0 <__aeabi_dsub+0x124>
100083f8:	1c15      	adds	r5, r2, #0
100083fa:	431d      	orrs	r5, r3
100083fc:	d100      	bne.n	10008400 <__aeabi_dsub+0x264>
100083fe:	e221      	b.n	10008844 <__aeabi_dsub+0x6a8>
10008400:	2f00      	cmp	r7, #0
10008402:	d03e      	beq.n	10008482 <__aeabi_dsub+0x2e6>
10008404:	2680      	movs	r6, #128	; 0x80
10008406:	0331      	lsls	r1, r6, #12
10008408:	430b      	orrs	r3, r1
1000840a:	e77b      	b.n	10008304 <__aeabi_dsub+0x168>
1000840c:	2f00      	cmp	r7, #0
1000840e:	d000      	beq.n	10008412 <__aeabi_dsub+0x276>
10008410:	e086      	b.n	10008520 <__aeabi_dsub+0x384>
10008412:	1c72      	adds	r2, r6, #1
10008414:	0551      	lsls	r1, r2, #21
10008416:	0d4b      	lsrs	r3, r1, #21
10008418:	2b01      	cmp	r3, #1
1000841a:	dc00      	bgt.n	1000841e <__aeabi_dsub+0x282>
1000841c:	e0f0      	b.n	10008600 <__aeabi_dsub+0x464>
1000841e:	4657      	mov	r7, sl
10008420:	1bea      	subs	r2, r5, r7
10008422:	4295      	cmp	r5, r2
10008424:	419b      	sbcs	r3, r3
10008426:	4667      	mov	r7, ip
10008428:	1a39      	subs	r1, r7, r0
1000842a:	425b      	negs	r3, r3
1000842c:	1ac9      	subs	r1, r1, r3
1000842e:	4688      	mov	r8, r1
10008430:	020b      	lsls	r3, r1, #8
10008432:	d400      	bmi.n	10008436 <__aeabi_dsub+0x29a>
10008434:	e09d      	b.n	10008572 <__aeabi_dsub+0x3d6>
10008436:	4654      	mov	r4, sl
10008438:	1b65      	subs	r5, r4, r5
1000843a:	45aa      	cmp	sl, r5
1000843c:	4192      	sbcs	r2, r2
1000843e:	1bc0      	subs	r0, r0, r7
10008440:	4257      	negs	r7, r2
10008442:	1bc3      	subs	r3, r0, r7
10008444:	4698      	mov	r8, r3
10008446:	1c37      	adds	r7, r6, #0
10008448:	464c      	mov	r4, r9
1000844a:	e70e      	b.n	1000826a <__aeabi_dsub+0xce>
1000844c:	1c0f      	adds	r7, r1, #0
1000844e:	2600      	movs	r6, #0
10008450:	2200      	movs	r2, #0
10008452:	e75b      	b.n	1000830c <__aeabi_dsub+0x170>
10008454:	1c28      	adds	r0, r5, #0
10008456:	f000 fac7 	bl	100089e8 <__clzsi2>
1000845a:	3020      	adds	r0, #32
1000845c:	1c02      	adds	r2, r0, #0
1000845e:	3a08      	subs	r2, #8
10008460:	2a1f      	cmp	r2, #31
10008462:	dc00      	bgt.n	10008466 <__aeabi_dsub+0x2ca>
10008464:	e70d      	b.n	10008282 <__aeabi_dsub+0xe6>
10008466:	3828      	subs	r0, #40	; 0x28
10008468:	4085      	lsls	r5, r0
1000846a:	1c2b      	adds	r3, r5, #0
1000846c:	2500      	movs	r5, #0
1000846e:	e711      	b.n	10008294 <__aeabi_dsub+0xf8>
10008470:	4657      	mov	r7, sl
10008472:	4338      	orrs	r0, r7
10008474:	2300      	movs	r3, #0
10008476:	2200      	movs	r2, #0
10008478:	2800      	cmp	r0, #0
1000847a:	d100      	bne.n	1000847e <__aeabi_dsub+0x2e2>
1000847c:	e6e6      	b.n	1000824c <__aeabi_dsub+0xb0>
1000847e:	2201      	movs	r2, #1
10008480:	e6e4      	b.n	1000824c <__aeabi_dsub+0xb0>
10008482:	031d      	lsls	r5, r3, #12
10008484:	0b2e      	lsrs	r6, r5, #12
10008486:	2700      	movs	r7, #0
10008488:	e740      	b.n	1000830c <__aeabi_dsub+0x170>
1000848a:	2b00      	cmp	r3, #0
1000848c:	d000      	beq.n	10008490 <__aeabi_dsub+0x2f4>
1000848e:	e0d9      	b.n	10008644 <__aeabi_dsub+0x4a8>
10008490:	1c77      	adds	r7, r6, #1
10008492:	0579      	lsls	r1, r7, #21
10008494:	0d4a      	lsrs	r2, r1, #21
10008496:	2a01      	cmp	r2, #1
10008498:	dc00      	bgt.n	1000849c <__aeabi_dsub+0x300>
1000849a:	e095      	b.n	100085c8 <__aeabi_dsub+0x42c>
1000849c:	4b14      	ldr	r3, [pc, #80]	; (100084f0 <__aeabi_dsub+0x354>)
1000849e:	429f      	cmp	r7, r3
100084a0:	d100      	bne.n	100084a4 <__aeabi_dsub+0x308>
100084a2:	e0fe      	b.n	100086a2 <__aeabi_dsub+0x506>
100084a4:	4651      	mov	r1, sl
100084a6:	1949      	adds	r1, r1, r5
100084a8:	42a9      	cmp	r1, r5
100084aa:	41ad      	sbcs	r5, r5
100084ac:	4662      	mov	r2, ip
100084ae:	426b      	negs	r3, r5
100084b0:	1880      	adds	r0, r0, r2
100084b2:	18c2      	adds	r2, r0, r3
100084b4:	0849      	lsrs	r1, r1, #1
100084b6:	07d5      	lsls	r5, r2, #31
100084b8:	430d      	orrs	r5, r1
100084ba:	0853      	lsrs	r3, r2, #1
100084bc:	1cb1      	adds	r1, r6, #2
100084be:	e6ff      	b.n	100082c0 <__aeabi_dsub+0x124>
100084c0:	490b      	ldr	r1, [pc, #44]	; (100084f0 <__aeabi_dsub+0x354>)
100084c2:	428e      	cmp	r6, r1
100084c4:	d000      	beq.n	100084c8 <__aeabi_dsub+0x32c>
100084c6:	e6ac      	b.n	10008222 <__aeabi_dsub+0x86>
100084c8:	e78c      	b.n	100083e4 <__aeabi_dsub+0x248>
100084ca:	1c06      	adds	r6, r0, #0
100084cc:	3e1f      	subs	r6, #31
100084ce:	1c1f      	adds	r7, r3, #0
100084d0:	40f7      	lsrs	r7, r6
100084d2:	1c3e      	adds	r6, r7, #0
100084d4:	2920      	cmp	r1, #32
100084d6:	d073      	beq.n	100085c0 <__aeabi_dsub+0x424>
100084d8:	223f      	movs	r2, #63	; 0x3f
100084da:	1a10      	subs	r0, r2, r0
100084dc:	4083      	lsls	r3, r0
100084de:	431d      	orrs	r5, r3
100084e0:	1e6b      	subs	r3, r5, #1
100084e2:	419d      	sbcs	r5, r3
100084e4:	4335      	orrs	r5, r6
100084e6:	2101      	movs	r1, #1
100084e8:	2300      	movs	r3, #0
100084ea:	2700      	movs	r7, #0
100084ec:	e6e8      	b.n	100082c0 <__aeabi_dsub+0x124>
100084ee:	46c0      	nop			; (mov r8, r8)
100084f0:	000007ff 	.word	0x000007ff
100084f4:	ff7fffff 	.word	0xff7fffff
100084f8:	800fffff 	.word	0x800fffff
100084fc:	1c3b      	adds	r3, r7, #0
100084fe:	3b20      	subs	r3, #32
10008500:	1c01      	adds	r1, r0, #0
10008502:	40d9      	lsrs	r1, r3
10008504:	1c0b      	adds	r3, r1, #0
10008506:	2f20      	cmp	r7, #32
10008508:	d05c      	beq.n	100085c4 <__aeabi_dsub+0x428>
1000850a:	2240      	movs	r2, #64	; 0x40
1000850c:	1bd7      	subs	r7, r2, r7
1000850e:	40b8      	lsls	r0, r7
10008510:	1c02      	adds	r2, r0, #0
10008512:	4650      	mov	r0, sl
10008514:	4302      	orrs	r2, r0
10008516:	1e51      	subs	r1, r2, #1
10008518:	418a      	sbcs	r2, r1
1000851a:	431a      	orrs	r2, r3
1000851c:	2300      	movs	r3, #0
1000851e:	e695      	b.n	1000824c <__aeabi_dsub+0xb0>
10008520:	427f      	negs	r7, r7
10008522:	2e00      	cmp	r6, #0
10008524:	d040      	beq.n	100085a8 <__aeabi_dsub+0x40c>
10008526:	4cca      	ldr	r4, [pc, #808]	; (10008850 <__aeabi_dsub+0x6b4>)
10008528:	42a2      	cmp	r2, r4
1000852a:	d100      	bne.n	1000852e <__aeabi_dsub+0x392>
1000852c:	e11f      	b.n	1000876e <__aeabi_dsub+0x5d2>
1000852e:	2180      	movs	r1, #128	; 0x80
10008530:	4666      	mov	r6, ip
10008532:	040b      	lsls	r3, r1, #16
10008534:	431e      	orrs	r6, r3
10008536:	46b4      	mov	ip, r6
10008538:	2f38      	cmp	r7, #56	; 0x38
1000853a:	dd00      	ble.n	1000853e <__aeabi_dsub+0x3a2>
1000853c:	e0a9      	b.n	10008692 <__aeabi_dsub+0x4f6>
1000853e:	2f1f      	cmp	r7, #31
10008540:	dd00      	ble.n	10008544 <__aeabi_dsub+0x3a8>
10008542:	e13d      	b.n	100087c0 <__aeabi_dsub+0x624>
10008544:	2320      	movs	r3, #32
10008546:	1bde      	subs	r6, r3, r7
10008548:	1c29      	adds	r1, r5, #0
1000854a:	4664      	mov	r4, ip
1000854c:	40b4      	lsls	r4, r6
1000854e:	40f9      	lsrs	r1, r7
10008550:	40b5      	lsls	r5, r6
10008552:	1e6b      	subs	r3, r5, #1
10008554:	419d      	sbcs	r5, r3
10008556:	4321      	orrs	r1, r4
10008558:	4663      	mov	r3, ip
1000855a:	430d      	orrs	r5, r1
1000855c:	40fb      	lsrs	r3, r7
1000855e:	4657      	mov	r7, sl
10008560:	1b7d      	subs	r5, r7, r5
10008562:	1ac0      	subs	r0, r0, r3
10008564:	45aa      	cmp	sl, r5
10008566:	419b      	sbcs	r3, r3
10008568:	425f      	negs	r7, r3
1000856a:	1bc3      	subs	r3, r0, r7
1000856c:	464c      	mov	r4, r9
1000856e:	1c17      	adds	r7, r2, #0
10008570:	e675      	b.n	1000825e <__aeabi_dsub+0xc2>
10008572:	1c0d      	adds	r5, r1, #0
10008574:	4315      	orrs	r5, r2
10008576:	d120      	bne.n	100085ba <__aeabi_dsub+0x41e>
10008578:	2400      	movs	r4, #0
1000857a:	2101      	movs	r1, #1
1000857c:	2300      	movs	r3, #0
1000857e:	2604      	movs	r6, #4
10008580:	2700      	movs	r7, #0
10008582:	e6b6      	b.n	100082f2 <__aeabi_dsub+0x156>
10008584:	2b1f      	cmp	r3, #31
10008586:	dc4a      	bgt.n	1000861e <__aeabi_dsub+0x482>
10008588:	2120      	movs	r1, #32
1000858a:	1ac9      	subs	r1, r1, r3
1000858c:	1c07      	adds	r7, r0, #0
1000858e:	4652      	mov	r2, sl
10008590:	408f      	lsls	r7, r1
10008592:	40da      	lsrs	r2, r3
10008594:	433a      	orrs	r2, r7
10008596:	4657      	mov	r7, sl
10008598:	408f      	lsls	r7, r1
1000859a:	1c39      	adds	r1, r7, #0
1000859c:	1e4f      	subs	r7, r1, #1
1000859e:	41b9      	sbcs	r1, r7
100085a0:	40d8      	lsrs	r0, r3
100085a2:	430a      	orrs	r2, r1
100085a4:	1c07      	adds	r7, r0, #0
100085a6:	e6db      	b.n	10008360 <__aeabi_dsub+0x1c4>
100085a8:	4664      	mov	r4, ip
100085aa:	432c      	orrs	r4, r5
100085ac:	d169      	bne.n	10008682 <__aeabi_dsub+0x4e6>
100085ae:	1c51      	adds	r1, r2, #1
100085b0:	1c03      	adds	r3, r0, #0
100085b2:	4655      	mov	r5, sl
100085b4:	1c17      	adds	r7, r2, #0
100085b6:	464c      	mov	r4, r9
100085b8:	e682      	b.n	100082c0 <__aeabi_dsub+0x124>
100085ba:	1c15      	adds	r5, r2, #0
100085bc:	1c37      	adds	r7, r6, #0
100085be:	e654      	b.n	1000826a <__aeabi_dsub+0xce>
100085c0:	2300      	movs	r3, #0
100085c2:	e78c      	b.n	100084de <__aeabi_dsub+0x342>
100085c4:	2200      	movs	r2, #0
100085c6:	e7a4      	b.n	10008512 <__aeabi_dsub+0x376>
100085c8:	4667      	mov	r7, ip
100085ca:	432f      	orrs	r7, r5
100085cc:	2e00      	cmp	r6, #0
100085ce:	d000      	beq.n	100085d2 <__aeabi_dsub+0x436>
100085d0:	e0d4      	b.n	1000877c <__aeabi_dsub+0x5e0>
100085d2:	2f00      	cmp	r7, #0
100085d4:	d100      	bne.n	100085d8 <__aeabi_dsub+0x43c>
100085d6:	e126      	b.n	10008826 <__aeabi_dsub+0x68a>
100085d8:	4653      	mov	r3, sl
100085da:	4303      	orrs	r3, r0
100085dc:	d100      	bne.n	100085e0 <__aeabi_dsub+0x444>
100085de:	e0e4      	b.n	100087aa <__aeabi_dsub+0x60e>
100085e0:	4651      	mov	r1, sl
100085e2:	194f      	adds	r7, r1, r5
100085e4:	42af      	cmp	r7, r5
100085e6:	41ad      	sbcs	r5, r5
100085e8:	4460      	add	r0, ip
100085ea:	426e      	negs	r6, r5
100085ec:	1983      	adds	r3, r0, r6
100085ee:	021e      	lsls	r6, r3, #8
100085f0:	d400      	bmi.n	100085f4 <__aeabi_dsub+0x458>
100085f2:	e14e      	b.n	10008892 <__aeabi_dsub+0x6f6>
100085f4:	4897      	ldr	r0, [pc, #604]	; (10008854 <__aeabi_dsub+0x6b8>)
100085f6:	1c3d      	adds	r5, r7, #0
100085f8:	4003      	ands	r3, r0
100085fa:	2102      	movs	r1, #2
100085fc:	2701      	movs	r7, #1
100085fe:	e65f      	b.n	100082c0 <__aeabi_dsub+0x124>
10008600:	4661      	mov	r1, ip
10008602:	4329      	orrs	r1, r5
10008604:	2e00      	cmp	r6, #0
10008606:	d129      	bne.n	1000865c <__aeabi_dsub+0x4c0>
10008608:	2900      	cmp	r1, #0
1000860a:	d176      	bne.n	100086fa <__aeabi_dsub+0x55e>
1000860c:	4651      	mov	r1, sl
1000860e:	4301      	orrs	r1, r0
10008610:	d0b2      	beq.n	10008578 <__aeabi_dsub+0x3dc>
10008612:	1c03      	adds	r3, r0, #0
10008614:	4655      	mov	r5, sl
10008616:	464c      	mov	r4, r9
10008618:	2101      	movs	r1, #1
1000861a:	2700      	movs	r7, #0
1000861c:	e650      	b.n	100082c0 <__aeabi_dsub+0x124>
1000861e:	1c1f      	adds	r7, r3, #0
10008620:	3f20      	subs	r7, #32
10008622:	1c01      	adds	r1, r0, #0
10008624:	40f9      	lsrs	r1, r7
10008626:	1c0f      	adds	r7, r1, #0
10008628:	2b20      	cmp	r3, #32
1000862a:	d100      	bne.n	1000862e <__aeabi_dsub+0x492>
1000862c:	e0c6      	b.n	100087bc <__aeabi_dsub+0x620>
1000862e:	2240      	movs	r2, #64	; 0x40
10008630:	1ad3      	subs	r3, r2, r3
10008632:	4098      	lsls	r0, r3
10008634:	1c02      	adds	r2, r0, #0
10008636:	4650      	mov	r0, sl
10008638:	4302      	orrs	r2, r0
1000863a:	1e53      	subs	r3, r2, #1
1000863c:	419a      	sbcs	r2, r3
1000863e:	433a      	orrs	r2, r7
10008640:	2700      	movs	r7, #0
10008642:	e68d      	b.n	10008360 <__aeabi_dsub+0x1c4>
10008644:	425b      	negs	r3, r3
10008646:	2e00      	cmp	r6, #0
10008648:	d130      	bne.n	100086ac <__aeabi_dsub+0x510>
1000864a:	4667      	mov	r7, ip
1000864c:	432f      	orrs	r7, r5
1000864e:	d000      	beq.n	10008652 <__aeabi_dsub+0x4b6>
10008650:	e0c8      	b.n	100087e4 <__aeabi_dsub+0x648>
10008652:	1c51      	adds	r1, r2, #1
10008654:	1c03      	adds	r3, r0, #0
10008656:	4655      	mov	r5, sl
10008658:	1c17      	adds	r7, r2, #0
1000865a:	e631      	b.n	100082c0 <__aeabi_dsub+0x124>
1000865c:	2900      	cmp	r1, #0
1000865e:	d165      	bne.n	1000872c <__aeabi_dsub+0x590>
10008660:	4657      	mov	r7, sl
10008662:	4307      	orrs	r7, r0
10008664:	d100      	bne.n	10008668 <__aeabi_dsub+0x4cc>
10008666:	e0c8      	b.n	100087fa <__aeabi_dsub+0x65e>
10008668:	1c03      	adds	r3, r0, #0
1000866a:	2080      	movs	r0, #128	; 0x80
1000866c:	4655      	mov	r5, sl
1000866e:	464c      	mov	r4, r9
10008670:	0101      	lsls	r1, r0, #4
10008672:	4f77      	ldr	r7, [pc, #476]	; (10008850 <__aeabi_dsub+0x6b4>)
10008674:	e624      	b.n	100082c0 <__aeabi_dsub+0x124>
10008676:	2380      	movs	r3, #128	; 0x80
10008678:	1c37      	adds	r7, r6, #0
1000867a:	0119      	lsls	r1, r3, #4
1000867c:	2604      	movs	r6, #4
1000867e:	2300      	movs	r3, #0
10008680:	e637      	b.n	100082f2 <__aeabi_dsub+0x156>
10008682:	3f01      	subs	r7, #1
10008684:	2f00      	cmp	r7, #0
10008686:	d16e      	bne.n	10008766 <__aeabi_dsub+0x5ca>
10008688:	4654      	mov	r4, sl
1000868a:	4661      	mov	r1, ip
1000868c:	1b65      	subs	r5, r4, r5
1000868e:	1a40      	subs	r0, r0, r1
10008690:	e768      	b.n	10008564 <__aeabi_dsub+0x3c8>
10008692:	4667      	mov	r7, ip
10008694:	433d      	orrs	r5, r7
10008696:	2300      	movs	r3, #0
10008698:	2d00      	cmp	r5, #0
1000869a:	d100      	bne.n	1000869e <__aeabi_dsub+0x502>
1000869c:	e75f      	b.n	1000855e <__aeabi_dsub+0x3c2>
1000869e:	2501      	movs	r5, #1
100086a0:	e75d      	b.n	1000855e <__aeabi_dsub+0x3c2>
100086a2:	2680      	movs	r6, #128	; 0x80
100086a4:	0131      	lsls	r1, r6, #4
100086a6:	2300      	movs	r3, #0
100086a8:	2604      	movs	r6, #4
100086aa:	e622      	b.n	100082f2 <__aeabi_dsub+0x156>
100086ac:	4968      	ldr	r1, [pc, #416]	; (10008850 <__aeabi_dsub+0x6b4>)
100086ae:	428a      	cmp	r2, r1
100086b0:	d100      	bne.n	100086b4 <__aeabi_dsub+0x518>
100086b2:	e0c1      	b.n	10008838 <__aeabi_dsub+0x69c>
100086b4:	2780      	movs	r7, #128	; 0x80
100086b6:	4666      	mov	r6, ip
100086b8:	0439      	lsls	r1, r7, #16
100086ba:	430e      	orrs	r6, r1
100086bc:	46b4      	mov	ip, r6
100086be:	2b38      	cmp	r3, #56	; 0x38
100086c0:	dd00      	ble.n	100086c4 <__aeabi_dsub+0x528>
100086c2:	e0a2      	b.n	1000880a <__aeabi_dsub+0x66e>
100086c4:	2b1f      	cmp	r3, #31
100086c6:	dd00      	ble.n	100086ca <__aeabi_dsub+0x52e>
100086c8:	e0d0      	b.n	1000886c <__aeabi_dsub+0x6d0>
100086ca:	2120      	movs	r1, #32
100086cc:	1ac9      	subs	r1, r1, r3
100086ce:	1c2e      	adds	r6, r5, #0
100086d0:	4667      	mov	r7, ip
100086d2:	408f      	lsls	r7, r1
100086d4:	408d      	lsls	r5, r1
100086d6:	40de      	lsrs	r6, r3
100086d8:	433e      	orrs	r6, r7
100086da:	1c29      	adds	r1, r5, #0
100086dc:	4667      	mov	r7, ip
100086de:	1e4d      	subs	r5, r1, #1
100086e0:	41a9      	sbcs	r1, r5
100086e2:	40df      	lsrs	r7, r3
100086e4:	1c35      	adds	r5, r6, #0
100086e6:	430d      	orrs	r5, r1
100086e8:	1c3e      	adds	r6, r7, #0
100086ea:	4455      	add	r5, sl
100086ec:	4555      	cmp	r5, sl
100086ee:	419b      	sbcs	r3, r3
100086f0:	1830      	adds	r0, r6, r0
100086f2:	425e      	negs	r6, r3
100086f4:	1983      	adds	r3, r0, r6
100086f6:	1c17      	adds	r7, r2, #0
100086f8:	e63a      	b.n	10008370 <__aeabi_dsub+0x1d4>
100086fa:	4656      	mov	r6, sl
100086fc:	4306      	orrs	r6, r0
100086fe:	d054      	beq.n	100087aa <__aeabi_dsub+0x60e>
10008700:	4657      	mov	r7, sl
10008702:	1bea      	subs	r2, r5, r7
10008704:	4663      	mov	r3, ip
10008706:	4295      	cmp	r5, r2
10008708:	41b6      	sbcs	r6, r6
1000870a:	1a19      	subs	r1, r3, r0
1000870c:	4273      	negs	r3, r6
1000870e:	1acb      	subs	r3, r1, r3
10008710:	021e      	lsls	r6, r3, #8
10008712:	d400      	bmi.n	10008716 <__aeabi_dsub+0x57a>
10008714:	e0a2      	b.n	1000885c <__aeabi_dsub+0x6c0>
10008716:	1b7d      	subs	r5, r7, r5
10008718:	4664      	mov	r4, ip
1000871a:	45aa      	cmp	sl, r5
1000871c:	41bf      	sbcs	r7, r7
1000871e:	1b00      	subs	r0, r0, r4
10008720:	427a      	negs	r2, r7
10008722:	1a83      	subs	r3, r0, r2
10008724:	464c      	mov	r4, r9
10008726:	2101      	movs	r1, #1
10008728:	2700      	movs	r7, #0
1000872a:	e5c9      	b.n	100082c0 <__aeabi_dsub+0x124>
1000872c:	4656      	mov	r6, sl
1000872e:	4306      	orrs	r6, r0
10008730:	d03f      	beq.n	100087b2 <__aeabi_dsub+0x616>
10008732:	4662      	mov	r2, ip
10008734:	2180      	movs	r1, #128	; 0x80
10008736:	0757      	lsls	r7, r2, #29
10008738:	08ed      	lsrs	r5, r5, #3
1000873a:	08d3      	lsrs	r3, r2, #3
1000873c:	030a      	lsls	r2, r1, #12
1000873e:	433d      	orrs	r5, r7
10008740:	4213      	tst	r3, r2
10008742:	d008      	beq.n	10008756 <__aeabi_dsub+0x5ba>
10008744:	08c6      	lsrs	r6, r0, #3
10008746:	4216      	tst	r6, r2
10008748:	d105      	bne.n	10008756 <__aeabi_dsub+0x5ba>
1000874a:	4655      	mov	r5, sl
1000874c:	08ec      	lsrs	r4, r5, #3
1000874e:	0745      	lsls	r5, r0, #29
10008750:	4325      	orrs	r5, r4
10008752:	1c33      	adds	r3, r6, #0
10008754:	464c      	mov	r4, r9
10008756:	0f68      	lsrs	r0, r5, #29
10008758:	00db      	lsls	r3, r3, #3
1000875a:	2680      	movs	r6, #128	; 0x80
1000875c:	4303      	orrs	r3, r0
1000875e:	00ed      	lsls	r5, r5, #3
10008760:	0131      	lsls	r1, r6, #4
10008762:	4f3b      	ldr	r7, [pc, #236]	; (10008850 <__aeabi_dsub+0x6b4>)
10008764:	e5ac      	b.n	100082c0 <__aeabi_dsub+0x124>
10008766:	493a      	ldr	r1, [pc, #232]	; (10008850 <__aeabi_dsub+0x6b4>)
10008768:	428a      	cmp	r2, r1
1000876a:	d000      	beq.n	1000876e <__aeabi_dsub+0x5d2>
1000876c:	e6e4      	b.n	10008538 <__aeabi_dsub+0x39c>
1000876e:	2680      	movs	r6, #128	; 0x80
10008770:	1c03      	adds	r3, r0, #0
10008772:	4655      	mov	r5, sl
10008774:	464c      	mov	r4, r9
10008776:	0131      	lsls	r1, r6, #4
10008778:	1c17      	adds	r7, r2, #0
1000877a:	e5a1      	b.n	100082c0 <__aeabi_dsub+0x124>
1000877c:	2f00      	cmp	r7, #0
1000877e:	d04c      	beq.n	1000881a <__aeabi_dsub+0x67e>
10008780:	4653      	mov	r3, sl
10008782:	4303      	orrs	r3, r0
10008784:	d015      	beq.n	100087b2 <__aeabi_dsub+0x616>
10008786:	4662      	mov	r2, ip
10008788:	2680      	movs	r6, #128	; 0x80
1000878a:	08ed      	lsrs	r5, r5, #3
1000878c:	0751      	lsls	r1, r2, #29
1000878e:	08d3      	lsrs	r3, r2, #3
10008790:	0337      	lsls	r7, r6, #12
10008792:	430d      	orrs	r5, r1
10008794:	423b      	tst	r3, r7
10008796:	d0de      	beq.n	10008756 <__aeabi_dsub+0x5ba>
10008798:	08c2      	lsrs	r2, r0, #3
1000879a:	423a      	tst	r2, r7
1000879c:	d1db      	bne.n	10008756 <__aeabi_dsub+0x5ba>
1000879e:	4655      	mov	r5, sl
100087a0:	08e9      	lsrs	r1, r5, #3
100087a2:	0745      	lsls	r5, r0, #29
100087a4:	1c13      	adds	r3, r2, #0
100087a6:	430d      	orrs	r5, r1
100087a8:	e7d5      	b.n	10008756 <__aeabi_dsub+0x5ba>
100087aa:	4663      	mov	r3, ip
100087ac:	2101      	movs	r1, #1
100087ae:	2700      	movs	r7, #0
100087b0:	e586      	b.n	100082c0 <__aeabi_dsub+0x124>
100087b2:	2780      	movs	r7, #128	; 0x80
100087b4:	0139      	lsls	r1, r7, #4
100087b6:	4663      	mov	r3, ip
100087b8:	4f25      	ldr	r7, [pc, #148]	; (10008850 <__aeabi_dsub+0x6b4>)
100087ba:	e581      	b.n	100082c0 <__aeabi_dsub+0x124>
100087bc:	2200      	movs	r2, #0
100087be:	e73a      	b.n	10008636 <__aeabi_dsub+0x49a>
100087c0:	1c3c      	adds	r4, r7, #0
100087c2:	3c20      	subs	r4, #32
100087c4:	4666      	mov	r6, ip
100087c6:	40e6      	lsrs	r6, r4
100087c8:	1c33      	adds	r3, r6, #0
100087ca:	2f20      	cmp	r7, #32
100087cc:	d05f      	beq.n	1000888e <__aeabi_dsub+0x6f2>
100087ce:	2440      	movs	r4, #64	; 0x40
100087d0:	1be7      	subs	r7, r4, r7
100087d2:	4666      	mov	r6, ip
100087d4:	40be      	lsls	r6, r7
100087d6:	1c31      	adds	r1, r6, #0
100087d8:	430d      	orrs	r5, r1
100087da:	1e69      	subs	r1, r5, #1
100087dc:	418d      	sbcs	r5, r1
100087de:	431d      	orrs	r5, r3
100087e0:	2300      	movs	r3, #0
100087e2:	e6bc      	b.n	1000855e <__aeabi_dsub+0x3c2>
100087e4:	3b01      	subs	r3, #1
100087e6:	2b00      	cmp	r3, #0
100087e8:	d122      	bne.n	10008830 <__aeabi_dsub+0x694>
100087ea:	4455      	add	r5, sl
100087ec:	4555      	cmp	r5, sl
100087ee:	41bf      	sbcs	r7, r7
100087f0:	427b      	negs	r3, r7
100087f2:	4460      	add	r0, ip
100087f4:	18c3      	adds	r3, r0, r3
100087f6:	1c17      	adds	r7, r2, #0
100087f8:	e5ba      	b.n	10008370 <__aeabi_dsub+0x1d4>
100087fa:	2180      	movs	r1, #128	; 0x80
100087fc:	2204      	movs	r2, #4
100087fe:	2400      	movs	r4, #0
10008800:	0109      	lsls	r1, r1, #4
10008802:	4b15      	ldr	r3, [pc, #84]	; (10008858 <__aeabi_dsub+0x6bc>)
10008804:	4256      	negs	r6, r2
10008806:	4f12      	ldr	r7, [pc, #72]	; (10008850 <__aeabi_dsub+0x6b4>)
10008808:	e573      	b.n	100082f2 <__aeabi_dsub+0x156>
1000880a:	4663      	mov	r3, ip
1000880c:	431d      	orrs	r5, r3
1000880e:	2600      	movs	r6, #0
10008810:	2d00      	cmp	r5, #0
10008812:	d100      	bne.n	10008816 <__aeabi_dsub+0x67a>
10008814:	e769      	b.n	100086ea <__aeabi_dsub+0x54e>
10008816:	2501      	movs	r5, #1
10008818:	e767      	b.n	100086ea <__aeabi_dsub+0x54e>
1000881a:	2280      	movs	r2, #128	; 0x80
1000881c:	1c03      	adds	r3, r0, #0
1000881e:	4655      	mov	r5, sl
10008820:	0111      	lsls	r1, r2, #4
10008822:	4f0b      	ldr	r7, [pc, #44]	; (10008850 <__aeabi_dsub+0x6b4>)
10008824:	e54c      	b.n	100082c0 <__aeabi_dsub+0x124>
10008826:	1c03      	adds	r3, r0, #0
10008828:	4655      	mov	r5, sl
1000882a:	2101      	movs	r1, #1
1000882c:	2700      	movs	r7, #0
1000882e:	e547      	b.n	100082c0 <__aeabi_dsub+0x124>
10008830:	4907      	ldr	r1, [pc, #28]	; (10008850 <__aeabi_dsub+0x6b4>)
10008832:	428a      	cmp	r2, r1
10008834:	d000      	beq.n	10008838 <__aeabi_dsub+0x69c>
10008836:	e742      	b.n	100086be <__aeabi_dsub+0x522>
10008838:	2180      	movs	r1, #128	; 0x80
1000883a:	1c03      	adds	r3, r0, #0
1000883c:	4655      	mov	r5, sl
1000883e:	0109      	lsls	r1, r1, #4
10008840:	1c17      	adds	r7, r2, #0
10008842:	e53d      	b.n	100082c0 <__aeabi_dsub+0x124>
10008844:	057f      	lsls	r7, r7, #21
10008846:	0d7f      	lsrs	r7, r7, #21
10008848:	2600      	movs	r6, #0
1000884a:	2200      	movs	r2, #0
1000884c:	e55e      	b.n	1000830c <__aeabi_dsub+0x170>
1000884e:	46c0      	nop			; (mov r8, r8)
10008850:	000007ff 	.word	0x000007ff
10008854:	ff7fffff 	.word	0xff7fffff
10008858:	007fffff 	.word	0x007fffff
1000885c:	1c1d      	adds	r5, r3, #0
1000885e:	4315      	orrs	r5, r2
10008860:	d100      	bne.n	10008864 <__aeabi_dsub+0x6c8>
10008862:	e689      	b.n	10008578 <__aeabi_dsub+0x3dc>
10008864:	1c15      	adds	r5, r2, #0
10008866:	2101      	movs	r1, #1
10008868:	2700      	movs	r7, #0
1000886a:	e529      	b.n	100082c0 <__aeabi_dsub+0x124>
1000886c:	1c1f      	adds	r7, r3, #0
1000886e:	3f20      	subs	r7, #32
10008870:	4661      	mov	r1, ip
10008872:	40f9      	lsrs	r1, r7
10008874:	2b20      	cmp	r3, #32
10008876:	d010      	beq.n	1000889a <__aeabi_dsub+0x6fe>
10008878:	2640      	movs	r6, #64	; 0x40
1000887a:	1af3      	subs	r3, r6, r3
1000887c:	4667      	mov	r7, ip
1000887e:	409f      	lsls	r7, r3
10008880:	1c3b      	adds	r3, r7, #0
10008882:	431d      	orrs	r5, r3
10008884:	1e6b      	subs	r3, r5, #1
10008886:	419d      	sbcs	r5, r3
10008888:	430d      	orrs	r5, r1
1000888a:	2600      	movs	r6, #0
1000888c:	e72d      	b.n	100086ea <__aeabi_dsub+0x54e>
1000888e:	2100      	movs	r1, #0
10008890:	e7a2      	b.n	100087d8 <__aeabi_dsub+0x63c>
10008892:	1c3d      	adds	r5, r7, #0
10008894:	2101      	movs	r1, #1
10008896:	2700      	movs	r7, #0
10008898:	e512      	b.n	100082c0 <__aeabi_dsub+0x124>
1000889a:	2300      	movs	r3, #0
1000889c:	e7f1      	b.n	10008882 <__aeabi_dsub+0x6e6>
1000889e:	46c0      	nop			; (mov r8, r8)

100088a0 <__aeabi_d2iz>:
100088a0:	4a13      	ldr	r2, [pc, #76]	; (100088f0 <__aeabi_d2iz+0x50>)
100088a2:	030b      	lsls	r3, r1, #12
100088a4:	b530      	push	{r4, r5, lr}
100088a6:	1c05      	adds	r5, r0, #0
100088a8:	0048      	lsls	r0, r1, #1
100088aa:	0b1c      	lsrs	r4, r3, #12
100088ac:	0fc9      	lsrs	r1, r1, #31
100088ae:	0d43      	lsrs	r3, r0, #21
100088b0:	2000      	movs	r0, #0
100088b2:	4293      	cmp	r3, r2
100088b4:	dd11      	ble.n	100088da <__aeabi_d2iz+0x3a>
100088b6:	480f      	ldr	r0, [pc, #60]	; (100088f4 <__aeabi_d2iz+0x54>)
100088b8:	4283      	cmp	r3, r0
100088ba:	dc0f      	bgt.n	100088dc <__aeabi_d2iz+0x3c>
100088bc:	2280      	movs	r2, #128	; 0x80
100088be:	0350      	lsls	r0, r2, #13
100088c0:	4a0d      	ldr	r2, [pc, #52]	; (100088f8 <__aeabi_d2iz+0x58>)
100088c2:	4304      	orrs	r4, r0
100088c4:	1ad0      	subs	r0, r2, r3
100088c6:	281f      	cmp	r0, #31
100088c8:	dd0b      	ble.n	100088e2 <__aeabi_d2iz+0x42>
100088ca:	4d0c      	ldr	r5, [pc, #48]	; (100088fc <__aeabi_d2iz+0x5c>)
100088cc:	1aeb      	subs	r3, r5, r3
100088ce:	40dc      	lsrs	r4, r3
100088d0:	1c22      	adds	r2, r4, #0
100088d2:	4250      	negs	r0, r2
100088d4:	2900      	cmp	r1, #0
100088d6:	d100      	bne.n	100088da <__aeabi_d2iz+0x3a>
100088d8:	1c10      	adds	r0, r2, #0
100088da:	bd30      	pop	{r4, r5, pc}
100088dc:	4c08      	ldr	r4, [pc, #32]	; (10008900 <__aeabi_d2iz+0x60>)
100088de:	1908      	adds	r0, r1, r4
100088e0:	e7fb      	b.n	100088da <__aeabi_d2iz+0x3a>
100088e2:	40c5      	lsrs	r5, r0
100088e4:	4807      	ldr	r0, [pc, #28]	; (10008904 <__aeabi_d2iz+0x64>)
100088e6:	1c2a      	adds	r2, r5, #0
100088e8:	181d      	adds	r5, r3, r0
100088ea:	40ac      	lsls	r4, r5
100088ec:	4322      	orrs	r2, r4
100088ee:	e7f0      	b.n	100088d2 <__aeabi_d2iz+0x32>
100088f0:	000003fe 	.word	0x000003fe
100088f4:	0000041d 	.word	0x0000041d
100088f8:	00000433 	.word	0x00000433
100088fc:	00000413 	.word	0x00000413
10008900:	7fffffff 	.word	0x7fffffff
10008904:	fffffbed 	.word	0xfffffbed

10008908 <__aeabi_ui2d>:
10008908:	b570      	push	{r4, r5, r6, lr}
1000890a:	1e04      	subs	r4, r0, #0
1000890c:	d026      	beq.n	1000895c <__aeabi_ui2d+0x54>
1000890e:	f000 f86b 	bl	100089e8 <__clzsi2>
10008912:	4914      	ldr	r1, [pc, #80]	; (10008964 <__aeabi_ui2d+0x5c>)
10008914:	1a0a      	subs	r2, r1, r0
10008916:	280a      	cmp	r0, #10
10008918:	dd13      	ble.n	10008942 <__aeabi_ui2d+0x3a>
1000891a:	380b      	subs	r0, #11
1000891c:	4084      	lsls	r4, r0
1000891e:	0556      	lsls	r6, r2, #21
10008920:	0324      	lsls	r4, r4, #12
10008922:	0d72      	lsrs	r2, r6, #21
10008924:	0b25      	lsrs	r5, r4, #12
10008926:	2600      	movs	r6, #0
10008928:	2000      	movs	r0, #0
1000892a:	2100      	movs	r1, #0
1000892c:	1c30      	adds	r0, r6, #0
1000892e:	0d0e      	lsrs	r6, r1, #20
10008930:	0533      	lsls	r3, r6, #20
10008932:	4c0d      	ldr	r4, [pc, #52]	; (10008968 <__aeabi_ui2d+0x60>)
10008934:	432b      	orrs	r3, r5
10008936:	0511      	lsls	r1, r2, #20
10008938:	401c      	ands	r4, r3
1000893a:	430c      	orrs	r4, r1
1000893c:	0065      	lsls	r5, r4, #1
1000893e:	0869      	lsrs	r1, r5, #1
10008940:	bd70      	pop	{r4, r5, r6, pc}
10008942:	230b      	movs	r3, #11
10008944:	1c05      	adds	r5, r0, #0
10008946:	1a18      	subs	r0, r3, r0
10008948:	3515      	adds	r5, #21
1000894a:	1c21      	adds	r1, r4, #0
1000894c:	40c4      	lsrs	r4, r0
1000894e:	40a9      	lsls	r1, r5
10008950:	0552      	lsls	r2, r2, #21
10008952:	0325      	lsls	r5, r4, #12
10008954:	1c0e      	adds	r6, r1, #0
10008956:	0b2d      	lsrs	r5, r5, #12
10008958:	0d52      	lsrs	r2, r2, #21
1000895a:	e7e5      	b.n	10008928 <__aeabi_ui2d+0x20>
1000895c:	2200      	movs	r2, #0
1000895e:	2500      	movs	r5, #0
10008960:	2600      	movs	r6, #0
10008962:	e7e1      	b.n	10008928 <__aeabi_ui2d+0x20>
10008964:	0000041e 	.word	0x0000041e
10008968:	800fffff 	.word	0x800fffff

1000896c <__aeabi_cdrcmple>:
1000896c:	4684      	mov	ip, r0
1000896e:	1c10      	adds	r0, r2, #0
10008970:	4662      	mov	r2, ip
10008972:	468c      	mov	ip, r1
10008974:	1c19      	adds	r1, r3, #0
10008976:	4663      	mov	r3, ip
10008978:	e000      	b.n	1000897c <__aeabi_cdcmpeq>
1000897a:	46c0      	nop			; (mov r8, r8)

1000897c <__aeabi_cdcmpeq>:
1000897c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000897e:	f000 f903 	bl	10008b88 <__ledf2>
10008982:	2800      	cmp	r0, #0
10008984:	d401      	bmi.n	1000898a <__aeabi_cdcmpeq+0xe>
10008986:	2100      	movs	r1, #0
10008988:	42c8      	cmn	r0, r1
1000898a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000898c <__aeabi_dcmpeq>:
1000898c:	b510      	push	{r4, lr}
1000898e:	f000 f849 	bl	10008a24 <__eqdf2>
10008992:	4240      	negs	r0, r0
10008994:	3001      	adds	r0, #1
10008996:	bd10      	pop	{r4, pc}

10008998 <__aeabi_dcmplt>:
10008998:	b510      	push	{r4, lr}
1000899a:	f000 f8f5 	bl	10008b88 <__ledf2>
1000899e:	2800      	cmp	r0, #0
100089a0:	db01      	blt.n	100089a6 <__aeabi_dcmplt+0xe>
100089a2:	2000      	movs	r0, #0
100089a4:	bd10      	pop	{r4, pc}
100089a6:	2001      	movs	r0, #1
100089a8:	bd10      	pop	{r4, pc}
100089aa:	46c0      	nop			; (mov r8, r8)

100089ac <__aeabi_dcmple>:
100089ac:	b510      	push	{r4, lr}
100089ae:	f000 f8eb 	bl	10008b88 <__ledf2>
100089b2:	2800      	cmp	r0, #0
100089b4:	dd01      	ble.n	100089ba <__aeabi_dcmple+0xe>
100089b6:	2000      	movs	r0, #0
100089b8:	bd10      	pop	{r4, pc}
100089ba:	2001      	movs	r0, #1
100089bc:	bd10      	pop	{r4, pc}
100089be:	46c0      	nop			; (mov r8, r8)

100089c0 <__aeabi_dcmpgt>:
100089c0:	b510      	push	{r4, lr}
100089c2:	f000 f86d 	bl	10008aa0 <__gedf2>
100089c6:	2800      	cmp	r0, #0
100089c8:	dc01      	bgt.n	100089ce <__aeabi_dcmpgt+0xe>
100089ca:	2000      	movs	r0, #0
100089cc:	bd10      	pop	{r4, pc}
100089ce:	2001      	movs	r0, #1
100089d0:	bd10      	pop	{r4, pc}
100089d2:	46c0      	nop			; (mov r8, r8)

100089d4 <__aeabi_dcmpge>:
100089d4:	b510      	push	{r4, lr}
100089d6:	f000 f863 	bl	10008aa0 <__gedf2>
100089da:	2800      	cmp	r0, #0
100089dc:	da01      	bge.n	100089e2 <__aeabi_dcmpge+0xe>
100089de:	2000      	movs	r0, #0
100089e0:	bd10      	pop	{r4, pc}
100089e2:	2001      	movs	r0, #1
100089e4:	bd10      	pop	{r4, pc}
100089e6:	46c0      	nop			; (mov r8, r8)

100089e8 <__clzsi2>:
100089e8:	211c      	movs	r1, #28
100089ea:	2301      	movs	r3, #1
100089ec:	041b      	lsls	r3, r3, #16
100089ee:	4298      	cmp	r0, r3
100089f0:	d301      	bcc.n	100089f6 <__clzsi2+0xe>
100089f2:	0c00      	lsrs	r0, r0, #16
100089f4:	3910      	subs	r1, #16
100089f6:	0a1b      	lsrs	r3, r3, #8
100089f8:	4298      	cmp	r0, r3
100089fa:	d301      	bcc.n	10008a00 <__clzsi2+0x18>
100089fc:	0a00      	lsrs	r0, r0, #8
100089fe:	3908      	subs	r1, #8
10008a00:	091b      	lsrs	r3, r3, #4
10008a02:	4298      	cmp	r0, r3
10008a04:	d301      	bcc.n	10008a0a <__clzsi2+0x22>
10008a06:	0900      	lsrs	r0, r0, #4
10008a08:	3904      	subs	r1, #4
10008a0a:	a202      	add	r2, pc, #8	; (adr r2, 10008a14 <__clzsi2+0x2c>)
10008a0c:	5c10      	ldrb	r0, [r2, r0]
10008a0e:	1840      	adds	r0, r0, r1
10008a10:	4770      	bx	lr
10008a12:	46c0      	nop			; (mov r8, r8)
10008a14:	02020304 	.word	0x02020304
10008a18:	01010101 	.word	0x01010101
	...

10008a24 <__eqdf2>:
10008a24:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a26:	4694      	mov	ip, r2
10008a28:	4647      	mov	r7, r8
10008a2a:	031a      	lsls	r2, r3, #12
10008a2c:	1c06      	adds	r6, r0, #0
10008a2e:	0058      	lsls	r0, r3, #1
10008a30:	b480      	push	{r7}
10008a32:	0b17      	lsrs	r7, r2, #12
10008a34:	0d42      	lsrs	r2, r0, #21
10008a36:	4819      	ldr	r0, [pc, #100]	; (10008a9c <__eqdf2+0x78>)
10008a38:	030d      	lsls	r5, r1, #12
10008a3a:	004c      	lsls	r4, r1, #1
10008a3c:	0fdb      	lsrs	r3, r3, #31
10008a3e:	0b2d      	lsrs	r5, r5, #12
10008a40:	0d64      	lsrs	r4, r4, #21
10008a42:	0fc9      	lsrs	r1, r1, #31
10008a44:	4698      	mov	r8, r3
10008a46:	4284      	cmp	r4, r0
10008a48:	d008      	beq.n	10008a5c <__eqdf2+0x38>
10008a4a:	4814      	ldr	r0, [pc, #80]	; (10008a9c <__eqdf2+0x78>)
10008a4c:	4282      	cmp	r2, r0
10008a4e:	d00d      	beq.n	10008a6c <__eqdf2+0x48>
10008a50:	2001      	movs	r0, #1
10008a52:	4294      	cmp	r4, r2
10008a54:	d012      	beq.n	10008a7c <__eqdf2+0x58>
10008a56:	bc04      	pop	{r2}
10008a58:	4690      	mov	r8, r2
10008a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008a5c:	1c2b      	adds	r3, r5, #0
10008a5e:	4333      	orrs	r3, r6
10008a60:	2001      	movs	r0, #1
10008a62:	2b00      	cmp	r3, #0
10008a64:	d1f7      	bne.n	10008a56 <__eqdf2+0x32>
10008a66:	480d      	ldr	r0, [pc, #52]	; (10008a9c <__eqdf2+0x78>)
10008a68:	4282      	cmp	r2, r0
10008a6a:	d1f1      	bne.n	10008a50 <__eqdf2+0x2c>
10008a6c:	4663      	mov	r3, ip
10008a6e:	433b      	orrs	r3, r7
10008a70:	2001      	movs	r0, #1
10008a72:	2b00      	cmp	r3, #0
10008a74:	d1ef      	bne.n	10008a56 <__eqdf2+0x32>
10008a76:	2001      	movs	r0, #1
10008a78:	4294      	cmp	r4, r2
10008a7a:	d1ec      	bne.n	10008a56 <__eqdf2+0x32>
10008a7c:	42bd      	cmp	r5, r7
10008a7e:	d1ea      	bne.n	10008a56 <__eqdf2+0x32>
10008a80:	4566      	cmp	r6, ip
10008a82:	d1e8      	bne.n	10008a56 <__eqdf2+0x32>
10008a84:	4541      	cmp	r1, r8
10008a86:	d006      	beq.n	10008a96 <__eqdf2+0x72>
10008a88:	2c00      	cmp	r4, #0
10008a8a:	d1e4      	bne.n	10008a56 <__eqdf2+0x32>
10008a8c:	1c28      	adds	r0, r5, #0
10008a8e:	4330      	orrs	r0, r6
10008a90:	1e45      	subs	r5, r0, #1
10008a92:	41a8      	sbcs	r0, r5
10008a94:	e7df      	b.n	10008a56 <__eqdf2+0x32>
10008a96:	2000      	movs	r0, #0
10008a98:	e7dd      	b.n	10008a56 <__eqdf2+0x32>
10008a9a:	46c0      	nop			; (mov r8, r8)
10008a9c:	000007ff 	.word	0x000007ff

10008aa0 <__gedf2>:
10008aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008aa2:	4657      	mov	r7, sl
10008aa4:	464e      	mov	r6, r9
10008aa6:	4645      	mov	r5, r8
10008aa8:	b4e0      	push	{r5, r6, r7}
10008aaa:	1c04      	adds	r4, r0, #0
10008aac:	004e      	lsls	r6, r1, #1
10008aae:	0308      	lsls	r0, r1, #12
10008ab0:	0fc9      	lsrs	r1, r1, #31
10008ab2:	468a      	mov	sl, r1
10008ab4:	1c17      	adds	r7, r2, #0
10008ab6:	0059      	lsls	r1, r3, #1
10008ab8:	031a      	lsls	r2, r3, #12
10008aba:	0b05      	lsrs	r5, r0, #12
10008abc:	0d70      	lsrs	r0, r6, #21
10008abe:	0b16      	lsrs	r6, r2, #12
10008ac0:	0d4a      	lsrs	r2, r1, #21
10008ac2:	4930      	ldr	r1, [pc, #192]	; (10008b84 <__gedf2+0xe4>)
10008ac4:	0fdb      	lsrs	r3, r3, #31
10008ac6:	469c      	mov	ip, r3
10008ac8:	4288      	cmp	r0, r1
10008aca:	d032      	beq.n	10008b32 <__gedf2+0x92>
10008acc:	492d      	ldr	r1, [pc, #180]	; (10008b84 <__gedf2+0xe4>)
10008ace:	428a      	cmp	r2, r1
10008ad0:	d035      	beq.n	10008b3e <__gedf2+0x9e>
10008ad2:	2800      	cmp	r0, #0
10008ad4:	d10f      	bne.n	10008af6 <__gedf2+0x56>
10008ad6:	1c29      	adds	r1, r5, #0
10008ad8:	4321      	orrs	r1, r4
10008ada:	424b      	negs	r3, r1
10008adc:	414b      	adcs	r3, r1
10008ade:	4698      	mov	r8, r3
10008ae0:	2a00      	cmp	r2, #0
10008ae2:	d00b      	beq.n	10008afc <__gedf2+0x5c>
10008ae4:	2b00      	cmp	r3, #0
10008ae6:	d11a      	bne.n	10008b1e <__gedf2+0x7e>
10008ae8:	45e2      	cmp	sl, ip
10008aea:	d02c      	beq.n	10008b46 <__gedf2+0xa6>
10008aec:	4655      	mov	r5, sl
10008aee:	2d00      	cmp	r5, #0
10008af0:	d118      	bne.n	10008b24 <__gedf2+0x84>
10008af2:	2001      	movs	r0, #1
10008af4:	e018      	b.n	10008b28 <__gedf2+0x88>
10008af6:	2a00      	cmp	r2, #0
10008af8:	d1f6      	bne.n	10008ae8 <__gedf2+0x48>
10008afa:	4690      	mov	r8, r2
10008afc:	1c31      	adds	r1, r6, #0
10008afe:	4339      	orrs	r1, r7
10008b00:	424b      	negs	r3, r1
10008b02:	414b      	adcs	r3, r1
10008b04:	4641      	mov	r1, r8
10008b06:	2900      	cmp	r1, #0
10008b08:	d106      	bne.n	10008b18 <__gedf2+0x78>
10008b0a:	2b00      	cmp	r3, #0
10008b0c:	d0ec      	beq.n	10008ae8 <__gedf2+0x48>
10008b0e:	4656      	mov	r6, sl
10008b10:	2001      	movs	r0, #1
10008b12:	2e00      	cmp	r6, #0
10008b14:	d008      	beq.n	10008b28 <__gedf2+0x88>
10008b16:	e005      	b.n	10008b24 <__gedf2+0x84>
10008b18:	2000      	movs	r0, #0
10008b1a:	2b00      	cmp	r3, #0
10008b1c:	d104      	bne.n	10008b28 <__gedf2+0x88>
10008b1e:	4667      	mov	r7, ip
10008b20:	2f00      	cmp	r7, #0
10008b22:	d1e6      	bne.n	10008af2 <__gedf2+0x52>
10008b24:	2301      	movs	r3, #1
10008b26:	4258      	negs	r0, r3
10008b28:	bc1c      	pop	{r2, r3, r4}
10008b2a:	4690      	mov	r8, r2
10008b2c:	4699      	mov	r9, r3
10008b2e:	46a2      	mov	sl, r4
10008b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008b32:	1c2b      	adds	r3, r5, #0
10008b34:	4323      	orrs	r3, r4
10008b36:	d0c9      	beq.n	10008acc <__gedf2+0x2c>
10008b38:	2102      	movs	r1, #2
10008b3a:	4248      	negs	r0, r1
10008b3c:	e7f4      	b.n	10008b28 <__gedf2+0x88>
10008b3e:	1c33      	adds	r3, r6, #0
10008b40:	433b      	orrs	r3, r7
10008b42:	d0c6      	beq.n	10008ad2 <__gedf2+0x32>
10008b44:	e7f8      	b.n	10008b38 <__gedf2+0x98>
10008b46:	4290      	cmp	r0, r2
10008b48:	dc05      	bgt.n	10008b56 <__gedf2+0xb6>
10008b4a:	da09      	bge.n	10008b60 <__gedf2+0xc0>
10008b4c:	4652      	mov	r2, sl
10008b4e:	2a00      	cmp	r2, #0
10008b50:	d0e8      	beq.n	10008b24 <__gedf2+0x84>
10008b52:	2001      	movs	r0, #1
10008b54:	e7e8      	b.n	10008b28 <__gedf2+0x88>
10008b56:	4654      	mov	r4, sl
10008b58:	2c00      	cmp	r4, #0
10008b5a:	d1e3      	bne.n	10008b24 <__gedf2+0x84>
10008b5c:	2001      	movs	r0, #1
10008b5e:	e7e3      	b.n	10008b28 <__gedf2+0x88>
10008b60:	42b5      	cmp	r5, r6
10008b62:	d8c3      	bhi.n	10008aec <__gedf2+0x4c>
10008b64:	d007      	beq.n	10008b76 <__gedf2+0xd6>
10008b66:	2000      	movs	r0, #0
10008b68:	42b5      	cmp	r5, r6
10008b6a:	d2dd      	bcs.n	10008b28 <__gedf2+0x88>
10008b6c:	4650      	mov	r0, sl
10008b6e:	2800      	cmp	r0, #0
10008b70:	d0d8      	beq.n	10008b24 <__gedf2+0x84>
10008b72:	2001      	movs	r0, #1
10008b74:	e7d8      	b.n	10008b28 <__gedf2+0x88>
10008b76:	42bc      	cmp	r4, r7
10008b78:	d8b8      	bhi.n	10008aec <__gedf2+0x4c>
10008b7a:	2000      	movs	r0, #0
10008b7c:	42bc      	cmp	r4, r7
10008b7e:	d3f5      	bcc.n	10008b6c <__gedf2+0xcc>
10008b80:	e7d2      	b.n	10008b28 <__gedf2+0x88>
10008b82:	46c0      	nop			; (mov r8, r8)
10008b84:	000007ff 	.word	0x000007ff

10008b88 <__ledf2>:
10008b88:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b8a:	4644      	mov	r4, r8
10008b8c:	465f      	mov	r7, fp
10008b8e:	4656      	mov	r6, sl
10008b90:	464d      	mov	r5, r9
10008b92:	b4f0      	push	{r4, r5, r6, r7}
10008b94:	4694      	mov	ip, r2
10008b96:	1c06      	adds	r6, r0, #0
10008b98:	031a      	lsls	r2, r3, #12
10008b9a:	0058      	lsls	r0, r3, #1
10008b9c:	0b17      	lsrs	r7, r2, #12
10008b9e:	0d42      	lsrs	r2, r0, #21
10008ba0:	482e      	ldr	r0, [pc, #184]	; (10008c5c <__ledf2+0xd4>)
10008ba2:	030d      	lsls	r5, r1, #12
10008ba4:	004c      	lsls	r4, r1, #1
10008ba6:	0fdb      	lsrs	r3, r3, #31
10008ba8:	0b2d      	lsrs	r5, r5, #12
10008baa:	0d64      	lsrs	r4, r4, #21
10008bac:	0fc9      	lsrs	r1, r1, #31
10008bae:	4698      	mov	r8, r3
10008bb0:	4284      	cmp	r4, r0
10008bb2:	d033      	beq.n	10008c1c <__ledf2+0x94>
10008bb4:	4829      	ldr	r0, [pc, #164]	; (10008c5c <__ledf2+0xd4>)
10008bb6:	4282      	cmp	r2, r0
10008bb8:	d036      	beq.n	10008c28 <__ledf2+0xa0>
10008bba:	2c00      	cmp	r4, #0
10008bbc:	d019      	beq.n	10008bf2 <__ledf2+0x6a>
10008bbe:	2a00      	cmp	r2, #0
10008bc0:	d120      	bne.n	10008c04 <__ledf2+0x7c>
10008bc2:	4693      	mov	fp, r2
10008bc4:	4663      	mov	r3, ip
10008bc6:	433b      	orrs	r3, r7
10008bc8:	4258      	negs	r0, r3
10008bca:	4158      	adcs	r0, r3
10008bcc:	465b      	mov	r3, fp
10008bce:	4682      	mov	sl, r0
10008bd0:	2b00      	cmp	r3, #0
10008bd2:	d01d      	beq.n	10008c10 <__ledf2+0x88>
10008bd4:	4651      	mov	r1, sl
10008bd6:	2000      	movs	r0, #0
10008bd8:	2900      	cmp	r1, #0
10008bda:	d104      	bne.n	10008be6 <__ledf2+0x5e>
10008bdc:	4642      	mov	r2, r8
10008bde:	2a00      	cmp	r2, #0
10008be0:	d114      	bne.n	10008c0c <__ledf2+0x84>
10008be2:	2401      	movs	r4, #1
10008be4:	4260      	negs	r0, r4
10008be6:	bc3c      	pop	{r2, r3, r4, r5}
10008be8:	4690      	mov	r8, r2
10008bea:	4699      	mov	r9, r3
10008bec:	46a2      	mov	sl, r4
10008bee:	46ab      	mov	fp, r5
10008bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008bf2:	1c2b      	adds	r3, r5, #0
10008bf4:	4333      	orrs	r3, r6
10008bf6:	4258      	negs	r0, r3
10008bf8:	4143      	adcs	r3, r0
10008bfa:	469b      	mov	fp, r3
10008bfc:	2a00      	cmp	r2, #0
10008bfe:	d0e1      	beq.n	10008bc4 <__ledf2+0x3c>
10008c00:	2b00      	cmp	r3, #0
10008c02:	d1eb      	bne.n	10008bdc <__ledf2+0x54>
10008c04:	4541      	cmp	r1, r8
10008c06:	d015      	beq.n	10008c34 <__ledf2+0xac>
10008c08:	2900      	cmp	r1, #0
10008c0a:	d1ea      	bne.n	10008be2 <__ledf2+0x5a>
10008c0c:	2001      	movs	r0, #1
10008c0e:	e7ea      	b.n	10008be6 <__ledf2+0x5e>
10008c10:	2800      	cmp	r0, #0
10008c12:	d0f7      	beq.n	10008c04 <__ledf2+0x7c>
10008c14:	2001      	movs	r0, #1
10008c16:	2900      	cmp	r1, #0
10008c18:	d0e5      	beq.n	10008be6 <__ledf2+0x5e>
10008c1a:	e7e2      	b.n	10008be2 <__ledf2+0x5a>
10008c1c:	1c2b      	adds	r3, r5, #0
10008c1e:	4333      	orrs	r3, r6
10008c20:	2002      	movs	r0, #2
10008c22:	2b00      	cmp	r3, #0
10008c24:	d1df      	bne.n	10008be6 <__ledf2+0x5e>
10008c26:	e7c5      	b.n	10008bb4 <__ledf2+0x2c>
10008c28:	4663      	mov	r3, ip
10008c2a:	433b      	orrs	r3, r7
10008c2c:	2002      	movs	r0, #2
10008c2e:	2b00      	cmp	r3, #0
10008c30:	d1d9      	bne.n	10008be6 <__ledf2+0x5e>
10008c32:	e7c2      	b.n	10008bba <__ledf2+0x32>
10008c34:	4294      	cmp	r4, r2
10008c36:	dce7      	bgt.n	10008c08 <__ledf2+0x80>
10008c38:	db05      	blt.n	10008c46 <__ledf2+0xbe>
10008c3a:	42bd      	cmp	r5, r7
10008c3c:	d8e4      	bhi.n	10008c08 <__ledf2+0x80>
10008c3e:	d006      	beq.n	10008c4e <__ledf2+0xc6>
10008c40:	2000      	movs	r0, #0
10008c42:	42bd      	cmp	r5, r7
10008c44:	d2cf      	bcs.n	10008be6 <__ledf2+0x5e>
10008c46:	2900      	cmp	r1, #0
10008c48:	d0cb      	beq.n	10008be2 <__ledf2+0x5a>
10008c4a:	2001      	movs	r0, #1
10008c4c:	e7cb      	b.n	10008be6 <__ledf2+0x5e>
10008c4e:	4566      	cmp	r6, ip
10008c50:	d8da      	bhi.n	10008c08 <__ledf2+0x80>
10008c52:	2000      	movs	r0, #0
10008c54:	4566      	cmp	r6, ip
10008c56:	d3f6      	bcc.n	10008c46 <__ledf2+0xbe>
10008c58:	e7c5      	b.n	10008be6 <__ledf2+0x5e>
10008c5a:	46c0      	nop			; (mov r8, r8)
10008c5c:	000007ff 	.word	0x000007ff

10008c60 <memcpy>:
10008c60:	b5f0      	push	{r4, r5, r6, r7, lr}
10008c62:	464f      	mov	r7, r9
10008c64:	4646      	mov	r6, r8
10008c66:	b4c0      	push	{r6, r7}
10008c68:	2a0f      	cmp	r2, #15
10008c6a:	d972      	bls.n	10008d52 <memcpy+0xf2>
10008c6c:	1c0b      	adds	r3, r1, #0
10008c6e:	4303      	orrs	r3, r0
10008c70:	079c      	lsls	r4, r3, #30
10008c72:	d000      	beq.n	10008c76 <memcpy+0x16>
10008c74:	e090      	b.n	10008d98 <memcpy+0x138>
10008c76:	1c17      	adds	r7, r2, #0
10008c78:	3f10      	subs	r7, #16
10008c7a:	093c      	lsrs	r4, r7, #4
10008c7c:	3401      	adds	r4, #1
10008c7e:	0127      	lsls	r7, r4, #4
10008c80:	680c      	ldr	r4, [r1, #0]
10008c82:	1c3b      	adds	r3, r7, #0
10008c84:	6004      	str	r4, [r0, #0]
10008c86:	3b10      	subs	r3, #16
10008c88:	06de      	lsls	r6, r3, #27
10008c8a:	684b      	ldr	r3, [r1, #4]
10008c8c:	19cd      	adds	r5, r1, r7
10008c8e:	6043      	str	r3, [r0, #4]
10008c90:	688c      	ldr	r4, [r1, #8]
10008c92:	0ff6      	lsrs	r6, r6, #31
10008c94:	6084      	str	r4, [r0, #8]
10008c96:	68cb      	ldr	r3, [r1, #12]
10008c98:	1c04      	adds	r4, r0, #0
10008c9a:	60c3      	str	r3, [r0, #12]
10008c9c:	1c0b      	adds	r3, r1, #0
10008c9e:	3310      	adds	r3, #16
10008ca0:	3410      	adds	r4, #16
10008ca2:	429d      	cmp	r5, r3
10008ca4:	d027      	beq.n	10008cf6 <memcpy+0x96>
10008ca6:	2e00      	cmp	r6, #0
10008ca8:	d00b      	beq.n	10008cc2 <memcpy+0x62>
10008caa:	6819      	ldr	r1, [r3, #0]
10008cac:	6021      	str	r1, [r4, #0]
10008cae:	685e      	ldr	r6, [r3, #4]
10008cb0:	6066      	str	r6, [r4, #4]
10008cb2:	6899      	ldr	r1, [r3, #8]
10008cb4:	60a1      	str	r1, [r4, #8]
10008cb6:	68de      	ldr	r6, [r3, #12]
10008cb8:	3310      	adds	r3, #16
10008cba:	60e6      	str	r6, [r4, #12]
10008cbc:	3410      	adds	r4, #16
10008cbe:	429d      	cmp	r5, r3
10008cc0:	d019      	beq.n	10008cf6 <memcpy+0x96>
10008cc2:	6819      	ldr	r1, [r3, #0]
10008cc4:	6021      	str	r1, [r4, #0]
10008cc6:	685e      	ldr	r6, [r3, #4]
10008cc8:	6066      	str	r6, [r4, #4]
10008cca:	6899      	ldr	r1, [r3, #8]
10008ccc:	60a1      	str	r1, [r4, #8]
10008cce:	68de      	ldr	r6, [r3, #12]
10008cd0:	1c19      	adds	r1, r3, #0
10008cd2:	60e6      	str	r6, [r4, #12]
10008cd4:	691b      	ldr	r3, [r3, #16]
10008cd6:	1c26      	adds	r6, r4, #0
10008cd8:	6123      	str	r3, [r4, #16]
10008cda:	694c      	ldr	r4, [r1, #20]
10008cdc:	6174      	str	r4, [r6, #20]
10008cde:	698b      	ldr	r3, [r1, #24]
10008ce0:	61b3      	str	r3, [r6, #24]
10008ce2:	69cc      	ldr	r4, [r1, #28]
10008ce4:	3110      	adds	r1, #16
10008ce6:	61f4      	str	r4, [r6, #28]
10008ce8:	1c0b      	adds	r3, r1, #0
10008cea:	3610      	adds	r6, #16
10008cec:	1c34      	adds	r4, r6, #0
10008cee:	3310      	adds	r3, #16
10008cf0:	3410      	adds	r4, #16
10008cf2:	429d      	cmp	r5, r3
10008cf4:	d1e5      	bne.n	10008cc2 <memcpy+0x62>
10008cf6:	183f      	adds	r7, r7, r0
10008cf8:	210f      	movs	r1, #15
10008cfa:	46b8      	mov	r8, r7
10008cfc:	4011      	ands	r1, r2
10008cfe:	2903      	cmp	r1, #3
10008d00:	d94d      	bls.n	10008d9e <memcpy+0x13e>
10008d02:	3904      	subs	r1, #4
10008d04:	088e      	lsrs	r6, r1, #2
10008d06:	00b3      	lsls	r3, r6, #2
10008d08:	3304      	adds	r3, #4
10008d0a:	18ec      	adds	r4, r5, r3
10008d0c:	46a4      	mov	ip, r4
10008d0e:	3b04      	subs	r3, #4
10008d10:	1c2c      	adds	r4, r5, #0
10008d12:	075f      	lsls	r7, r3, #29
10008d14:	cc08      	ldmia	r4!, {r3}
10008d16:	4641      	mov	r1, r8
10008d18:	46b1      	mov	r9, r6
10008d1a:	c108      	stmia	r1!, {r3}
10008d1c:	0ffe      	lsrs	r6, r7, #31
10008d1e:	4564      	cmp	r4, ip
10008d20:	d00f      	beq.n	10008d42 <memcpy+0xe2>
10008d22:	2e00      	cmp	r6, #0
10008d24:	d003      	beq.n	10008d2e <memcpy+0xce>
10008d26:	cc80      	ldmia	r4!, {r7}
10008d28:	c180      	stmia	r1!, {r7}
10008d2a:	4564      	cmp	r4, ip
10008d2c:	d009      	beq.n	10008d42 <memcpy+0xe2>
10008d2e:	1c27      	adds	r7, r4, #0
10008d30:	cf08      	ldmia	r7!, {r3}
10008d32:	1c0e      	adds	r6, r1, #0
10008d34:	c608      	stmia	r6!, {r3}
10008d36:	6864      	ldr	r4, [r4, #4]
10008d38:	604c      	str	r4, [r1, #4]
10008d3a:	1d3c      	adds	r4, r7, #4
10008d3c:	1d31      	adds	r1, r6, #4
10008d3e:	4564      	cmp	r4, ip
10008d40:	d1f5      	bne.n	10008d2e <memcpy+0xce>
10008d42:	4649      	mov	r1, r9
10008d44:	3101      	adds	r1, #1
10008d46:	008e      	lsls	r6, r1, #2
10008d48:	2703      	movs	r7, #3
10008d4a:	19ad      	adds	r5, r5, r6
10008d4c:	403a      	ands	r2, r7
10008d4e:	4446      	add	r6, r8
10008d50:	e001      	b.n	10008d56 <memcpy+0xf6>
10008d52:	1c0d      	adds	r5, r1, #0
10008d54:	1c06      	adds	r6, r0, #0
10008d56:	2a00      	cmp	r2, #0
10008d58:	d01a      	beq.n	10008d90 <memcpy+0x130>
10008d5a:	782f      	ldrb	r7, [r5, #0]
10008d5c:	18b2      	adds	r2, r6, r2
10008d5e:	43f3      	mvns	r3, r6
10008d60:	18d1      	adds	r1, r2, r3
10008d62:	2401      	movs	r4, #1
10008d64:	7037      	strb	r7, [r6, #0]
10008d66:	3601      	adds	r6, #1
10008d68:	400c      	ands	r4, r1
10008d6a:	3501      	adds	r5, #1
10008d6c:	4296      	cmp	r6, r2
10008d6e:	d00f      	beq.n	10008d90 <memcpy+0x130>
10008d70:	2c00      	cmp	r4, #0
10008d72:	d005      	beq.n	10008d80 <memcpy+0x120>
10008d74:	782b      	ldrb	r3, [r5, #0]
10008d76:	3501      	adds	r5, #1
10008d78:	7033      	strb	r3, [r6, #0]
10008d7a:	3601      	adds	r6, #1
10008d7c:	4296      	cmp	r6, r2
10008d7e:	d007      	beq.n	10008d90 <memcpy+0x130>
10008d80:	7829      	ldrb	r1, [r5, #0]
10008d82:	7031      	strb	r1, [r6, #0]
10008d84:	786c      	ldrb	r4, [r5, #1]
10008d86:	3502      	adds	r5, #2
10008d88:	7074      	strb	r4, [r6, #1]
10008d8a:	3602      	adds	r6, #2
10008d8c:	4296      	cmp	r6, r2
10008d8e:	d1f7      	bne.n	10008d80 <memcpy+0x120>
10008d90:	bc0c      	pop	{r2, r3}
10008d92:	4690      	mov	r8, r2
10008d94:	4699      	mov	r9, r3
10008d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008d98:	1c06      	adds	r6, r0, #0
10008d9a:	1c0d      	adds	r5, r1, #0
10008d9c:	e7dd      	b.n	10008d5a <memcpy+0xfa>
10008d9e:	1c3e      	adds	r6, r7, #0
10008da0:	1c0a      	adds	r2, r1, #0
10008da2:	e7d8      	b.n	10008d56 <memcpy+0xf6>

10008da4 <strcmp>:
10008da4:	7802      	ldrb	r2, [r0, #0]
10008da6:	780b      	ldrb	r3, [r1, #0]
10008da8:	3001      	adds	r0, #1
10008daa:	3101      	adds	r1, #1
10008dac:	2a00      	cmp	r2, #0
10008dae:	d001      	beq.n	10008db4 <strcmp+0x10>
10008db0:	429a      	cmp	r2, r3
10008db2:	d0f7      	beq.n	10008da4 <strcmp>
10008db4:	1ad0      	subs	r0, r2, r3
10008db6:	4770      	bx	lr

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	1000307f 	.word	0x1000307f
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10003081 	.word	0x10003081
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10003083 	.word	0x10003083
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10004355 	.word	0x10004355
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10003087 	.word	0x10003087
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10003089 	.word	0x10003089
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	1000308b 	.word	0x1000308b
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	1000308d 	.word	0x1000308d
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	1000308f 	.word	0x1000308f
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10003091 	.word	0x10003091
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10003093 	.word	0x10003093
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	100030a1 	.word	0x100030a1
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	100030a3 	.word	0x100030a3
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	100030a5 	.word	0x100030a5
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	100030a7 	.word	0x100030a7
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	100030a9 	.word	0x100030a9
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	100030ab 	.word	0x100030ab
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	10003095 	.word	0x10003095
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	10003097 	.word	0x10003097
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	10003099 	.word	0x10003099
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	1000309b 	.word	0x1000309b
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	1000309d 	.word	0x1000309d
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	1000309f 	.word	0x1000309f
