   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWMSP001.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PWMSP001_Init,"ax",%progbits
  18              		.align	2
  19              		.global	PWMSP001_Init
  20              		.code	16
  21              		.thumb_func
  23              	PWMSP001_Init:
  24              	.LFB33:
  25              		.file 1 "../Dave/Generated/src/PWMSP001/PWMSP001.c"
   1:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  DAVE App Name : PWMSP001       App Version: 1.0.34               
   3:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   7:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   8:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   9:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*CODE_BLOCK_BEGIN[PWMSP001.c]*/
  10:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  11:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  12:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  13:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  16:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  19:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  may be used to endorse or promote products derived from this software without**
  26:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  28:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  40:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  44:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  45:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  46:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  48:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  54:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MODIFICATION DATE : April 28, 2014                                         **
  56:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  57:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  58:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  59:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Author(s) Identity                                    **
  60:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  61:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  62:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** Initials     Name                                                          **
  63:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** KS           App Developer                                                 **
  65:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  66:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  67:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  68:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
  69:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @file  PWMSP001.c
  70:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *
  71:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This file contains implementations of all Public and Private functions
  72:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        of Single Phase PWM without dead time APP.
  73:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        This app generates the single PWM waveform without dead time. 
  74:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        Duty cycle can be changed at runtime. And PWM frequency can be changed
  75:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        when timer is not running.
  76:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
  77:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  78:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* Revision History															  
  79:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 21 Nov 2012   v1.0.16   coding guidelines  
  80:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 10 Dec 2012   v1.0.18   DBG002 Macros are added
  81:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 1  Feb 2013   v1.0.20   PDR register constraints are added
  82:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 26 Mar 2013   v1.0.22   DAVE3.H inclusion
  83:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 22 Apr 2013   v1.0.24   MCSW300000628 utp w.r.t open drain port configuration
  84:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         is fixed
  85:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   MCSW300000629 utp w.r.t SetCompare API is fixed by 
  86:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         fetching period value from register instead from UI 
  87:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         parameter
  88:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   Removed the inclusion of other header files
  89:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                                                  (PWMSP001.h,PWMSP001_Conf.c)
  90:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 30 Aug 2013   v1.0.26   Defect 32385 fix: Duty cycle updation issue when not 
  91:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         using timer concatenation in 
  92:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         PWMSP001_SetPwmFreqAndDutyCycle() API is fixed.
  93:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 17 Feb 2014   v1.0.32   1.Trap enabling is shifted from PWMSP001_Start() to
  94:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                           PWMSP001_Init()
  95:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         2.In PWMSP001_lSetDutyEdgeAlignTimerConcat()compare
  96:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          value calculation is updated.
  97:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         3.During Timer concatenation if single shot mode is 
  98:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          enabled lower timer is made as free running.
  99:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 28 Apr 2014   v1.0.34   Removed the DBG002_FUNCTION_ENTRY() and 
 100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         DBG002_FUNCTION_EXIT() from all the APIs.
 101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         In PWMSP001_SetCompare() period value checks are 
 102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         removed.
 103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Include Files                                         **
 107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
 108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #include <DAVE3.h>
 109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*****************************************************************************
 112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 113:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *****************************************************************************/
 114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*These definitions are included here to avoid compilation errors,
 115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  as empty*/ 
 117:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #ifndef _DBG002_H_
 118:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_I(e) 
 121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IG(e,g) 
 122:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IH(e,h) 
 123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IP(e,p) 
 124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGH(e,g,h) 
 125:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGP(e,g,p) 
 126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IHP(e,h,p) 
 127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGHP(e,g,h,p) 
 128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_N(e) 
 129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NG(e,g) 
 130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NH(e,h) 
 131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NP(e,p) 
 132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGH(e,g,h) 
 133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGP(e,g,p) 
 134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NHP(e,h,p) 
 135:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGHP(e,g,h,p) 
 136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ID(e) 
 137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IS(e) 
 138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ISG(e,g) 
 139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 140:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 144:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_MESSAGEID_LITERAL
 148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #endif/* End of definitions of dummy Debug Log macros*/   
 149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define APP_GID DBG002_GID_PWMSP001
 150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define PWMSP001_STATUS_LEN 4U
 152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Private Function declarations                              **
 154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @cond INTERNAL_DOCS
 157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @ingroup PWMSP001_privatefunc
 160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @{
 161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will initialize second slice registers (in case of timer
 165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * concatenation) with user configured value
 166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]   HandlePtr Pointer to PWMSP001_HandleType structure
 167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return void
 168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice
 170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
 172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 216:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set pwm frequency if timer concatenation is selected
 248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  PwmTime This is PWM frequency in hertz.
 250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 252:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
 253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
 256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
 260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr);
 264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @}
 267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Function definitions                                       **
 271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    
 273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes the app */
 274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_Init(void)
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  26              		.loc 1 275 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
 276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  39              		.loc 1 276 0
  40 0006 0123     		mov	r3, #1
  41 0008 7B60     		str	r3, [r7, #4]
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
  42              		.loc 1 277 0
  43 000a FFF7FEFF 		bl	CCU4GLOBAL_Init
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
  44              		.loc 1 278 0
  45 000e 1E4B     		ldr	r3, .L4
  46 0010 181C     		mov	r0, r3
  47 0012 FFF7FEFF 		bl	PWMSP001_lInit
  48 0016 031C     		mov	r3, r0
  49 0018 7B60     		str	r3, [r7, #4]
 279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
  50              		.loc 1 280 0
  51 001a 7B68     		ldr	r3, [r7, #4]
  52 001c 002B     		cmp	r3, #0
  53 001e 09D1     		bne	.L2
 281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
  54              		.loc 1 282 0
  55 0020 194B     		ldr	r3, .L4
  56 0022 5B78     		ldrb	r3, [r3, #1]
  57 0024 012B     		cmp	r3, #1
  58 0026 05D1     		bne	.L2
 283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
  59              		.loc 1 284 0
  60 0028 174B     		ldr	r3, .L4
  61 002a 181C     		mov	r0, r3
  62 002c FFF7FEFF 		bl	PWMSP001_Start
  63 0030 031C     		mov	r3, r0
  64 0032 7B60     		str	r3, [r7, #4]
  65              	.L2:
 285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
  66              		.loc 1 289 0
  67 0034 154B     		ldr	r3, .L4+4
  68 0036 154A     		ldr	r2, .L4+4
  69 0038 1269     		ldr	r2, [r2, #16]
  70 003a 4021     		mov	r1, #64
  71 003c 8A43     		bic	r2, r1
  72 003e 1A61     		str	r2, [r3, #16]
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
  73              		.loc 1 290 0
  74 0040 124B     		ldr	r3, .L4+4
  75 0042 124A     		ldr	r2, .L4+4
  76 0044 1269     		ldr	r2, [r2, #16]
  77 0046 1A61     		str	r2, [r3, #16]
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC0_PO_Msk);
 292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle1);
  78              		.loc 1 292 0
  79 0048 114B     		ldr	r3, .L4+8
  80 004a 181C     		mov	r0, r3
  81 004c FFF7FEFF 		bl	PWMSP001_lInit
  82 0050 031C     		mov	r3, r0
  83 0052 7B60     		str	r3, [r7, #4]
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
  84              		.loc 1 294 0
  85 0054 7B68     		ldr	r3, [r7, #4]
  86 0056 002B     		cmp	r3, #0
  87 0058 09D1     		bne	.L3
 295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle1.StartControl == (uint8_t)SET)
  88              		.loc 1 296 0
  89 005a 0D4B     		ldr	r3, .L4+8
  90 005c 5B78     		ldrb	r3, [r3, #1]
  91 005e 012B     		cmp	r3, #1
  92 0060 05D1     		bne	.L3
 297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle1);
  93              		.loc 1 298 0
  94 0062 0B4B     		ldr	r3, .L4+8
  95 0064 181C     		mov	r0, r3
  96 0066 FFF7FEFF 		bl	PWMSP001_Start
  97 006a 031C     		mov	r3, r0
  98 006c 7B60     		str	r3, [r7, #4]
  99              	.L3:
 299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
 100              		.loc 1 303 0
 101 006e 074B     		ldr	r3, .L4+4
 102 0070 064A     		ldr	r2, .L4+4
 103 0072 1169     		ldr	r1, [r2, #16]
 104 0074 074A     		ldr	r2, .L4+12
 105 0076 0A40     		and	r2, r1
 106 0078 1A61     		str	r2, [r3, #16]
 304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
 107              		.loc 1 304 0
 108 007a 044B     		ldr	r3, .L4+4
 109 007c 034A     		ldr	r2, .L4+4
 110 007e 1269     		ldr	r2, [r2, #16]
 111 0080 1A61     		str	r2, [r3, #16]
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC1_PO_Msk);
 306:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 112              		.loc 1 306 0
 113 0082 BD46     		mov	sp, r7
 114 0084 02B0     		add	sp, sp, #8
 115              		@ sp needed for prologue
 116 0086 80BD     		pop	{r7, pc}
 117              	.L5:
 118              		.align	2
 119              	.L4:
 120 0088 00000000 		.word	PWMSP001_Handle0
 121 008c 00010440 		.word	1074004224
 122 0090 00000000 		.word	PWMSP001_Handle1
 123 0094 FFBFFFFF 		.word	-16385
 124              		.cfi_endproc
 125              	.LFE33:
 127              		.section	.text.PWMSP001_lInit,"ax",%progbits
 128              		.align	2
 129              		.global	PWMSP001_lInit
 130              		.code	16
 131              		.thumb_func
 133              	PWMSP001_lInit:
 134              	.LFB34:
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 308:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_1>>>*/
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes an instance of the app */
 310:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 135              		.loc 1 311 0
 136              		.cfi_startproc
 137 0000 B0B5     		push	{r4, r5, r7, lr}
 138              	.LCFI3:
 139              		.cfi_def_cfa_offset 16
 140              		.cfi_offset 4, -16
 141              		.cfi_offset 5, -12
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 0002 84B0     		sub	sp, sp, #16
 145              	.LCFI4:
 146              		.cfi_def_cfa_offset 32
 147 0004 00AF     		add	r7, sp, #0
 148              	.LCFI5:
 149              		.cfi_def_cfa_register 7
 150 0006 7860     		str	r0, [r7, #4]
 312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 151              		.loc 1 312 0
 152 0008 0123     		mov	r3, #1
 153 000a FB60     		str	r3, [r7, #12]
 313:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_1>>>*/
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 154              		.loc 1 317 0
 155 000c 7B68     		ldr	r3, [r7, #4]
 156 000e DB6B     		ldr	r3, [r3, #60]
 157 0010 1B78     		ldrb	r3, [r3]
 158 0012 002B     		cmp	r3, #0
 159 0014 00D0     		beq	.LCB118
 160 0016 56E1     		b	.L16	@long jump
 161              	.LCB118:
 162              	.L7:
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 163              		.loc 1 321 0
 164 0018 7B68     		ldr	r3, [r7, #4]
 165 001a 9B69     		ldr	r3, [r3, #24]
 166 001c 0722     		mov	r2, #7
 167 001e 1A61     		str	r2, [r3, #16]
 322:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_3>>>*/
 324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* If external stop trigger is setelected */
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 168              		.loc 1 325 0
 169 0020 7B68     		ldr	r3, [r7, #4]
 170 0022 DB7B     		ldrb	r3, [r3, #15]
 171 0024 012B     		cmp	r3, #1
 172 0026 25D1     		bne	.L9
 326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 173              		.loc 1 327 0
 174 0028 7B68     		ldr	r3, [r7, #4]
 175 002a 9B69     		ldr	r3, [r3, #24]
 176 002c 7A68     		ldr	r2, [r7, #4]
 177 002e 9269     		ldr	r2, [r2, #24]
 178 0030 1168     		ldr	r1, [r2]
 179 0032 A84A     		ldr	r2, .L17
 180 0034 0A40     		and	r2, r1
 181 0036 1A60     		str	r2, [r3]
 328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 182              		.loc 1 328 0
 183 0038 7B68     		ldr	r3, [r7, #4]
 184 003a 9B69     		ldr	r3, [r3, #24]
 185 003c 7A68     		ldr	r2, [r7, #4]
 186 003e 9269     		ldr	r2, [r2, #24]
 187 0040 5268     		ldr	r2, [r2, #4]
 188 0042 0C21     		mov	r1, #12
 189 0044 8A43     		bic	r2, r1
 190 0046 5A60     		str	r2, [r3, #4]
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 191              		.loc 1 329 0
 192 0048 7B68     		ldr	r3, [r7, #4]
 193 004a 9B69     		ldr	r3, [r3, #24]
 194 004c 7A68     		ldr	r2, [r7, #4]
 195 004e 9269     		ldr	r2, [r2, #24]
 196 0050 1168     		ldr	r1, [r2]
 197 0052 7868     		ldr	r0, [r7, #4]
 198 0054 2422     		mov	r2, #36
 199 0056 825C     		ldrb	r2, [r0, r2]
 200 0058 9004     		lsl	r0, r2, #18
 330:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 201              		.loc 1 330 0
 202 005a C022     		mov	r2, #192
 203 005c 1203     		lsl	r2, r2, #12
 204 005e 0240     		and	r2, r0
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 205              		.loc 1 329 0
 206 0060 0A43     		orr	r2, r1
 207 0062 1A60     		str	r2, [r3]
 331:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 208              		.loc 1 333 0
 209 0064 7B68     		ldr	r3, [r7, #4]
 210 0066 9B69     		ldr	r3, [r3, #24]
 211 0068 7A68     		ldr	r2, [r7, #4]
 212 006a 9269     		ldr	r2, [r2, #24]
 213 006c 5268     		ldr	r2, [r2, #4]
 214 006e 0821     		mov	r1, #8
 215 0070 0A43     		orr	r2, r1
 216 0072 5A60     		str	r2, [r3, #4]
 217              	.L9:
 334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kExtStopTrig == SET)*/
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_4>>>*/
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Trap configurations if trap is enabled */
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 218              		.loc 1 339 0
 219 0074 7B68     		ldr	r3, [r7, #4]
 220 0076 5B7C     		ldrb	r3, [r3, #17]
 221 0078 012B     		cmp	r3, #1
 222 007a 2AD1     		bne	.L10
 340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 223              		.loc 1 340 0 discriminator 1
 224 007c 7A68     		ldr	r2, [r7, #4]
 225 007e 2023     		mov	r3, #32
 226 0080 D35C     		ldrb	r3, [r2, r3]
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 227              		.loc 1 339 0 discriminator 1
 228 0082 012B     		cmp	r3, #1
 229 0084 25D0     		beq	.L10
 341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     )
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 230              		.loc 1 343 0
 231 0086 7B68     		ldr	r3, [r7, #4]
 232 0088 9B69     		ldr	r3, [r3, #24]
 233 008a 7A68     		ldr	r2, [r7, #4]
 234 008c 9269     		ldr	r2, [r2, #24]
 235 008e 1168     		ldr	r1, [r2]
 236 0090 914A     		ldr	r2, .L17+4
 237 0092 0A40     		and	r2, r1
 238 0094 1A60     		str	r2, [r3]
 344:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 239              		.loc 1 345 0
 240 0096 7B68     		ldr	r3, [r7, #4]
 241 0098 9B69     		ldr	r3, [r3, #24]
 242 009a 7A68     		ldr	r2, [r7, #4]
 243 009c 9269     		ldr	r2, [r2, #24]
 244 009e 5168     		ldr	r1, [r2, #4]
 245 00a0 8E4A     		ldr	r2, .L17+8
 246 00a2 0A40     		and	r2, r1
 247 00a4 5A60     		str	r2, [r3, #4]
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 248              		.loc 1 346 0
 249 00a6 7B68     		ldr	r3, [r7, #4]
 250 00a8 9B69     		ldr	r3, [r3, #24]
 251 00aa 7A68     		ldr	r2, [r7, #4]
 252 00ac 9269     		ldr	r2, [r2, #24]
 253 00ae 1168     		ldr	r1, [r2]
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 254              		.loc 1 347 0
 255 00b0 7A68     		ldr	r2, [r7, #4]
 256 00b2 1278     		ldrb	r2, [r2]
 257 00b4 1006     		lsl	r0, r2, #24
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 258              		.loc 1 348 0
 259 00b6 8022     		mov	r2, #128
 260 00b8 5204     		lsl	r2, r2, #17
 261 00ba 0240     		and	r2, r0
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 262              		.loc 1 346 0
 263 00bc 0A43     		orr	r2, r1
 264 00be 1A60     		str	r2, [r3]
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));
 351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 265              		.loc 1 352 0
 266 00c0 7B68     		ldr	r3, [r7, #4]
 267 00c2 9B69     		ldr	r3, [r3, #24]
 268 00c4 7A68     		ldr	r2, [r7, #4]
 269 00c6 9269     		ldr	r2, [r2, #24]
 270 00c8 5268     		ldr	r2, [r2, #4]
 271 00ca 8021     		mov	r1, #128
 272 00cc 8902     		lsl	r1, r1, #10
 273 00ce 0A43     		orr	r2, r1
 274 00d0 5A60     		str	r2, [r3, #4]
 275              	.L10:
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 276              		.loc 1 355 0
 277 00d2 7B68     		ldr	r3, [r7, #4]
 278 00d4 9B69     		ldr	r3, [r3, #24]
 279 00d6 7A68     		ldr	r2, [r7, #4]
 280 00d8 9269     		ldr	r2, [r2, #24]
 281 00da 5169     		ldr	r1, [r2, #20]
 282 00dc 804A     		ldr	r2, .L17+12
 283 00de 0A40     		and	r2, r1
 284 00e0 5A61     		str	r2, [r3, #20]
 356:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
 357:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
 358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 285              		.loc 1 359 0
 286 00e2 7B68     		ldr	r3, [r7, #4]
 287 00e4 9B69     		ldr	r3, [r3, #24]
 288 00e6 7A68     		ldr	r2, [r7, #4]
 289 00e8 9269     		ldr	r2, [r2, #24]
 290 00ea 5169     		ldr	r1, [r2, #20]
 291 00ec 7868     		ldr	r0, [r7, #4]
 292 00ee 3622     		mov	r2, #54
 293 00f0 825C     		ldrb	r2, [r0, r2]
 294 00f2 101C     		mov	r0, r2
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 295              		.loc 1 360 0
 296 00f4 0122     		mov	r2, #1
 297 00f6 1040     		and	r0, r2
 361:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 298              		.loc 1 363 0
 299 00f8 7C68     		ldr	r4, [r7, #4]
 300 00fa 3422     		mov	r2, #52
 301 00fc A25C     		ldrb	r2, [r4, r2]
 302 00fe 9402     		lsl	r4, r2, #10
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 303              		.loc 1 364 0
 304 0100 8022     		mov	r2, #128
 305 0102 D200     		lsl	r2, r2, #3
 306 0104 2240     		and	r2, r4
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 307              		.loc 1 362 0
 308 0106 1043     		orr	r0, r2
 309              		.loc 1 364 0
 310 0108 7C68     		ldr	r4, [r7, #4]
 311 010a 3522     		mov	r2, #53
 312 010c A25C     		ldrb	r2, [r4, r2]
 313 010e 1402     		lsl	r4, r2, #8
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 314              		.loc 1 365 0
 315 0110 C022     		mov	r2, #192
 316 0112 9200     		lsl	r2, r2, #2
 317 0114 2240     		and	r2, r4
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 318              		.loc 1 364 0
 319 0116 0243     		orr	r2, r0
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 320              		.loc 1 359 0
 321 0118 0A43     		orr	r2, r1
 322 011a 5A61     		str	r2, [r3, #20]
 366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * If timer concatenation is enabled during single shot mode lower timer 
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * should be free running
 369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      */
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 323              		.loc 1 370 0
 324 011c 7A68     		ldr	r2, [r7, #4]
 325 011e 2023     		mov	r3, #32
 326 0120 D35C     		ldrb	r3, [r2, r3]
 327 0122 012B     		cmp	r3, #1
 328 0124 0DD0     		beq	.L11
 371:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 329              		.loc 1 372 0
 330 0126 7B68     		ldr	r3, [r7, #4]
 331 0128 9B69     		ldr	r3, [r3, #24]
 332 012a 7A68     		ldr	r2, [r7, #4]
 333 012c 127B     		ldrb	r2, [r2, #12]
 334 012e 5100     		lsl	r1, r2, #1
 335 0130 0222     		mov	r2, #2
 336 0132 1140     		and	r1, r2
 337 0134 7A68     		ldr	r2, [r7, #4]
 338 0136 9269     		ldr	r2, [r2, #24]
 339 0138 5269     		ldr	r2, [r2, #20]
 340 013a 0220     		mov	r0, #2
 341 013c 8243     		bic	r2, r0
 342 013e 0A43     		orr	r2, r1
 343 0140 5A61     		str	r2, [r3, #20]
 344              	.L11:
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} 
 375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the dither mode setting*/
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 345              		.loc 1 377 0
 346 0142 7B68     		ldr	r3, [r7, #4]
 347 0144 9B69     		ldr	r3, [r3, #24]
 348 0146 7A68     		ldr	r2, [r7, #4]
 349 0148 9269     		ldr	r2, [r2, #24]
 350 014a 5169     		ldr	r1, [r2, #20]
 351 014c 7868     		ldr	r0, [r7, #4]
 352 014e 2122     		mov	r2, #33
 353 0150 825C     		ldrb	r2, [r0, r2]
 354 0152 5003     		lsl	r0, r2, #13
 378:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 355              		.loc 1 378 0
 356 0154 C022     		mov	r2, #192
 357 0156 D201     		lsl	r2, r2, #7
 358 0158 0240     		and	r2, r0
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 359              		.loc 1 377 0
 360 015a 0A43     		orr	r2, r1
 361 015c 5A61     		str	r2, [r3, #20]
 379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 362              		.loc 1 380 0
 363 015e 7B68     		ldr	r3, [r7, #4]
 364 0160 9B69     		ldr	r3, [r3, #24]
 365 0162 7A68     		ldr	r2, [r7, #4]
 366 0164 527B     		ldrb	r2, [r2, #13]
 367 0166 111C     		mov	r1, r2
 368 0168 0F22     		mov	r2, #15
 369 016a 1140     		and	r1, r2
 370 016c 7A68     		ldr	r2, [r7, #4]
 371 016e 9269     		ldr	r2, [r2, #24]
 372 0170 126A     		ldr	r2, [r2, #32]
 373 0172 0F20     		mov	r0, #15
 374 0174 8243     		bic	r2, r0
 375 0176 0A43     		orr	r2, r1
 376 0178 1A62     		str	r2, [r3, #32]
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 382:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Configure Trap mode as per GUI*/
 384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 377              		.loc 1 384 0
 378 017a 7A68     		ldr	r2, [r7, #4]
 379 017c 2023     		mov	r3, #32
 380 017e D35C     		ldrb	r3, [r2, r3]
 381 0180 012B     		cmp	r3, #1
 382 0182 2CD0     		beq	.L12
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_6>>>*/
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 383              		.loc 1 387 0
 384 0184 7B68     		ldr	r3, [r7, #4]
 385 0186 9B69     		ldr	r3, [r3, #24]
 386 0188 7A68     		ldr	r2, [r7, #4]
 387 018a 927C     		ldrb	r2, [r2, #18]
 388 018c 5105     		lsl	r1, r2, #21
 389 018e 8022     		mov	r2, #128
 390 0190 9203     		lsl	r2, r2, #14
 391 0192 1140     		and	r1, r2
 392 0194 7A68     		ldr	r2, [r7, #4]
 393 0196 9269     		ldr	r2, [r2, #24]
 394 0198 5069     		ldr	r0, [r2, #20]
 395 019a 524A     		ldr	r2, .L17+16
 396 019c 0240     		and	r2, r0
 397 019e 0A43     		orr	r2, r1
 398 01a0 5A61     		str	r2, [r3, #20]
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 399              		.loc 1 390 0
 400 01a2 7B68     		ldr	r3, [r7, #4]
 401 01a4 9B69     		ldr	r3, [r3, #24]
 402 01a6 7A68     		ldr	r2, [r7, #4]
 403 01a8 D27C     		ldrb	r2, [r2, #19]
 404 01aa 9105     		lsl	r1, r2, #22
 405 01ac 8022     		mov	r2, #128
 406 01ae D203     		lsl	r2, r2, #15
 407 01b0 1140     		and	r1, r2
 408 01b2 7A68     		ldr	r2, [r7, #4]
 409 01b4 9269     		ldr	r2, [r2, #24]
 410 01b6 5069     		ldr	r0, [r2, #20]
 411 01b8 4B4A     		ldr	r2, .L17+20
 412 01ba 0240     		and	r2, r0
 413 01bc 0A43     		orr	r2, r1
 414 01be 5A61     		str	r2, [r3, #20]
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 415              		.loc 1 393 0
 416 01c0 7B68     		ldr	r3, [r7, #4]
 417 01c2 9B69     		ldr	r3, [r3, #24]
 418 01c4 7A68     		ldr	r2, [r7, #4]
 419 01c6 527C     		ldrb	r2, [r2, #17]
 420 01c8 5104     		lsl	r1, r2, #17
 421 01ca 8022     		mov	r2, #128
 422 01cc 9202     		lsl	r2, r2, #10
 423 01ce 1140     		and	r1, r2
 424 01d0 7A68     		ldr	r2, [r7, #4]
 425 01d2 9269     		ldr	r2, [r2, #24]
 426 01d4 5069     		ldr	r0, [r2, #20]
 427 01d6 414A     		ldr	r2, .L17+8
 428 01d8 0240     		and	r2, r0
 429 01da 0A43     		orr	r2, r1
 430 01dc 5A61     		str	r2, [r3, #20]
 431              	.L12:
 394:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the prescalar divider and passive level of the o/p signal.*/
 397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 432              		.loc 1 397 0
 433 01de 7B68     		ldr	r3, [r7, #4]
 434 01e0 9B69     		ldr	r3, [r3, #24]
 435 01e2 7968     		ldr	r1, [r7, #4]
 436 01e4 2222     		mov	r2, #34
 437 01e6 8A5C     		ldrb	r2, [r1, r2]
 438 01e8 111C     		mov	r1, r2
 439 01ea 0F22     		mov	r2, #15
 440 01ec 1140     		and	r1, r2
 441 01ee 7A68     		ldr	r2, [r7, #4]
 442 01f0 9269     		ldr	r2, [r2, #24]
 443 01f2 526A     		ldr	r2, [r2, #36]
 444 01f4 0F20     		mov	r0, #15
 445 01f6 8243     		bic	r2, r0
 446 01f8 0A43     		orr	r2, r1
 447 01fa 5A62     		str	r2, [r3, #36]
 398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
 399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 448              		.loc 1 399 0
 449 01fc 7B68     		ldr	r3, [r7, #4]
 450 01fe 9B69     		ldr	r3, [r3, #24]
 451 0200 7A68     		ldr	r2, [r7, #4]
 452 0202 127C     		ldrb	r2, [r2, #16]
 453 0204 9A61     		str	r2, [r3, #24]
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_7>>>*/
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting period register's value*/
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 454              		.loc 1 403 0
 455 0206 7B68     		ldr	r3, [r7, #4]
 456 0208 9B69     		ldr	r3, [r3, #24]
 457 020a 7A68     		ldr	r2, [r7, #4]
 458 020c 926A     		ldr	r2, [r2, #40]
 459 020e 1204     		lsl	r2, r2, #16
 460 0210 120C     		lsr	r2, r2, #16
 461 0212 5A63     		str	r2, [r3, #52]
 404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting compare register's value*/
 405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 462              		.loc 1 405 0
 463 0214 7B68     		ldr	r3, [r7, #4]
 464 0216 9B69     		ldr	r3, [r3, #24]
 465 0218 7A68     		ldr	r2, [r7, #4]
 466 021a 9268     		ldr	r2, [r2, #8]
 467 021c 1204     		lsl	r2, r2, #16
 468 021e 120C     		lsr	r2, r2, #16
 469 0220 DA63     		str	r2, [r3, #60]
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 470              		.loc 1 406 0
 471 0222 7B68     		ldr	r3, [r7, #4]
 472 0224 9A69     		ldr	r2, [r3, #24]
 473 0226 7B68     		ldr	r3, [r7, #4]
 474 0228 9969     		ldr	r1, [r3, #24]
 475 022a B023     		mov	r3, #176
 476 022c CB58     		ldr	r3, [r1, r3]
 477 022e 2F49     		ldr	r1, .L17+24
 478 0230 1943     		orr	r1, r3
 479 0232 B023     		mov	r3, #176
 480 0234 D150     		str	r1, [r2, r3]
 407:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Applying register's settings for the second slice if timer concatenation
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * is set */
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 481              		.loc 1 410 0
 482 0236 7A68     		ldr	r2, [r7, #4]
 483 0238 2023     		mov	r3, #32
 484 023a D35C     		ldrb	r3, [r2, r3]
 485 023c 012B     		cmp	r3, #1
 486 023e 0FD1     		bne	.L13
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 487              		.loc 1 412 0
 488 0240 7B68     		ldr	r3, [r7, #4]
 489 0242 181C     		mov	r0, r3
 490 0244 FFF7FEFF 		bl	PWMSP001_lConfigureSecondSlice
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 491              		.loc 1 413 0
 492 0248 7B68     		ldr	r3, [r7, #4]
 493 024a DA69     		ldr	r2, [r3, #28]
 494 024c 7B68     		ldr	r3, [r7, #4]
 495 024e D969     		ldr	r1, [r3, #28]
 496 0250 A423     		mov	r3, #164
 497 0252 C958     		ldr	r1, [r1, r3]
 498 0254 7B68     		ldr	r3, [r7, #4]
 499 0256 1B6B     		ldr	r3, [r3, #48]
 500 0258 1943     		orr	r1, r3
 501 025a A423     		mov	r3, #164
 502 025c D150     		str	r1, [r2, r3]
 503 025e 0AE0     		b	.L14
 504              	.L13:
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 505              		.loc 1 418 0
 506 0260 7B68     		ldr	r3, [r7, #4]
 507 0262 9A69     		ldr	r2, [r3, #24]
 508 0264 7B68     		ldr	r3, [r7, #4]
 509 0266 9969     		ldr	r1, [r3, #24]
 510 0268 A423     		mov	r3, #164
 511 026a C958     		ldr	r1, [r1, r3]
 512 026c 7B68     		ldr	r3, [r7, #4]
 513 026e 1B6B     		ldr	r3, [r3, #48]
 514 0270 1943     		orr	r1, r3
 515 0272 A423     		mov	r3, #164
 516 0274 D150     		str	r1, [r2, r3]
 517              	.L14:
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request SW shadow transfer for period, compare, dither and prescalar level*/
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 518              		.loc 1 423 0
 519 0276 7B68     		ldr	r3, [r7, #4]
 520 0278 5B69     		ldr	r3, [r3, #20]
 521 027a 7A68     		ldr	r2, [r7, #4]
 522 027c 5269     		ldr	r2, [r2, #20]
 523 027e 1169     		ldr	r1, [r2, #16]
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 524              		.loc 1 424 0
 525 0280 7868     		ldr	r0, [r7, #4]
 526 0282 3722     		mov	r2, #55
 527 0284 825C     		ldrb	r2, [r0, r2]
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 528              		.loc 1 423 0
 529 0286 9200     		lsl	r2, r2, #2
 530 0288 0120     		mov	r0, #1
 531 028a 9040     		lsl	r0, r0, r2
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 532              		.loc 1 425 0
 533 028c 7C68     		ldr	r4, [r7, #4]
 534 028e 3722     		mov	r2, #55
 535 0290 A25C     		ldrb	r2, [r4, r2]
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 536              		.loc 1 424 0
 537 0292 9200     		lsl	r2, r2, #2
 538              		.loc 1 425 0
 539 0294 0132     		add	r2, r2, #1
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 540              		.loc 1 424 0
 541 0296 0124     		mov	r4, #1
 542 0298 251C     		mov	r5, r4
 543 029a 9540     		lsl	r5, r5, r2
 544 029c 2A1C     		mov	r2, r5
 545 029e 1043     		orr	r0, r2
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 546              		.loc 1 426 0
 547 02a0 7C68     		ldr	r4, [r7, #4]
 548 02a2 3722     		mov	r2, #55
 549 02a4 A25C     		ldrb	r2, [r4, r2]
 550 02a6 9200     		lsl	r2, r2, #2
 551 02a8 0232     		add	r2, r2, #2
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 552              		.loc 1 425 0
 553 02aa 0124     		mov	r4, #1
 554 02ac 251C     		mov	r5, r4
 555 02ae 9540     		lsl	r5, r5, r2
 556 02b0 2A1C     		mov	r2, r5
 557 02b2 0243     		orr	r2, r0
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 558              		.loc 1 423 0
 559 02b4 0A43     		orr	r2, r1
 560 02b6 1A61     		str	r2, [r3, #16]
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 561              		.loc 1 428 0
 562 02b8 0023     		mov	r3, #0
 563 02ba FB60     		str	r3, [r7, #12]
 429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 564              		.loc 1 429 0
 565 02bc 7B68     		ldr	r3, [r7, #4]
 566 02be DB6B     		ldr	r3, [r3, #60]
 567 02c0 0122     		mov	r2, #1
 568 02c2 1A70     		strb	r2, [r3]
 569 02c4 00E0     		b	.L8
 570              	.L16:
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 571              		.loc 1 319 0
 572 02c6 C046     		mov	r8, r8
 573              	.L8:
 430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 434:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 574              		.loc 1 436 0
 575 02c8 FB68     		ldr	r3, [r7, #12]
 437:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 576              		.loc 1 437 0
 577 02ca 181C     		mov	r0, r3
 578 02cc BD46     		mov	sp, r7
 579 02ce 04B0     		add	sp, sp, #16
 580              		@ sp needed for prologue
 581 02d0 B0BD     		pop	{r4, r5, r7, pc}
 582              	.L18:
 583 02d2 C046     		.align	2
 584              	.L17:
 585 02d4 FFFFF3E7 		.word	-403439617
 586 02d8 FFFFCF9E 		.word	-1630535681
 587 02dc FFFFFDFF 		.word	-131073
 588 02e0 F698FFFF 		.word	-26378
 589 02e4 FFFFDFFF 		.word	-2097153
 590 02e8 FFFFBFFF 		.word	-4194305
 591 02ec 0F0F0000 		.word	3855
 592              		.cfi_endproc
 593              	.LFE34:
 595              		.section	.text.PWMSP001_Deinit,"ax",%progbits
 596              		.align	2
 597              		.global	PWMSP001_Deinit
 598              		.code	16
 599              		.thumb_func
 601              	PWMSP001_Deinit:
 602              	.LFB35:
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_2>>>*/
 440:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function de-initializes the app */
 441:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
 442:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 603              		.loc 1 442 0
 604              		.cfi_startproc
 605 0000 90B5     		push	{r4, r7, lr}
 606              	.LCFI6:
 607              		.cfi_def_cfa_offset 12
 608              		.cfi_offset 4, -12
 609              		.cfi_offset 7, -8
 610              		.cfi_offset 14, -4
 611 0002 89B0     		sub	sp, sp, #36
 612              	.LCFI7:
 613              		.cfi_def_cfa_offset 48
 614 0004 00AF     		add	r7, sp, #0
 615              	.LCFI8:
 616              		.cfi_def_cfa_register 7
 617 0006 7860     		str	r0, [r7, #4]
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 618              		.loc 1 443 0
 619 0008 0123     		mov	r3, #1
 620 000a FB61     		str	r3, [r7, #28]
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp4;
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /*<<<DD_PWMSP001_API_2_1>>>*/
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 621              		.loc 1 450 0
 622 000c 7B68     		ldr	r3, [r7, #4]
 623 000e DB6B     		ldr	r3, [r3, #60]
 624 0010 1B78     		ldrb	r3, [r3]
 625 0012 002B     		cmp	r3, #0
 626 0014 00D1     		bne	.LCB530
 627 0016 91E0     		b	.L20	@long jump
 628              	.LCB530:
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_3>>>*/
 453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 629              		.loc 1 453 0
 630 0018 7B68     		ldr	r3, [r7, #4]
 631 001a 9B69     		ldr	r3, [r3, #24]
 632 001c 0722     		mov	r2, #7
 633 001e 1A61     		str	r2, [r3, #16]
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 634              		.loc 1 454 0
 635 0020 7B68     		ldr	r3, [r7, #4]
 636 0022 9A69     		ldr	r2, [r3, #24]
 637 0024 B023     		mov	r3, #176
 638 0026 4849     		ldr	r1, .L23
 639 0028 D150     		str	r1, [r2, r3]
 455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
 640              		.loc 1 455 0
 641 002a 7B68     		ldr	r3, [r7, #4]
 642 002c 9A69     		ldr	r2, [r3, #24]
 643 002e A423     		mov	r3, #164
 644 0030 0021     		mov	r1, #0
 645 0032 D150     		str	r1, [r2, r3]
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set IDLE mode for selected slice*/
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 646              		.loc 1 458 0
 647 0034 7B68     		ldr	r3, [r7, #4]
 648 0036 5B69     		ldr	r3, [r3, #20]
 649 0038 7A68     		ldr	r2, [r7, #4]
 650 003a 5269     		ldr	r2, [r2, #20]
 651 003c 9168     		ldr	r1, [r2, #8]
 459:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
 652              		.loc 1 459 0
 653 003e 7868     		ldr	r0, [r7, #4]
 654 0040 3722     		mov	r2, #55
 655 0042 825C     		ldrb	r2, [r0, r2]
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 656              		.loc 1 458 0
 657 0044 0120     		mov	r0, #1
 658 0046 041C     		mov	r4, r0
 659 0048 9440     		lsl	r4, r4, r2
 660 004a 221C     		mov	r2, r4
 661 004c 0A43     		orr	r2, r1
 662 004e C021     		mov	r1, #192
 663 0050 8900     		lsl	r1, r1, #2
 664 0052 0A43     		orr	r2, r1
 665 0054 9A60     		str	r2, [r3, #8]
 460:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 461:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Clear all the registers*/
 463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INS = 0x00U;
 666              		.loc 1 463 0
 667 0056 7B68     		ldr	r3, [r7, #4]
 668 0058 9B69     		ldr	r3, [r3, #24]
 669 005a 0022     		mov	r2, #0
 670 005c 1A60     		str	r2, [r3]
 464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CMC = 0x00U;
 671              		.loc 1 464 0
 672 005e 7B68     		ldr	r3, [r7, #4]
 673 0060 9B69     		ldr	r3, [r3, #24]
 674 0062 0022     		mov	r2, #0
 675 0064 5A60     		str	r2, [r3, #4]
 465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC = 0x00U;
 676              		.loc 1 465 0
 677 0066 7B68     		ldr	r3, [r7, #4]
 678 0068 9B69     		ldr	r3, [r3, #24]
 679 006a 0022     		mov	r2, #0
 680 006c 5A61     		str	r2, [r3, #20]
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSC = 0x00U;
 681              		.loc 1 466 0
 682 006e 7B68     		ldr	r3, [r7, #4]
 683 0070 9B69     		ldr	r3, [r3, #24]
 684 0072 0022     		mov	r2, #0
 685 0074 5A62     		str	r2, [r3, #36]
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = 0x00U;
 686              		.loc 1 467 0
 687 0076 7B68     		ldr	r3, [r7, #4]
 688 0078 9B69     		ldr	r3, [r3, #24]
 689 007a 0022     		mov	r2, #0
 690 007c 9A61     		str	r2, [r3, #24]
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->DITS = 0x00U;
 691              		.loc 1 468 0
 692 007e 7B68     		ldr	r3, [r7, #4]
 693 0080 9B69     		ldr	r3, [r3, #24]
 694 0082 0022     		mov	r2, #0
 695 0084 1A62     		str	r2, [r3, #32]
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = 0x00U;
 696              		.loc 1 469 0
 697 0086 7B68     		ldr	r3, [r7, #4]
 698 0088 9B69     		ldr	r3, [r3, #24]
 699 008a 0022     		mov	r2, #0
 700 008c DA63     		str	r2, [r3, #60]
 470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = 0x00U;
 701              		.loc 1 470 0
 702 008e 7B68     		ldr	r3, [r7, #4]
 703 0090 9B69     		ldr	r3, [r3, #24]
 704 0092 0022     		mov	r2, #0
 705 0094 5A63     		str	r2, [r3, #52]
 471:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_2>>>*/
 473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 706              		.loc 1 473 0
 707 0096 7A68     		ldr	r2, [r7, #4]
 708 0098 2023     		mov	r3, #32
 709 009a D35C     		ldrb	r3, [r2, r3]
 710 009c 012B     		cmp	r3, #1
 711 009e 47D1     		bne	.L21
 474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_2_3>>>*/
 476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 712              		.loc 1 476 0
 713 00a0 7B68     		ldr	r3, [r7, #4]
 714 00a2 DB69     		ldr	r3, [r3, #28]
 715 00a4 0722     		mov	r2, #7
 716 00a6 1A61     		str	r2, [r3, #16]
 477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 717              		.loc 1 477 0
 718 00a8 7B68     		ldr	r3, [r7, #4]
 719 00aa DA69     		ldr	r2, [r3, #28]
 720 00ac B023     		mov	r3, #176
 721 00ae 2649     		ldr	r1, .L23
 722 00b0 D150     		str	r1, [r2, r3]
 478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 723              		.loc 1 478 0
 724 00b2 7B68     		ldr	r3, [r7, #4]
 725 00b4 DA69     		ldr	r2, [r3, #28]
 726 00b6 A423     		mov	r3, #164
 727 00b8 0021     		mov	r1, #0
 728 00ba D150     		str	r1, [r2, r3]
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Set IDLE mode for selected slice*/
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
 729              		.loc 1 481 0
 730 00bc 8023     		mov	r3, #128
 731 00be 9B00     		lsl	r3, r3, #2
 732 00c0 BB61     		str	r3, [r7, #24]
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
 733              		.loc 1 482 0
 734 00c2 8023     		mov	r3, #128
 735 00c4 5B00     		lsl	r3, r3, #1
 736 00c6 7B61     		str	r3, [r7, #20]
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 737              		.loc 1 483 0
 738 00c8 7A68     		ldr	r2, [r7, #4]
 739 00ca 3823     		mov	r3, #56
 740 00cc D35C     		ldrb	r3, [r2, r3]
 741 00ce 3B61     		str	r3, [r7, #16]
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = Temp3 | Temp4;
 742              		.loc 1 484 0
 743 00d0 7A69     		ldr	r2, [r7, #20]
 744 00d2 BB69     		ldr	r3, [r7, #24]
 745 00d4 1343     		orr	r3, r2
 746 00d6 FB60     		str	r3, [r7, #12]
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 747              		.loc 1 485 0
 748 00d8 7B68     		ldr	r3, [r7, #4]
 749 00da 5B69     		ldr	r3, [r3, #20]
 750 00dc 7A68     		ldr	r2, [r7, #4]
 751 00de 5269     		ldr	r2, [r2, #20]
 752 00e0 9168     		ldr	r1, [r2, #8]
 753 00e2 3A69     		ldr	r2, [r7, #16]
 754 00e4 0120     		mov	r0, #1
 755 00e6 9040     		lsl	r0, r0, r2
 756 00e8 FA68     		ldr	r2, [r7, #12]
 757 00ea 0243     		orr	r2, r0
 758 00ec 0A43     		orr	r2, r1
 759 00ee 9A60     		str	r2, [r3, #8]
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*   Temp3 | Temp4 ); */
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Clear all the registers*/
 489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 760              		.loc 1 489 0
 761 00f0 7B68     		ldr	r3, [r7, #4]
 762 00f2 DB69     		ldr	r3, [r3, #28]
 763 00f4 0022     		mov	r2, #0
 764 00f6 1A60     		str	r2, [r3]
 490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 765              		.loc 1 490 0
 766 00f8 7B68     		ldr	r3, [r7, #4]
 767 00fa DB69     		ldr	r3, [r3, #28]
 768 00fc 0022     		mov	r2, #0
 769 00fe 5A60     		str	r2, [r3, #4]
 491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 770              		.loc 1 491 0
 771 0100 7B68     		ldr	r3, [r7, #4]
 772 0102 DB69     		ldr	r3, [r3, #28]
 773 0104 0022     		mov	r2, #0
 774 0106 5A61     		str	r2, [r3, #20]
 492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 775              		.loc 1 492 0
 776 0108 7B68     		ldr	r3, [r7, #4]
 777 010a DB69     		ldr	r3, [r3, #28]
 778 010c 0022     		mov	r2, #0
 779 010e 5A62     		str	r2, [r3, #36]
 493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 780              		.loc 1 493 0
 781 0110 7B68     		ldr	r3, [r7, #4]
 782 0112 DB69     		ldr	r3, [r3, #28]
 783 0114 0022     		mov	r2, #0
 784 0116 9A61     		str	r2, [r3, #24]
 494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 785              		.loc 1 494 0
 786 0118 7B68     		ldr	r3, [r7, #4]
 787 011a DB69     		ldr	r3, [r3, #28]
 788 011c 0022     		mov	r2, #0
 789 011e 1A62     		str	r2, [r3, #32]
 495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 790              		.loc 1 495 0
 791 0120 7B68     		ldr	r3, [r7, #4]
 792 0122 DB69     		ldr	r3, [r3, #28]
 793 0124 0022     		mov	r2, #0
 794 0126 DA63     		str	r2, [r3, #60]
 496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 795              		.loc 1 496 0
 796 0128 7B68     		ldr	r3, [r7, #4]
 797 012a DB69     		ldr	r3, [r3, #28]
 798 012c 0022     		mov	r2, #0
 799 012e 5A63     		str	r2, [r3, #52]
 800              	.L21:
 497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 498:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
 801              		.loc 1 499 0
 802 0130 7B68     		ldr	r3, [r7, #4]
 803 0132 DB6B     		ldr	r3, [r3, #60]
 804 0134 0022     		mov	r2, #0
 805 0136 1A70     		strb	r2, [r3]
 500:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 806              		.loc 1 501 0
 807 0138 0023     		mov	r3, #0
 808 013a FB61     		str	r3, [r7, #28]
 809              	.L20:
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 503:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 810              		.loc 1 508 0
 811 013c FB69     		ldr	r3, [r7, #28]
 509:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 812              		.loc 1 509 0
 813 013e 181C     		mov	r0, r3
 814 0140 BD46     		mov	sp, r7
 815 0142 09B0     		add	sp, sp, #36
 816              		@ sp needed for prologue
 817 0144 90BD     		pop	{r4, r7, pc}
 818              	.L24:
 819 0146 C046     		.align	2
 820              	.L23:
 821 0148 0F0F0000 		.word	3855
 822              		.cfi_endproc
 823              	.LFE35:
 825              		.section	.text.PWMSP001_Start,"ax",%progbits
 826              		.align	2
 827              		.global	PWMSP001_Start
 828              		.code	16
 829              		.thumb_func
 831              	PWMSP001_Start:
 832              	.LFB36:
 510:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_3>>>*/
 512:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function starts the app. 
 513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This needs to be called even if external start is configured.*/
 514:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 833              		.loc 1 515 0
 834              		.cfi_startproc
 835 0000 90B5     		push	{r4, r7, lr}
 836              	.LCFI9:
 837              		.cfi_def_cfa_offset 12
 838              		.cfi_offset 4, -12
 839              		.cfi_offset 7, -8
 840              		.cfi_offset 14, -4
 841 0002 85B0     		sub	sp, sp, #20
 842              	.LCFI10:
 843              		.cfi_def_cfa_offset 32
 844 0004 00AF     		add	r7, sp, #0
 845              	.LCFI11:
 846              		.cfi_def_cfa_register 7
 847 0006 7860     		str	r0, [r7, #4]
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 848              		.loc 1 516 0
 849 0008 0123     		mov	r3, #1
 850 000a FB60     		str	r3, [r7, #12]
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_1>>>*/
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 851              		.loc 1 521 0
 852 000c 7B68     		ldr	r3, [r7, #4]
 853 000e DB6B     		ldr	r3, [r3, #60]
 854 0010 1B78     		ldrb	r3, [r3]
 855 0012 012B     		cmp	r3, #1
 856 0014 05D0     		beq	.L26
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 857              		.loc 1 522 0 discriminator 1
 858 0016 7B68     		ldr	r3, [r7, #4]
 859 0018 DB6B     		ldr	r3, [r3, #60]
 860 001a 1B78     		ldrb	r3, [r3]
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 861              		.loc 1 521 0 discriminator 1
 862 001c 032B     		cmp	r3, #3
 863 001e 00D0     		beq	.LCB729
 864 0020 9FE0     		b	.L33	@long jump
 865              	.LCB729:
 866              	.L26:
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 867              		.loc 1 528 0
 868 0022 7B68     		ldr	r3, [r7, #4]
 869 0024 9A69     		ldr	r2, [r3, #24]
 870 0026 B023     		mov	r3, #176
 871 0028 5149     		ldr	r1, .L34
 872 002a D150     		str	r1, [r2, r3]
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_2>>>*/
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 873              		.loc 1 531 0
 874 002c 7B68     		ldr	r3, [r7, #4]
 875 002e 5B69     		ldr	r3, [r3, #20]
 876 0030 7A68     		ldr	r2, [r7, #4]
 877 0032 5269     		ldr	r2, [r2, #20]
 878 0034 D168     		ldr	r1, [r2, #12]
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->FirstSlice)) );
 879              		.loc 1 533 0
 880 0036 7868     		ldr	r0, [r7, #4]
 881 0038 3722     		mov	r2, #55
 882 003a 825C     		ldrb	r2, [r0, r2]
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 883              		.loc 1 532 0
 884 003c 0120     		mov	r0, #1
 885 003e 041C     		mov	r4, r0
 886 0040 9440     		lsl	r4, r4, r2
 887 0042 221C     		mov	r2, r4
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 888              		.loc 1 531 0
 889 0044 0A43     		orr	r2, r1
 890 0046 DA60     		str	r2, [r3, #12]
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 891              		.loc 1 534 0
 892 0048 7A68     		ldr	r2, [r7, #4]
 893 004a 2023     		mov	r3, #32
 894 004c D35C     		ldrb	r3, [r2, r3]
 895 004e 012B     		cmp	r3, #1
 896 0050 0DD1     		bne	.L28
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 897              		.loc 1 536 0
 898 0052 7B68     		ldr	r3, [r7, #4]
 899 0054 5B69     		ldr	r3, [r3, #20]
 900 0056 7A68     		ldr	r2, [r7, #4]
 901 0058 5269     		ldr	r2, [r2, #20]
 902 005a D168     		ldr	r1, [r2, #12]
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 538:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->SecondSlice));
 903              		.loc 1 538 0
 904 005c 7868     		ldr	r0, [r7, #4]
 905 005e 3822     		mov	r2, #56
 906 0060 825C     		ldrb	r2, [r0, r2]
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 907              		.loc 1 537 0
 908 0062 0120     		mov	r0, #1
 909 0064 041C     		mov	r4, r0
 910 0066 9440     		lsl	r4, r4, r2
 911 0068 221C     		mov	r2, r4
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 912              		.loc 1 536 0
 913 006a 0A43     		orr	r2, r1
 914 006c DA60     		str	r2, [r3, #12]
 915              	.L28:
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	
 541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set run bit of slices if external start is not configured*/
 542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 916              		.loc 1 542 0
 917 006e 7B68     		ldr	r3, [r7, #4]
 918 0070 9B7B     		ldrb	r3, [r3, #14]
 919 0072 002B     		cmp	r3, #0
 920 0074 15D1     		bne	.L29
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 921              		.loc 1 544 0
 922 0076 7B68     		ldr	r3, [r7, #4]
 923 0078 9B69     		ldr	r3, [r3, #24]
 924 007a 7A68     		ldr	r2, [r7, #4]
 925 007c 9269     		ldr	r2, [r2, #24]
 926 007e D268     		ldr	r2, [r2, #12]
 927 0080 0121     		mov	r1, #1
 928 0082 0A43     		orr	r2, r1
 929 0084 DA60     		str	r2, [r3, #12]
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 930              		.loc 1 545 0
 931 0086 7A68     		ldr	r2, [r7, #4]
 932 0088 2023     		mov	r3, #32
 933 008a D35C     		ldrb	r3, [r2, r3]
 934 008c 012B     		cmp	r3, #1
 935 008e 61D1     		bne	.L30
 546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 936              		.loc 1 547 0
 937 0090 7B68     		ldr	r3, [r7, #4]
 938 0092 DB69     		ldr	r3, [r3, #28]
 939 0094 7A68     		ldr	r2, [r7, #4]
 940 0096 D269     		ldr	r2, [r2, #28]
 941 0098 D268     		ldr	r2, [r2, #12]
 942 009a 0121     		mov	r1, #1
 943 009c 0A43     		orr	r2, r1
 944 009e DA60     		str	r2, [r3, #12]
 945 00a0 58E0     		b	.L30
 946              	.L29:
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_2>>>*/
 553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 947              		.loc 1 553 0
 948 00a2 7B68     		ldr	r3, [r7, #4]
 949 00a4 9B7B     		ldrb	r3, [r3, #14]
 950 00a6 012B     		cmp	r3, #1
 951 00a8 25D1     		bne	.L31
 554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 952              		.loc 1 555 0
 953 00aa 7B68     		ldr	r3, [r7, #4]
 954 00ac 9B69     		ldr	r3, [r3, #24]
 955 00ae 7A68     		ldr	r2, [r7, #4]
 956 00b0 9269     		ldr	r2, [r2, #24]
 957 00b2 1168     		ldr	r1, [r2]
 958 00b4 2F4A     		ldr	r2, .L34+4
 959 00b6 0A40     		and	r2, r1
 960 00b8 1A60     		str	r2, [r3]
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 961              		.loc 1 557 0
 962 00ba 7B68     		ldr	r3, [r7, #4]
 963 00bc 9B69     		ldr	r3, [r3, #24]
 964 00be 7A68     		ldr	r2, [r7, #4]
 965 00c0 9269     		ldr	r2, [r2, #24]
 966 00c2 5268     		ldr	r2, [r2, #4]
 967 00c4 0321     		mov	r1, #3
 968 00c6 8A43     		bic	r2, r1
 969 00c8 5A60     		str	r2, [r3, #4]
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 970              		.loc 1 558 0
 971 00ca 7B68     		ldr	r3, [r7, #4]
 972 00cc 9B69     		ldr	r3, [r3, #24]
 973 00ce 7A68     		ldr	r2, [r7, #4]
 974 00d0 9269     		ldr	r2, [r2, #24]
 975 00d2 1168     		ldr	r1, [r2]
 559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 976              		.loc 1 559 0
 977 00d4 7868     		ldr	r0, [r7, #4]
 978 00d6 2322     		mov	r2, #35
 979 00d8 825C     		ldrb	r2, [r0, r2]
 980 00da 1004     		lsl	r0, r2, #16
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 981              		.loc 1 560 0
 982 00dc C022     		mov	r2, #192
 983 00de 9202     		lsl	r2, r2, #10
 984 00e0 0240     		and	r2, r0
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 985              		.loc 1 558 0
 986 00e2 0A43     		orr	r2, r1
 987 00e4 1A60     		str	r2, [r3]
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 988              		.loc 1 562 0
 989 00e6 7B68     		ldr	r3, [r7, #4]
 990 00e8 9B69     		ldr	r3, [r3, #24]
 991 00ea 7A68     		ldr	r2, [r7, #4]
 992 00ec 9269     		ldr	r2, [r2, #24]
 993 00ee 5268     		ldr	r2, [r2, #4]
 994 00f0 0121     		mov	r1, #1
 995 00f2 0A43     		orr	r2, r1
 996 00f4 5A60     		str	r2, [r3, #4]
 997              	.L31:
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 998              		.loc 1 566 0
 999 00f6 7B68     		ldr	r3, [r7, #4]
 1000 00f8 9B7B     		ldrb	r3, [r3, #14]
 1001 00fa 012B     		cmp	r3, #1
 1002 00fc 2AD1     		bne	.L30
 567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1003              		.loc 1 567 0 discriminator 1
 1004 00fe 7A68     		ldr	r2, [r7, #4]
 1005 0100 2023     		mov	r3, #32
 1006 0102 D35C     		ldrb	r3, [r2, r3]
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 1007              		.loc 1 566 0 discriminator 1
 1008 0104 012B     		cmp	r3, #1
 1009 0106 25D1     		bne	.L30
 568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       )
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 1010              		.loc 1 570 0
 1011 0108 7B68     		ldr	r3, [r7, #4]
 1012 010a DB69     		ldr	r3, [r3, #28]
 1013 010c 7A68     		ldr	r2, [r7, #4]
 1014 010e D269     		ldr	r2, [r2, #28]
 1015 0110 1168     		ldr	r1, [r2]
 1016 0112 184A     		ldr	r2, .L34+4
 1017 0114 0A40     		and	r2, r1
 1018 0116 1A60     		str	r2, [r3]
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 1019              		.loc 1 571 0
 1020 0118 7B68     		ldr	r3, [r7, #4]
 1021 011a DB69     		ldr	r3, [r3, #28]
 1022 011c 7A68     		ldr	r2, [r7, #4]
 1023 011e D269     		ldr	r2, [r2, #28]
 1024 0120 5268     		ldr	r2, [r2, #4]
 1025 0122 0321     		mov	r1, #3
 1026 0124 8A43     		bic	r2, r1
 1027 0126 5A60     		str	r2, [r3, #4]
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1028              		.loc 1 572 0
 1029 0128 7B68     		ldr	r3, [r7, #4]
 1030 012a DB69     		ldr	r3, [r3, #28]
 1031 012c 7A68     		ldr	r2, [r7, #4]
 1032 012e D269     		ldr	r2, [r2, #28]
 1033 0130 1168     		ldr	r1, [r2]
 573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 1034              		.loc 1 573 0
 1035 0132 7868     		ldr	r0, [r7, #4]
 1036 0134 2322     		mov	r2, #35
 1037 0136 825C     		ldrb	r2, [r0, r2]
 1038 0138 1004     		lsl	r0, r2, #16
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
 1039              		.loc 1 574 0
 1040 013a C022     		mov	r2, #192
 1041 013c 9202     		lsl	r2, r2, #10
 1042 013e 0240     		and	r2, r0
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1043              		.loc 1 572 0
 1044 0140 0A43     		orr	r2, r1
 1045 0142 1A60     		str	r2, [r3]
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 1046              		.loc 1 576 0
 1047 0144 7B68     		ldr	r3, [r7, #4]
 1048 0146 DB69     		ldr	r3, [r3, #28]
 1049 0148 7A68     		ldr	r2, [r7, #4]
 1050 014a D269     		ldr	r2, [r2, #28]
 1051 014c 5268     		ldr	r2, [r2, #4]
 1052 014e 0121     		mov	r1, #1
 1053 0150 0A43     		orr	r2, r1
 1054 0152 5A60     		str	r2, [r3, #4]
 1055              	.L30:
 577:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == SET)*/
 579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 1056              		.loc 1 581 0
 1057 0154 7B68     		ldr	r3, [r7, #4]
 1058 0156 DB6B     		ldr	r3, [r3, #60]
 1059 0158 0222     		mov	r2, #2
 1060 015a 1A70     		strb	r2, [r3]
 582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1061              		.loc 1 582 0
 1062 015c 0023     		mov	r3, #0
 1063 015e FB60     		str	r3, [r7, #12]
 1064 0160 00E0     		b	.L27
 1065              	.L33:
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1066              		.loc 1 525 0
 1067 0162 C046     		mov	r8, r8
 1068              	.L27:
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1069              		.loc 1 584 0
 1070 0164 FB68     		ldr	r3, [r7, #12]
 585:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1071              		.loc 1 585 0
 1072 0166 181C     		mov	r0, r3
 1073 0168 BD46     		mov	sp, r7
 1074 016a 05B0     		add	sp, sp, #20
 1075              		@ sp needed for prologue
 1076 016c 90BD     		pop	{r4, r7, pc}
 1077              	.L35:
 1078 016e C046     		.align	2
 1079              	.L34:
 1080 0170 0F0F0000 		.word	3855
 1081 0174 FFFFFCF9 		.word	-100859905
 1082              		.cfi_endproc
 1083              	.LFE36:
 1085              		.section	.text.PWMSP001_Stop,"ax",%progbits
 1086              		.align	2
 1087              		.global	PWMSP001_Stop
 1088              		.code	16
 1089              		.thumb_func
 1091              	PWMSP001_Stop:
 1092              	.LFB37:
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_4>>>*/
 588:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function stops the app */
 589:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1093              		.loc 1 590 0
 1094              		.cfi_startproc
 1095 0000 80B5     		push	{r7, lr}
 1096              	.LCFI12:
 1097              		.cfi_def_cfa_offset 8
 1098              		.cfi_offset 7, -8
 1099              		.cfi_offset 14, -4
 1100 0002 86B0     		sub	sp, sp, #24
 1101              	.LCFI13:
 1102              		.cfi_def_cfa_offset 32
 1103 0004 00AF     		add	r7, sp, #0
 1104              	.LCFI14:
 1105              		.cfi_def_cfa_register 7
 1106 0006 7860     		str	r0, [r7, #4]
 591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1107              		.loc 1 591 0
 1108 0008 0123     		mov	r3, #1
 1109 000a 7B61     		str	r3, [r7, #20]
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_4_1>>>*/
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
 1110              		.loc 1 598 0
 1111 000c 7B68     		ldr	r3, [r7, #4]
 1112 000e DB6B     		ldr	r3, [r3, #60]
 1113 0010 1B78     		ldrb	r3, [r3]
 1114 0012 022B     		cmp	r3, #2
 1115 0014 39D1     		bne	.L41
 1116              	.L37:
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 1117              		.loc 1 604 0
 1118 0016 7A68     		ldr	r2, [r7, #4]
 1119 0018 3723     		mov	r3, #55
 1120 001a D35C     		ldrb	r3, [r2, r3]
 1121 001c 3B61     		str	r3, [r7, #16]
 605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1122              		.loc 1 605 0
 1123 001e 8023     		mov	r3, #128
 1124 0020 9B00     		lsl	r3, r3, #2
 1125 0022 FB60     		str	r3, [r7, #12]
 606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 1126              		.loc 1 606 0
 1127 0024 7B68     		ldr	r3, [r7, #4]
 1128 0026 9B69     		ldr	r3, [r3, #24]
 1129 0028 0722     		mov	r2, #7
 1130 002a 1A61     		str	r2, [r3, #16]
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 1131              		.loc 1 607 0
 1132 002c 7B68     		ldr	r3, [r7, #4]
 1133 002e 5B69     		ldr	r3, [r3, #20]
 1134 0030 7A68     		ldr	r2, [r7, #4]
 1135 0032 5269     		ldr	r2, [r2, #20]
 1136 0034 9168     		ldr	r1, [r2, #8]
 1137 0036 3A69     		ldr	r2, [r7, #16]
 1138 0038 0120     		mov	r0, #1
 1139 003a 9040     		lsl	r0, r0, r2
 1140 003c FA68     		ldr	r2, [r7, #12]
 1141 003e 0243     		orr	r2, r0
 1142 0040 0A43     		orr	r2, r1
 1143 0042 9A60     		str	r2, [r3, #8]
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1144              		.loc 1 609 0
 1145 0044 7A68     		ldr	r2, [r7, #4]
 1146 0046 2023     		mov	r3, #32
 1147 0048 D35C     		ldrb	r3, [r2, r3]
 1148 004a 012B     		cmp	r3, #1
 1149 004c 16D1     		bne	.L39
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 1150              		.loc 1 611 0
 1151 004e 7B68     		ldr	r3, [r7, #4]
 1152 0050 DB69     		ldr	r3, [r3, #28]
 1153 0052 0722     		mov	r2, #7
 1154 0054 1A61     		str	r2, [r3, #16]
 612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 1155              		.loc 1 612 0
 1156 0056 7A68     		ldr	r2, [r7, #4]
 1157 0058 3823     		mov	r3, #56
 1158 005a D35C     		ldrb	r3, [r2, r3]
 1159 005c 3B61     		str	r3, [r7, #16]
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1160              		.loc 1 613 0
 1161 005e 8023     		mov	r3, #128
 1162 0060 9B00     		lsl	r3, r3, #2
 1163 0062 FB60     		str	r3, [r7, #12]
 614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1164              		.loc 1 614 0
 1165 0064 7B68     		ldr	r3, [r7, #4]
 1166 0066 5B69     		ldr	r3, [r3, #20]
 1167 0068 7A68     		ldr	r2, [r7, #4]
 1168 006a 5269     		ldr	r2, [r2, #20]
 1169 006c 9168     		ldr	r1, [r2, #8]
 1170 006e 3A69     		ldr	r2, [r7, #16]
 1171 0070 0120     		mov	r0, #1
 1172 0072 9040     		lsl	r0, r0, r2
 1173 0074 FA68     		ldr	r2, [r7, #12]
 1174 0076 0243     		orr	r2, r0
 1175 0078 0A43     		orr	r2, r1
 1176 007a 9A60     		str	r2, [r3, #8]
 1177              	.L39:
 615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 1178              		.loc 1 617 0
 1179 007c 7B68     		ldr	r3, [r7, #4]
 1180 007e DB6B     		ldr	r3, [r3, #60]
 1181 0080 0322     		mov	r2, #3
 1182 0082 1A70     		strb	r2, [r3]
 618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1183              		.loc 1 618 0
 1184 0084 0023     		mov	r3, #0
 1185 0086 7B61     		str	r3, [r7, #20]
 1186 0088 00E0     		b	.L38
 1187              	.L41:
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1188              		.loc 1 600 0
 1189 008a C046     		mov	r8, r8
 1190              	.L38:
 619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 621:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1191              		.loc 1 626 0
 1192 008c 7B69     		ldr	r3, [r7, #20]
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1193              		.loc 1 627 0
 1194 008e 181C     		mov	r0, r3
 1195 0090 BD46     		mov	sp, r7
 1196 0092 06B0     		add	sp, sp, #24
 1197              		@ sp needed for prologue
 1198 0094 80BD     		pop	{r7, pc}
 1199              		.cfi_endproc
 1200              	.LFE37:
 1202 0096 C046     		.section	.text.PWMSP001_SetCompare,"ax",%progbits
 1203              		.align	2
 1204              		.global	PWMSP001_SetCompare
 1205              		.code	16
 1206              		.thumb_func
 1208              	PWMSP001_SetCompare:
 1209              	.LFB38:
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_5>>>*/
 630:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function changes the duty cycle of the PWM by changing the compare register value. */
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetCompare
 632:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 635:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 636:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1210              		.loc 1 636 0
 1211              		.cfi_startproc
 1212 0000 80B5     		push	{r7, lr}
 1213              	.LCFI15:
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 7, -8
 1216              		.cfi_offset 14, -4
 1217 0002 84B0     		sub	sp, sp, #16
 1218              	.LCFI16:
 1219              		.cfi_def_cfa_offset 24
 1220 0004 00AF     		add	r7, sp, #0
 1221              	.LCFI17:
 1222              		.cfi_def_cfa_register 7
 1223 0006 7860     		str	r0, [r7, #4]
 1224 0008 3960     		str	r1, [r7]
 637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1225              		.loc 1 637 0
 1226 000a 0123     		mov	r3, #1
 1227 000c FB60     		str	r3, [r7, #12]
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t period;
 639:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1228              		.loc 1 640 0
 1229 000e 7A68     		ldr	r2, [r7, #4]
 1230 0010 2023     		mov	r3, #32
 1231 0012 D35C     		ldrb	r3, [r2, r3]
 1232 0014 012B     		cmp	r3, #1
 1233 0016 09D1     		bne	.L43
 641:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 1234              		.loc 1 641 0
 1235 0018 7B68     		ldr	r3, [r7, #4]
 1236 001a DB69     		ldr	r3, [r3, #28]
 1237 001c 5B6B     		ldr	r3, [r3, #52]
 1238 001e 1A04     		lsl	r2, r3, #16
 1239 0020 7B68     		ldr	r3, [r7, #4]
 1240 0022 9B69     		ldr	r3, [r3, #24]
 1241 0024 5B6B     		ldr	r3, [r3, #52]
 1242 0026 1343     		orr	r3, r2
 1243 0028 BB60     		str	r3, [r7, #8]
 1244 002a 03E0     		b	.L44
 1245              	.L43:
 642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 643:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
 1246              		.loc 1 643 0
 1247 002c 7B68     		ldr	r3, [r7, #4]
 1248 002e 9B69     		ldr	r3, [r3, #24]
 1249 0030 5B6B     		ldr	r3, [r3, #52]
 1250 0032 BB60     		str	r3, [r7, #8]
 1251              	.L44:
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_1>>>*/
 646:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1252              		.loc 1 646 0
 1253 0034 7B68     		ldr	r3, [r7, #4]
 1254 0036 DB6B     		ldr	r3, [r3, #60]
 1255 0038 1B78     		ldrb	r3, [r3]
 1256 003a 002B     		cmp	r3, #0
 1257 003c 1CD0     		beq	.L45
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1258              		.loc 1 648 0
 1259 003e 7B68     		ldr	r3, [r7, #4]
 1260 0040 DA6A     		ldr	r2, [r3, #44]
 1261 0042 3B68     		ldr	r3, [r7]
 1262 0044 9A42     		cmp	r2, r3
 1263 0046 07D2     		bcs	.L46
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
 1264              		.loc 1 649 0 discriminator 1
 1265 0048 7A68     		ldr	r2, [r7, #4]
 1266 004a 2023     		mov	r3, #32
 1267 004c D35C     		ldrb	r3, [r2, r3]
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1268              		.loc 1 648 0 discriminator 1
 1269 004e 002B     		cmp	r3, #0
 1270 0050 02D1     		bne	.L46
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 651:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1271              		.loc 1 651 0
 1272 0052 0223     		mov	r3, #2
 1273 0054 FB60     		str	r3, [r7, #12]
 1274 0056 0FE0     		b	.L45
 1275              	.L46:
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*if compare value is greater or equal to the period value, output should be with 0% dutycycl
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  Since setting exact period value will create the spikes,we are adding 1 and setting to the regis
 657:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 1276              		.loc 1 657 0
 1277 0058 3A68     		ldr	r2, [r7]
 1278 005a BB68     		ldr	r3, [r7, #8]
 1279 005c 9A42     		cmp	r2, r3
 1280 005e 02D3     		bcc	.L47
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
 659:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 1281              		.loc 1 659 0
 1282 0060 BB68     		ldr	r3, [r7, #8]
 1283 0062 0133     		add	r3, r3, #1
 1284 0064 3B60     		str	r3, [r7]
 1285              	.L47:
 660:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
 661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Call function as per the configured mode */
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1286              		.loc 1 662 0
 1287 0066 7B68     		ldr	r3, [r7, #4]
 1288 0068 1B6C     		ldr	r3, [r3, #64]
 1289 006a 7968     		ldr	r1, [r7, #4]
 1290 006c 3A68     		ldr	r2, [r7]
 1291 006e 081C     		mov	r0, r1
 1292 0070 111C     		mov	r1, r2
 1293 0072 9847     		blx	r3
 663:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1294              		.loc 1 663 0
 1295 0074 0023     		mov	r3, #0
 1296 0076 FB60     		str	r3, [r7, #12]
 1297              	.L45:
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 665:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1298              		.loc 1 666 0
 1299 0078 FB68     		ldr	r3, [r7, #12]
 667:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1300              		.loc 1 667 0
 1301 007a 181C     		mov	r0, r3
 1302 007c BD46     		mov	sp, r7
 1303 007e 04B0     		add	sp, sp, #16
 1304              		@ sp needed for prologue
 1305 0080 80BD     		pop	{r7, pc}
 1306              		.cfi_endproc
 1307              	.LFE38:
 1309 0082 C046     		.section	.text.PWMSP001_lSetCompareEdgeAlign,"ax",%progbits
 1310              		.align	2
 1311              		.global	PWMSP001_lSetCompareEdgeAlign
 1312              		.code	16
 1313              		.thumb_func
 1315              	PWMSP001_lSetCompareEdgeAlign:
 1316              	.LFB39:
 668:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 669:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode.
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 673:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 676:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 677:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 678:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1317              		.loc 1 678 0
 1318              		.cfi_startproc
 1319 0000 90B5     		push	{r4, r7, lr}
 1320              	.LCFI18:
 1321              		.cfi_def_cfa_offset 12
 1322              		.cfi_offset 4, -12
 1323              		.cfi_offset 7, -8
 1324              		.cfi_offset 14, -4
 1325 0002 87B0     		sub	sp, sp, #28
 1326              	.LCFI19:
 1327              		.cfi_def_cfa_offset 40
 1328 0004 00AF     		add	r7, sp, #0
 1329              	.LCFI20:
 1330              		.cfi_def_cfa_register 7
 1331 0006 7860     		str	r0, [r7, #4]
 1332 0008 3960     		str	r1, [r7]
 679:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 680:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 681:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1333              		.loc 1 681 0
 1334 000a 7B68     		ldr	r3, [r7, #4]
 1335 000c 7B61     		str	r3, [r7, #20]
 682:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1336              		.loc 1 682 0
 1337 000e 7B69     		ldr	r3, [r7, #20]
 1338 0010 9B69     		ldr	r3, [r3, #24]
 1339 0012 3A68     		ldr	r2, [r7]
 1340 0014 1204     		lsl	r2, r2, #16
 1341 0016 120C     		lsr	r2, r2, #16
 1342 0018 DA63     		str	r2, [r3, #60]
 683:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 684:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 685:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 1343              		.loc 1 685 0
 1344 001a 7A69     		ldr	r2, [r7, #20]
 1345 001c 3723     		mov	r3, #55
 1346 001e D35C     		ldrb	r3, [r2, r3]
 1347 0020 9B00     		lsl	r3, r3, #2
 1348 0022 3B61     		str	r3, [r7, #16]
 686:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 1349              		.loc 1 686 0
 1350 0024 3B69     		ldr	r3, [r7, #16]
 1351 0026 FB60     		str	r3, [r7, #12]
 687:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1352              		.loc 1 687 0
 1353 0028 7B69     		ldr	r3, [r7, #20]
 1354 002a 5B69     		ldr	r3, [r3, #20]
 1355 002c 7A69     		ldr	r2, [r7, #20]
 1356 002e 5269     		ldr	r2, [r2, #20]
 1357 0030 1169     		ldr	r1, [r2, #16]
 1358 0032 FA68     		ldr	r2, [r7, #12]
 1359 0034 0120     		mov	r0, #1
 1360 0036 041C     		mov	r4, r0
 1361 0038 9440     		lsl	r4, r4, r2
 1362 003a 221C     		mov	r2, r4
 1363 003c 0A43     		orr	r2, r1
 1364 003e 1A61     		str	r2, [r3, #16]
 688:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1365              		.loc 1 688 0
 1366 0040 BD46     		mov	sp, r7
 1367 0042 07B0     		add	sp, sp, #28
 1368              		@ sp needed for prologue
 1369 0044 90BD     		pop	{r4, r7, pc}
 1370              		.cfi_endproc
 1371              	.LFE39:
 1373              		.global	__aeabi_uidivmod
 1374              		.global	__aeabi_uidiv
 1375 0046 C046     		.section	.text.PWMSP001_lSetCompareEdgeAlignTimerConcat,"ax",%progbits
 1376              		.align	2
 1377              		.global	PWMSP001_lSetCompareEdgeAlignTimerConcat
 1378              		.code	16
 1379              		.thumb_func
 1381              	PWMSP001_lSetCompareEdgeAlignTimerConcat:
 1382              	.LFB40:
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 690:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 691:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode.
 693:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 694:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 695:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 697:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 698:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1383              		.loc 1 699 0
 1384              		.cfi_startproc
 1385 0000 B0B5     		push	{r4, r5, r7, lr}
 1386              	.LCFI21:
 1387              		.cfi_def_cfa_offset 16
 1388              		.cfi_offset 4, -16
 1389              		.cfi_offset 5, -12
 1390              		.cfi_offset 7, -8
 1391              		.cfi_offset 14, -4
 1392 0002 88B0     		sub	sp, sp, #32
 1393              	.LCFI22:
 1394              		.cfi_def_cfa_offset 48
 1395 0004 00AF     		add	r7, sp, #0
 1396              	.LCFI23:
 1397              		.cfi_def_cfa_register 7
 1398 0006 7860     		str	r0, [r7, #4]
 1399 0008 3960     		str	r1, [r7]
 700:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = 0x00U;
 1400              		.loc 1 700 0
 1401 000a 0023     		mov	r3, #0
 1402 000c FB61     		str	r3, [r7, #28]
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = 0x00U;
 1403              		.loc 1 701 0
 1404 000e 0023     		mov	r3, #0
 1405 0010 BB61     		str	r3, [r7, #24]
 702:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1406              		.loc 1 704 0
 1407 0012 7B68     		ldr	r3, [r7, #4]
 1408 0014 7B61     		str	r3, [r7, #20]
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /**
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * In case of timer concatenation, compare register value is divided by
 707:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * period register value of the first slice. Remainder is written in
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * compare register of first slice and quotient is written in compare
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * register of second slice.
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * This is done to achieve compare register value of first slice
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * to be less than period register value.
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    */
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 714:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1409              		.loc 1 714 0
 1410 0016 7B69     		ldr	r3, [r7, #20]
 1411 0018 9B69     		ldr	r3, [r3, #24]
 1412 001a 5B6B     		ldr	r3, [r3, #52]
 1413 001c 9BB2     		uxth	r3, r3
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 1414              		.loc 1 713 0
 1415 001e 3A68     		ldr	r2, [r7]
 1416 0020 101C     		mov	r0, r2
 1417 0022 191C     		mov	r1, r3
 1418 0024 FFF7FEFF 		bl	__aeabi_uidivmod
 1419 0028 0B1C     		mov	r3, r1
 1420 002a FB61     		str	r3, [r7, #28]
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 716:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1421              		.loc 1 716 0
 1422 002c 7B69     		ldr	r3, [r7, #20]
 1423 002e 9B69     		ldr	r3, [r3, #24]
 1424 0030 5B6B     		ldr	r3, [r3, #52]
 1425 0032 9BB2     		uxth	r3, r3
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 1426              		.loc 1 715 0
 1427 0034 3868     		ldr	r0, [r7]
 1428 0036 191C     		mov	r1, r3
 1429 0038 FFF7FEFF 		bl	__aeabi_uidiv
 1430 003c 031C     		mov	r3, r0
 1431 003e BB61     		str	r3, [r7, #24]
 717:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 718:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 1432              		.loc 1 718 0
 1433 0040 7B69     		ldr	r3, [r7, #20]
 1434 0042 9B69     		ldr	r3, [r3, #24]
 1435 0044 FA69     		ldr	r2, [r7, #28]
 1436 0046 1204     		lsl	r2, r2, #16
 1437 0048 120C     		lsr	r2, r2, #16
 1438 004a DA63     		str	r2, [r3, #60]
 719:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 1439              		.loc 1 719 0
 1440 004c 7B69     		ldr	r3, [r7, #20]
 1441 004e DB69     		ldr	r3, [r3, #28]
 1442 0050 BA69     		ldr	r2, [r7, #24]
 1443 0052 1204     		lsl	r2, r2, #16
 1444 0054 120C     		lsr	r2, r2, #16
 1445 0056 DA63     		str	r2, [r3, #60]
 720:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1446              		.loc 1 721 0
 1447 0058 7A69     		ldr	r2, [r7, #20]
 1448 005a 3823     		mov	r3, #56
 1449 005c D35C     		ldrb	r3, [r2, r3]
 1450 005e 9B00     		lsl	r3, r3, #2
 1451 0060 3B61     		str	r3, [r7, #16]
 722:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1452              		.loc 1 722 0
 1453 0062 7A69     		ldr	r2, [r7, #20]
 1454 0064 3723     		mov	r3, #55
 1455 0066 D35C     		ldrb	r3, [r2, r3]
 1456 0068 9B00     		lsl	r3, r3, #2
 1457 006a FB60     		str	r3, [r7, #12]
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Te
 1458              		.loc 1 723 0
 1459 006c 7B69     		ldr	r3, [r7, #20]
 1460 006e 5B69     		ldr	r3, [r3, #20]
 1461 0070 7A69     		ldr	r2, [r7, #20]
 1462 0072 5269     		ldr	r2, [r2, #20]
 1463 0074 1169     		ldr	r1, [r2, #16]
 1464 0076 FA68     		ldr	r2, [r7, #12]
 1465 0078 0120     		mov	r0, #1
 1466 007a 9040     		lsl	r0, r0, r2
 1467 007c 3A69     		ldr	r2, [r7, #16]
 1468 007e 0124     		mov	r4, #1
 1469 0080 251C     		mov	r5, r4
 1470 0082 9540     		lsl	r5, r5, r2
 1471 0084 2A1C     		mov	r2, r5
 1472 0086 0243     		orr	r2, r0
 1473 0088 0A43     		orr	r2, r1
 1474 008a 1A61     		str	r2, [r3, #16]
 724:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1475              		.loc 1 724 0
 1476 008c BD46     		mov	sp, r7
 1477 008e 08B0     		add	sp, sp, #32
 1478              		@ sp needed for prologue
 1479 0090 B0BD     		pop	{r4, r5, r7, pc}
 1480              		.cfi_endproc
 1481              	.LFE40:
 1483 0092 C046     		.section	.text.PWMSP001_lSetCompareCenterAlign,"ax",%progbits
 1484              		.align	2
 1485              		.global	PWMSP001_lSetCompareCenterAlign
 1486              		.code	16
 1487              		.thumb_func
 1489              	PWMSP001_lSetCompareCenterAlign:
 1490              	.LFB41:
 725:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 726:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 727:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 728:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode.
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 730:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 731:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 733:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 734:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 735:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1491              		.loc 1 735 0
 1492              		.cfi_startproc
 1493 0000 90B5     		push	{r4, r7, lr}
 1494              	.LCFI24:
 1495              		.cfi_def_cfa_offset 12
 1496              		.cfi_offset 4, -12
 1497              		.cfi_offset 7, -8
 1498              		.cfi_offset 14, -4
 1499 0002 85B0     		sub	sp, sp, #20
 1500              	.LCFI25:
 1501              		.cfi_def_cfa_offset 32
 1502 0004 00AF     		add	r7, sp, #0
 1503              	.LCFI26:
 1504              		.cfi_def_cfa_register 7
 1505 0006 7860     		str	r0, [r7, #4]
 1506 0008 3960     		str	r1, [r7]
 736:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 737:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_3>>>*/
 738:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1507              		.loc 1 738 0
 1508 000a 7B68     		ldr	r3, [r7, #4]
 1509 000c FB60     		str	r3, [r7, #12]
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1510              		.loc 1 739 0
 1511 000e FB68     		ldr	r3, [r7, #12]
 1512 0010 9B69     		ldr	r3, [r3, #24]
 1513 0012 3A68     		ldr	r2, [r7]
 1514 0014 1204     		lsl	r2, r2, #16
 1515 0016 120C     		lsr	r2, r2, #16
 1516 0018 DA63     		str	r2, [r3, #60]
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 742:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 1517              		.loc 1 742 0
 1518 001a FA68     		ldr	r2, [r7, #12]
 1519 001c 3723     		mov	r3, #55
 1520 001e D35C     		ldrb	r3, [r2, r3]
 1521 0020 9B00     		lsl	r3, r3, #2
 1522 0022 BB60     		str	r3, [r7, #8]
 743:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1523              		.loc 1 743 0
 1524 0024 FB68     		ldr	r3, [r7, #12]
 1525 0026 5B69     		ldr	r3, [r3, #20]
 1526 0028 FA68     		ldr	r2, [r7, #12]
 1527 002a 5269     		ldr	r2, [r2, #20]
 1528 002c 1169     		ldr	r1, [r2, #16]
 1529 002e BA68     		ldr	r2, [r7, #8]
 1530 0030 0120     		mov	r0, #1
 1531 0032 041C     		mov	r4, r0
 1532 0034 9440     		lsl	r4, r4, r2
 1533 0036 221C     		mov	r2, r4
 1534 0038 0A43     		orr	r2, r1
 1535 003a 1A61     		str	r2, [r3, #16]
 744:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1536              		.loc 1 744 0
 1537 003c BD46     		mov	sp, r7
 1538 003e 05B0     		add	sp, sp, #20
 1539              		@ sp needed for prologue
 1540 0040 90BD     		pop	{r4, r7, pc}
 1541              		.cfi_endproc
 1542              	.LFE41:
 1544              		.global	__aeabi_fcmpgt
 1545              		.global	__aeabi_fcmplt
 1546 0042 C046     		.section	.text.PWMSP001_SetDutyCycle,"ax",%progbits
 1547              		.align	2
 1548              		.global	PWMSP001_SetDutyCycle
 1549              		.code	16
 1550              		.thumb_func
 1552              	PWMSP001_SetDutyCycle:
 1553              	.LFB42:
 745:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 748:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 749:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 750:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetDutyCycle
 752:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 753:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 754:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 755:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 756:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1554              		.loc 1 756 0
 1555              		.cfi_startproc
 1556 0000 80B5     		push	{r7, lr}
 1557              	.LCFI27:
 1558              		.cfi_def_cfa_offset 8
 1559              		.cfi_offset 7, -8
 1560              		.cfi_offset 14, -4
 1561 0002 84B0     		sub	sp, sp, #16
 1562              	.LCFI28:
 1563              		.cfi_def_cfa_offset 24
 1564 0004 00AF     		add	r7, sp, #0
 1565              	.LCFI29:
 1566              		.cfi_def_cfa_register 7
 1567 0006 7860     		str	r0, [r7, #4]
 1568 0008 3960     		str	r1, [r7]
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1569              		.loc 1 757 0
 1570 000a 0123     		mov	r3, #1
 1571 000c FB60     		str	r3, [r7, #12]
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1572              		.loc 1 759 0
 1573 000e 7B68     		ldr	r3, [r7, #4]
 1574 0010 DB6B     		ldr	r3, [r3, #60]
 1575 0012 1B78     		ldrb	r3, [r3]
 1576 0014 002B     		cmp	r3, #0
 1577 0016 19D0     		beq	.L53
 760:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 761:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 1578              		.loc 1 761 0
 1579 0018 3868     		ldr	r0, [r7]
 1580 001a 0F49     		ldr	r1, .L59
 1581 001c FFF7FEFF 		bl	__aeabi_fcmpgt
 1582 0020 031C     		mov	r3, r0
 1583 0022 002B     		cmp	r3, #0
 1584 0024 06D1     		bne	.L54
 1585              		.loc 1 761 0 is_stmt 0 discriminator 1
 1586 0026 3868     		ldr	r0, [r7]
 1587 0028 0021     		mov	r1, #0
 1588 002a FFF7FEFF 		bl	__aeabi_fcmplt
 1589 002e 031C     		mov	r3, r0
 1590 0030 002B     		cmp	r3, #0
 1591 0032 02D0     		beq	.L58
 1592              	.L54:
 762:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 763:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1593              		.loc 1 763 0 is_stmt 1
 1594 0034 0223     		mov	r3, #2
 1595 0036 FB60     		str	r3, [r7, #12]
 1596 0038 08E0     		b	.L53
 1597              	.L58:
 764:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 765:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 766:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 767:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Call the function as per configured mode */
 768:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 1598              		.loc 1 768 0
 1599 003a 7B68     		ldr	r3, [r7, #4]
 1600 003c 5B6C     		ldr	r3, [r3, #68]
 1601 003e 7968     		ldr	r1, [r7, #4]
 1602 0040 3A68     		ldr	r2, [r7]
 1603 0042 081C     		mov	r0, r1
 1604 0044 111C     		add	r1, r2, #0
 1605 0046 9847     		blx	r3
 769:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1606              		.loc 1 769 0
 1607 0048 0023     		mov	r3, #0
 1608 004a FB60     		str	r3, [r7, #12]
 1609              	.L53:
 770:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 771:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 772:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 1610              		.loc 1 772 0
 1611 004c FB68     		ldr	r3, [r7, #12]
 773:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1612              		.loc 1 773 0
 1613 004e 181C     		mov	r0, r3
 1614 0050 BD46     		mov	sp, r7
 1615 0052 04B0     		add	sp, sp, #16
 1616              		@ sp needed for prologue
 1617 0054 80BD     		pop	{r7, pc}
 1618              	.L60:
 1619 0056 C046     		.align	2
 1620              	.L59:
 1621 0058 0000C842 		.word	1120403456
 1622              		.cfi_endproc
 1623              	.LFE42:
 1625              		.global	__aeabi_fsub
 1626              		.global	__aeabi_fdiv
 1627              		.global	__aeabi_ui2f
 1628              		.global	__aeabi_fmul
 1629              		.global	__aeabi_f2uiz
 1630              		.section	.text.PWMSP001_lSetDutyEdgeAlign,"ax",%progbits
 1631              		.align	2
 1632              		.global	PWMSP001_lSetDutyEdgeAlign
 1633              		.code	16
 1634              		.thumb_func
 1636              	PWMSP001_lSetDutyEdgeAlign:
 1637              	.LFB43:
 774:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 776:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode
 778:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 779:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 780:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 781:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 782:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1638              		.loc 1 784 0
 1639              		.cfi_startproc
 1640 0000 90B5     		push	{r4, r7, lr}
 1641              	.LCFI30:
 1642              		.cfi_def_cfa_offset 12
 1643              		.cfi_offset 4, -12
 1644              		.cfi_offset 7, -8
 1645              		.cfi_offset 14, -4
 1646 0002 89B0     		sub	sp, sp, #36
 1647              	.LCFI31:
 1648              		.cfi_def_cfa_offset 48
 1649 0004 00AF     		add	r7, sp, #0
 1650              	.LCFI32:
 1651              		.cfi_def_cfa_register 7
 1652 0006 7860     		str	r0, [r7, #4]
 1653 0008 3960     		str	r1, [r7]
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1654              		.loc 1 785 0
 1655 000a 0023     		mov	r3, #0
 1656 000c FB61     		str	r3, [r7, #28]
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 787:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 788:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1657              		.loc 1 788 0
 1658 000e 7B68     		ldr	r3, [r7, #4]
 1659 0010 BB61     		str	r3, [r7, #24]
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1660              		.loc 1 789 0
 1661 0012 3B68     		ldr	r3, [r7]
 1662 0014 7B61     		str	r3, [r7, #20]
 790:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 791:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_3>>>*/
 792:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 793:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1663              		.loc 1 793 0
 1664 0016 1C48     		ldr	r0, .L62
 1665 0018 7969     		ldr	r1, [r7, #20]
 1666 001a FFF7FEFF 		bl	__aeabi_fsub
 1667 001e 031C     		add	r3, r0, #0
 1668 0020 181C     		add	r0, r3, #0
 1669 0022 1949     		ldr	r1, .L62
 1670 0024 FFF7FEFF 		bl	__aeabi_fdiv
 1671 0028 031C     		add	r3, r0, #0
 1672 002a 7B61     		str	r3, [r7, #20]
 794:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 1673              		.loc 1 794 0
 1674 002c BB69     		ldr	r3, [r7, #24]
 1675 002e 9B69     		ldr	r3, [r3, #24]
 1676 0030 5B6B     		ldr	r3, [r3, #52]
 1677 0032 0133     		add	r3, r3, #1
 1678 0034 181C     		mov	r0, r3
 1679 0036 FFF7FEFF 		bl	__aeabi_ui2f
 1680 003a 031C     		add	r3, r0, #0
 1681 003c 3B61     		str	r3, [r7, #16]
 795:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1682              		.loc 1 795 0
 1683 003e 3869     		ldr	r0, [r7, #16]
 1684 0040 7969     		ldr	r1, [r7, #20]
 1685 0042 FFF7FEFF 		bl	__aeabi_fmul
 1686 0046 031C     		add	r3, r0, #0
 1687 0048 181C     		add	r0, r3, #0
 1688 004a FFF7FEFF 		bl	__aeabi_f2uiz
 1689 004e 031C     		mov	r3, r0
 1690 0050 FB61     		str	r3, [r7, #28]
 796:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 1691              		.loc 1 796 0
 1692 0052 BB69     		ldr	r3, [r7, #24]
 1693 0054 9B69     		ldr	r3, [r3, #24]
 1694 0056 FA69     		ldr	r2, [r7, #28]
 1695 0058 1204     		lsl	r2, r2, #16
 1696 005a 120C     		lsr	r2, r2, #16
 1697 005c DA63     		str	r2, [r3, #60]
 797:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 798:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Shadow transfer */
 799:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 1698              		.loc 1 799 0
 1699 005e BA69     		ldr	r2, [r7, #24]
 1700 0060 3723     		mov	r3, #55
 1701 0062 D35C     		ldrb	r3, [r2, r3]
 1702 0064 9B00     		lsl	r3, r3, #2
 1703 0066 FB60     		str	r3, [r7, #12]
 800:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1704              		.loc 1 800 0
 1705 0068 BB69     		ldr	r3, [r7, #24]
 1706 006a 5B69     		ldr	r3, [r3, #20]
 1707 006c BA69     		ldr	r2, [r7, #24]
 1708 006e 5269     		ldr	r2, [r2, #20]
 1709 0070 1169     		ldr	r1, [r2, #16]
 1710 0072 FA68     		ldr	r2, [r7, #12]
 1711 0074 0120     		mov	r0, #1
 1712 0076 041C     		mov	r4, r0
 1713 0078 9440     		lsl	r4, r4, r2
 1714 007a 221C     		mov	r2, r4
 1715 007c 0A43     		orr	r2, r1
 1716 007e 1A61     		str	r2, [r3, #16]
 801:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Update dynamic handle */
 802:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1717              		.loc 1 802 0
 1718 0080 BD46     		mov	sp, r7
 1719 0082 09B0     		add	sp, sp, #36
 1720              		@ sp needed for prologue
 1721 0084 90BD     		pop	{r4, r7, pc}
 1722              	.L63:
 1723 0086 C046     		.align	2
 1724              	.L62:
 1725 0088 0000C842 		.word	1120403456
 1726              		.cfi_endproc
 1727              	.LFE43:
 1729              		.section	.text.PWMSP001_lSetDutyEdgeAlignTimerConcat,"ax",%progbits
 1730              		.align	2
 1731              		.global	PWMSP001_lSetDutyEdgeAlignTimerConcat
 1732              		.code	16
 1733              		.thumb_func
 1735              	PWMSP001_lSetDutyEdgeAlignTimerConcat:
 1736              	.LFB44:
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 804:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 806:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 808:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 809:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 810:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 811:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 812:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 813:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1737              		.loc 1 813 0
 1738              		.cfi_startproc
 1739 0000 B0B5     		push	{r4, r5, r7, lr}
 1740              	.LCFI33:
 1741              		.cfi_def_cfa_offset 16
 1742              		.cfi_offset 4, -16
 1743              		.cfi_offset 5, -12
 1744              		.cfi_offset 7, -8
 1745              		.cfi_offset 14, -4
 1746 0002 8AB0     		sub	sp, sp, #40
 1747              	.LCFI34:
 1748              		.cfi_def_cfa_offset 56
 1749 0004 00AF     		add	r7, sp, #0
 1750              	.LCFI35:
 1751              		.cfi_def_cfa_register 7
 1752 0006 7860     		str	r0, [r7, #4]
 1753 0008 3960     		str	r1, [r7]
 814:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Compare = (uint32_t)0;
 1754              		.loc 1 814 0
 1755 000a 0023     		mov	r3, #0
 1756 000c 7B62     		str	r3, [r7, #36]
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1757              		.loc 1 815 0
 1758 000e 0023     		mov	r3, #0
 1759 0010 3B62     		str	r3, [r7, #32]
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = (uint32_t)0;
 1760              		.loc 1 816 0
 1761 0012 0023     		mov	r3, #0
 1762 0014 FB61     		str	r3, [r7, #28]
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 818:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1763              		.loc 1 820 0
 1764 0016 7B68     		ldr	r3, [r7, #4]
 1765 0018 BB61     		str	r3, [r7, #24]
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1766              		.loc 1 822 0
 1767 001a 3B68     		ldr	r3, [r7]
 1768 001c 7B61     		str	r3, [r7, #20]
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_4>>>*/
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Find the compare register value from the duty cycle and period register value */
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 1769              		.loc 1 825 0
 1770 001e BB69     		ldr	r3, [r7, #24]
 1771 0020 DB69     		ldr	r3, [r3, #28]
 1772 0022 5B6B     		ldr	r3, [r3, #52]
 1773 0024 0133     		add	r3, r3, #1
 1774 0026 7B62     		str	r3, [r7, #36]
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 1775              		.loc 1 826 0
 1776 0028 BB69     		ldr	r3, [r7, #24]
 1777 002a 9B69     		ldr	r3, [r3, #24]
 1778 002c 5B6B     		ldr	r3, [r3, #52]
 1779 002e 1B04     		lsl	r3, r3, #16
 1780 0030 1B0C     		lsr	r3, r3, #16
 1781 0032 5A1C     		add	r2, r3, #1
 1782 0034 7B6A     		ldr	r3, [r7, #36]
 1783 0036 5343     		mul	r3, r2
 1784 0038 7B62     		str	r3, [r7, #36]
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 1785              		.loc 1 827 0
 1786 003a 7B6A     		ldr	r3, [r7, #36]
 1787 003c 0133     		add	r3, r3, #1
 1788 003e 7B62     		str	r3, [r7, #36]
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 829:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
 1789              		.loc 1 829 0
 1790 0040 2C48     		ldr	r0, .L65
 1791 0042 7969     		ldr	r1, [r7, #20]
 1792 0044 FFF7FEFF 		bl	__aeabi_fsub
 1793 0048 031C     		add	r3, r0, #0
 1794 004a 181C     		add	r0, r3, #0
 1795 004c 2949     		ldr	r1, .L65
 1796 004e FFF7FEFF 		bl	__aeabi_fdiv
 1797 0052 031C     		add	r3, r0, #0
 1798 0054 7B61     		str	r3, [r7, #20]
 830:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 1799              		.loc 1 830 0
 1800 0056 786A     		ldr	r0, [r7, #36]
 1801 0058 FFF7FEFF 		bl	__aeabi_ui2f
 1802 005c 031C     		add	r3, r0, #0
 1803 005e 3B61     		str	r3, [r7, #16]
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 1804              		.loc 1 831 0
 1805 0060 3869     		ldr	r0, [r7, #16]
 1806 0062 7969     		ldr	r1, [r7, #20]
 1807 0064 FFF7FEFF 		bl	__aeabi_fmul
 1808 0068 031C     		add	r3, r0, #0
 1809 006a 181C     		add	r0, r3, #0
 1810 006c FFF7FEFF 		bl	__aeabi_f2uiz
 1811 0070 031C     		mov	r3, r0
 1812 0072 7B62     		str	r3, [r7, #36]
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 834:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1813              		.loc 1 834 0
 1814 0074 BB69     		ldr	r3, [r7, #24]
 1815 0076 9B69     		ldr	r3, [r3, #24]
 1816 0078 5B6B     		ldr	r3, [r3, #52]
 1817 007a 1B04     		lsl	r3, r3, #16
 1818 007c 1B0C     		lsr	r3, r3, #16
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 1819              		.loc 1 833 0
 1820 007e 7A6A     		ldr	r2, [r7, #36]
 1821 0080 101C     		mov	r0, r2
 1822 0082 191C     		mov	r1, r3
 1823 0084 FFF7FEFF 		bl	__aeabi_uidivmod
 1824 0088 0B1C     		mov	r3, r1
 1825 008a 3B62     		str	r3, [r7, #32]
 835:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1826              		.loc 1 835 0
 1827 008c BB69     		ldr	r3, [r7, #24]
 1828 008e 9B69     		ldr	r3, [r3, #24]
 1829 0090 3A6A     		ldr	r2, [r7, #32]
 1830 0092 1204     		lsl	r2, r2, #16
 1831 0094 120C     		lsr	r2, r2, #16
 1832 0096 DA63     		str	r2, [r3, #60]
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 837:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1833              		.loc 1 837 0
 1834 0098 BB69     		ldr	r3, [r7, #24]
 1835 009a 9B69     		ldr	r3, [r3, #24]
 1836 009c 5B6B     		ldr	r3, [r3, #52]
 1837 009e 1B04     		lsl	r3, r3, #16
 1838 00a0 1B0C     		lsr	r3, r3, #16
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 1839              		.loc 1 836 0
 1840 00a2 786A     		ldr	r0, [r7, #36]
 1841 00a4 191C     		mov	r1, r3
 1842 00a6 FFF7FEFF 		bl	__aeabi_uidiv
 1843 00aa 031C     		mov	r3, r0
 1844 00ac FB61     		str	r3, [r7, #28]
 838:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 1845              		.loc 1 838 0
 1846 00ae BB69     		ldr	r3, [r7, #24]
 1847 00b0 DB69     		ldr	r3, [r3, #28]
 1848 00b2 FA69     		ldr	r2, [r7, #28]
 1849 00b4 1204     		lsl	r2, r2, #16
 1850 00b6 120C     		lsr	r2, r2, #16
 1851 00b8 DA63     		str	r2, [r3, #60]
 839:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 840:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /** shadow transfer */
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1852              		.loc 1 841 0
 1853 00ba BA69     		ldr	r2, [r7, #24]
 1854 00bc 3723     		mov	r3, #55
 1855 00be D35C     		ldrb	r3, [r2, r3]
 1856 00c0 9B00     		lsl	r3, r3, #2
 1857 00c2 FB60     		str	r3, [r7, #12]
 842:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1858              		.loc 1 842 0
 1859 00c4 BA69     		ldr	r2, [r7, #24]
 1860 00c6 3823     		mov	r3, #56
 1861 00c8 D35C     		ldrb	r3, [r2, r3]
 1862 00ca 9B00     		lsl	r3, r3, #2
 1863 00cc BB60     		str	r3, [r7, #8]
 843:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 <
 1864              		.loc 1 843 0
 1865 00ce BB69     		ldr	r3, [r7, #24]
 1866 00d0 5B69     		ldr	r3, [r3, #20]
 1867 00d2 BA69     		ldr	r2, [r7, #24]
 1868 00d4 5269     		ldr	r2, [r2, #20]
 1869 00d6 1169     		ldr	r1, [r2, #16]
 1870 00d8 FA68     		ldr	r2, [r7, #12]
 1871 00da 0120     		mov	r0, #1
 1872 00dc 9040     		lsl	r0, r0, r2
 1873 00de BA68     		ldr	r2, [r7, #8]
 1874 00e0 0124     		mov	r4, #1
 1875 00e2 251C     		mov	r5, r4
 1876 00e4 9540     		lsl	r5, r5, r2
 1877 00e6 2A1C     		mov	r2, r5
 1878 00e8 0243     		orr	r2, r0
 1879 00ea 0A43     		orr	r2, r1
 1880 00ec 1A61     		str	r2, [r3, #16]
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1881              		.loc 1 844 0
 1882 00ee BD46     		mov	sp, r7
 1883 00f0 0AB0     		add	sp, sp, #40
 1884              		@ sp needed for prologue
 1885 00f2 B0BD     		pop	{r4, r5, r7, pc}
 1886              	.L66:
 1887              		.align	2
 1888              	.L65:
 1889 00f4 0000C842 		.word	1120403456
 1890              		.cfi_endproc
 1891              	.LFE44:
 1893              		.section	.text.PWMSP001_lSetDutyCenterAlign,"ax",%progbits
 1894              		.align	2
 1895              		.global	PWMSP001_lSetDutyCenterAlign
 1896              		.code	16
 1897              		.thumb_func
 1899              	PWMSP001_lSetDutyCenterAlign:
 1900              	.LFB45:
 845:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 846:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 847:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 848:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode
 849:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 850:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 851:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 852:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1901              		.loc 1 855 0
 1902              		.cfi_startproc
 1903 0000 90B5     		push	{r4, r7, lr}
 1904              	.LCFI36:
 1905              		.cfi_def_cfa_offset 12
 1906              		.cfi_offset 4, -12
 1907              		.cfi_offset 7, -8
 1908              		.cfi_offset 14, -4
 1909 0002 89B0     		sub	sp, sp, #36
 1910              	.LCFI37:
 1911              		.cfi_def_cfa_offset 48
 1912 0004 00AF     		add	r7, sp, #0
 1913              	.LCFI38:
 1914              		.cfi_def_cfa_register 7
 1915 0006 7860     		str	r0, [r7, #4]
 1916 0008 3960     		str	r1, [r7]
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_5>>>*/
 857:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0x00;
 1917              		.loc 1 857 0
 1918 000a 0023     		mov	r3, #0
 1919 000c FB61     		str	r3, [r7, #28]
 858:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 860:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1920              		.loc 1 860 0
 1921 000e 7B68     		ldr	r3, [r7, #4]
 1922 0010 BB61     		str	r3, [r7, #24]
 861:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1923              		.loc 1 861 0
 1924 0012 3B68     		ldr	r3, [r7]
 1925 0014 7B61     		str	r3, [r7, #20]
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 863:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1926              		.loc 1 863 0
 1927 0016 1B48     		ldr	r0, .L68
 1928 0018 7969     		ldr	r1, [r7, #20]
 1929 001a FFF7FEFF 		bl	__aeabi_fsub
 1930 001e 031C     		add	r3, r0, #0
 1931 0020 181C     		add	r0, r3, #0
 1932 0022 1849     		ldr	r1, .L68
 1933 0024 FFF7FEFF 		bl	__aeabi_fdiv
 1934 0028 031C     		add	r3, r0, #0
 1935 002a 7B61     		str	r3, [r7, #20]
 864:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 1936              		.loc 1 864 0
 1937 002c BB69     		ldr	r3, [r7, #24]
 1938 002e 9B69     		ldr	r3, [r3, #24]
 1939 0030 5B6B     		ldr	r3, [r3, #52]
 1940 0032 181C     		mov	r0, r3
 1941 0034 FFF7FEFF 		bl	__aeabi_ui2f
 1942 0038 031C     		add	r3, r0, #0
 1943 003a 3B61     		str	r3, [r7, #16]
 865:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1944              		.loc 1 865 0
 1945 003c 3869     		ldr	r0, [r7, #16]
 1946 003e 7969     		ldr	r1, [r7, #20]
 1947 0040 FFF7FEFF 		bl	__aeabi_fmul
 1948 0044 031C     		add	r3, r0, #0
 1949 0046 181C     		add	r0, r3, #0
 1950 0048 FFF7FEFF 		bl	__aeabi_f2uiz
 1951 004c 031C     		mov	r3, r0
 1952 004e FB61     		str	r3, [r7, #28]
 866:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1953              		.loc 1 866 0
 1954 0050 BB69     		ldr	r3, [r7, #24]
 1955 0052 9B69     		ldr	r3, [r3, #24]
 1956 0054 FA69     		ldr	r2, [r7, #28]
 1957 0056 1204     		lsl	r2, r2, #16
 1958 0058 120C     		lsr	r2, r2, #16
 1959 005a DA63     		str	r2, [r3, #60]
 867:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 868:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*shadow transfer */
 869:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1960              		.loc 1 869 0
 1961 005c BA69     		ldr	r2, [r7, #24]
 1962 005e 3723     		mov	r3, #55
 1963 0060 D35C     		ldrb	r3, [r2, r3]
 1964 0062 9B00     		lsl	r3, r3, #2
 1965 0064 FB60     		str	r3, [r7, #12]
 870:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1966              		.loc 1 870 0
 1967 0066 BB69     		ldr	r3, [r7, #24]
 1968 0068 5B69     		ldr	r3, [r3, #20]
 1969 006a BA69     		ldr	r2, [r7, #24]
 1970 006c 5269     		ldr	r2, [r2, #20]
 1971 006e 1169     		ldr	r1, [r2, #16]
 1972 0070 FA68     		ldr	r2, [r7, #12]
 1973 0072 0120     		mov	r0, #1
 1974 0074 041C     		mov	r4, r0
 1975 0076 9440     		lsl	r4, r4, r2
 1976 0078 221C     		mov	r2, r4
 1977 007a 0A43     		orr	r2, r1
 1978 007c 1A61     		str	r2, [r3, #16]
 871:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1979              		.loc 1 871 0
 1980 007e BD46     		mov	sp, r7
 1981 0080 09B0     		add	sp, sp, #36
 1982              		@ sp needed for prologue
 1983 0082 90BD     		pop	{r4, r7, pc}
 1984              	.L69:
 1985              		.align	2
 1986              	.L68:
 1987 0084 0000C842 		.word	1120403456
 1988              		.cfi_endproc
 1989              	.LFE45:
 1991              		.section	.text.PWMSP001_SetPeriodAndCompare,"ax",%progbits
 1992              		.align	2
 1993              		.global	PWMSP001_SetPeriodAndCompare
 1994              		.code	16
 1995              		.thumb_func
 1997              	PWMSP001_SetPeriodAndCompare:
 1998              	.LFB46:
 872:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 873:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of period and compare register
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 878:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriodAndCompare
 879:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period,
 882:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 884:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1999              		.loc 1 884 0
 2000              		.cfi_startproc
 2001 0000 80B5     		push	{r7, lr}
 2002              	.LCFI39:
 2003              		.cfi_def_cfa_offset 8
 2004              		.cfi_offset 7, -8
 2005              		.cfi_offset 14, -4
 2006 0002 86B0     		sub	sp, sp, #24
 2007              	.LCFI40:
 2008              		.cfi_def_cfa_offset 32
 2009 0004 00AF     		add	r7, sp, #0
 2010              	.LCFI41:
 2011              		.cfi_def_cfa_register 7
 2012 0006 F860     		str	r0, [r7, #12]
 2013 0008 B960     		str	r1, [r7, #8]
 2014 000a 7A60     		str	r2, [r7, #4]
 885:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2015              		.loc 1 885 0
 2016 000c 0123     		mov	r3, #1
 2017 000e 7B61     		str	r3, [r7, #20]
 886:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0UL;
 2018              		.loc 1 886 0
 2019 0010 0023     		mov	r3, #0
 2020 0012 3B61     		str	r3, [r7, #16]
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 888:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2021              		.loc 1 888 0
 2022 0014 FB68     		ldr	r3, [r7, #12]
 2023 0016 DB6B     		ldr	r3, [r3, #60]
 2024 0018 1B78     		ldrb	r3, [r3]
 2025 001a 002B     		cmp	r3, #0
 2026 001c 37D0     		beq	.L71
 889:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 2027              		.loc 1 890 0
 2028 001e BB68     		ldr	r3, [r7, #8]
 2029 0020 002B     		cmp	r3, #0
 2030 0022 09D0     		beq	.L72
 2031              		.loc 1 890 0 is_stmt 0 discriminator 1
 2032 0024 FB68     		ldr	r3, [r7, #12]
 2033 0026 DA6A     		ldr	r2, [r3, #44]
 2034 0028 7B68     		ldr	r3, [r7, #4]
 2035 002a 9A42     		cmp	r2, r3
 2036 002c 07D2     		bcs	.L73
 891:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 2037              		.loc 1 891 0 is_stmt 1 discriminator 1
 2038 002e FA68     		ldr	r2, [r7, #12]
 2039 0030 2023     		mov	r3, #32
 2040 0032 D35C     		ldrb	r3, [r2, r3]
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 2041              		.loc 1 890 0 discriminator 1
 2042 0034 002B     		cmp	r3, #0
 2043 0036 02D1     		bne	.L73
 2044              	.L72:
 892:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 893:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2045              		.loc 1 893 0
 2046 0038 0223     		mov	r3, #2
 2047 003a 7B61     		str	r3, [r7, #20]
 2048 003c 27E0     		b	.L71
 2049              	.L73:
 894:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2050              		.loc 1 897 0
 2051 003e FB68     		ldr	r3, [r7, #12]
 2052 0040 DA6A     		ldr	r2, [r3, #44]
 2053 0042 BB68     		ldr	r3, [r7, #8]
 2054 0044 9A42     		cmp	r2, r3
 2055 0046 07D2     		bcs	.L74
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2056              		.loc 1 898 0 discriminator 1
 2057 0048 FA68     		ldr	r2, [r7, #12]
 2058 004a 2023     		mov	r3, #32
 2059 004c D35C     		ldrb	r3, [r2, r3]
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2060              		.loc 1 897 0 discriminator 1
 2061 004e 012B     		cmp	r3, #1
 2062 0050 02D0     		beq	.L74
 899:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           )
 900:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2063              		.loc 1 901 0
 2064 0052 0223     		mov	r3, #2
 2065 0054 7B61     		str	r3, [r7, #20]
 2066 0056 1AE0     		b	.L71
 2067              	.L74:
 902:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2068              		.loc 1 905 0
 2069 0058 BB68     		ldr	r3, [r7, #8]
 2070 005a 3B61     		str	r3, [r7, #16]
 906:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2071              		.loc 1 906 0
 2072 005c FA68     		ldr	r2, [r7, #12]
 2073 005e 2023     		mov	r3, #32
 2074 0060 D35C     		ldrb	r3, [r2, r3]
 2075 0062 012B     		cmp	r3, #1
 2076 0064 04D1     		bne	.L75
 907:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 908:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2077              		.loc 1 908 0
 2078 0066 FB68     		ldr	r3, [r7, #12]
 2079 0068 DB69     		ldr	r3, [r3, #28]
 2080 006a 3A69     		ldr	r2, [r7, #16]
 2081 006c 120C     		lsr	r2, r2, #16
 2082 006e 5A63     		str	r2, [r3, #52]
 2083              	.L75:
 909:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 910:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*<<<DD_PWMSP001_API_6_3>>>*/
 911:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2084              		.loc 1 911 0
 2085 0070 FB68     		ldr	r3, [r7, #12]
 2086 0072 9B69     		ldr	r3, [r3, #24]
 2087 0074 3A69     		ldr	r2, [r7, #16]
 2088 0076 1204     		lsl	r2, r2, #16
 2089 0078 120C     		lsr	r2, r2, #16
 2090 007a 5A63     		str	r2, [r3, #52]
 912:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /* Call function as per the configured mode */
 913:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 2091              		.loc 1 913 0
 2092 007c FB68     		ldr	r3, [r7, #12]
 2093 007e 1B6C     		ldr	r3, [r3, #64]
 2094 0080 F968     		ldr	r1, [r7, #12]
 2095 0082 7A68     		ldr	r2, [r7, #4]
 2096 0084 081C     		mov	r0, r1
 2097 0086 111C     		mov	r1, r2
 2098 0088 9847     		blx	r3
 914:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2099              		.loc 1 914 0
 2100 008a 0023     		mov	r3, #0
 2101 008c 7B61     		str	r3, [r7, #20]
 2102              	.L71:
 915:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 917:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 918:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2103              		.loc 1 918 0
 2104 008e 7B69     		ldr	r3, [r7, #20]
 919:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2105              		.loc 1 919 0
 2106 0090 181C     		mov	r0, r3
 2107 0092 BD46     		mov	sp, r7
 2108 0094 06B0     		add	sp, sp, #24
 2109              		@ sp needed for prologue
 2110 0096 80BD     		pop	{r7, pc}
 2111              		.cfi_endproc
 2112              	.LFE46:
 2114              		.section	.text.PWMSP001_SetPeriod,"ax",%progbits
 2115              		.align	2
 2116              		.global	PWMSP001_SetPeriod
 2117              		.code	16
 2118              		.thumb_func
 2120              	PWMSP001_SetPeriod:
 2121              	.LFB47:
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_6>>>*/
 922:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the period register value
 924:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriod
 926:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 927:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period
 929:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2122              		.loc 1 930 0
 2123              		.cfi_startproc
 2124 0000 90B5     		push	{r4, r7, lr}
 2125              	.LCFI42:
 2126              		.cfi_def_cfa_offset 12
 2127              		.cfi_offset 4, -12
 2128              		.cfi_offset 7, -8
 2129              		.cfi_offset 14, -4
 2130 0002 87B0     		sub	sp, sp, #28
 2131              	.LCFI43:
 2132              		.cfi_def_cfa_offset 40
 2133 0004 00AF     		add	r7, sp, #0
 2134              	.LCFI44:
 2135              		.cfi_def_cfa_register 7
 2136 0006 7860     		str	r0, [r7, #4]
 2137 0008 3960     		str	r1, [r7]
 931:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2138              		.loc 1 931 0
 2139 000a 0123     		mov	r3, #1
 2140 000c 7B61     		str	r3, [r7, #20]
 932:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0X00U;
 2141              		.loc 1 932 0
 2142 000e 0023     		mov	r3, #0
 2143 0010 3B61     		str	r3, [r7, #16]
 933:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 935:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 936:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2144              		.loc 1 936 0
 2145 0012 7B68     		ldr	r3, [r7, #4]
 2146 0014 DB6B     		ldr	r3, [r3, #60]
 2147 0016 1B78     		ldrb	r3, [r3]
 2148 0018 002B     		cmp	r3, #0
 2149 001a 4DD0     		beq	.L78
 937:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 938:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Period == (uint32_t)0)
 2150              		.loc 1 938 0
 2151 001c 3B68     		ldr	r3, [r7]
 2152 001e 002B     		cmp	r3, #0
 2153 0020 02D1     		bne	.L79
 939:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 940:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2154              		.loc 1 940 0
 2155 0022 0223     		mov	r3, #2
 2156 0024 7B61     		str	r3, [r7, #20]
 2157 0026 47E0     		b	.L78
 2158              	.L79:
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 943:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2159              		.loc 1 944 0
 2160 0028 7B68     		ldr	r3, [r7, #4]
 2161 002a DA6A     		ldr	r2, [r3, #44]
 2162 002c 3B68     		ldr	r3, [r7]
 2163 002e 9A42     		cmp	r2, r3
 2164 0030 07D2     		bcs	.L80
 945:../Dave/Generated/src/PWMSP001/PWMSP001.c ****          (HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2165              		.loc 1 945 0 discriminator 1
 2166 0032 7A68     		ldr	r2, [r7, #4]
 2167 0034 2023     		mov	r3, #32
 2168 0036 D35C     		ldrb	r3, [r2, r3]
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2169              		.loc 1 944 0 discriminator 1
 2170 0038 012B     		cmp	r3, #1
 2171 003a 02D0     		beq	.L80
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 947:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2172              		.loc 1 947 0
 2173 003c 0223     		mov	r3, #2
 2174 003e 7B61     		str	r3, [r7, #20]
 2175 0040 3AE0     		b	.L78
 2176              	.L80:
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 951:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2177              		.loc 1 951 0
 2178 0042 3B68     		ldr	r3, [r7]
 2179 0044 3B61     		str	r3, [r7, #16]
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2180              		.loc 1 952 0
 2181 0046 7A68     		ldr	r2, [r7, #4]
 2182 0048 2023     		mov	r3, #32
 2183 004a D35C     		ldrb	r3, [r2, r3]
 2184 004c 012B     		cmp	r3, #1
 2185 004e 04D1     		bne	.L81
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2186              		.loc 1 954 0
 2187 0050 7B68     		ldr	r3, [r7, #4]
 2188 0052 DB69     		ldr	r3, [r3, #28]
 2189 0054 3A69     		ldr	r2, [r7, #16]
 2190 0056 120C     		lsr	r2, r2, #16
 2191 0058 5A63     		str	r2, [r3, #52]
 2192              	.L81:
 955:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2193              		.loc 1 956 0
 2194 005a 7B68     		ldr	r3, [r7, #4]
 2195 005c 9B69     		ldr	r3, [r3, #24]
 2196 005e 3A69     		ldr	r2, [r7, #16]
 2197 0060 1204     		lsl	r2, r2, #16
 2198 0062 120C     		lsr	r2, r2, #16
 2199 0064 5A63     		str	r2, [r3, #52]
 957:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*Request shadow transfer for the First slice*/
 958:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2200              		.loc 1 958 0
 2201 0066 7A68     		ldr	r2, [r7, #4]
 2202 0068 3723     		mov	r3, #55
 2203 006a D35C     		ldrb	r3, [r2, r3]
 2204 006c 9B00     		lsl	r3, r3, #2
 2205 006e FB60     		str	r3, [r7, #12]
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 2206              		.loc 1 959 0
 2207 0070 7B68     		ldr	r3, [r7, #4]
 2208 0072 5B69     		ldr	r3, [r3, #20]
 2209 0074 7A68     		ldr	r2, [r7, #4]
 2210 0076 5269     		ldr	r2, [r2, #20]
 2211 0078 1169     		ldr	r1, [r2, #16]
 2212 007a FA68     		ldr	r2, [r7, #12]
 2213 007c 0120     		mov	r0, #1
 2214 007e 041C     		mov	r4, r0
 2215 0080 9440     		lsl	r4, r4, r2
 2216 0082 221C     		mov	r2, r4
 2217 0084 0A43     		orr	r2, r1
 2218 0086 1A61     		str	r2, [r3, #16]
 960:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2219              		.loc 1 960 0
 2220 0088 7A68     		ldr	r2, [r7, #4]
 2221 008a 2023     		mov	r3, #32
 2222 008c D35C     		ldrb	r3, [r2, r3]
 2223 008e 012B     		cmp	r3, #1
 2224 0090 10D1     		bne	.L82
 961:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 962:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           /*Request shadow transfer for the First slice*/
 963:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2225              		.loc 1 963 0
 2226 0092 7A68     		ldr	r2, [r7, #4]
 2227 0094 3823     		mov	r3, #56
 2228 0096 D35C     		ldrb	r3, [r2, r3]
 2229 0098 9B00     		lsl	r3, r3, #2
 2230 009a FB60     		str	r3, [r7, #12]
 964:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 2231              		.loc 1 964 0
 2232 009c 7B68     		ldr	r3, [r7, #4]
 2233 009e 5B69     		ldr	r3, [r3, #20]
 2234 00a0 7A68     		ldr	r2, [r7, #4]
 2235 00a2 5269     		ldr	r2, [r2, #20]
 2236 00a4 1169     		ldr	r1, [r2, #16]
 2237 00a6 FA68     		ldr	r2, [r7, #12]
 2238 00a8 0120     		mov	r0, #1
 2239 00aa 041C     		mov	r4, r0
 2240 00ac 9440     		lsl	r4, r4, r2
 2241 00ae 221C     		mov	r2, r4
 2242 00b0 0A43     		orr	r2, r1
 2243 00b2 1A61     		str	r2, [r3, #16]
 2244              	.L82:
 965:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 966:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2245              		.loc 1 966 0
 2246 00b4 0023     		mov	r3, #0
 2247 00b6 7B61     		str	r3, [r7, #20]
 2248              	.L78:
 967:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 968:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 969:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2249              		.loc 1 970 0
 2250 00b8 7B69     		ldr	r3, [r7, #20]
 971:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2251              		.loc 1 971 0
 2252 00ba 181C     		mov	r0, r3
 2253 00bc BD46     		mov	sp, r7
 2254 00be 07B0     		add	sp, sp, #28
 2255              		@ sp needed for prologue
 2256 00c0 90BD     		pop	{r4, r7, pc}
 2257              		.cfi_endproc
 2258              	.LFE47:
 2260              		.global	__aeabi_fcmpeq
 2261 00c2 C046     		.section	.text.PWMSP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 2262              		.align	2
 2263              		.global	PWMSP001_SetPwmFreqAndDutyCycle
 2264              		.code	16
 2265              		.thumb_func
 2267              	PWMSP001_SetPwmFreqAndDutyCycle:
 2268              	.LFB48:
 972:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 973:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 976:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of the frequency in hertz and duty in %.
 977:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 978:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreqAndDutyCycle
 979:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 980:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq,
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 983:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 984:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2269              		.loc 1 984 0
 2270              		.cfi_startproc
 2271 0000 80B5     		push	{r7, lr}
 2272              	.LCFI45:
 2273              		.cfi_def_cfa_offset 8
 2274              		.cfi_offset 7, -8
 2275              		.cfi_offset 14, -4
 2276 0002 88B0     		sub	sp, sp, #32
 2277              	.LCFI46:
 2278              		.cfi_def_cfa_offset 40
 2279 0004 00AF     		add	r7, sp, #0
 2280              	.LCFI47:
 2281              		.cfi_def_cfa_register 7
 2282 0006 F860     		str	r0, [r7, #12]
 2283 0008 B960     		str	r1, [r7, #8]
 2284 000a 7A60     		str	r2, [r7, #4]
 985:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2285              		.loc 1 985 0
 2286 000c 0123     		mov	r3, #1
 2287 000e FB61     		str	r3, [r7, #28]
 986:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0UL;
 2288              		.loc 1 986 0
 2289 0010 0023     		mov	r3, #0
 2290 0012 BB61     		str	r3, [r7, #24]
 987:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_16_1>>>*/
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2291              		.loc 1 989 0
 2292 0014 FB68     		ldr	r3, [r7, #12]
 2293 0016 DB6B     		ldr	r3, [r3, #60]
 2294 0018 1B78     		ldrb	r3, [r3]
 2295 001a 002B     		cmp	r3, #0
 2296 001c 68D0     		beq	.L85
 990:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 991:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 2297              		.loc 1 991 0
 2298 001e B868     		ldr	r0, [r7, #8]
 2299 0020 0021     		mov	r1, #0
 2300 0022 FFF7FEFF 		bl	__aeabi_fcmpeq
 2301 0026 031C     		mov	r3, r0
 2302 0028 002B     		cmp	r3, #0
 2303 002a 0DD1     		bne	.L86
 2304              		.loc 1 991 0 is_stmt 0 discriminator 1
 2305 002c 7868     		ldr	r0, [r7, #4]
 2306 002e 3349     		ldr	r1, .L97
 2307 0030 FFF7FEFF 		bl	__aeabi_fcmpgt
 2308 0034 031C     		mov	r3, r0
 2309 0036 002B     		cmp	r3, #0
 2310 0038 06D1     		bne	.L86
 2311 003a 7868     		ldr	r0, [r7, #4]
 2312 003c 0021     		mov	r1, #0
 2313 003e FFF7FEFF 		bl	__aeabi_fcmplt
 2314 0042 031C     		mov	r3, r0
 2315 0044 002B     		cmp	r3, #0
 2316 0046 02D0     		beq	.L96
 2317              	.L86:
 992:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 993:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2318              		.loc 1 993 0 is_stmt 1
 2319 0048 0223     		mov	r3, #2
 2320 004a FB61     		str	r3, [r7, #28]
 2321 004c 50E0     		b	.L85
 2322              	.L96:
 994:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 995:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 996:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 997:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       fPwmFreq=(float)HandlePtr->kResolution;
 2323              		.loc 1 997 0
 2324 004e FB68     		ldr	r3, [r7, #12]
 2325 0050 5B68     		ldr	r3, [r3, #4]
 2326 0052 7B61     		str	r3, [r7, #20]
 998:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2327              		.loc 1 998 0
 2328 0054 7869     		ldr	r0, [r7, #20]
 2329 0056 B968     		ldr	r1, [r7, #8]
 2330 0058 FFF7FEFF 		bl	__aeabi_fmul
 2331 005c 031C     		add	r3, r0, #0
 2332 005e 7B61     		str	r3, [r7, #20]
 999:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2333              		.loc 1 999 0
 2334 0060 2748     		ldr	r0, .L97+4
 2335 0062 7969     		ldr	r1, [r7, #20]
 2336 0064 FFF7FEFF 		bl	__aeabi_fdiv
 2337 0068 031C     		add	r3, r0, #0
 2338 006a 181C     		add	r0, r3, #0
 2339 006c FFF7FEFF 		bl	__aeabi_f2uiz
 2340 0070 031C     		mov	r3, r0
 2341 0072 BB61     		str	r3, [r7, #24]
1000:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1001:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2342              		.loc 1 1001 0
 2343 0074 FA68     		ldr	r2, [r7, #12]
 2344 0076 2023     		mov	r3, #32
 2345 0078 D35C     		ldrb	r3, [r2, r3]
 2346 007a 002B     		cmp	r3, #0
 2347 007c 1AD1     		bne	.L89
1002:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1003:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2348              		.loc 1 1003 0
 2349 007e BA69     		ldr	r2, [r7, #24]
 2350 0080 204B     		ldr	r3, .L97+8
 2351 0082 9A42     		cmp	r2, r3
 2352 0084 02D9     		bls	.L90
1004:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2353              		.loc 1 1005 0
 2354 0086 0223     		mov	r3, #2
 2355 0088 FB61     		str	r3, [r7, #28]
 2356 008a 27E0     		b	.L91
 2357              	.L90:
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1007:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1008:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1009:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2358              		.loc 1 1009 0
 2359 008c FA68     		ldr	r2, [r7, #12]
 2360 008e 3623     		mov	r3, #54
 2361 0090 D35C     		ldrb	r3, [r2, r3]
 2362 0092 002B     		cmp	r3, #0
 2363 0094 05D1     		bne	.L92
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1011:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2364              		.loc 1 1011 0
 2365 0096 FB68     		ldr	r3, [r7, #12]
 2366 0098 9B69     		ldr	r3, [r3, #24]
 2367 009a BA69     		ldr	r2, [r7, #24]
 2368 009c 013A     		sub	r2, r2, #1
 2369 009e 5A63     		str	r2, [r3, #52]
 2370 00a0 05E0     		b	.L93
 2371              	.L92:
1012:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1013:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1014:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1015:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2372              		.loc 1 1015 0
 2373 00a2 FB68     		ldr	r3, [r7, #12]
 2374 00a4 9B69     		ldr	r3, [r3, #24]
 2375 00a6 BA69     		ldr	r2, [r7, #24]
 2376 00a8 013A     		sub	r2, r2, #1
 2377 00aa 5208     		lsr	r2, r2, #1
 2378 00ac 5A63     		str	r2, [r3, #52]
 2379              	.L93:
1016:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1017:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2380              		.loc 1 1017 0
 2381 00ae 0023     		mov	r3, #0
 2382 00b0 FB61     		str	r3, [r7, #28]
 2383 00b2 13E0     		b	.L91
 2384              	.L89:
1018:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1019:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1020:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 2385              		.loc 1 1020 0
 2386 00b4 FA68     		ldr	r2, [r7, #12]
 2387 00b6 2023     		mov	r3, #32
 2388 00b8 D35C     		ldrb	r3, [r2, r3]
 2389 00ba 012B     		cmp	r3, #1
 2390 00bc 06D1     		bne	.L94
 2391              		.loc 1 1020 0 is_stmt 0 discriminator 1
 2392 00be BA69     		ldr	r2, [r7, #24]
 2393 00c0 104B     		ldr	r3, .L97+8
 2394 00c2 9A42     		cmp	r2, r3
 2395 00c4 02D8     		bhi	.L94
1021:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     		                                   (PwmTime <= PWMSP001_MAX_VALUE))
1022:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1023:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2396              		.loc 1 1023 0 is_stmt 1
 2397 00c6 0223     		mov	r3, #2
 2398 00c8 FB61     		str	r3, [r7, #28]
 2399 00ca 07E0     		b	.L91
 2400              	.L94:
1024:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1025:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1026:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1027:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1028:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2401              		.loc 1 1028 0
 2402 00cc FA68     		ldr	r2, [r7, #12]
 2403 00ce BB69     		ldr	r3, [r7, #24]
 2404 00d0 101C     		mov	r0, r2
 2405 00d2 191C     		mov	r1, r3
 2406 00d4 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2407 00d8 031C     		mov	r3, r0
 2408 00da FB61     		str	r3, [r7, #28]
 2409              	.L91:
1029:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1030:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Status == (uint32_t)DAVEApp_SUCCESS)
 2410              		.loc 1 1030 0
 2411 00dc FB69     		ldr	r3, [r7, #28]
 2412 00de 002B     		cmp	r3, #0
 2413 00e0 06D1     		bne	.L85
1031:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1032:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /* Call the function as per configured mode */
1033:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 2414              		.loc 1 1033 0
 2415 00e2 FB68     		ldr	r3, [r7, #12]
 2416 00e4 5B6C     		ldr	r3, [r3, #68]
 2417 00e6 F968     		ldr	r1, [r7, #12]
 2418 00e8 7A68     		ldr	r2, [r7, #4]
 2419 00ea 081C     		mov	r0, r1
 2420 00ec 111C     		add	r1, r2, #0
 2421 00ee 9847     		blx	r3
 2422              	.L85:
1034:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1035:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    }
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1037:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2423              		.loc 1 1037 0
 2424 00f0 FB69     		ldr	r3, [r7, #28]
1038:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2425              		.loc 1 1038 0
 2426 00f2 181C     		mov	r0, r3
 2427 00f4 BD46     		mov	sp, r7
 2428 00f6 08B0     		add	sp, sp, #32
 2429              		@ sp needed for prologue
 2430 00f8 80BD     		pop	{r7, pc}
 2431              	.L98:
 2432 00fa C046     		.align	2
 2433              	.L97:
 2434 00fc 0000C842 		.word	1120403456
 2435 0100 286B6E4E 		.word	1315859240
 2436 0104 FFFF0000 		.word	65535
 2437              		.cfi_endproc
 2438              	.LFE48:
 2440              		.section	.text.PWMSP001_SetPwmFreq,"ax",%progbits
 2441              		.align	2
 2442              		.global	PWMSP001_SetPwmFreq
 2443              		.code	16
 2444              		.thumb_func
 2446              	PWMSP001_SetPwmFreq:
 2447              	.LFB49:
1039:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_16>>>*/
1042:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1043:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the frequency value
1044:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1045:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreq
1046:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1048:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1050:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2448              		.loc 1 1050 0
 2449              		.cfi_startproc
 2450 0000 B0B5     		push	{r4, r5, r7, lr}
 2451              	.LCFI48:
 2452              		.cfi_def_cfa_offset 16
 2453              		.cfi_offset 4, -16
 2454              		.cfi_offset 5, -12
 2455              		.cfi_offset 7, -8
 2456              		.cfi_offset 14, -4
 2457 0002 88B0     		sub	sp, sp, #32
 2458              	.LCFI49:
 2459              		.cfi_def_cfa_offset 48
 2460 0004 00AF     		add	r7, sp, #0
 2461              	.LCFI50:
 2462              		.cfi_def_cfa_register 7
 2463 0006 7860     		str	r0, [r7, #4]
 2464 0008 3960     		str	r1, [r7]
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2465              		.loc 1 1051 0
 2466 000a 0123     		mov	r3, #1
 2467 000c FB61     		str	r3, [r7, #28]
1052:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0x00U;
 2468              		.loc 1 1052 0
 2469 000e 0023     		mov	r3, #0
 2470 0010 BB61     		str	r3, [r7, #24]
1053:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1054:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2471              		.loc 1 1057 0
 2472 0012 7B68     		ldr	r3, [r7, #4]
 2473 0014 DB6B     		ldr	r3, [r3, #60]
 2474 0016 1B78     		ldrb	r3, [r3]
 2475 0018 002B     		cmp	r3, #0
 2476 001a 00D1     		bne	.LCB2150
 2477 001c 72E0     		b	.L100	@long jump
 2478              	.LCB2150:
1058:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
 2479              		.loc 1 1059 0
 2480 001e 3868     		ldr	r0, [r7]
 2481 0020 0021     		mov	r1, #0
 2482 0022 FFF7FEFF 		bl	__aeabi_fcmpeq
 2483 0026 031C     		mov	r3, r0
 2484 0028 002B     		cmp	r3, #0
 2485 002a 02D0     		beq	.L109
 2486              	.L108:
1060:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2487              		.loc 1 1061 0
 2488 002c 0223     		mov	r3, #2
 2489 002e FB61     		str	r3, [r7, #28]
 2490 0030 68E0     		b	.L100
 2491              	.L109:
1062:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1063:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1064:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1065:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
 2492              		.loc 1 1065 0
 2493 0032 7B68     		ldr	r3, [r7, #4]
 2494 0034 5B68     		ldr	r3, [r3, #4]
 2495 0036 7B61     		str	r3, [r7, #20]
1066:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2496              		.loc 1 1066 0
 2497 0038 7869     		ldr	r0, [r7, #20]
 2498 003a 3968     		ldr	r1, [r7]
 2499 003c FFF7FEFF 		bl	__aeabi_fmul
 2500 0040 031C     		add	r3, r0, #0
 2501 0042 7B61     		str	r3, [r7, #20]
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2502              		.loc 1 1067 0
 2503 0044 3248     		ldr	r0, .L110
 2504 0046 7969     		ldr	r1, [r7, #20]
 2505 0048 FFF7FEFF 		bl	__aeabi_fdiv
 2506 004c 031C     		add	r3, r0, #0
 2507 004e 181C     		add	r0, r3, #0
 2508 0050 FFF7FEFF 		bl	__aeabi_f2uiz
 2509 0054 031C     		mov	r3, r0
 2510 0056 BB61     		str	r3, [r7, #24]
1068:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2511              		.loc 1 1069 0
 2512 0058 7A68     		ldr	r2, [r7, #4]
 2513 005a 2023     		mov	r3, #32
 2514 005c D35C     		ldrb	r3, [r2, r3]
 2515 005e 002B     		cmp	r3, #0
 2516 0060 2BD1     		bne	.L103
1070:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1071:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2517              		.loc 1 1071 0
 2518 0062 BA69     		ldr	r2, [r7, #24]
 2519 0064 2B4B     		ldr	r3, .L110+4
 2520 0066 9A42     		cmp	r2, r3
 2521 0068 02D9     		bls	.L104
1072:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2522              		.loc 1 1073 0
 2523 006a 0223     		mov	r3, #2
 2524 006c FB61     		str	r3, [r7, #28]
 2525 006e 49E0     		b	.L100
 2526              	.L104:
1074:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1075:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2527              		.loc 1 1077 0
 2528 0070 7A68     		ldr	r2, [r7, #4]
 2529 0072 3623     		mov	r3, #54
 2530 0074 D35C     		ldrb	r3, [r2, r3]
 2531 0076 002B     		cmp	r3, #0
 2532 0078 05D1     		bne	.L105
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1079:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2533              		.loc 1 1079 0
 2534 007a 7B68     		ldr	r3, [r7, #4]
 2535 007c 9B69     		ldr	r3, [r3, #24]
 2536 007e BA69     		ldr	r2, [r7, #24]
 2537 0080 013A     		sub	r2, r2, #1
 2538 0082 5A63     		str	r2, [r3, #52]
 2539 0084 05E0     		b	.L106
 2540              	.L105:
1080:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1081:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1082:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1083:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2541              		.loc 1 1083 0
 2542 0086 7B68     		ldr	r3, [r7, #4]
 2543 0088 9B69     		ldr	r3, [r3, #24]
 2544 008a BA69     		ldr	r2, [r7, #24]
 2545 008c 013A     		sub	r2, r2, #1
 2546 008e 5208     		lsr	r2, r2, #1
 2547 0090 5A63     		str	r2, [r3, #52]
 2548              	.L106:
1084:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /** Update dynamic handle*/
1086:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 2549              		.loc 1 1086 0
 2550 0092 7A68     		ldr	r2, [r7, #4]
 2551 0094 3723     		mov	r3, #55
 2552 0096 D35C     		ldrb	r3, [r2, r3]
 2553 0098 9B00     		lsl	r3, r3, #2
 2554 009a 3B61     		str	r3, [r7, #16]
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 2555              		.loc 1 1087 0
 2556 009c 7B68     		ldr	r3, [r7, #4]
 2557 009e 5B69     		ldr	r3, [r3, #20]
 2558 00a0 7A68     		ldr	r2, [r7, #4]
 2559 00a2 5269     		ldr	r2, [r2, #20]
 2560 00a4 1169     		ldr	r1, [r2, #16]
 2561 00a6 3A69     		ldr	r2, [r7, #16]
 2562 00a8 0120     		mov	r0, #1
 2563 00aa 041C     		mov	r4, r0
 2564 00ac 9440     		lsl	r4, r4, r2
 2565 00ae 221C     		mov	r2, r4
 2566 00b0 0A43     		orr	r2, r1
 2567 00b2 1A61     		str	r2, [r3, #16]
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2568              		.loc 1 1088 0
 2569 00b4 0023     		mov	r3, #0
 2570 00b6 FB61     		str	r3, [r7, #28]
 2571 00b8 24E0     		b	.L100
 2572              	.L103:
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1091:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1092:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1093:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1094:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2573              		.loc 1 1094 0
 2574 00ba 7A68     		ldr	r2, [r7, #4]
 2575 00bc BB69     		ldr	r3, [r7, #24]
 2576 00be 101C     		mov	r0, r2
 2577 00c0 191C     		mov	r1, r3
 2578 00c2 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2579 00c6 031C     		mov	r3, r0
 2580 00c8 FB61     		str	r3, [r7, #28]
1095:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(Status == (uint32_t)DAVEApp_SUCCESS)
 2581              		.loc 1 1095 0
 2582 00ca FB69     		ldr	r3, [r7, #28]
 2583 00cc 002B     		cmp	r3, #0
 2584 00ce 19D1     		bne	.L100
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1097:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2585              		.loc 1 1097 0
 2586 00d0 7A68     		ldr	r2, [r7, #4]
 2587 00d2 3723     		mov	r3, #55
 2588 00d4 D35C     		ldrb	r3, [r2, r3]
 2589 00d6 9B00     		lsl	r3, r3, #2
 2590 00d8 FB60     		str	r3, [r7, #12]
1098:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2591              		.loc 1 1098 0
 2592 00da 7A68     		ldr	r2, [r7, #4]
 2593 00dc 3823     		mov	r3, #56
 2594 00de D35C     		ldrb	r3, [r2, r3]
 2595 00e0 9B00     		lsl	r3, r3, #2
 2596 00e2 BB60     		str	r3, [r7, #8]
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2597              		.loc 1 1099 0
 2598 00e4 7B68     		ldr	r3, [r7, #4]
 2599 00e6 5B69     		ldr	r3, [r3, #20]
 2600 00e8 7A68     		ldr	r2, [r7, #4]
 2601 00ea 5269     		ldr	r2, [r2, #20]
 2602 00ec 1169     		ldr	r1, [r2, #16]
 2603 00ee FA68     		ldr	r2, [r7, #12]
 2604 00f0 0120     		mov	r0, #1
 2605 00f2 9040     		lsl	r0, r0, r2
1100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
 2606              		.loc 1 1100 0
 2607 00f4 BA68     		ldr	r2, [r7, #8]
 2608 00f6 0124     		mov	r4, #1
 2609 00f8 251C     		mov	r5, r4
 2610 00fa 9540     		lsl	r5, r5, r2
 2611 00fc 2A1C     		mov	r2, r5
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2612              		.loc 1 1099 0
 2613 00fe 0243     		orr	r2, r0
 2614 0100 0A43     		orr	r2, r1
 2615 0102 1A61     		str	r2, [r3, #16]
 2616              	.L100:
1101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1104:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  }
1105:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2617              		.loc 1 1105 0
 2618 0104 FB69     		ldr	r3, [r7, #28]
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2619              		.loc 1 1106 0
 2620 0106 181C     		mov	r0, r3
 2621 0108 BD46     		mov	sp, r7
 2622 010a 08B0     		add	sp, sp, #32
 2623              		@ sp needed for prologue
 2624 010c B0BD     		pop	{r4, r5, r7, pc}
 2625              	.L111:
 2626 010e C046     		.align	2
 2627              	.L110:
 2628 0110 286B6E4E 		.word	1315859240
 2629 0114 FFFF0000 		.word	65535
 2630              		.cfi_endproc
 2631              	.LFE49:
 2633              		.section	.text.PWMSP001_lSetPwmFreqTimerConcat,"ax",%progbits
 2634              		.align	2
 2635              		.global	PWMSP001_lSetPwmFreqTimerConcat
 2636              		.code	16
 2637              		.thumb_func
 2639              	PWMSP001_lSetPwmFreqTimerConcat:
 2640              	.LFB50:
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1109:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to set the PWM frequency in case of timer concatenation mode.
1110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1113:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
1115:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1116:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2641              		.loc 1 1116 0
 2642              		.cfi_startproc
 2643 0000 80B5     		push	{r7, lr}
 2644              	.LCFI51:
 2645              		.cfi_def_cfa_offset 8
 2646              		.cfi_offset 7, -8
 2647              		.cfi_offset 14, -4
 2648 0002 88B0     		sub	sp, sp, #32
 2649              	.LCFI52:
 2650              		.cfi_def_cfa_offset 40
 2651 0004 00AF     		add	r7, sp, #0
 2652              	.LCFI53:
 2653              		.cfi_def_cfa_register 7
 2654 0006 7860     		str	r0, [r7, #4]
 2655 0008 3960     		str	r1, [r7]
1117:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = PwmTime;
 2656              		.loc 1 1117 0
 2657 000a 3B68     		ldr	r3, [r7]
 2658 000c FB61     		str	r3, [r7, #28]
1118:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t MsbPeriodVal, LsbPeriodVal;
1119:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint8_t Count = 0x00U;
 2659              		.loc 1 1119 0
 2660 000e 3B1C     		mov	r3, r7
 2661 0010 1333     		add	r3, r3, #19
 2662 0012 0022     		mov	r2, #0
 2663 0014 1A70     		strb	r2, [r3]
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2664              		.loc 1 1120 0
 2665 0016 0123     		mov	r3, #1
 2666 0018 FB60     		str	r3, [r7, #12]
1121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1122:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 2667              		.loc 1 1122 0
 2668 001a 3B68     		ldr	r3, [r7]
 2669 001c 0133     		add	r3, r3, #1
 2670 001e 02D1     		bne	.L113
1123:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2671              		.loc 1 1124 0
 2672 0020 0223     		mov	r3, #2
 2673 0022 FB60     		str	r3, [r7, #12]
 2674 0024 3AE0     		b	.L114
 2675              	.L113:
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1127:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1130:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 2676              		.loc 1 1130 0
 2677 0026 3A68     		ldr	r2, [r7]
 2678 0028 1F4B     		ldr	r3, .L120
 2679 002a 9A42     		cmp	r2, r3
 2680 002c 19D9     		bls	.L115
 2681              	.L116:
1131:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1132:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       do
1133:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1134:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 2682              		.loc 1 1134 0 discriminator 1
 2683 002e FB69     		ldr	r3, [r7, #28]
 2684 0030 5B08     		lsr	r3, r3, #1
 2685 0032 FB61     		str	r3, [r7, #28]
1135:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 2686              		.loc 1 1135 0 discriminator 1
 2687 0034 3B1C     		mov	r3, r7
 2688 0036 1333     		add	r3, r3, #19
 2689 0038 3A1C     		mov	r2, r7
 2690 003a 1332     		add	r2, r2, #19
 2691 003c 1278     		ldrb	r2, [r2]
 2692 003e 0132     		add	r2, r2, #1
 2693 0040 1A70     		strb	r2, [r3]
1136:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 2694              		.loc 1 1136 0 discriminator 1
 2695 0042 FA69     		ldr	r2, [r7, #28]
 2696 0044 194B     		ldr	r3, .L120+4
 2697 0046 9A42     		cmp	r2, r3
 2698 0048 F1D8     		bhi	.L116
1137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 2699              		.loc 1 1138 0
 2700 004a 3B1C     		mov	r3, r7
 2701 004c 1333     		add	r3, r3, #19
 2702 004e 1B78     		ldrb	r3, [r3]
 2703 0050 0122     		mov	r2, #1
 2704 0052 111C     		mov	r1, r2
 2705 0054 9940     		lsl	r1, r1, r3
 2706 0056 0B1C     		mov	r3, r1
 2707 0058 013B     		sub	r3, r3, #1
 2708 005a BB61     		str	r3, [r7, #24]
1139:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PeriodVal;
 2709              		.loc 1 1139 0
 2710 005c FB69     		ldr	r3, [r7, #28]
 2711 005e 7B61     		str	r3, [r7, #20]
 2712 0060 03E0     		b	.L117
 2713              	.L115:
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1142:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PwmTime;
 2714              		.loc 1 1143 0
 2715 0062 3B68     		ldr	r3, [r7]
 2716 0064 7B61     		str	r3, [r7, #20]
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = (uint32_t)0x00;
 2717              		.loc 1 1144 0
 2718 0066 0023     		mov	r3, #0
 2719 0068 BB61     		str	r3, [r7, #24]
 2720              	.L117:
1145:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1147:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_4>>>*/
1148:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 2721              		.loc 1 1148 0
 2722 006a 7A68     		ldr	r2, [r7, #4]
 2723 006c 3623     		mov	r3, #54
 2724 006e D35C     		ldrb	r3, [r2, r3]
 2725 0070 012B     		cmp	r3, #1
 2726 0072 05D1     		bne	.L118
1149:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1150:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 2727              		.loc 1 1150 0
 2728 0074 BB69     		ldr	r3, [r7, #24]
 2729 0076 5B08     		lsr	r3, r3, #1
 2730 0078 BB61     		str	r3, [r7, #24]
1151:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 2731              		.loc 1 1151 0
 2732 007a 7B69     		ldr	r3, [r7, #20]
 2733 007c 5B08     		lsr	r3, r3, #1
 2734 007e 7B61     		str	r3, [r7, #20]
 2735              	.L118:
1152:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1153:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 2736              		.loc 1 1154 0
 2737 0080 7B68     		ldr	r3, [r7, #4]
 2738 0082 9B69     		ldr	r3, [r3, #24]
 2739 0084 7A69     		ldr	r2, [r7, #20]
 2740 0086 1204     		lsl	r2, r2, #16
 2741 0088 120C     		lsr	r2, r2, #16
 2742 008a 5A63     		str	r2, [r3, #52]
1155:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
 2743              		.loc 1 1155 0
 2744 008c 7B68     		ldr	r3, [r7, #4]
 2745 008e DB69     		ldr	r3, [r3, #28]
 2746 0090 BA69     		ldr	r2, [r7, #24]
 2747 0092 1204     		lsl	r2, r2, #16
 2748 0094 120C     		lsr	r2, r2, #16
 2749 0096 5A63     		str	r2, [r3, #52]
1156:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_5>>>*/
1158:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2750              		.loc 1 1158 0
 2751 0098 0023     		mov	r3, #0
 2752 009a FB60     		str	r3, [r7, #12]
 2753              	.L114:
1159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2754              		.loc 1 1160 0
 2755 009c FB68     		ldr	r3, [r7, #12]
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2756              		.loc 1 1161 0
 2757 009e 181C     		mov	r0, r3
 2758 00a0 BD46     		mov	sp, r7
 2759 00a2 08B0     		add	sp, sp, #32
 2760              		@ sp needed for prologue
 2761 00a4 80BD     		pop	{r7, pc}
 2762              	.L121:
 2763 00a6 C046     		.align	2
 2764              	.L120:
 2765 00a8 FFFF0000 		.word	65535
 2766 00ac FEFF0000 		.word	65534
 2767              		.cfi_endproc
 2768              	.LFE50:
 2770              		.section	.text.PWMSP001_SetTimerVal,"ax",%progbits
 2771              		.align	2
 2772              		.global	PWMSP001_SetTimerVal
 2773              		.code	16
 2774              		.thumb_func
 2776              	PWMSP001_SetTimerVal:
 2777              	.LFB51:
1162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1164:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_7>>>*/
1166:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the timer value.
1168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetTimerVal
1170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1172:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t TimerVal
1173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2778              		.loc 1 1174 0
 2779              		.cfi_startproc
 2780 0000 80B5     		push	{r7, lr}
 2781              	.LCFI54:
 2782              		.cfi_def_cfa_offset 8
 2783              		.cfi_offset 7, -8
 2784              		.cfi_offset 14, -4
 2785 0002 84B0     		sub	sp, sp, #16
 2786              	.LCFI55:
 2787              		.cfi_def_cfa_offset 24
 2788 0004 00AF     		add	r7, sp, #0
 2789              	.LCFI56:
 2790              		.cfi_def_cfa_register 7
 2791 0006 7860     		str	r0, [r7, #4]
 2792 0008 3960     		str	r1, [r7]
1175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2793              		.loc 1 1175 0
 2794 000a 0123     		mov	r3, #1
 2795 000c FB60     		str	r3, [r7, #12]
1176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2796              		.loc 1 1177 0
 2797 000e 7B68     		ldr	r3, [r7, #4]
 2798 0010 DB6B     		ldr	r3, [r3, #60]
 2799 0012 1B78     		ldrb	r3, [r3]
 2800 0014 012B     		cmp	r3, #1
 2801 0016 04D0     		beq	.L123
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 2802              		.loc 1 1178 0 discriminator 1
 2803 0018 7B68     		ldr	r3, [r7, #4]
 2804 001a DB6B     		ldr	r3, [r3, #60]
 2805 001c 1B78     		ldrb	r3, [r3]
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2806              		.loc 1 1177 0 discriminator 1
 2807 001e 032B     		cmp	r3, #3
 2808 0020 11D1     		bne	.L124
 2809              	.L123:
1179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1181:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1184:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
 2810              		.loc 1 1185 0
 2811 0022 7B68     		ldr	r3, [r7, #4]
 2812 0024 9B69     		ldr	r3, [r3, #24]
 2813 0026 3A68     		ldr	r2, [r7]
 2814 0028 1204     		lsl	r2, r2, #16
 2815 002a 120C     		lsr	r2, r2, #16
 2816 002c 1A67     		str	r2, [r3, #112]
1186:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2817              		.loc 1 1186 0
 2818 002e 7A68     		ldr	r2, [r7, #4]
 2819 0030 2023     		mov	r3, #32
 2820 0032 D35C     		ldrb	r3, [r2, r3]
 2821 0034 012B     		cmp	r3, #1
 2822 0036 04D1     		bne	.L125
1187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
 2823              		.loc 1 1188 0
 2824 0038 7B68     		ldr	r3, [r7, #4]
 2825 003a DB69     		ldr	r3, [r3, #28]
 2826 003c 3A68     		ldr	r2, [r7]
 2827 003e 120C     		lsr	r2, r2, #16
 2828 0040 1A67     		str	r2, [r3, #112]
 2829              	.L125:
1189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2830              		.loc 1 1190 0
 2831 0042 0023     		mov	r3, #0
 2832 0044 FB60     		str	r3, [r7, #12]
 2833              	.L124:
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1192:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2834              		.loc 1 1192 0
 2835 0046 FB68     		ldr	r3, [r7, #12]
1193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2836              		.loc 1 1193 0
 2837 0048 181C     		mov	r0, r3
 2838 004a BD46     		mov	sp, r7
 2839 004c 04B0     		add	sp, sp, #16
 2840              		@ sp needed for prologue
 2841 004e 80BD     		pop	{r7, pc}
 2842              		.cfi_endproc
 2843              	.LFE51:
 2845              		.section	.text.PWMSP001_GetTimerStatus,"ax",%progbits
 2846              		.align	2
 2847              		.global	PWMSP001_GetTimerStatus
 2848              		.code	16
 2849              		.thumb_func
 2851              	PWMSP001_GetTimerStatus:
 2852              	.LFB52:
1194:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_8>>>*/
1196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1197:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer status - Running or Idle
1198:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1199:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerStatus
1200:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* TimerStatus
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2853              		.loc 1 1204 0
 2854              		.cfi_startproc
 2855 0000 80B5     		push	{r7, lr}
 2856              	.LCFI57:
 2857              		.cfi_def_cfa_offset 8
 2858              		.cfi_offset 7, -8
 2859              		.cfi_offset 14, -4
 2860 0002 84B0     		sub	sp, sp, #16
 2861              	.LCFI58:
 2862              		.cfi_def_cfa_offset 24
 2863 0004 00AF     		add	r7, sp, #0
 2864              	.LCFI59:
 2865              		.cfi_def_cfa_register 7
 2866 0006 7860     		str	r0, [r7, #4]
 2867 0008 3960     		str	r1, [r7]
1205:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2868              		.loc 1 1205 0
 2869 000a 0123     		mov	r3, #1
 2870 000c FB60     		str	r3, [r7, #12]
1206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondTimerStatus = (uint32_t)0;
 2871              		.loc 1 1206 0
 2872 000e 0023     		mov	r3, #0
 2873 0010 BB60     		str	r3, [r7, #8]
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_1>>>*/
1208:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2874              		.loc 1 1208 0
 2875 0012 7B68     		ldr	r3, [r7, #4]
 2876 0014 DB6B     		ldr	r3, [r3, #60]
 2877 0016 1B78     		ldrb	r3, [r3]
 2878 0018 002B     		cmp	r3, #0
 2879 001a 1DD0     		beq	.L128
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_2>>>*/
1213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2880              		.loc 1 1215 0
 2881 001c 7A68     		ldr	r2, [r7, #4]
 2882 001e 2023     		mov	r3, #32
 2883 0020 D35C     		ldrb	r3, [r2, r3]
 2884 0022 012B     		cmp	r3, #1
 2885 0024 0FD1     		bne	.L129
1216:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1217:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 2886              		.loc 1 1217 0
 2887 0026 7B68     		ldr	r3, [r7, #4]
 2888 0028 DB69     		ldr	r3, [r3, #28]
 2889 002a 9A68     		ldr	r2, [r3, #8]
 2890 002c 0123     		mov	r3, #1
 2891 002e 1340     		and	r3, r2
 2892 0030 BB60     		str	r3, [r7, #8]
1218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2893              		.loc 1 1219 0
 2894 0032 7B68     		ldr	r3, [r7, #4]
 2895 0034 9B69     		ldr	r3, [r3, #24]
 2896 0036 9B68     		ldr	r3, [r3, #8]
 2897 0038 BA68     		ldr	r2, [r7, #8]
 2898 003a 1A40     		and	r2, r3
 2899 003c 0123     		mov	r3, #1
 2900 003e 1A40     		and	r2, r3
 2901 0040 3B68     		ldr	r3, [r7]
 2902 0042 1A60     		str	r2, [r3]
 2903 0044 06E0     		b	.L130
 2904              	.L129:
1220:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos)) &
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           SecondTimerStatus
1222:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       );
1223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2905              		.loc 1 1226 0
 2906 0046 7B68     		ldr	r3, [r7, #4]
 2907 0048 9B69     		ldr	r3, [r3, #24]
 2908 004a 9A68     		ldr	r2, [r3, #8]
 2909 004c 0123     		mov	r3, #1
 2910 004e 1A40     		and	r2, r3
 2911 0050 3B68     		ldr	r3, [r7]
 2912 0052 1A60     		str	r2, [r3]
 2913              	.L130:
1227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
1228:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1229:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2914              		.loc 1 1229 0
 2915 0054 0023     		mov	r3, #0
 2916 0056 FB60     		str	r3, [r7, #12]
 2917              	.L128:
1230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status; 
 2918              		.loc 1 1231 0
 2919 0058 FB68     		ldr	r3, [r7, #12]
1232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2920              		.loc 1 1232 0
 2921 005a 181C     		mov	r0, r3
 2922 005c BD46     		mov	sp, r7
 2923 005e 04B0     		add	sp, sp, #16
 2924              		@ sp needed for prologue
 2925 0060 80BD     		pop	{r7, pc}
 2926              		.cfi_endproc
 2927              	.LFE52:
 2929 0062 C046     		.section	.text.PWMSP001_GetTimerRegsVal,"ax",%progbits
 2930              		.align	2
 2931              		.global	PWMSP001_GetTimerRegsVal
 2932              		.code	16
 2933              		.thumb_func
 2935              	PWMSP001_GetTimerRegsVal:
 2936              	.LFB53:
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_9>>>*/
1235:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer registers.
1237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1238:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerRegsVal
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1240:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1241:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     PWMSP001_TimerRegsType* TimerRegs
1242:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1243:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2937              		.loc 1 1243 0
 2938              		.cfi_startproc
 2939 0000 80B5     		push	{r7, lr}
 2940              	.LCFI60:
 2941              		.cfi_def_cfa_offset 8
 2942              		.cfi_offset 7, -8
 2943              		.cfi_offset 14, -4
 2944 0002 84B0     		sub	sp, sp, #16
 2945              	.LCFI61:
 2946              		.cfi_def_cfa_offset 24
 2947 0004 00AF     		add	r7, sp, #0
 2948              	.LCFI62:
 2949              		.cfi_def_cfa_register 7
 2950 0006 7860     		str	r0, [r7, #4]
 2951 0008 3960     		str	r1, [r7]
1244:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2952              		.loc 1 1244 0
 2953 000a 0123     		mov	r3, #1
 2954 000c FB60     		str	r3, [r7, #12]
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t ScndSlTMRVal = 0UL;
 2955              		.loc 1 1245 0
 2956 000e 0023     		mov	r3, #0
 2957 0010 BB60     		str	r3, [r7, #8]
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_1>>>*/
1248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2958              		.loc 1 1248 0
 2959 0012 7B68     		ldr	r3, [r7, #4]
 2960 0014 DB6B     		ldr	r3, [r3, #60]
 2961 0016 1B78     		ldrb	r3, [r3]
 2962 0018 002B     		cmp	r3, #0
 2963 001a 51D0     		beq	.L133
1249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1252:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_2>>>*/
1253:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2964              		.loc 1 1255 0
 2965 001c 7A68     		ldr	r2, [r7, #4]
 2966 001e 2023     		mov	r3, #32
 2967 0020 D35C     		ldrb	r3, [r2, r3]
 2968 0022 012B     		cmp	r3, #1
 2969 0024 39D1     		bne	.L134
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
 2970              		.loc 1 1257 0
 2971 0026 7B68     		ldr	r3, [r7, #4]
 2972 0028 DB69     		ldr	r3, [r3, #28]
 2973 002a 1B6F     		ldr	r3, [r3, #112]
 2974 002c 1B04     		lsl	r3, r3, #16
 2975 002e BB60     		str	r3, [r7, #8]
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2976              		.loc 1 1261 0
 2977 0030 7B68     		ldr	r3, [r7, #4]
 2978 0032 9B69     		ldr	r3, [r3, #24]
 2979 0034 1B6F     		ldr	r3, [r3, #112]
 2980 0036 1B04     		lsl	r3, r3, #16
 2981 0038 1A0C     		lsr	r2, r3, #16
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 2982              		.loc 1 1260 0
 2983 003a BB68     		ldr	r3, [r7, #8]
 2984 003c 1A43     		orr	r2, r3
 2985 003e 3B68     		ldr	r3, [r7]
 2986 0040 9A60     		str	r2, [r3, #8]
1262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));
1263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
 2987              		.loc 1 1264 0
 2988 0042 7B68     		ldr	r3, [r7, #4]
 2989 0044 DB69     		ldr	r3, [r3, #28]
 2990 0046 DA6B     		ldr	r2, [r3, #60]
 2991 0048 3B68     		ldr	r3, [r7]
 2992 004a 1A60     		str	r2, [r3]
1265:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
 2993              		.loc 1 1265 0
 2994 004c 3B68     		ldr	r3, [r7]
 2995 004e 1A68     		ldr	r2, [r3]
 2996 0050 7B68     		ldr	r3, [r7, #4]
 2997 0052 9B69     		ldr	r3, [r3, #24]
 2998 0054 5B6B     		ldr	r3, [r3, #52]
 2999 0056 5A43     		mul	r2, r3
 3000 0058 3B68     		ldr	r3, [r7]
 3001 005a 1A60     		str	r2, [r3]
1266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 3002              		.loc 1 1266 0
 3003 005c 3B68     		ldr	r3, [r7]
 3004 005e 1A68     		ldr	r2, [r3]
 3005 0060 7B68     		ldr	r3, [r7, #4]
 3006 0062 9B69     		ldr	r3, [r3, #24]
 3007 0064 DB6B     		ldr	r3, [r3, #60]
 3008 0066 D218     		add	r2, r2, r3
 3009 0068 3B68     		ldr	r3, [r7]
 3010 006a 1A60     		str	r2, [r3]
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 3011              		.loc 1 1267 0
 3012 006c 7B68     		ldr	r3, [r7, #4]
 3013 006e DB69     		ldr	r3, [r3, #28]
 3014 0070 5B6B     		ldr	r3, [r3, #52]
 3015 0072 5A1C     		add	r2, r3, #1
 3016 0074 3B68     		ldr	r3, [r7]
 3017 0076 5A60     		str	r2, [r3, #4]
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 3018              		.loc 1 1268 0
 3019 0078 3B68     		ldr	r3, [r7]
 3020 007a 5A68     		ldr	r2, [r3, #4]
 3021 007c 7B68     		ldr	r3, [r7, #4]
 3022 007e 9B69     		ldr	r3, [r3, #24]
 3023 0080 5B6B     		ldr	r3, [r3, #52]
 3024 0082 1B04     		lsl	r3, r3, #16
 3025 0084 1B0C     		lsr	r3, r3, #16
 3026 0086 0133     		add	r3, r3, #1
 3027 0088 5A43     		mul	r2, r3
 3028 008a 3B68     		ldr	r3, [r7]
 3029 008c 5A60     		str	r2, [r3, #4]
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 3030              		.loc 1 1269 0
 3031 008e 3B68     		ldr	r3, [r7]
 3032 0090 5B68     		ldr	r3, [r3, #4]
 3033 0092 5A1C     		add	r2, r3, #1
 3034 0094 3B68     		ldr	r3, [r7]
 3035 0096 5A60     		str	r2, [r3, #4]
 3036 0098 10E0     		b	.L135
 3037              	.L134:
1270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1273:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1274:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 3038              		.loc 1 1274 0
 3039 009a 7B68     		ldr	r3, [r7, #4]
 3040 009c 9B69     		ldr	r3, [r3, #24]
 3041 009e 1B6F     		ldr	r3, [r3, #112]
 3042 00a0 1B04     		lsl	r3, r3, #16
 3043 00a2 1A0C     		lsr	r2, r3, #16
 3044 00a4 3B68     		ldr	r3, [r7]
 3045 00a6 9A60     		str	r2, [r3, #8]
1275:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
1276:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 3046              		.loc 1 1277 0
 3047 00a8 7B68     		ldr	r3, [r7, #4]
 3048 00aa 9B69     		ldr	r3, [r3, #24]
 3049 00ac DA6B     		ldr	r2, [r3, #60]
 3050 00ae 3B68     		ldr	r3, [r7]
 3051 00b0 1A60     		str	r2, [r3]
1278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 3052              		.loc 1 1278 0
 3053 00b2 7B68     		ldr	r3, [r7, #4]
 3054 00b4 9B69     		ldr	r3, [r3, #24]
 3055 00b6 5A6B     		ldr	r2, [r3, #52]
 3056 00b8 3B68     		ldr	r3, [r7]
 3057 00ba 5A60     		str	r2, [r3, #4]
 3058              	.L135:
1279:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3059              		.loc 1 1281 0
 3060 00bc 0023     		mov	r3, #0
 3061 00be FB60     		str	r3, [r7, #12]
 3062              	.L133:
1282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3063              		.loc 1 1283 0
 3064 00c0 FB68     		ldr	r3, [r7, #12]
1284:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3065              		.loc 1 1284 0
 3066 00c2 181C     		mov	r0, r3
 3067 00c4 BD46     		mov	sp, r7
 3068 00c6 04B0     		add	sp, sp, #16
 3069              		@ sp needed for prologue
 3070 00c8 80BD     		pop	{r7, pc}
 3071              		.cfi_endproc
 3072              	.LFE53:
 3074 00ca C046     		.section	.text.PWMSP001_GetPeriodReg,"ax",%progbits
 3075              		.align	2
 3076              		.global	PWMSP001_GetPeriodReg
 3077              		.code	16
 3078              		.thumb_func
 3080              	PWMSP001_GetPeriodReg:
 3081              	.LFB54:
1285:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
1287:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the period register value
1289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1290:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPeriodReg
1291:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* PeriodReg
1294:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1295:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3082              		.loc 1 1295 0
 3083              		.cfi_startproc
 3084 0000 80B5     		push	{r7, lr}
 3085              	.LCFI63:
 3086              		.cfi_def_cfa_offset 8
 3087              		.cfi_offset 7, -8
 3088              		.cfi_offset 14, -4
 3089 0002 84B0     		sub	sp, sp, #16
 3090              	.LCFI64:
 3091              		.cfi_def_cfa_offset 24
 3092 0004 00AF     		add	r7, sp, #0
 3093              	.LCFI65:
 3094              		.cfi_def_cfa_register 7
 3095 0006 7860     		str	r0, [r7, #4]
 3096 0008 3960     		str	r1, [r7]
1296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3097              		.loc 1 1296 0
 3098 000a 0123     		mov	r3, #1
 3099 000c FB60     		str	r3, [r7, #12]
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_1>>>*/
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3100              		.loc 1 1299 0
 3101 000e 7B68     		ldr	r3, [r7, #4]
 3102 0010 DB6B     		ldr	r3, [r3, #60]
 3103 0012 1B78     		ldrb	r3, [r3]
 3104 0014 002B     		cmp	r3, #0
 3105 0016 22D0     		beq	.L138
1300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1301:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3106              		.loc 1 1305 0
 3107 0018 7A68     		ldr	r2, [r7, #4]
 3108 001a 2023     		mov	r3, #32
 3109 001c D35C     		ldrb	r3, [r2, r3]
 3110 001e 012B     		cmp	r3, #1
 3111 0020 16D1     		bne	.L139
1306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 3112              		.loc 1 1307 0
 3113 0022 7B68     		ldr	r3, [r7, #4]
 3114 0024 DB69     		ldr	r3, [r3, #28]
 3115 0026 5B6B     		ldr	r3, [r3, #52]
 3116 0028 5A1C     		add	r2, r3, #1
 3117 002a 3B68     		ldr	r3, [r7]
 3118 002c 1A60     		str	r2, [r3]
1308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 3119              		.loc 1 1308 0
 3120 002e 3B68     		ldr	r3, [r7]
 3121 0030 1A68     		ldr	r2, [r3]
 3122 0032 7B68     		ldr	r3, [r7, #4]
 3123 0034 9B69     		ldr	r3, [r3, #24]
 3124 0036 5B6B     		ldr	r3, [r3, #52]
 3125 0038 1B04     		lsl	r3, r3, #16
 3126 003a 1B0C     		lsr	r3, r3, #16
 3127 003c 0133     		add	r3, r3, #1
 3128 003e 5A43     		mul	r2, r3
 3129 0040 3B68     		ldr	r3, [r7]
 3130 0042 1A60     		str	r2, [r3]
1309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
 3131              		.loc 1 1309 0
 3132 0044 3B68     		ldr	r3, [r7]
 3133 0046 1B68     		ldr	r3, [r3]
 3134 0048 5A1C     		add	r2, r3, #1
 3135 004a 3B68     		ldr	r3, [r7]
 3136 004c 1A60     		str	r2, [r3]
 3137 004e 04E0     		b	.L140
 3138              	.L139:
1310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 3139              		.loc 1 1313 0
 3140 0050 7B68     		ldr	r3, [r7, #4]
 3141 0052 9B69     		ldr	r3, [r3, #24]
 3142 0054 5A6B     		ldr	r2, [r3, #52]
 3143 0056 3B68     		ldr	r3, [r7]
 3144 0058 1A60     		str	r2, [r3]
 3145              	.L140:
1314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3146              		.loc 1 1315 0
 3147 005a 0023     		mov	r3, #0
 3148 005c FB60     		str	r3, [r7, #12]
 3149              	.L138:
1316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3150              		.loc 1 1317 0
 3151 005e FB68     		ldr	r3, [r7, #12]
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3152              		.loc 1 1318 0
 3153 0060 181C     		mov	r0, r3
 3154 0062 BD46     		mov	sp, r7
 3155 0064 04B0     		add	sp, sp, #16
 3156              		@ sp needed for prologue
 3157 0066 80BD     		pop	{r7, pc}
 3158              		.cfi_endproc
 3159              	.LFE54:
 3161              		.section	.text.PWMSP001_SWRequestShadowTransfer,"ax",%progbits
 3162              		.align	2
 3163              		.global	PWMSP001_SWRequestShadowTransfer
 3164              		.code	16
 3165              		.thumb_func
 3167              	PWMSP001_SWRequestShadowTransfer:
 3168              	.LFB55:
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1320:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_10>>>*/
1321:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This functions enables the shadow transfer of compare and period register values
1323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1324:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SWRequestShadowTransfer
1325:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
1327:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1328:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3169              		.loc 1 1328 0
 3170              		.cfi_startproc
 3171 0000 B0B5     		push	{r4, r5, r7, lr}
 3172              	.LCFI66:
 3173              		.cfi_def_cfa_offset 16
 3174              		.cfi_offset 4, -16
 3175              		.cfi_offset 5, -12
 3176              		.cfi_offset 7, -8
 3177              		.cfi_offset 14, -4
 3178 0002 86B0     		sub	sp, sp, #24
 3179              	.LCFI67:
 3180              		.cfi_def_cfa_offset 40
 3181 0004 00AF     		add	r7, sp, #0
 3182              	.LCFI68:
 3183              		.cfi_def_cfa_register 7
 3184 0006 7860     		str	r0, [r7, #4]
1329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3185              		.loc 1 1329 0
 3186 0008 0123     		mov	r3, #1
 3187 000a 7B61     		str	r3, [r7, #20]
1330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1333:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_1>>>*/
1335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3188              		.loc 1 1335 0
 3189 000c 7B68     		ldr	r3, [r7, #4]
 3190 000e DB6B     		ldr	r3, [r3, #60]
 3191 0010 1B78     		ldrb	r3, [r3]
 3192 0012 002B     		cmp	r3, #0
 3193 0014 32D0     		beq	.L143
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_2>>>*/
1340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request shadow transfer for the First Slice*/
1343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3194              		.loc 1 1343 0
 3195 0016 7A68     		ldr	r2, [r7, #4]
 3196 0018 2023     		mov	r3, #32
 3197 001a D35C     		ldrb	r3, [r2, r3]
 3198 001c 012B     		cmp	r3, #1
 3199 001e 1AD1     		bne	.L144
1344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Request shadow transfer for the Second Slice*/
1346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 3200              		.loc 1 1346 0
 3201 0020 7A68     		ldr	r2, [r7, #4]
 3202 0022 3723     		mov	r3, #55
 3203 0024 D35C     		ldrb	r3, [r2, r3]
 3204 0026 9B00     		lsl	r3, r3, #2
 3205 0028 3B61     		str	r3, [r7, #16]
1347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 3206              		.loc 1 1347 0
 3207 002a 7A68     		ldr	r2, [r7, #4]
 3208 002c 3823     		mov	r3, #56
 3209 002e D35C     		ldrb	r3, [r2, r3]
 3210 0030 9B00     		lsl	r3, r3, #2
 3211 0032 FB60     		str	r3, [r7, #12]
1348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 3212              		.loc 1 1348 0
 3213 0034 7B68     		ldr	r3, [r7, #4]
 3214 0036 5B69     		ldr	r3, [r3, #20]
 3215 0038 7A68     		ldr	r2, [r7, #4]
 3216 003a 5269     		ldr	r2, [r2, #20]
 3217 003c 1169     		ldr	r1, [r2, #16]
 3218 003e 3A69     		ldr	r2, [r7, #16]
 3219 0040 0120     		mov	r0, #1
 3220 0042 9040     		lsl	r0, r0, r2
 3221 0044 FA68     		ldr	r2, [r7, #12]
 3222 0046 0124     		mov	r4, #1
 3223 0048 251C     		mov	r5, r4
 3224 004a 9540     		lsl	r5, r5, r2
 3225 004c 2A1C     		mov	r2, r5
 3226 004e 0243     		orr	r2, r0
 3227 0050 0A43     		orr	r2, r1
 3228 0052 1A61     		str	r2, [r3, #16]
 3229 0054 10E0     		b	.L145
 3230              	.L144:
1349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1350:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1351:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 3231              		.loc 1 1352 0
 3232 0056 7A68     		ldr	r2, [r7, #4]
 3233 0058 3723     		mov	r3, #55
 3234 005a D35C     		ldrb	r3, [r2, r3]
 3235 005c 9B00     		lsl	r3, r3, #2
 3236 005e BB60     		str	r3, [r7, #8]
1353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
 3237              		.loc 1 1353 0
 3238 0060 7B68     		ldr	r3, [r7, #4]
 3239 0062 5B69     		ldr	r3, [r3, #20]
 3240 0064 7A68     		ldr	r2, [r7, #4]
 3241 0066 5269     		ldr	r2, [r2, #20]
 3242 0068 1169     		ldr	r1, [r2, #16]
 3243 006a BA68     		ldr	r2, [r7, #8]
 3244 006c 0120     		mov	r0, #1
 3245 006e 041C     		mov	r4, r0
 3246 0070 9440     		lsl	r4, r4, r2
 3247 0072 221C     		mov	r2, r4
 3248 0074 0A43     		orr	r2, r1
 3249 0076 1A61     		str	r2, [r3, #16]
 3250              	.L145:
1354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3251              		.loc 1 1355 0
 3252 0078 0023     		mov	r3, #0
 3253 007a 7B61     		str	r3, [r7, #20]
 3254              	.L143:
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3255              		.loc 1 1357 0
 3256 007c 7B69     		ldr	r3, [r7, #20]
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3257              		.loc 1 1358 0
 3258 007e 181C     		mov	r0, r3
 3259 0080 BD46     		mov	sp, r7
 3260 0082 06B0     		add	sp, sp, #24
 3261              		@ sp needed for prologue
 3262 0084 B0BD     		pop	{r4, r5, r7, pc}
 3263              		.cfi_endproc
 3264              	.LFE55:
 3266 0086 C046     		.section	.text.PWMSP001_ResetTrapFlag,"ax",%progbits
 3267              		.align	2
 3268              		.global	PWMSP001_ResetTrapFlag
 3269              		.code	16
 3270              		.thumb_func
 3272              	PWMSP001_ResetTrapFlag:
 3273              	.LFB56:
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1360:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_13>>>*/
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function resets the trap flag if trap condition is inactive
1363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1364:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
1365:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3274              		.loc 1 1365 0
 3275              		.cfi_startproc
 3276 0000 80B5     		push	{r7, lr}
 3277              	.LCFI69:
 3278              		.cfi_def_cfa_offset 8
 3279              		.cfi_offset 7, -8
 3280              		.cfi_offset 14, -4
 3281 0002 82B0     		sub	sp, sp, #8
 3282              	.LCFI70:
 3283              		.cfi_def_cfa_offset 16
 3284 0004 00AF     		add	r7, sp, #0
 3285              	.LCFI71:
 3286              		.cfi_def_cfa_register 7
 3287 0006 7860     		str	r0, [r7, #4]
1366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 3288              		.loc 1 1366 0
 3289 0008 7B68     		ldr	r3, [r7, #4]
 3290 000a DB7C     		ldrb	r3, [r3, #19]
 3291 000c 012B     		cmp	r3, #1
 3292 000e 1AD1     		bne	.L148
1367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1368:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3293              		.loc 1 1368 0
 3294 0010 7B68     		ldr	r3, [r7, #4]
 3295 0012 9A69     		ldr	r2, [r3, #24]
 3296 0014 7B68     		ldr	r3, [r7, #4]
 3297 0016 9969     		ldr	r1, [r3, #24]
 3298 0018 B023     		mov	r3, #176
 3299 001a CB58     		ldr	r3, [r1, r3]
 3300 001c 8021     		mov	r1, #128
 3301 001e C900     		lsl	r1, r1, #3
 3302 0020 1943     		orr	r1, r3
 3303 0022 B023     		mov	r3, #176
 3304 0024 D150     		str	r1, [r2, r3]
1369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3305              		.loc 1 1369 0
 3306 0026 7A68     		ldr	r2, [r7, #4]
 3307 0028 2023     		mov	r3, #32
 3308 002a D35C     		ldrb	r3, [r2, r3]
 3309 002c 012B     		cmp	r3, #1
 3310 002e 0AD1     		bne	.L148
1370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3311              		.loc 1 1371 0
 3312 0030 7B68     		ldr	r3, [r7, #4]
 3313 0032 DA69     		ldr	r2, [r3, #28]
 3314 0034 7B68     		ldr	r3, [r7, #4]
 3315 0036 D969     		ldr	r1, [r3, #28]
 3316 0038 B023     		mov	r3, #176
 3317 003a CB58     		ldr	r3, [r1, r3]
 3318 003c 8021     		mov	r1, #128
 3319 003e C900     		lsl	r1, r1, #3
 3320 0040 1943     		orr	r1, r3
 3321 0042 B023     		mov	r3, #176
 3322 0044 D150     		str	r1, [r2, r3]
 3323              	.L148:
1372:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3324              		.loc 1 1374 0
 3325 0046 7B68     		ldr	r3, [r7, #4]
 3326 0048 9A69     		ldr	r2, [r3, #24]
 3327 004a 7B68     		ldr	r3, [r7, #4]
 3328 004c 9969     		ldr	r1, [r3, #24]
 3329 004e B023     		mov	r3, #176
 3330 0050 CB58     		ldr	r3, [r1, r3]
 3331 0052 8021     		mov	r1, #128
 3332 0054 0901     		lsl	r1, r1, #4
 3333 0056 1943     		orr	r1, r3
 3334 0058 B023     		mov	r3, #176
 3335 005a D150     		str	r1, [r2, r3]
1375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3336              		.loc 1 1375 0
 3337 005c 7A68     		ldr	r2, [r7, #4]
 3338 005e 2023     		mov	r3, #32
 3339 0060 D35C     		ldrb	r3, [r2, r3]
 3340 0062 012B     		cmp	r3, #1
 3341 0064 0AD1     		bne	.L147
1376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3342              		.loc 1 1377 0
 3343 0066 7B68     		ldr	r3, [r7, #4]
 3344 0068 DA69     		ldr	r2, [r3, #28]
 3345 006a 7B68     		ldr	r3, [r7, #4]
 3346 006c D969     		ldr	r1, [r3, #28]
 3347 006e B023     		mov	r3, #176
 3348 0070 CB58     		ldr	r3, [r1, r3]
 3349 0072 8021     		mov	r1, #128
 3350 0074 0901     		lsl	r1, r1, #4
 3351 0076 1943     		orr	r1, r3
 3352 0078 B023     		mov	r3, #176
 3353 007a D150     		str	r1, [r2, r3]
 3354              	.L147:
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1379:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3355              		.loc 1 1379 0
 3356 007c BD46     		mov	sp, r7
 3357 007e 02B0     		add	sp, sp, #8
 3358              		@ sp needed for prologue
 3359 0080 80BD     		pop	{r7, pc}
 3360              		.cfi_endproc
 3361              	.LFE56:
 3363 0082 C046     		.section	.text.PWMSP001_lConfigureSecondSlice,"ax",%progbits
 3364              		.align	2
 3365              		.global	PWMSP001_lConfigureSecondSlice
 3366              		.code	16
 3367              		.thumb_func
 3369              	PWMSP001_lConfigureSecondSlice:
 3370              	.LFB57:
1380:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_nonAPI_1>>>*/
1382:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function configures second slice.
1384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1385:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1386:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
1387:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3371              		.loc 1 1387 0
 3372              		.cfi_startproc
 3373 0000 B0B5     		push	{r4, r5, r7, lr}
 3374              	.LCFI72:
 3375              		.cfi_def_cfa_offset 16
 3376              		.cfi_offset 4, -16
 3377              		.cfi_offset 5, -12
 3378              		.cfi_offset 7, -8
 3379              		.cfi_offset 14, -4
 3380 0002 82B0     		sub	sp, sp, #8
 3381              	.LCFI73:
 3382              		.cfi_def_cfa_offset 24
 3383 0004 00AF     		add	r7, sp, #0
 3384              	.LCFI74:
 3385              		.cfi_def_cfa_register 7
 3386 0006 7860     		str	r0, [r7, #4]
1388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 3387              		.loc 1 1388 0
 3388 0008 7B68     		ldr	r3, [r7, #4]
 3389 000a DB69     		ldr	r3, [r3, #28]
 3390 000c 0722     		mov	r2, #7
 3391 000e 1A61     		str	r2, [r3, #16]
1389:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Set period and compare values for second slice*/
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 3392              		.loc 1 1391 0
 3393 0010 7B68     		ldr	r3, [r7, #4]
 3394 0012 DB69     		ldr	r3, [r3, #28]
 3395 0014 7A68     		ldr	r2, [r7, #4]
 3396 0016 926A     		ldr	r2, [r2, #40]
 3397 0018 120C     		lsr	r2, r2, #16
 3398 001a 5A63     		str	r2, [r3, #52]
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
 3399              		.loc 1 1393 0
 3400 001c 7B68     		ldr	r3, [r7, #4]
 3401 001e DB69     		ldr	r3, [r3, #28]
 3402 0020 7A68     		ldr	r2, [r7, #4]
 3403 0022 9268     		ldr	r2, [r2, #8]
 3404 0024 120C     		lsr	r2, r2, #16
 3405 0026 DA63     		str	r2, [r3, #60]
1394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1395:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
 3406              		.loc 1 1396 0
 3407 0028 7B68     		ldr	r3, [r7, #4]
 3408 002a DB69     		ldr	r3, [r3, #28]
 3409 002c 7A68     		ldr	r2, [r7, #4]
 3410 002e D269     		ldr	r2, [r2, #28]
 3411 0030 5268     		ldr	r2, [r2, #4]
 3412 0032 8021     		mov	r1, #128
 3413 0034 4903     		lsl	r1, r1, #13
 3414 0036 0A43     		orr	r2, r1
 3415 0038 5A60     		str	r2, [r3, #4]
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
1399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 3416              		.loc 1 1399 0
 3417 003a 7B68     		ldr	r3, [r7, #4]
 3418 003c DB7B     		ldrb	r3, [r3, #15]
 3419 003e 012B     		cmp	r3, #1
 3420 0040 25D1     		bne	.L151
1400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 3421              		.loc 1 1401 0
 3422 0042 7B68     		ldr	r3, [r7, #4]
 3423 0044 DB69     		ldr	r3, [r3, #28]
 3424 0046 7A68     		ldr	r2, [r7, #4]
 3425 0048 D269     		ldr	r2, [r2, #28]
 3426 004a 1168     		ldr	r1, [r2]
 3427 004c 794A     		ldr	r2, .L153
 3428 004e 0A40     		and	r2, r1
 3429 0050 1A60     		str	r2, [r3]
1402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
 3430              		.loc 1 1402 0
 3431 0052 7B68     		ldr	r3, [r7, #4]
 3432 0054 DB69     		ldr	r3, [r3, #28]
 3433 0056 7A68     		ldr	r2, [r7, #4]
 3434 0058 D269     		ldr	r2, [r2, #28]
 3435 005a 5268     		ldr	r2, [r2, #4]
 3436 005c 0C21     		mov	r1, #12
 3437 005e 8A43     		bic	r2, r1
 3438 0060 5A60     		str	r2, [r3, #4]
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 3439              		.loc 1 1403 0
 3440 0062 7B68     		ldr	r3, [r7, #4]
 3441 0064 DB69     		ldr	r3, [r3, #28]
 3442 0066 7A68     		ldr	r2, [r7, #4]
 3443 0068 D269     		ldr	r2, [r2, #28]
 3444 006a 1168     		ldr	r1, [r2]
 3445 006c 7868     		ldr	r0, [r7, #4]
 3446 006e 2422     		mov	r2, #36
 3447 0070 825C     		ldrb	r2, [r0, r2]
 3448 0072 9004     		lsl	r0, r2, #18
 3449 0074 C022     		mov	r2, #192
 3450 0076 1203     		lsl	r2, r2, #12
 3451 0078 0240     		and	r2, r0
 3452 007a 0A43     		orr	r2, r1
 3453 007c 1A60     		str	r2, [r3]
1404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
1405:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
1406:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
 3454              		.loc 1 1407 0
 3455 007e 7B68     		ldr	r3, [r7, #4]
 3456 0080 DB69     		ldr	r3, [r3, #28]
 3457 0082 7A68     		ldr	r2, [r7, #4]
 3458 0084 D269     		ldr	r2, [r2, #28]
 3459 0086 5268     		ldr	r2, [r2, #4]
 3460 0088 0821     		mov	r1, #8
 3461 008a 0A43     		orr	r2, r1
 3462 008c 5A60     		str	r2, [r3, #4]
 3463              	.L151:
1408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
1409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kExtStopTrig == SET)*/
1410:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
1412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTrapEnable == (uint8_t)SET)
 3464              		.loc 1 1412 0
 3465 008e 7B68     		ldr	r3, [r7, #4]
 3466 0090 5B7C     		ldrb	r3, [r3, #17]
 3467 0092 012B     		cmp	r3, #1
 3468 0094 25D1     		bne	.L152
1413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
 3469              		.loc 1 1414 0
 3470 0096 7B68     		ldr	r3, [r7, #4]
 3471 0098 DB69     		ldr	r3, [r3, #28]
 3472 009a 7A68     		ldr	r2, [r7, #4]
 3473 009c D269     		ldr	r2, [r2, #28]
 3474 009e 1168     		ldr	r1, [r2]
 3475 00a0 654A     		ldr	r2, .L153+4
 3476 00a2 0A40     		and	r2, r1
 3477 00a4 1A60     		str	r2, [r3]
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         | CCU4_CC4_INS_LPF2M_Msk);
1416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
 3478              		.loc 1 1416 0
 3479 00a6 7B68     		ldr	r3, [r7, #4]
 3480 00a8 DB69     		ldr	r3, [r3, #28]
 3481 00aa 7A68     		ldr	r2, [r7, #4]
 3482 00ac D269     		ldr	r2, [r2, #28]
 3483 00ae 5168     		ldr	r1, [r2, #4]
 3484 00b0 624A     		ldr	r2, .L153+8
 3485 00b2 0A40     		and	r2, r1
 3486 00b4 5A60     		str	r2, [r3, #4]
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3487              		.loc 1 1417 0
 3488 00b6 7B68     		ldr	r3, [r7, #4]
 3489 00b8 DB69     		ldr	r3, [r3, #28]
 3490 00ba 7A68     		ldr	r2, [r7, #4]
 3491 00bc D269     		ldr	r2, [r2, #28]
 3492 00be 1168     		ldr	r1, [r2]
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kTrapLevel  <<	\
 3493              		.loc 1 1419 0
 3494 00c0 7A68     		ldr	r2, [r7, #4]
 3495 00c2 1278     		ldrb	r2, [r2]
 3496 00c4 1006     		lsl	r0, r2, #24
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3497              		.loc 1 1417 0
 3498 00c6 8022     		mov	r2, #128
 3499 00c8 5204     		lsl	r2, r2, #17
 3500 00ca 0240     		and	r2, r0
 3501 00cc 0A43     		orr	r2, r1
 3502 00ce 1A60     		str	r2, [r3]
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 3503              		.loc 1 1422 0
 3504 00d0 7B68     		ldr	r3, [r7, #4]
 3505 00d2 DB69     		ldr	r3, [r3, #28]
 3506 00d4 7A68     		ldr	r2, [r7, #4]
 3507 00d6 D269     		ldr	r2, [r2, #28]
 3508 00d8 5268     		ldr	r2, [r2, #4]
 3509 00da 8021     		mov	r1, #128
 3510 00dc 8902     		lsl	r1, r1, #10
 3511 00de 0A43     		orr	r2, r1
 3512 00e0 5A60     		str	r2, [r3, #4]
 3513              	.L152:
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kTrapEnable == SET)*/
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 3514              		.loc 1 1425 0
 3515 00e2 7B68     		ldr	r3, [r7, #4]
 3516 00e4 DB69     		ldr	r3, [r3, #28]
 3517 00e6 7A68     		ldr	r2, [r7, #4]
 3518 00e8 D269     		ldr	r2, [r2, #28]
 3519 00ea 5169     		ldr	r1, [r2, #20]
 3520 00ec 544A     		ldr	r2, .L153+12
 3521 00ee 0A40     		and	r2, r1
 3522 00f0 5A61     		str	r2, [r3, #20]
1426:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
1427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_DITHE_Msk);
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3523              		.loc 1 1428 0
 3524 00f2 7B68     		ldr	r3, [r7, #4]
 3525 00f4 DB69     		ldr	r3, [r3, #28]
 3526 00f6 7968     		ldr	r1, [r7, #4]
 3527 00f8 3622     		mov	r2, #54
 3528 00fa 8A5C     		ldrb	r2, [r1, r2]
 3529 00fc 111C     		mov	r1, r2
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 3530              		.loc 1 1429 0
 3531 00fe 0122     		mov	r2, #1
 3532 0100 1140     		and	r1, r2
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 3533              		.loc 1 1430 0
 3534 0102 7A68     		ldr	r2, [r7, #4]
 3535 0104 127B     		ldrb	r2, [r2, #12]
 3536 0106 5000     		lsl	r0, r2, #1
 3537 0108 0222     		mov	r2, #2
 3538 010a 0240     		and	r2, r0
1431:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
 3539              		.loc 1 1431 0
 3540 010c 1143     		orr	r1, r2
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 3541              		.loc 1 1433 0
 3542 010e 7868     		ldr	r0, [r7, #4]
 3543 0110 3422     		mov	r2, #52
 3544 0112 825C     		ldrb	r2, [r0, r2]
 3545 0114 9002     		lsl	r0, r2, #10
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3546              		.loc 1 1434 0
 3547 0116 8022     		mov	r2, #128
 3548 0118 D200     		lsl	r2, r2, #3
 3549 011a 0240     		and	r2, r0
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 3550              		.loc 1 1432 0
 3551 011c 1143     		orr	r1, r2
 3552              		.loc 1 1434 0
 3553 011e 7868     		ldr	r0, [r7, #4]
 3554 0120 3522     		mov	r2, #53
 3555 0122 825C     		ldrb	r2, [r0, r2]
 3556 0124 1002     		lsl	r0, r2, #8
1435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 3557              		.loc 1 1435 0
 3558 0126 C022     		mov	r2, #192
 3559 0128 9200     		lsl	r2, r2, #2
 3560 012a 0240     		and	r2, r0
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3561              		.loc 1 1434 0
 3562 012c 0A43     		orr	r2, r1
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3563              		.loc 1 1428 0
 3564 012e 5A61     		str	r2, [r3, #20]
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_5>>>*/
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3565              		.loc 1 1438 0
 3566 0130 7B68     		ldr	r3, [r7, #4]
 3567 0132 DB69     		ldr	r3, [r3, #28]
 3568 0134 7A68     		ldr	r2, [r7, #4]
 3569 0136 D269     		ldr	r2, [r2, #28]
 3570 0138 5169     		ldr	r1, [r2, #20]
 3571 013a 7868     		ldr	r0, [r7, #4]
 3572 013c 2122     		mov	r2, #33
 3573 013e 825C     		ldrb	r2, [r0, r2]
 3574 0140 5003     		lsl	r0, r2, #13
1439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
 3575              		.loc 1 1439 0
 3576 0142 C022     		mov	r2, #192
 3577 0144 D201     		lsl	r2, r2, #7
 3578 0146 0240     		and	r2, r0
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3579              		.loc 1 1438 0
 3580 0148 0A43     		orr	r2, r1
 3581 014a 5A61     		str	r2, [r3, #20]
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
 3582              		.loc 1 1440 0
 3583 014c 7B68     		ldr	r3, [r7, #4]
 3584 014e DB69     		ldr	r3, [r3, #28]
 3585 0150 7A68     		ldr	r2, [r7, #4]
 3586 0152 527B     		ldrb	r2, [r2, #13]
 3587 0154 111C     		mov	r1, r2
 3588 0156 0F22     		mov	r2, #15
 3589 0158 1140     		and	r1, r2
 3590 015a 7A68     		ldr	r2, [r7, #4]
 3591 015c D269     		ldr	r2, [r2, #28]
 3592 015e 126A     		ldr	r2, [r2, #32]
 3593 0160 0F20     		mov	r0, #15
 3594 0162 8243     		bic	r2, r0
 3595 0164 0A43     		orr	r2, r1
 3596 0166 1A62     		str	r2, [r3, #32]
1441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_6>>>*/
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 3597              		.loc 1 1444 0
 3598 0168 7B68     		ldr	r3, [r7, #4]
 3599 016a DB69     		ldr	r3, [r3, #28]
 3600 016c 7A68     		ldr	r2, [r7, #4]
 3601 016e 927C     		ldrb	r2, [r2, #18]
 3602 0170 5105     		lsl	r1, r2, #21
 3603 0172 8022     		mov	r2, #128
 3604 0174 9203     		lsl	r2, r2, #14
 3605 0176 1140     		and	r1, r2
 3606 0178 7A68     		ldr	r2, [r7, #4]
 3607 017a D269     		ldr	r2, [r2, #28]
 3608 017c 5069     		ldr	r0, [r2, #20]
 3609 017e 314A     		ldr	r2, .L153+16
 3610 0180 0240     		and	r2, r0
 3611 0182 0A43     		orr	r2, r1
 3612 0184 5A61     		str	r2, [r3, #20]
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 3613              		.loc 1 1447 0
 3614 0186 7B68     		ldr	r3, [r7, #4]
 3615 0188 DB69     		ldr	r3, [r3, #28]
 3616 018a 7A68     		ldr	r2, [r7, #4]
 3617 018c D27C     		ldrb	r2, [r2, #19]
 3618 018e 9105     		lsl	r1, r2, #22
 3619 0190 8022     		mov	r2, #128
 3620 0192 D203     		lsl	r2, r2, #15
 3621 0194 1140     		and	r1, r2
 3622 0196 7A68     		ldr	r2, [r7, #4]
 3623 0198 D269     		ldr	r2, [r2, #28]
 3624 019a 5069     		ldr	r0, [r2, #20]
 3625 019c 2A4A     		ldr	r2, .L153+20
 3626 019e 0240     		and	r2, r0
 3627 01a0 0A43     		orr	r2, r1
 3628 01a2 5A61     		str	r2, [r3, #20]
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
 3629              		.loc 1 1450 0
 3630 01a4 7B68     		ldr	r3, [r7, #4]
 3631 01a6 DB69     		ldr	r3, [r3, #28]
 3632 01a8 7A68     		ldr	r2, [r7, #4]
 3633 01aa 527C     		ldrb	r2, [r2, #17]
 3634 01ac 5104     		lsl	r1, r2, #17
 3635 01ae 8022     		mov	r2, #128
 3636 01b0 9202     		lsl	r2, r2, #10
 3637 01b2 1140     		and	r1, r2
 3638 01b4 7A68     		ldr	r2, [r7, #4]
 3639 01b6 D269     		ldr	r2, [r2, #28]
 3640 01b8 5069     		ldr	r0, [r2, #20]
 3641 01ba 204A     		ldr	r2, .L153+8
 3642 01bc 0240     		and	r2, r0
 3643 01be 0A43     		orr	r2, r1
 3644 01c0 5A61     		str	r2, [r3, #20]
1451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
 3645              		.loc 1 1453 0
 3646 01c2 7B68     		ldr	r3, [r7, #4]
 3647 01c4 DB69     		ldr	r3, [r3, #28]
 3648 01c6 7968     		ldr	r1, [r7, #4]
 3649 01c8 2222     		mov	r2, #34
 3650 01ca 8A5C     		ldrb	r2, [r1, r2]
 3651 01cc 111C     		mov	r1, r2
 3652 01ce 0F22     		mov	r2, #15
 3653 01d0 1140     		and	r1, r2
 3654 01d2 7A68     		ldr	r2, [r7, #4]
 3655 01d4 D269     		ldr	r2, [r2, #28]
 3656 01d6 526A     		ldr	r2, [r2, #36]
 3657 01d8 0F20     		mov	r0, #15
 3658 01da 8243     		bic	r2, r0
 3659 01dc 0A43     		orr	r2, r1
 3660 01de 5A62     		str	r2, [r3, #36]
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
1455:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
 3661              		.loc 1 1456 0
 3662 01e0 7B68     		ldr	r3, [r7, #4]
 3663 01e2 DB69     		ldr	r3, [r3, #28]
 3664 01e4 7A68     		ldr	r2, [r7, #4]
 3665 01e6 127C     		ldrb	r2, [r2, #16]
 3666 01e8 9A61     		str	r2, [r3, #24]
1457:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3667              		.loc 1 1458 0
 3668 01ea 7B68     		ldr	r3, [r7, #4]
 3669 01ec 5B69     		ldr	r3, [r3, #20]
 3670 01ee 7A68     		ldr	r2, [r7, #4]
 3671 01f0 5269     		ldr	r2, [r2, #20]
 3672 01f2 1169     		ldr	r1, [r2, #16]
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3673              		.loc 1 1459 0
 3674 01f4 7868     		ldr	r0, [r7, #4]
 3675 01f6 3822     		mov	r2, #56
 3676 01f8 825C     		ldrb	r2, [r0, r2]
 3677 01fa 9200     		lsl	r2, r2, #2
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3678              		.loc 1 1458 0
 3679 01fc 0120     		mov	r0, #1
 3680 01fe 9040     		lsl	r0, r0, r2
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
 3681              		.loc 1 1461 0
 3682 0200 7C68     		ldr	r4, [r7, #4]
 3683 0202 3822     		mov	r2, #56
 3684 0204 A25C     		ldrb	r2, [r4, r2]
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3685              		.loc 1 1460 0
 3686 0206 9200     		lsl	r2, r2, #2
 3687              		.loc 1 1461 0
 3688 0208 0132     		add	r2, r2, #1
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3689              		.loc 1 1460 0
 3690 020a 0124     		mov	r4, #1
 3691 020c 251C     		mov	r5, r4
 3692 020e 9540     		lsl	r5, r5, r2
 3693 0210 2A1C     		mov	r2, r5
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3694              		.loc 1 1459 0
 3695 0212 1043     		orr	r0, r2
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1463:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
 3696              		.loc 1 1463 0
 3697 0214 7C68     		ldr	r4, [r7, #4]
 3698 0216 3822     		mov	r2, #56
 3699 0218 A25C     		ldrb	r2, [r4, r2]
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3700              		.loc 1 1462 0
 3701 021a 9200     		lsl	r2, r2, #2
 3702              		.loc 1 1463 0
 3703 021c 0232     		add	r2, r2, #2
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3704              		.loc 1 1462 0
 3705 021e 0124     		mov	r4, #1
 3706 0220 251C     		mov	r5, r4
 3707 0222 9540     		lsl	r5, r5, r2
 3708 0224 2A1C     		mov	r2, r5
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3709              		.loc 1 1458 0
 3710 0226 0243     		orr	r2, r0
 3711 0228 0A43     		orr	r2, r1
 3712 022a 1A61     		str	r2, [r3, #16]
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3713              		.loc 1 1464 0
 3714 022c BD46     		mov	sp, r7
 3715 022e 02B0     		add	sp, sp, #8
 3716              		@ sp needed for prologue
 3717 0230 B0BD     		pop	{r4, r5, r7, pc}
 3718              	.L154:
 3719 0232 C046     		.align	2
 3720              	.L153:
 3721 0234 FFFFF3E7 		.word	-403439617
 3722 0238 FFFFCF9E 		.word	-1630535681
 3723 023c FFFFFDFF 		.word	-131073
 3724 0240 F498FFFF 		.word	-26380
 3725 0244 FFFFDFFF 		.word	-2097153
 3726 0248 FFFFBFFF 		.word	-4194305
 3727              		.cfi_endproc
 3728              	.LFE57:
 3730              		.section	.text.PWMSP001_EnableEvent,"ax",%progbits
 3731              		.align	2
 3732              		.global	PWMSP001_EnableEvent
 3733              		.code	16
 3734              		.thumb_func
 3736              	PWMSP001_EnableEvent:
 3737              	.LFB58:
1465:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the enable event bit for the event given in the argument.
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_EnableEvent
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1473:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1474:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3738              		.loc 1 1474 0
 3739              		.cfi_startproc
 3740 0000 90B5     		push	{r4, r7, lr}
 3741              	.LCFI75:
 3742              		.cfi_def_cfa_offset 12
 3743              		.cfi_offset 4, -12
 3744              		.cfi_offset 7, -8
 3745              		.cfi_offset 14, -4
 3746 0002 85B0     		sub	sp, sp, #20
 3747              	.LCFI76:
 3748              		.cfi_def_cfa_offset 32
 3749 0004 00AF     		add	r7, sp, #0
 3750              	.LCFI77:
 3751              		.cfi_def_cfa_register 7
 3752 0006 7860     		str	r0, [r7, #4]
 3753 0008 0A1C     		mov	r2, r1
 3754 000a FB1C     		add	r3, r7, #3
 3755 000c 1A70     		strb	r2, [r3]
1475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3756              		.loc 1 1475 0
 3757 000e 0123     		mov	r3, #1
 3758 0010 FB60     		str	r3, [r7, #12]
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3759              		.loc 1 1477 0
 3760 0012 7B68     		ldr	r3, [r7, #4]
 3761 0014 DB6B     		ldr	r3, [r3, #60]
 3762 0016 1B78     		ldrb	r3, [r3]
 3763 0018 002B     		cmp	r3, #0
 3764 001a 02D1     		bne	.L156
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3765              		.loc 1 1479 0
 3766 001c 0123     		mov	r3, #1
 3767 001e FB60     		str	r3, [r7, #12]
 3768 0020 25E0     		b	.L157
 3769              	.L156:
1480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3770              		.loc 1 1484 0
 3771 0022 7A68     		ldr	r2, [r7, #4]
 3772 0024 2023     		mov	r3, #32
 3773 0026 D35C     		ldrb	r3, [r2, r3]
 3774 0028 012B     		cmp	r3, #1
 3775 002a 0FD1     		bne	.L158
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3776              		.loc 1 1486 0
 3777 002c 7B68     		ldr	r3, [r7, #4]
 3778 002e DA69     		ldr	r2, [r3, #28]
 3779 0030 7B68     		ldr	r3, [r7, #4]
 3780 0032 D969     		ldr	r1, [r3, #28]
 3781 0034 A423     		mov	r3, #164
 3782 0036 C958     		ldr	r1, [r1, r3]
 3783 0038 FB1C     		add	r3, r7, #3
 3784 003a 1B78     		ldrb	r3, [r3]
 3785 003c 0120     		mov	r0, #1
 3786 003e 041C     		mov	r4, r0
 3787 0040 9C40     		lsl	r4, r4, r3
 3788 0042 231C     		mov	r3, r4
 3789 0044 1943     		orr	r1, r3
 3790 0046 A423     		mov	r3, #164
 3791 0048 D150     		str	r1, [r2, r3]
 3792 004a 0EE0     		b	.L159
 3793              	.L158:
1487:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3794              		.loc 1 1490 0
 3795 004c 7B68     		ldr	r3, [r7, #4]
 3796 004e 9A69     		ldr	r2, [r3, #24]
 3797 0050 7B68     		ldr	r3, [r7, #4]
 3798 0052 9969     		ldr	r1, [r3, #24]
 3799 0054 A423     		mov	r3, #164
 3800 0056 C958     		ldr	r1, [r1, r3]
 3801 0058 FB1C     		add	r3, r7, #3
 3802 005a 1B78     		ldrb	r3, [r3]
 3803 005c 0120     		mov	r0, #1
 3804 005e 041C     		mov	r4, r0
 3805 0060 9C40     		lsl	r4, r4, r3
 3806 0062 231C     		mov	r3, r4
 3807 0064 1943     		orr	r1, r3
 3808 0066 A423     		mov	r3, #164
 3809 0068 D150     		str	r1, [r2, r3]
 3810              	.L159:
1491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3811              		.loc 1 1492 0
 3812 006a 0023     		mov	r3, #0
 3813 006c FB60     		str	r3, [r7, #12]
 3814              	.L157:
1493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3815              		.loc 1 1494 0
 3816 006e FB68     		ldr	r3, [r7, #12]
1495:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3817              		.loc 1 1495 0
 3818 0070 181C     		mov	r0, r3
 3819 0072 BD46     		mov	sp, r7
 3820 0074 05B0     		add	sp, sp, #20
 3821              		@ sp needed for prologue
 3822 0076 90BD     		pop	{r4, r7, pc}
 3823              		.cfi_endproc
 3824              	.LFE58:
 3826              		.section	.text.PWMSP001_DisableEvent,"ax",%progbits
 3827              		.align	2
 3828              		.global	PWMSP001_DisableEvent
 3829              		.code	16
 3830              		.thumb_func
 3832              	PWMSP001_DisableEvent:
 3833              	.LFB59:
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1497:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the enable event bit for the event given in the argument.
1499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_DisableEvent
1501:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1505:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3834              		.loc 1 1505 0
 3835              		.cfi_startproc
 3836 0000 90B5     		push	{r4, r7, lr}
 3837              	.LCFI78:
 3838              		.cfi_def_cfa_offset 12
 3839              		.cfi_offset 4, -12
 3840              		.cfi_offset 7, -8
 3841              		.cfi_offset 14, -4
 3842 0002 85B0     		sub	sp, sp, #20
 3843              	.LCFI79:
 3844              		.cfi_def_cfa_offset 32
 3845 0004 00AF     		add	r7, sp, #0
 3846              	.LCFI80:
 3847              		.cfi_def_cfa_register 7
 3848 0006 7860     		str	r0, [r7, #4]
 3849 0008 0A1C     		mov	r2, r1
 3850 000a FB1C     		add	r3, r7, #3
 3851 000c 1A70     		strb	r2, [r3]
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3852              		.loc 1 1506 0
 3853 000e 0123     		mov	r3, #1
 3854 0010 FB60     		str	r3, [r7, #12]
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3855              		.loc 1 1508 0
 3856 0012 7B68     		ldr	r3, [r7, #4]
 3857 0014 DB6B     		ldr	r3, [r3, #60]
 3858 0016 1B78     		ldrb	r3, [r3]
 3859 0018 002B     		cmp	r3, #0
 3860 001a 02D1     		bne	.L162
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3861              		.loc 1 1510 0
 3862 001c 0123     		mov	r3, #1
 3863 001e FB60     		str	r3, [r7, #12]
 3864 0020 27E0     		b	.L163
 3865              	.L162:
1511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3866              		.loc 1 1515 0
 3867 0022 7A68     		ldr	r2, [r7, #4]
 3868 0024 2023     		mov	r3, #32
 3869 0026 D35C     		ldrb	r3, [r2, r3]
 3870 0028 012B     		cmp	r3, #1
 3871 002a 10D1     		bne	.L164
1516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1517:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3872              		.loc 1 1517 0
 3873 002c 7B68     		ldr	r3, [r7, #4]
 3874 002e DA69     		ldr	r2, [r3, #28]
 3875 0030 7B68     		ldr	r3, [r7, #4]
 3876 0032 D969     		ldr	r1, [r3, #28]
 3877 0034 A423     		mov	r3, #164
 3878 0036 CB58     		ldr	r3, [r1, r3]
 3879 0038 F91C     		add	r1, r7, #3
 3880 003a 0978     		ldrb	r1, [r1]
 3881 003c 0120     		mov	r0, #1
 3882 003e 041C     		mov	r4, r0
 3883 0040 8C40     		lsl	r4, r4, r1
 3884 0042 211C     		mov	r1, r4
 3885 0044 C943     		mvn	r1, r1
 3886 0046 1940     		and	r1, r3
 3887 0048 A423     		mov	r3, #164
 3888 004a D150     		str	r1, [r2, r3]
 3889 004c 0FE0     		b	.L165
 3890              	.L164:
1518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3891              		.loc 1 1521 0
 3892 004e 7B68     		ldr	r3, [r7, #4]
 3893 0050 9A69     		ldr	r2, [r3, #24]
 3894 0052 7B68     		ldr	r3, [r7, #4]
 3895 0054 9969     		ldr	r1, [r3, #24]
 3896 0056 A423     		mov	r3, #164
 3897 0058 CB58     		ldr	r3, [r1, r3]
 3898 005a F91C     		add	r1, r7, #3
 3899 005c 0978     		ldrb	r1, [r1]
 3900 005e 0120     		mov	r0, #1
 3901 0060 041C     		mov	r4, r0
 3902 0062 8C40     		lsl	r4, r4, r1
 3903 0064 211C     		mov	r1, r4
 3904 0066 C943     		mvn	r1, r1
 3905 0068 1940     		and	r1, r3
 3906 006a A423     		mov	r3, #164
 3907 006c D150     		str	r1, [r2, r3]
 3908              	.L165:
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1523:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3909              		.loc 1 1523 0
 3910 006e 0023     		mov	r3, #0
 3911 0070 FB60     		str	r3, [r7, #12]
 3912              	.L163:
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3913              		.loc 1 1525 0
 3914 0072 FB68     		ldr	r3, [r7, #12]
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3915              		.loc 1 1526 0
 3916 0074 181C     		mov	r0, r3
 3917 0076 BD46     		mov	sp, r7
 3918 0078 05B0     		add	sp, sp, #20
 3919              		@ sp needed for prologue
 3920 007a 90BD     		pop	{r4, r7, pc}
 3921              		.cfi_endproc
 3922              	.LFE59:
 3924              		.section	.text.PWMSP001_ClearPendingEvent,"ax",%progbits
 3925              		.align	2
 3926              		.global	PWMSP001_ClearPendingEvent
 3927              		.code	16
 3928              		.thumb_func
 3930              	PWMSP001_ClearPendingEvent:
 3931              	.LFB60:
1527:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1528:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the interrupt by software.
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_ClearPendingEvent
1532:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1535:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1536:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3932              		.loc 1 1536 0
 3933              		.cfi_startproc
 3934 0000 90B5     		push	{r4, r7, lr}
 3935              	.LCFI81:
 3936              		.cfi_def_cfa_offset 12
 3937              		.cfi_offset 4, -12
 3938              		.cfi_offset 7, -8
 3939              		.cfi_offset 14, -4
 3940 0002 85B0     		sub	sp, sp, #20
 3941              	.LCFI82:
 3942              		.cfi_def_cfa_offset 32
 3943 0004 00AF     		add	r7, sp, #0
 3944              	.LCFI83:
 3945              		.cfi_def_cfa_register 7
 3946 0006 7860     		str	r0, [r7, #4]
 3947 0008 0A1C     		mov	r2, r1
 3948 000a FB1C     		add	r3, r7, #3
 3949 000c 1A70     		strb	r2, [r3]
1537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3950              		.loc 1 1537 0
 3951 000e 0123     		mov	r3, #1
 3952 0010 FB60     		str	r3, [r7, #12]
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3953              		.loc 1 1539 0
 3954 0012 7B68     		ldr	r3, [r7, #4]
 3955 0014 DB6B     		ldr	r3, [r3, #60]
 3956 0016 1B78     		ldrb	r3, [r3]
 3957 0018 002B     		cmp	r3, #0
 3958 001a 02D1     		bne	.L168
1540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3959              		.loc 1 1541 0
 3960 001c 0123     		mov	r3, #1
 3961 001e FB60     		str	r3, [r7, #12]
 3962 0020 25E0     		b	.L169
 3963              	.L168:
1542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3964              		.loc 1 1546 0
 3965 0022 7A68     		ldr	r2, [r7, #4]
 3966 0024 2023     		mov	r3, #32
 3967 0026 D35C     		ldrb	r3, [r2, r3]
 3968 0028 012B     		cmp	r3, #1
 3969 002a 0FD1     		bne	.L170
1547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
 3970              		.loc 1 1548 0
 3971 002c 7B68     		ldr	r3, [r7, #4]
 3972 002e DA69     		ldr	r2, [r3, #28]
 3973 0030 7B68     		ldr	r3, [r7, #4]
 3974 0032 D969     		ldr	r1, [r3, #28]
 3975 0034 B023     		mov	r3, #176
 3976 0036 C958     		ldr	r1, [r1, r3]
 3977 0038 FB1C     		add	r3, r7, #3
 3978 003a 1B78     		ldrb	r3, [r3]
 3979 003c 0120     		mov	r0, #1
 3980 003e 041C     		mov	r4, r0
 3981 0040 9C40     		lsl	r4, r4, r3
 3982 0042 231C     		mov	r3, r4
 3983 0044 1943     		orr	r1, r3
 3984 0046 B023     		mov	r3, #176
 3985 0048 D150     		str	r1, [r2, r3]
 3986 004a 0EE0     		b	.L171
 3987              	.L170:
1549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
 3988              		.loc 1 1552 0
 3989 004c 7B68     		ldr	r3, [r7, #4]
 3990 004e 9A69     		ldr	r2, [r3, #24]
 3991 0050 7B68     		ldr	r3, [r7, #4]
 3992 0052 9969     		ldr	r1, [r3, #24]
 3993 0054 B023     		mov	r3, #176
 3994 0056 C958     		ldr	r1, [r1, r3]
 3995 0058 FB1C     		add	r3, r7, #3
 3996 005a 1B78     		ldrb	r3, [r3]
 3997 005c 0120     		mov	r0, #1
 3998 005e 041C     		mov	r4, r0
 3999 0060 9C40     		lsl	r4, r4, r3
 4000 0062 231C     		mov	r3, r4
 4001 0064 1943     		orr	r1, r3
 4002 0066 B023     		mov	r3, #176
 4003 0068 D150     		str	r1, [r2, r3]
 4004              	.L171:
1553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 4005              		.loc 1 1554 0
 4006 006a 0023     		mov	r3, #0
 4007 006c FB60     		str	r3, [r7, #12]
 4008              	.L169:
1555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 4009              		.loc 1 1556 0
 4010 006e FB68     		ldr	r3, [r7, #12]
1557:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 4011              		.loc 1 1557 0
 4012 0070 181C     		mov	r0, r3
 4013 0072 BD46     		mov	sp, r7
 4014 0074 05B0     		add	sp, sp, #20
 4015              		@ sp needed for prologue
 4016 0076 90BD     		pop	{r4, r7, pc}
 4017              		.cfi_endproc
 4018              	.LFE60:
 4020              		.section	.text.PWMSP001_SetPendingEvent,"ax",%progbits
 4021              		.align	2
 4022              		.global	PWMSP001_SetPendingEvent
 4023              		.code	16
 4024              		.thumb_func
 4026              	PWMSP001_SetPendingEvent:
 4027              	.LFB61:
1558:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1559:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * if source is enabled.
1562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPendingEvent
1564:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1567:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1568:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 4028              		.loc 1 1568 0
 4029              		.cfi_startproc
 4030 0000 90B5     		push	{r4, r7, lr}
 4031              	.LCFI84:
 4032              		.cfi_def_cfa_offset 12
 4033              		.cfi_offset 4, -12
 4034              		.cfi_offset 7, -8
 4035              		.cfi_offset 14, -4
 4036 0002 85B0     		sub	sp, sp, #20
 4037              	.LCFI85:
 4038              		.cfi_def_cfa_offset 32
 4039 0004 00AF     		add	r7, sp, #0
 4040              	.LCFI86:
 4041              		.cfi_def_cfa_register 7
 4042 0006 7860     		str	r0, [r7, #4]
 4043 0008 0A1C     		mov	r2, r1
 4044 000a FB1C     		add	r3, r7, #3
 4045 000c 1A70     		strb	r2, [r3]
1569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4046              		.loc 1 1569 0
 4047 000e 0123     		mov	r3, #1
 4048 0010 FB60     		str	r3, [r7, #12]
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 4049              		.loc 1 1571 0
 4050 0012 7B68     		ldr	r3, [r7, #4]
 4051 0014 DB6B     		ldr	r3, [r3, #60]
 4052 0016 1B78     		ldrb	r3, [r3]
 4053 0018 002B     		cmp	r3, #0
 4054 001a 02D1     		bne	.L174
1572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4055              		.loc 1 1573 0
 4056 001c 0123     		mov	r3, #1
 4057 001e FB60     		str	r3, [r7, #12]
 4058 0020 25E0     		b	.L175
 4059              	.L174:
1574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 4060              		.loc 1 1578 0
 4061 0022 7A68     		ldr	r2, [r7, #4]
 4062 0024 2023     		mov	r3, #32
 4063 0026 D35C     		ldrb	r3, [r2, r3]
 4064 0028 012B     		cmp	r3, #1
 4065 002a 0FD1     		bne	.L176
1579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
 4066              		.loc 1 1580 0
 4067 002c 7B68     		ldr	r3, [r7, #4]
 4068 002e DA69     		ldr	r2, [r3, #28]
 4069 0030 7B68     		ldr	r3, [r7, #4]
 4070 0032 D969     		ldr	r1, [r3, #28]
 4071 0034 AC23     		mov	r3, #172
 4072 0036 C958     		ldr	r1, [r1, r3]
 4073 0038 FB1C     		add	r3, r7, #3
 4074 003a 1B78     		ldrb	r3, [r3]
 4075 003c 0120     		mov	r0, #1
 4076 003e 041C     		mov	r4, r0
 4077 0040 9C40     		lsl	r4, r4, r3
 4078 0042 231C     		mov	r3, r4
 4079 0044 1943     		orr	r1, r3
 4080 0046 AC23     		mov	r3, #172
 4081 0048 D150     		str	r1, [r2, r3]
 4082 004a 0EE0     		b	.L177
 4083              	.L176:
1581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
 4084              		.loc 1 1584 0
 4085 004c 7B68     		ldr	r3, [r7, #4]
 4086 004e 9A69     		ldr	r2, [r3, #24]
 4087 0050 7B68     		ldr	r3, [r7, #4]
 4088 0052 9969     		ldr	r1, [r3, #24]
 4089 0054 AC23     		mov	r3, #172
 4090 0056 C958     		ldr	r1, [r1, r3]
 4091 0058 FB1C     		add	r3, r7, #3
 4092 005a 1B78     		ldrb	r3, [r3]
 4093 005c 0120     		mov	r0, #1
 4094 005e 041C     		mov	r4, r0
 4095 0060 9C40     		lsl	r4, r4, r3
 4096 0062 231C     		mov	r3, r4
 4097 0064 1943     		orr	r1, r3
 4098 0066 AC23     		mov	r3, #172
 4099 0068 D150     		str	r1, [r2, r3]
 4100              	.L177:
1585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 4101              		.loc 1 1586 0
 4102 006a 0023     		mov	r3, #0
 4103 006c FB60     		str	r3, [r7, #12]
 4104              	.L175:
1587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 4105              		.loc 1 1588 0
 4106 006e FB68     		ldr	r3, [r7, #12]
1589:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 4107              		.loc 1 1589 0
 4108 0070 181C     		mov	r0, r3
 4109 0072 BD46     		mov	sp, r7
 4110 0074 05B0     		add	sp, sp, #20
 4111              		@ sp needed for prologue
 4112 0076 90BD     		pop	{r4, r7, pc}
 4113              		.cfi_endproc
 4114              	.LFE61:
 4116              		.section	.text.PWMSP001_GetPendingEvent,"ax",%progbits
 4117              		.align	2
 4118              		.global	PWMSP001_GetPendingEvent
 4119              		.code	16
 4120              		.thumb_func
 4122              	PWMSP001_GetPendingEvent:
 4123              	.LFB62:
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1591:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function check whether given interrupt is set
1593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1594:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPendingEvent
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event,
1598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint8_t*EvtStatus
1599:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1600:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 4124              		.loc 1 1600 0
 4125              		.cfi_startproc
 4126 0000 80B5     		push	{r7, lr}
 4127              	.LCFI87:
 4128              		.cfi_def_cfa_offset 8
 4129              		.cfi_offset 7, -8
 4130              		.cfi_offset 14, -4
 4131 0002 86B0     		sub	sp, sp, #24
 4132              	.LCFI88:
 4133              		.cfi_def_cfa_offset 32
 4134 0004 00AF     		add	r7, sp, #0
 4135              	.LCFI89:
 4136              		.cfi_def_cfa_register 7
 4137 0006 F860     		str	r0, [r7, #12]
 4138 0008 7A60     		str	r2, [r7, #4]
 4139 000a 3B1C     		mov	r3, r7
 4140 000c 0B33     		add	r3, r3, #11
 4141 000e 0A1C     		add	r2, r1, #0
 4142 0010 1A70     		strb	r2, [r3]
1601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4143              		.loc 1 1601 0
 4144 0012 0123     		mov	r3, #1
 4145 0014 7B61     		str	r3, [r7, #20]
1602:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 4146              		.loc 1 1603 0
 4147 0016 FB68     		ldr	r3, [r7, #12]
 4148 0018 DB6B     		ldr	r3, [r3, #60]
 4149 001a 1B78     		ldrb	r3, [r3]
 4150 001c 002B     		cmp	r3, #0
 4151 001e 02D1     		bne	.L180
1604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4152              		.loc 1 1605 0
 4153 0020 0123     		mov	r3, #1
 4154 0022 7B61     		str	r3, [r7, #20]
 4155 0024 3DE0     		b	.L181
 4156              	.L180:
1606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 4157              		.loc 1 1610 0
 4158 0026 FA68     		ldr	r2, [r7, #12]
 4159 0028 2023     		mov	r3, #32
 4160 002a D35C     		ldrb	r3, [r2, r3]
 4161 002c 012B     		cmp	r3, #1
 4162 002e 1BD1     		bne	.L182
1611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1612:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event)
 4163              		.loc 1 1613 0
 4164 0030 FB68     		ldr	r3, [r7, #12]
 4165 0032 DA69     		ldr	r2, [r3, #28]
 4166 0034 A023     		mov	r3, #160
 4167 0036 D358     		ldr	r3, [r2, r3]
 4168 0038 3A1C     		mov	r2, r7
 4169 003a 0B32     		add	r2, r2, #11
 4170 003c 1278     		ldrb	r2, [r2]
 4171 003e 0121     		mov	r1, #1
 4172 0040 081C     		mov	r0, r1
 4173 0042 9040     		lsl	r0, r0, r2
 4174 0044 021C     		mov	r2, r0
 4175 0046 1A40     		and	r2, r3
 4176 0048 3B1C     		mov	r3, r7
 4177 004a 0B33     		add	r3, r3, #11
 4178 004c 1B78     		ldrb	r3, [r3]
 4179 004e 111C     		mov	r1, r2
 4180 0050 D940     		lsr	r1, r1, r3
 4181 0052 0B1C     		mov	r3, r1
 4182 0054 002B     		cmp	r3, #0
 4183 0056 03D0     		beq	.L183
1614:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1615:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)SET;
 4184              		.loc 1 1615 0
 4185 0058 7B68     		ldr	r3, [r7, #4]
 4186 005a 0122     		mov	r2, #1
 4187 005c 1A70     		strb	r2, [r3]
 4188 005e 1EE0     		b	.L184
 4189              	.L183:
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1617:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  else
1618:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1619:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)RESET;
 4190              		.loc 1 1619 0
 4191 0060 7B68     		ldr	r3, [r7, #4]
 4192 0062 0022     		mov	r2, #0
 4193 0064 1A70     		strb	r2, [r3]
 4194 0066 1AE0     		b	.L184
 4195              	.L182:
1620:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
 4196              		.loc 1 1624 0
 4197 0068 FB68     		ldr	r3, [r7, #12]
 4198 006a 9A69     		ldr	r2, [r3, #24]
 4199 006c A023     		mov	r3, #160
 4200 006e D358     		ldr	r3, [r2, r3]
 4201 0070 3A1C     		mov	r2, r7
 4202 0072 0B32     		add	r2, r2, #11
 4203 0074 1278     		ldrb	r2, [r2]
 4204 0076 0121     		mov	r1, #1
 4205 0078 081C     		mov	r0, r1
 4206 007a 9040     		lsl	r0, r0, r2
 4207 007c 021C     		mov	r2, r0
 4208 007e 1A40     		and	r2, r3
 4209 0080 3B1C     		mov	r3, r7
 4210 0082 0B33     		add	r3, r3, #11
 4211 0084 1B78     		ldrb	r3, [r3]
 4212 0086 111C     		mov	r1, r2
 4213 0088 D940     		lsr	r1, r1, r3
 4214 008a 0B1C     		mov	r3, r1
 4215 008c 002B     		cmp	r3, #0
 4216 008e 03D0     		beq	.L185
1625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
 4217              		.loc 1 1626 0
 4218 0090 7B68     		ldr	r3, [r7, #4]
 4219 0092 0122     		mov	r2, #1
 4220 0094 1A70     		strb	r2, [r3]
 4221 0096 02E0     		b	.L184
 4222              	.L185:
1627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1629:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1630:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)RESET;
 4223              		.loc 1 1630 0
 4224 0098 7B68     		ldr	r3, [r7, #4]
 4225 009a 0022     		mov	r2, #0
 4226 009c 1A70     		strb	r2, [r3]
 4227              	.L184:
1631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event
1633:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   ? (uint8_t)SET : (uint8_t)RESET;	*/
1634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 4228              		.loc 1 1635 0
 4229 009e 0023     		mov	r3, #0
 4230 00a0 7B61     		str	r3, [r7, #20]
 4231              	.L181:
1636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 4232              		.loc 1 1637 0
 4233 00a2 7B69     		ldr	r3, [r7, #20]
1638:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 4234              		.loc 1 1638 0
 4235 00a4 181C     		mov	r0, r3
 4236 00a6 BD46     		mov	sp, r7
 4237 00a8 06B0     		add	sp, sp, #24
 4238              		@ sp needed for prologue
 4239 00aa 80BD     		pop	{r7, pc}
 4240              		.cfi_endproc
 4241              	.LFE62:
 4243              		.text
 4244              	.Letext0:
 4245              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 4246              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1100_series/Include/XMC1100.h"
 4247              		.file 4 "C:\\data\\workspaces\\github\\de.protos.demos\\src\\XMC2GoBlinky\\XMC2GoBlinkyST\\Dave\\G
 4248              		.file 5 "C:\\data\\workspaces\\github\\de.protos.demos\\src\\XMC2GoBlinky\\XMC2GoBlinkyST\\Dave\\G
 4249              		.file 6 "C:\\data\\workspaces\\github\\de.protos.demos\\src\\XMC2GoBlinky\\XMC2GoBlinkyST\\Dave\\G
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP001.c
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:18     .text.PWMSP001_Init:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:23     .text.PWMSP001_Init:00000000 PWMSP001_Init
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:133    .text.PWMSP001_lInit:00000000 PWMSP001_lInit
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:831    .text.PWMSP001_Start:00000000 PWMSP001_Start
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:120    .text.PWMSP001_Init:00000088 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:128    .text.PWMSP001_lInit:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3369   .text.PWMSP001_lConfigureSecondSlice:00000000 PWMSP001_lConfigureSecondSlice
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:585    .text.PWMSP001_lInit:000002d4 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:596    .text.PWMSP001_Deinit:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:601    .text.PWMSP001_Deinit:00000000 PWMSP001_Deinit
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:821    .text.PWMSP001_Deinit:00000148 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:826    .text.PWMSP001_Start:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1080   .text.PWMSP001_Start:00000170 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1086   .text.PWMSP001_Stop:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1091   .text.PWMSP001_Stop:00000000 PWMSP001_Stop
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1203   .text.PWMSP001_SetCompare:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1208   .text.PWMSP001_SetCompare:00000000 PWMSP001_SetCompare
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1310   .text.PWMSP001_lSetCompareEdgeAlign:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1315   .text.PWMSP001_lSetCompareEdgeAlign:00000000 PWMSP001_lSetCompareEdgeAlign
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1376   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1381   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 PWMSP001_lSetCompareEdgeAlignTimerConcat
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1484   .text.PWMSP001_lSetCompareCenterAlign:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1489   .text.PWMSP001_lSetCompareCenterAlign:00000000 PWMSP001_lSetCompareCenterAlign
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1547   .text.PWMSP001_SetDutyCycle:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1552   .text.PWMSP001_SetDutyCycle:00000000 PWMSP001_SetDutyCycle
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1621   .text.PWMSP001_SetDutyCycle:00000058 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1631   .text.PWMSP001_lSetDutyEdgeAlign:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1636   .text.PWMSP001_lSetDutyEdgeAlign:00000000 PWMSP001_lSetDutyEdgeAlign
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1725   .text.PWMSP001_lSetDutyEdgeAlign:00000088 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1730   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1735   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 PWMSP001_lSetDutyEdgeAlignTimerConcat
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1889   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:000000f4 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1894   .text.PWMSP001_lSetDutyCenterAlign:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1899   .text.PWMSP001_lSetDutyCenterAlign:00000000 PWMSP001_lSetDutyCenterAlign
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1987   .text.PWMSP001_lSetDutyCenterAlign:00000084 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1992   .text.PWMSP001_SetPeriodAndCompare:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:1997   .text.PWMSP001_SetPeriodAndCompare:00000000 PWMSP001_SetPeriodAndCompare
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2115   .text.PWMSP001_SetPeriod:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2120   .text.PWMSP001_SetPeriod:00000000 PWMSP001_SetPeriod
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2262   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2267   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 PWMSP001_SetPwmFreqAndDutyCycle
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2639   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 PWMSP001_lSetPwmFreqTimerConcat
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2434   .text.PWMSP001_SetPwmFreqAndDutyCycle:000000fc $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2441   .text.PWMSP001_SetPwmFreq:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2446   .text.PWMSP001_SetPwmFreq:00000000 PWMSP001_SetPwmFreq
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2628   .text.PWMSP001_SetPwmFreq:00000110 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2634   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2765   .text.PWMSP001_lSetPwmFreqTimerConcat:000000a8 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2771   .text.PWMSP001_SetTimerVal:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2776   .text.PWMSP001_SetTimerVal:00000000 PWMSP001_SetTimerVal
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2846   .text.PWMSP001_GetTimerStatus:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2851   .text.PWMSP001_GetTimerStatus:00000000 PWMSP001_GetTimerStatus
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2930   .text.PWMSP001_GetTimerRegsVal:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:2935   .text.PWMSP001_GetTimerRegsVal:00000000 PWMSP001_GetTimerRegsVal
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3075   .text.PWMSP001_GetPeriodReg:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3080   .text.PWMSP001_GetPeriodReg:00000000 PWMSP001_GetPeriodReg
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3162   .text.PWMSP001_SWRequestShadowTransfer:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3167   .text.PWMSP001_SWRequestShadowTransfer:00000000 PWMSP001_SWRequestShadowTransfer
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3267   .text.PWMSP001_ResetTrapFlag:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3272   .text.PWMSP001_ResetTrapFlag:00000000 PWMSP001_ResetTrapFlag
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3364   .text.PWMSP001_lConfigureSecondSlice:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3721   .text.PWMSP001_lConfigureSecondSlice:00000234 $d
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3731   .text.PWMSP001_EnableEvent:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3736   .text.PWMSP001_EnableEvent:00000000 PWMSP001_EnableEvent
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3827   .text.PWMSP001_DisableEvent:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3832   .text.PWMSP001_DisableEvent:00000000 PWMSP001_DisableEvent
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3925   .text.PWMSP001_ClearPendingEvent:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:3930   .text.PWMSP001_ClearPendingEvent:00000000 PWMSP001_ClearPendingEvent
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:4021   .text.PWMSP001_SetPendingEvent:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:4026   .text.PWMSP001_SetPendingEvent:00000000 PWMSP001_SetPendingEvent
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:4117   .text.PWMSP001_GetPendingEvent:00000000 $t
C:\Users\TJung\AppData\Local\Temp\ccrdGHJ6.s:4122   .text.PWMSP001_GetPendingEvent:00000000 PWMSP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.4f34ab06ae2725aaf04d3230f4ec23a7
                           .group:00000000 wm4.XMC1100.h.45.7a7cd799d7738130fcda8b83b0aa37d4
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1100.h.114.be3711f71ee045884346be801053f4c0
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.uc_id.h.35.eaf9b374d895319eacbb56387e04af18
                           .group:00000000 wm4.Usic.h.90.22743468abc46f16747d12430b219aaf
                           .group:00000000 wm4.UART001_Conf.h.53.f334402b2e237110b77f625dfc27af0e
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.SYSTM001.h.64.aec07633e24163b6539b13abf1730eae

UNDEFINED SYMBOLS
CCU4GLOBAL_Init
PWMSP001_Handle0
PWMSP001_Handle1
__aeabi_uidivmod
__aeabi_uidiv
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fsub
__aeabi_fdiv
__aeabi_ui2f
__aeabi_fmul
__aeabi_f2uiz
__aeabi_fcmpeq
