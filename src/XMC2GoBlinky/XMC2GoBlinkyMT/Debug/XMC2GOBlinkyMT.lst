
XMC2GOBlinkyMT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000097b4  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  1000a7b4  1000a7b4  0000a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00000624  1000a7c4  1000a7c4  0000a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000110  2000000c  1000adf0  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   00000004  2000011c  00000000  0000011c  2**0
                  ALLOC
  5 Stack         00000800  20000120  00000000  00000120  2**0
                  ALLOC
  6 .bss          0000170c  20000920  20000920  00018920  2**2
                  ALLOC
  7 .data         00000080  20002030  1000af00  00012030  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00001058  00000000  00000000  000120b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00013e0d  00000000  00000000  00013108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000035fe  00000000  00000000  00026f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b38a  00000000  00000000  0002a513  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000346c  00000000  00000000  000458a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00032a7c  00000000  00000000  00048d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000503e  00000000  00000000  0007b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d60  00000000  00000000  000807c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00000b72  00000000  00000000  00081528  2**0
                  CONTENTS, READONLY
 17 .debug_macro  0000e33a  00000000  00000000  0008209a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1100_interrupt_vector_cortex_m>:
10001000:	20 09 00 20 19 10 00 10 35 31 00 10 37 31 00 10      .. ....51..71..
10001010:	00 04 00 00 00 00 00 00                             ........

10001018 <__Xmc1100_reset_cortex_m>:
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001018:	4802      	ldr	r0, [pc, #8]	; (10001024 <__Xmc1100_reset_cortex_m+0xc>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
1000101c:	4802      	ldr	r0, [pc, #8]	; (10001028 <__Xmc1100_reset_cortex_m+0x10>)
    BLX R0
1000101e:	4780      	blx	r0

    /* Branch to the program loader now */
    B       __Xmc1100_Program_Loader 
10001020:	e012      	b.n	10001048 <__Xmc1100_Program_Loader>
10001022:	0000      	.short	0x0000
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001024:	20000920 	.word	0x20000920
    MOV SP,R0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
10001028:	100010d1 	.word	0x100010d1

1000102c <__COPY_FLASH2RAM>:
   to C land is given */
   .section .Xmc1100.postreset,"x",%progbits
 __COPY_FLASH2RAM:
   .fnstart:
   /* Is there anything to be copied? */
   CMP R2,#0
1000102c:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000102e:	d00a      	beq.n	10001046 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
10001030:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001032:	d200      	bcs.n	10001036 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001034:	2204      	movs	r2, #4

10001036 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001036:	0892      	lsrs	r2, r2, #2

10001038 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001038:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000103a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000103c:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000103e:	d002      	beq.n	10001046 <SKIPCOPY>
   ADDS R0,#4
10001040:	3004      	adds	r0, #4
   ADDS R1,#4
10001042:	3104      	adds	r1, #4
   B COPYLOOP
10001044:	e7f8      	b.n	10001038 <COPYLOOP>

10001046 <SKIPCOPY>:
    
SKIPCOPY:
   BX LR
10001046:	4770      	bx	lr

10001048 <__Xmc1100_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001048:	4811      	ldr	r0, [pc, #68]	; (10001090 <SKIPCLEAR+0x14>)
   LDR R1, =__Xmc1100_sData
1000104a:	4912      	ldr	r1, [pc, #72]	; (10001094 <SKIPCLEAR+0x18>)
   LDR R2, =__Xmc1100_Data_Size
1000104c:	4a12      	ldr	r2, [pc, #72]	; (10001098 <SKIPCLEAR+0x1c>)
   BL __COPY_FLASH2RAM
1000104e:	f7ff ffed 	bl	1000102c <__COPY_FLASH2RAM>

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
10001052:	4812      	ldr	r0, [pc, #72]	; (1000109c <SKIPCLEAR+0x20>)
   LDR R1, =__ram_code_start
10001054:	4912      	ldr	r1, [pc, #72]	; (100010a0 <SKIPCLEAR+0x24>)
   LDR R2, =__ram_code_size
10001056:	4a13      	ldr	r2, [pc, #76]	; (100010a4 <SKIPCLEAR+0x28>)
   BL __COPY_FLASH2RAM
10001058:	f7ff ffe8 	bl	1000102c <__COPY_FLASH2RAM>

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000105c:	4812      	ldr	r0, [pc, #72]	; (100010a8 <SKIPCLEAR+0x2c>)
   LDR R1, =VeneerStart
1000105e:	4913      	ldr	r1, [pc, #76]	; (100010ac <SKIPCLEAR+0x30>)
   LDR R2, =VeneerSize
10001060:	4a13      	ldr	r2, [pc, #76]	; (100010b0 <SKIPCLEAR+0x34>)
   BL __COPY_FLASH2RAM
10001062:	f7ff ffe3 	bl	1000102c <__COPY_FLASH2RAM>

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
10001066:	4813      	ldr	r0, [pc, #76]	; (100010b4 <SKIPCLEAR+0x38>)
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
10001068:	4913      	ldr	r1, [pc, #76]	; (100010b8 <SKIPCLEAR+0x3c>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
1000106a:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000106c:	d006      	beq.n	1000107c <SKIPCLEAR>

1000106e <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
1000106e:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001070:	2200      	movs	r2, #0

10001072 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001072:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001074:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
10001076:	d001      	beq.n	1000107c <SKIPCLEAR>
   ADDS R0,#4
10001078:	3004      	adds	r0, #4
   B CLEARLOOP
1000107a:	e7fa      	b.n	10001072 <CLEARLOOP>

1000107c <SKIPCLEAR>:
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
1000107c:	480f      	ldr	r0, [pc, #60]	; (100010bc <SKIPCLEAR+0x40>)
   MOV SP,R0
1000107e:	4685      	mov	sp, r0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
10001080:	480f      	ldr	r0, [pc, #60]	; (100010c0 <SKIPCLEAR+0x44>)
   BLX R0
10001082:	4780      	blx	r0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
10001084:	480f      	ldr	r0, [pc, #60]	; (100010c4 <SKIPCLEAR+0x48>)
   BLX R0
10001086:	4780      	blx	r0

   MOVS R0,#0
10001088:	2000      	movs	r0, #0
   MOVS R1,#0
1000108a:	2100      	movs	r1, #0
   LDR R2, =main
1000108c:	4a0e      	ldr	r2, [pc, #56]	; (100010c8 <SKIPCLEAR+0x4c>)
   MOV PC,R2
1000108e:	4697      	mov	pc, r2
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001090:	1000af00 	.word	0x1000af00
   LDR R1, =__Xmc1100_sData
10001094:	20002030 	.word	0x20002030
   LDR R2, =__Xmc1100_Data_Size
10001098:	00000080 	.word	0x00000080
   BL __COPY_FLASH2RAM

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
1000109c:	1000af80 	.word	0x1000af80
   LDR R1, =__ram_code_start
100010a0:	200020b0 	.word	0x200020b0
   LDR R2, =__ram_code_size
100010a4:	00000000 	.word	0x00000000
   BL __COPY_FLASH2RAM

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010a8:	1000adf0 	.word	0x1000adf0
   LDR R1, =VeneerStart
100010ac:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b0:	00000110 	.word	0x00000110
   BL __COPY_FLASH2RAM

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
100010b4:	20000920 	.word	0x20000920
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
100010b8:	0000170c 	.word	0x0000170c
   B CLEARLOOP
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
100010bc:	20000920 	.word	0x20000920
   MOV SP,R0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
100010c0:	10003165 	.word	0x10003165
   BLX R0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
100010c4:	100010cd 	.word	0x100010cd
   BLX R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c8:	10002cf9 	.word	0x10002cf9

100010cc <software_init_hook>:
   has not been started.
 */
     .weak software_init_hook
     .type software_init_hook, %function
software_init_hook:
     NOP
100010cc:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ce:	4770      	bx	lr

100010d0 <hardware_init_hook>:
     .size software_init_hook, . - software_init_hook

     .weak hardware_init_hook
     .type hardware_init_hook, %function
hardware_init_hook:
     NOP
100010d0:	46c0      	nop			; (mov r8, r8)
     BX LR
100010d2:	4770      	bx	lr

100010d4 <setState>:
	TRIG_timer__startTimeout = IFITEM_timer + EVT_SHIFT*PTimer_IN_startTimeout,
	TRIG_timer__kill = IFITEM_timer + EVT_SHIFT*PTimer_IN_kill
};


static void setState(ATimingService* self, etInt16 new_state) {
100010d4:	b580      	push	{r7, lr}
100010d6:	b082      	sub	sp, #8
100010d8:	af00      	add	r7, sp, #0
100010da:	6078      	str	r0, [r7, #4]
100010dc:	1c0a      	adds	r2, r1, #0
100010de:	1cbb      	adds	r3, r7, #2
100010e0:	801a      	strh	r2, [r3, #0]
	self->state = new_state;
100010e2:	687b      	ldr	r3, [r7, #4]
100010e4:	1cba      	adds	r2, r7, #2
100010e6:	8812      	ldrh	r2, [r2, #0]
100010e8:	809a      	strh	r2, [r3, #4]
}
100010ea:	46bd      	mov	sp, r7
100010ec:	b002      	add	sp, #8
100010ee:	bd80      	pop	{r7, pc}

100010f0 <getState>:

static etInt16 getState(ATimingService* self) {
100010f0:	b580      	push	{r7, lr}
100010f2:	b082      	sub	sp, #8
100010f4:	af00      	add	r7, sp, #0
100010f6:	6078      	str	r0, [r7, #4]
	return self->state;
100010f8:	687b      	ldr	r3, [r7, #4]
100010fa:	889b      	ldrh	r3, [r3, #4]
100010fc:	b21b      	sxth	r3, r3
}
100010fe:	1c18      	adds	r0, r3, #0
10001100:	46bd      	mov	sp, r7
10001102:	b002      	add	sp, #8
10001104:	bd80      	pop	{r7, pc}
10001106:	46c0      	nop			; (mov r8, r8)

10001108 <entry_Operational>:

/* Entry and Exit Codes */
static void entry_Operational(ATimingService* self) {
10001108:	b580      	push	{r7, lr}
1000110a:	b082      	sub	sp, #8
1000110c:	af00      	add	r7, sp, #0
1000110e:	6078      	str	r0, [r7, #4]
	/* prepare */
}
10001110:	46bd      	mov	sp, r7
10001112:	b002      	add	sp, #8
10001114:	bd80      	pop	{r7, pc}
10001116:	46c0      	nop			; (mov r8, r8)

10001118 <do_Operational>:
static  void do_Operational(ATimingService* self) {
10001118:	b580      	push	{r7, lr}
1000111a:	b086      	sub	sp, #24
1000111c:	af00      	add	r7, sp, #0
1000111e:	6078      	str	r0, [r7, #4]
	/* maintain timers */
	etTimerControlBlock* temp;
	etTime t;
	
	getTimeFromTarget(&t);
10001120:	1c3b      	adds	r3, r7, #0
10001122:	330c      	adds	r3, #12
10001124:	1c18      	adds	r0, r3, #0
10001126:	f004 ff3f 	bl	10005fa8 <getTimeFromTarget>
	while (usedTcbsRoot !=0 ){
1000112a:	e03c      	b.n	100011a6 <do_Operational+0x8e>
		if (isTimeGreater(&t,&(usedTcbsRoot->expTime))){
1000112c:	4b22      	ldr	r3, [pc, #136]	; (100011b8 <do_Operational+0xa0>)
1000112e:	681b      	ldr	r3, [r3, #0]
10001130:	6879      	ldr	r1, [r7, #4]
10001132:	1c3a      	adds	r2, r7, #0
10001134:	320c      	adds	r2, #12
10001136:	1c08      	adds	r0, r1, #0
10001138:	1c11      	adds	r1, r2, #0
1000113a:	1c1a      	adds	r2, r3, #0
1000113c:	f000 fb6a 	bl	10001814 <ATimingService_isTimeGreater>
10001140:	1c03      	adds	r3, r0, #0
10001142:	2b00      	cmp	r3, #0
10001144:	d034      	beq.n	100011b0 <do_Operational+0x98>
			timer_timeout(usedTcbsRoot->portIdx);
10001146:	687b      	ldr	r3, [r7, #4]
10001148:	681b      	ldr	r3, [r3, #0]
1000114a:	1c1a      	adds	r2, r3, #0
1000114c:	4b1a      	ldr	r3, [pc, #104]	; (100011b8 <do_Operational+0xa0>)
1000114e:	681b      	ldr	r3, [r3, #0]
10001150:	691b      	ldr	r3, [r3, #16]
10001152:	1c10      	adds	r0, r2, #0
10001154:	1c19      	adds	r1, r3, #0
10001156:	f000 fbd9 	bl	1000190c <PTimerReplPort_timeout>
			temp=usedTcbsRoot;
1000115a:	4b17      	ldr	r3, [pc, #92]	; (100011b8 <do_Operational+0xa0>)
1000115c:	681b      	ldr	r3, [r3, #0]
1000115e:	617b      	str	r3, [r7, #20]
			usedTcbsRoot=usedTcbsRoot->next;
10001160:	4b15      	ldr	r3, [pc, #84]	; (100011b8 <do_Operational+0xa0>)
10001162:	681b      	ldr	r3, [r3, #0]
10001164:	695a      	ldr	r2, [r3, #20]
10001166:	4b14      	ldr	r3, [pc, #80]	; (100011b8 <do_Operational+0xa0>)
10001168:	601a      	str	r2, [r3, #0]
			if((temp->pTime.sec==0)&&(temp->pTime.nSec==0)){
1000116a:	697b      	ldr	r3, [r7, #20]
1000116c:	689b      	ldr	r3, [r3, #8]
1000116e:	2b00      	cmp	r3, #0
10001170:	d10a      	bne.n	10001188 <do_Operational+0x70>
10001172:	697b      	ldr	r3, [r7, #20]
10001174:	68db      	ldr	r3, [r3, #12]
10001176:	2b00      	cmp	r3, #0
10001178:	d106      	bne.n	10001188 <do_Operational+0x70>
				/* single shot timer */
				returnTcb(temp);
1000117a:	687a      	ldr	r2, [r7, #4]
1000117c:	697b      	ldr	r3, [r7, #20]
1000117e:	1c10      	adds	r0, r2, #0
10001180:	1c19      	adds	r1, r3, #0
10001182:	f000 faab 	bl	100016dc <ATimingService_returnTcb>
10001186:	e00e      	b.n	100011a6 <do_Operational+0x8e>
			}else{
				/* periodic timer */
				addTime(&temp->expTime,&temp->pTime);
10001188:	697a      	ldr	r2, [r7, #20]
1000118a:	697b      	ldr	r3, [r7, #20]
1000118c:	3308      	adds	r3, #8
1000118e:	6879      	ldr	r1, [r7, #4]
10001190:	1c08      	adds	r0, r1, #0
10001192:	1c11      	adds	r1, r2, #0
10001194:	1c1a      	adds	r2, r3, #0
10001196:	f000 fb61 	bl	1000185c <ATimingService_addTime>
				putTcbToUsedList(temp);
1000119a:	687a      	ldr	r2, [r7, #4]
1000119c:	697b      	ldr	r3, [r7, #20]
1000119e:	1c10      	adds	r0, r2, #0
100011a0:	1c19      	adds	r1, r3, #0
100011a2:	f000 faf1 	bl	10001788 <ATimingService_putTcbToUsedList>
	/* maintain timers */
	etTimerControlBlock* temp;
	etTime t;
	
	getTimeFromTarget(&t);
	while (usedTcbsRoot !=0 ){
100011a6:	4b04      	ldr	r3, [pc, #16]	; (100011b8 <do_Operational+0xa0>)
100011a8:	681b      	ldr	r3, [r3, #0]
100011aa:	2b00      	cmp	r3, #0
100011ac:	d1be      	bne.n	1000112c <do_Operational+0x14>
100011ae:	e000      	b.n	100011b2 <do_Operational+0x9a>
				/* periodic timer */
				addTime(&temp->expTime,&temp->pTime);
				putTcbToUsedList(temp);
				}
			}else{
				break;
100011b0:	46c0      	nop			; (mov r8, r8)
				}
		}
}
100011b2:	46bd      	mov	sp, r7
100011b4:	b006      	add	sp, #24
100011b6:	bd80      	pop	{r7, pc}
100011b8:	20001fd8 	.word	0x20001fd8

100011bc <action_TRANS_INITIAL_TO__Operational>:

/* Action Codes */
static void action_TRANS_INITIAL_TO__Operational(ATimingService* self) {
100011bc:	b580      	push	{r7, lr}
100011be:	b084      	sub	sp, #16
100011c0:	af00      	add	r7, sp, #0
100011c2:	6078      	str	r0, [r7, #4]
	int i;
	usedTcbsRoot=0;
100011c4:	4b13      	ldr	r3, [pc, #76]	; (10001214 <action_TRANS_INITIAL_TO__Operational+0x58>)
100011c6:	2200      	movs	r2, #0
100011c8:	601a      	str	r2, [r3, #0]
	freeTcbsRoot=&tcbs[0];
100011ca:	4b13      	ldr	r3, [pc, #76]	; (10001218 <action_TRANS_INITIAL_TO__Operational+0x5c>)
100011cc:	4a13      	ldr	r2, [pc, #76]	; (1000121c <action_TRANS_INITIAL_TO__Operational+0x60>)
100011ce:	601a      	str	r2, [r3, #0]
	tcbs[ET_NB_OF_TCBS-1].next=0;
100011d0:	4a12      	ldr	r2, [pc, #72]	; (1000121c <action_TRANS_INITIAL_TO__Operational+0x60>)
100011d2:	23ee      	movs	r3, #238	; 0xee
100011d4:	005b      	lsls	r3, r3, #1
100011d6:	2100      	movs	r1, #0
100011d8:	50d1      	str	r1, [r2, r3]
	for (i=0;i<ET_NB_OF_TCBS-1;i++){
100011da:	2300      	movs	r3, #0
100011dc:	60fb      	str	r3, [r7, #12]
100011de:	e013      	b.n	10001208 <action_TRANS_INITIAL_TO__Operational+0x4c>
		tcbs[i].next=&tcbs[i+1];
100011e0:	68fb      	ldr	r3, [r7, #12]
100011e2:	1c5a      	adds	r2, r3, #1
100011e4:	1c13      	adds	r3, r2, #0
100011e6:	005b      	lsls	r3, r3, #1
100011e8:	189b      	adds	r3, r3, r2
100011ea:	00db      	lsls	r3, r3, #3
100011ec:	4a0b      	ldr	r2, [pc, #44]	; (1000121c <action_TRANS_INITIAL_TO__Operational+0x60>)
100011ee:	1899      	adds	r1, r3, r2
100011f0:	480a      	ldr	r0, [pc, #40]	; (1000121c <action_TRANS_INITIAL_TO__Operational+0x60>)
100011f2:	68fa      	ldr	r2, [r7, #12]
100011f4:	1c13      	adds	r3, r2, #0
100011f6:	005b      	lsls	r3, r3, #1
100011f8:	189b      	adds	r3, r3, r2
100011fa:	00db      	lsls	r3, r3, #3
100011fc:	18c3      	adds	r3, r0, r3
100011fe:	3314      	adds	r3, #20
10001200:	6019      	str	r1, [r3, #0]
static void action_TRANS_INITIAL_TO__Operational(ATimingService* self) {
	int i;
	usedTcbsRoot=0;
	freeTcbsRoot=&tcbs[0];
	tcbs[ET_NB_OF_TCBS-1].next=0;
	for (i=0;i<ET_NB_OF_TCBS-1;i++){
10001202:	68fb      	ldr	r3, [r7, #12]
10001204:	3301      	adds	r3, #1
10001206:	60fb      	str	r3, [r7, #12]
10001208:	68fb      	ldr	r3, [r7, #12]
1000120a:	2b12      	cmp	r3, #18
1000120c:	dde8      	ble.n	100011e0 <action_TRANS_INITIAL_TO__Operational+0x24>
		tcbs[i].next=&tcbs[i+1];
		}
}
1000120e:	46bd      	mov	sp, r7
10001210:	b004      	add	sp, #16
10001212:	bd80      	pop	{r7, pc}
10001214:	20001fd8 	.word	0x20001fd8
10001218:	20001fdc 	.word	0x20001fdc
1000121c:	20001df8 	.word	0x20001df8

10001220 <action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1>:
static void action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1(ATimingService* self, const InterfaceItemBase* ifitem, uint32 time) {
10001220:	b580      	push	{r7, lr}
10001222:	b088      	sub	sp, #32
10001224:	af00      	add	r7, sp, #0
10001226:	60f8      	str	r0, [r7, #12]
10001228:	60b9      	str	r1, [r7, #8]
1000122a:	607a      	str	r2, [r7, #4]
	etTimerControlBlock* timer = getTcb();
1000122c:	68fb      	ldr	r3, [r7, #12]
1000122e:	1c18      	adds	r0, r3, #0
10001230:	f000 fa3a 	bl	100016a8 <ATimingService_getTcb>
10001234:	1c03      	adds	r3, r0, #0
10001236:	61fb      	str	r3, [r7, #28]
	etTime t;
	if (timer!= 0){
10001238:	69fb      	ldr	r3, [r7, #28]
1000123a:	2b00      	cmp	r3, #0
1000123c:	d035      	beq.n	100012aa <action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1+0x8a>
		t.sec=time/1000;
1000123e:	687b      	ldr	r3, [r7, #4]
10001240:	1c18      	adds	r0, r3, #0
10001242:	23fa      	movs	r3, #250	; 0xfa
10001244:	0099      	lsls	r1, r3, #2
10001246:	f008 faf3 	bl	10009830 <__aeabi_uidiv>
1000124a:	1c03      	adds	r3, r0, #0
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	1c3b      	adds	r3, r7, #0
10001250:	3314      	adds	r3, #20
10001252:	601a      	str	r2, [r3, #0]
		t.nSec=(time%1000)*1000000L;
10001254:	687b      	ldr	r3, [r7, #4]
10001256:	1c18      	adds	r0, r3, #0
10001258:	23fa      	movs	r3, #250	; 0xfa
1000125a:	0099      	lsls	r1, r3, #2
1000125c:	f008 fb2c 	bl	100098b8 <__aeabi_uidivmod>
10001260:	1c0b      	adds	r3, r1, #0
10001262:	4a13      	ldr	r2, [pc, #76]	; (100012b0 <action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1+0x90>)
10001264:	4353      	muls	r3, r2
10001266:	1c1a      	adds	r2, r3, #0
10001268:	1c3b      	adds	r3, r7, #0
1000126a:	3314      	adds	r3, #20
1000126c:	605a      	str	r2, [r3, #4]
		timer->pTime.sec = 0;
1000126e:	69fb      	ldr	r3, [r7, #28]
10001270:	2200      	movs	r2, #0
10001272:	609a      	str	r2, [r3, #8]
		timer->pTime.nSec = 0;
10001274:	69fb      	ldr	r3, [r7, #28]
10001276:	2200      	movs	r2, #0
10001278:	60da      	str	r2, [r3, #12]
		timer->portIdx=((etReplSubPort*)ifitem)->index;
1000127a:	68bb      	ldr	r3, [r7, #8]
1000127c:	7b1b      	ldrb	r3, [r3, #12]
1000127e:	1c1a      	adds	r2, r3, #0
10001280:	69fb      	ldr	r3, [r7, #28]
10001282:	611a      	str	r2, [r3, #16]
		getTimeFromTarget(&(timer->expTime));
10001284:	69fb      	ldr	r3, [r7, #28]
10001286:	1c18      	adds	r0, r3, #0
10001288:	f004 fe8e 	bl	10005fa8 <getTimeFromTarget>
		addTime(&(timer->expTime),&t);
1000128c:	69fa      	ldr	r2, [r7, #28]
1000128e:	68f9      	ldr	r1, [r7, #12]
10001290:	1c3b      	adds	r3, r7, #0
10001292:	3314      	adds	r3, #20
10001294:	1c08      	adds	r0, r1, #0
10001296:	1c11      	adds	r1, r2, #0
10001298:	1c1a      	adds	r2, r3, #0
1000129a:	f000 fadf 	bl	1000185c <ATimingService_addTime>
		putTcbToUsedList(timer);
1000129e:	68fa      	ldr	r2, [r7, #12]
100012a0:	69fb      	ldr	r3, [r7, #28]
100012a2:	1c10      	adds	r0, r2, #0
100012a4:	1c19      	adds	r1, r3, #0
100012a6:	f000 fa6f 	bl	10001788 <ATimingService_putTcbToUsedList>
		}
}
100012aa:	46bd      	mov	sp, r7
100012ac:	b008      	add	sp, #32
100012ae:	bd80      	pop	{r7, pc}
100012b0:	000f4240 	.word	0x000f4240

100012b4 <action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3>:
static void action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3(ATimingService* self, const InterfaceItemBase* ifitem, uint32 time) {
100012b4:	b580      	push	{r7, lr}
100012b6:	b088      	sub	sp, #32
100012b8:	af00      	add	r7, sp, #0
100012ba:	60f8      	str	r0, [r7, #12]
100012bc:	60b9      	str	r1, [r7, #8]
100012be:	607a      	str	r2, [r7, #4]
	etTimerControlBlock* timer = getTcb();
100012c0:	68fb      	ldr	r3, [r7, #12]
100012c2:	1c18      	adds	r0, r3, #0
100012c4:	f000 f9f0 	bl	100016a8 <ATimingService_getTcb>
100012c8:	1c03      	adds	r3, r0, #0
100012ca:	61fb      	str	r3, [r7, #28]
	etTime t;
	if (timer!= 0){
100012cc:	69fb      	ldr	r3, [r7, #28]
100012ce:	2b00      	cmp	r3, #0
100012d0:	d035      	beq.n	1000133e <action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3+0x8a>
		t.sec=time/1000;
100012d2:	687b      	ldr	r3, [r7, #4]
100012d4:	1c18      	adds	r0, r3, #0
100012d6:	23fa      	movs	r3, #250	; 0xfa
100012d8:	0099      	lsls	r1, r3, #2
100012da:	f008 faa9 	bl	10009830 <__aeabi_uidiv>
100012de:	1c03      	adds	r3, r0, #0
100012e0:	1c1a      	adds	r2, r3, #0
100012e2:	1c3b      	adds	r3, r7, #0
100012e4:	3314      	adds	r3, #20
100012e6:	601a      	str	r2, [r3, #0]
		t.nSec=(time%1000)*1000000L;
100012e8:	687b      	ldr	r3, [r7, #4]
100012ea:	1c18      	adds	r0, r3, #0
100012ec:	23fa      	movs	r3, #250	; 0xfa
100012ee:	0099      	lsls	r1, r3, #2
100012f0:	f008 fae2 	bl	100098b8 <__aeabi_uidivmod>
100012f4:	1c0b      	adds	r3, r1, #0
100012f6:	4a13      	ldr	r2, [pc, #76]	; (10001344 <action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3+0x90>)
100012f8:	4353      	muls	r3, r2
100012fa:	1c1a      	adds	r2, r3, #0
100012fc:	1c3b      	adds	r3, r7, #0
100012fe:	3314      	adds	r3, #20
10001300:	605a      	str	r2, [r3, #4]
		timer->pTime = t;
10001302:	69fb      	ldr	r3, [r7, #28]
10001304:	1c3a      	adds	r2, r7, #0
10001306:	3214      	adds	r2, #20
10001308:	3308      	adds	r3, #8
1000130a:	ca03      	ldmia	r2!, {r0, r1}
1000130c:	c303      	stmia	r3!, {r0, r1}
		timer->portIdx=((etReplSubPort*)ifitem)->index;
1000130e:	68bb      	ldr	r3, [r7, #8]
10001310:	7b1b      	ldrb	r3, [r3, #12]
10001312:	1c1a      	adds	r2, r3, #0
10001314:	69fb      	ldr	r3, [r7, #28]
10001316:	611a      	str	r2, [r3, #16]
		getTimeFromTarget(&(timer->expTime));
10001318:	69fb      	ldr	r3, [r7, #28]
1000131a:	1c18      	adds	r0, r3, #0
1000131c:	f004 fe44 	bl	10005fa8 <getTimeFromTarget>
		addTime(&(timer->expTime),&t);
10001320:	69fa      	ldr	r2, [r7, #28]
10001322:	68f9      	ldr	r1, [r7, #12]
10001324:	1c3b      	adds	r3, r7, #0
10001326:	3314      	adds	r3, #20
10001328:	1c08      	adds	r0, r1, #0
1000132a:	1c11      	adds	r1, r2, #0
1000132c:	1c1a      	adds	r2, r3, #0
1000132e:	f000 fa95 	bl	1000185c <ATimingService_addTime>
		putTcbToUsedList(timer);
10001332:	68fa      	ldr	r2, [r7, #12]
10001334:	69fb      	ldr	r3, [r7, #28]
10001336:	1c10      	adds	r0, r2, #0
10001338:	1c19      	adds	r1, r3, #0
1000133a:	f000 fa25 	bl	10001788 <ATimingService_putTcbToUsedList>
		}
}
1000133e:	46bd      	mov	sp, r7
10001340:	b008      	add	sp, #32
10001342:	bd80      	pop	{r7, pc}
10001344:	000f4240 	.word	0x000f4240

10001348 <action_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4>:
static void action_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4(ATimingService* self, const InterfaceItemBase* ifitem) {
10001348:	b580      	push	{r7, lr}
1000134a:	b082      	sub	sp, #8
1000134c:	af00      	add	r7, sp, #0
1000134e:	6078      	str	r0, [r7, #4]
10001350:	6039      	str	r1, [r7, #0]
	removeTcbFromUsedList(((etReplSubPort*)ifitem)->index);
10001352:	683b      	ldr	r3, [r7, #0]
10001354:	7b1b      	ldrb	r3, [r3, #12]
10001356:	687a      	ldr	r2, [r7, #4]
10001358:	1c10      	adds	r0, r2, #0
1000135a:	1c19      	adds	r1, r3, #0
1000135c:	f000 f9d0 	bl	10001700 <ATimingService_removeTcbFromUsedList>
}
10001360:	46bd      	mov	sp, r7
10001362:	b002      	add	sp, #8
10001364:	bd80      	pop	{r7, pc}
10001366:	46c0      	nop			; (mov r8, r8)

10001368 <exitTo>:
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ATimingService* self, etInt16 current__et, etInt16 to) {
10001368:	b580      	push	{r7, lr}
1000136a:	b082      	sub	sp, #8
1000136c:	af00      	add	r7, sp, #0
1000136e:	6078      	str	r0, [r7, #4]
10001370:	1cbb      	adds	r3, r7, #2
10001372:	8019      	strh	r1, [r3, #0]
10001374:	1c3b      	adds	r3, r7, #0
10001376:	801a      	strh	r2, [r3, #0]
	while (current__et!=to) {
10001378:	e010      	b.n	1000139c <exitTo+0x34>
		switch (current__et) {
1000137a:	1cbb      	adds	r3, r7, #2
1000137c:	2100      	movs	r1, #0
1000137e:	5e5b      	ldrsh	r3, [r3, r1]
10001380:	2b02      	cmp	r3, #2
10001382:	d106      	bne.n	10001392 <exitTo+0x2a>
			case STATE_Operational:
				self->history[STATE_TOP] = STATE_Operational;
10001384:	687b      	ldr	r3, [r7, #4]
10001386:	2202      	movs	r2, #2
10001388:	811a      	strh	r2, [r3, #8]
				current__et = STATE_TOP;
1000138a:	1cbb      	adds	r3, r7, #2
1000138c:	2201      	movs	r2, #1
1000138e:	801a      	strh	r2, [r3, #0]
				break;
10001390:	e004      	b.n	1000139c <exitTo+0x34>
10001392:	1cbb      	adds	r3, r7, #2
10001394:	1cba      	adds	r2, r7, #2
10001396:	8812      	ldrh	r2, [r2, #0]
10001398:	801a      	strh	r2, [r3, #0]
			default:
				/* should not occur */
				break;
1000139a:	46c0      	nop			; (mov r8, r8)
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ATimingService* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
1000139c:	1cba      	adds	r2, r7, #2
1000139e:	1c3b      	adds	r3, r7, #0
100013a0:	2100      	movs	r1, #0
100013a2:	5e52      	ldrsh	r2, [r2, r1]
100013a4:	2100      	movs	r1, #0
100013a6:	5e5b      	ldrsh	r3, [r3, r1]
100013a8:	429a      	cmp	r2, r3
100013aa:	d1e6      	bne.n	1000137a <exitTo+0x12>
			default:
				/* should not occur */
				break;
		}
	}
}
100013ac:	46bd      	mov	sp, r7
100013ae:	b002      	add	sp, #8
100013b0:	bd80      	pop	{r7, pc}
100013b2:	46c0      	nop			; (mov r8, r8)

100013b4 <executeTransitionChain>:
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(ATimingService* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
100013b4:	b580      	push	{r7, lr}
100013b6:	b086      	sub	sp, #24
100013b8:	af00      	add	r7, sp, #0
100013ba:	60f8      	str	r0, [r7, #12]
100013bc:	60b9      	str	r1, [r7, #8]
100013be:	607a      	str	r2, [r7, #4]
100013c0:	603b      	str	r3, [r7, #0]
	switch (chain__et) {
100013c2:	68bb      	ldr	r3, [r7, #8]
100013c4:	2b02      	cmp	r3, #2
100013c6:	d00e      	beq.n	100013e6 <executeTransitionChain+0x32>
100013c8:	dc02      	bgt.n	100013d0 <executeTransitionChain+0x1c>
100013ca:	2b01      	cmp	r3, #1
100013cc:	d005      	beq.n	100013da <executeTransitionChain+0x26>
100013ce:	e02c      	b.n	1000142a <executeTransitionChain+0x76>
100013d0:	2b03      	cmp	r3, #3
100013d2:	d015      	beq.n	10001400 <executeTransitionChain+0x4c>
100013d4:	2b04      	cmp	r3, #4
100013d6:	d020      	beq.n	1000141a <executeTransitionChain+0x66>
100013d8:	e027      	b.n	1000142a <executeTransitionChain+0x76>
		case CHAIN_TRANS_INITIAL_TO__Operational:
		{
			action_TRANS_INITIAL_TO__Operational(self);
100013da:	68fb      	ldr	r3, [r7, #12]
100013dc:	1c18      	adds	r0, r3, #0
100013de:	f7ff feed 	bl	100011bc <action_TRANS_INITIAL_TO__Operational>
			return STATE_Operational;
100013e2:	2302      	movs	r3, #2
100013e4:	e023      	b.n	1000142e <executeTransitionChain+0x7a>
		}
		case CHAIN_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1:
		{
			uint32 time = *((uint32*) generic_data__et);
100013e6:	683b      	ldr	r3, [r7, #0]
100013e8:	681b      	ldr	r3, [r3, #0]
100013ea:	617b      	str	r3, [r7, #20]
			action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1(self, ifitem, time);
100013ec:	68f9      	ldr	r1, [r7, #12]
100013ee:	687a      	ldr	r2, [r7, #4]
100013f0:	697b      	ldr	r3, [r7, #20]
100013f2:	1c08      	adds	r0, r1, #0
100013f4:	1c11      	adds	r1, r2, #0
100013f6:	1c1a      	adds	r2, r3, #0
100013f8:	f7ff ff12 	bl	10001220 <action_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1>
			return STATE_Operational;
100013fc:	2302      	movs	r3, #2
100013fe:	e016      	b.n	1000142e <executeTransitionChain+0x7a>
		}
		case CHAIN_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3:
		{
			uint32 time = *((uint32*) generic_data__et);
10001400:	683b      	ldr	r3, [r7, #0]
10001402:	681b      	ldr	r3, [r3, #0]
10001404:	613b      	str	r3, [r7, #16]
			action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3(self, ifitem, time);
10001406:	68f9      	ldr	r1, [r7, #12]
10001408:	687a      	ldr	r2, [r7, #4]
1000140a:	693b      	ldr	r3, [r7, #16]
1000140c:	1c08      	adds	r0, r1, #0
1000140e:	1c11      	adds	r1, r2, #0
10001410:	1c1a      	adds	r2, r3, #0
10001412:	f7ff ff4f 	bl	100012b4 <action_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3>
			return STATE_Operational;
10001416:	2302      	movs	r3, #2
10001418:	e009      	b.n	1000142e <executeTransitionChain+0x7a>
		}
		case CHAIN_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4:
		{
			action_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4(self, ifitem);
1000141a:	68fa      	ldr	r2, [r7, #12]
1000141c:	687b      	ldr	r3, [r7, #4]
1000141e:	1c10      	adds	r0, r2, #0
10001420:	1c19      	adds	r1, r3, #0
10001422:	f7ff ff91 	bl	10001348 <action_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4>
			return STATE_Operational;
10001426:	2302      	movs	r3, #2
10001428:	e001      	b.n	1000142e <executeTransitionChain+0x7a>
		}
			default:
				/* should not occur */
				break;
1000142a:	46c0      	nop			; (mov r8, r8)
	}
	return NO_STATE;
1000142c:	2300      	movs	r3, #0
1000142e:	b21b      	sxth	r3, r3
}
10001430:	1c18      	adds	r0, r3, #0
10001432:	46bd      	mov	sp, r7
10001434:	b006      	add	sp, #24
10001436:	bd80      	pop	{r7, pc}

10001438 <enterHistory>:
/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(ATimingService* self, etInt16 state__et) {
10001438:	b580      	push	{r7, lr}
1000143a:	b084      	sub	sp, #16
1000143c:	af00      	add	r7, sp, #0
1000143e:	6078      	str	r0, [r7, #4]
10001440:	1c0a      	adds	r2, r1, #0
10001442:	1cbb      	adds	r3, r7, #2
10001444:	801a      	strh	r2, [r3, #0]
	boolean skip_entry__et = ET_FALSE;
10001446:	1c3b      	adds	r3, r7, #0
10001448:	330f      	adds	r3, #15
1000144a:	2200      	movs	r2, #0
1000144c:	701a      	strb	r2, [r3, #0]
	if (state__et >= STATE_MAX) {
1000144e:	1cbb      	adds	r3, r7, #2
10001450:	2200      	movs	r2, #0
10001452:	5e9b      	ldrsh	r3, [r3, r2]
10001454:	2b02      	cmp	r3, #2
10001456:	dd09      	ble.n	1000146c <enterHistory+0x34>
		state__et = (etInt16) (state__et - STATE_MAX);
10001458:	1cbb      	adds	r3, r7, #2
1000145a:	881b      	ldrh	r3, [r3, #0]
1000145c:	3b03      	subs	r3, #3
1000145e:	b29a      	uxth	r2, r3
10001460:	1cbb      	adds	r3, r7, #2
10001462:	801a      	strh	r2, [r3, #0]
		skip_entry__et = ET_TRUE;
10001464:	1c3b      	adds	r3, r7, #0
10001466:	330f      	adds	r3, #15
10001468:	2201      	movs	r2, #1
1000146a:	701a      	strb	r2, [r3, #0]
	}
	while (ET_TRUE) {
		switch (state__et) {
1000146c:	1cbb      	adds	r3, r7, #2
1000146e:	2200      	movs	r2, #0
10001470:	5e9b      	ldrsh	r3, [r3, r2]
10001472:	2b01      	cmp	r3, #1
10001474:	d00d      	beq.n	10001492 <enterHistory+0x5a>
10001476:	2b02      	cmp	r3, #2
10001478:	d110      	bne.n	1000149c <enterHistory+0x64>
			case STATE_Operational:
				if (!(skip_entry__et)) entry_Operational(self);
1000147a:	1c3b      	adds	r3, r7, #0
1000147c:	330f      	adds	r3, #15
1000147e:	781b      	ldrb	r3, [r3, #0]
10001480:	2b00      	cmp	r3, #0
10001482:	d103      	bne.n	1000148c <enterHistory+0x54>
10001484:	687b      	ldr	r3, [r7, #4]
10001486:	1c18      	adds	r0, r3, #0
10001488:	f7ff fe3e 	bl	10001108 <entry_Operational>
				/* in leaf state: return state id */
				return STATE_Operational;
1000148c:	2302      	movs	r3, #2
1000148e:	b21b      	sxth	r3, r3
10001490:	e00a      	b.n	100014a8 <enterHistory+0x70>
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
10001492:	1cbb      	adds	r3, r7, #2
10001494:	687a      	ldr	r2, [r7, #4]
10001496:	8912      	ldrh	r2, [r2, #8]
10001498:	801a      	strh	r2, [r3, #0]
				break;
1000149a:	e000      	b.n	1000149e <enterHistory+0x66>
			default:
				/* should not occur */
				break;
1000149c:	46c0      	nop			; (mov r8, r8)
		}
		skip_entry__et = ET_FALSE;
1000149e:	1c3b      	adds	r3, r7, #0
100014a0:	330f      	adds	r3, #15
100014a2:	2200      	movs	r2, #0
100014a4:	701a      	strb	r2, [r3, #0]
	}
100014a6:	e7e1      	b.n	1000146c <enterHistory+0x34>
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}
100014a8:	1c18      	adds	r0, r3, #0
100014aa:	46bd      	mov	sp, r7
100014ac:	b004      	add	sp, #16
100014ae:	bd80      	pop	{r7, pc}

100014b0 <ATimingService_executeInitTransition>:

static void ATimingService_executeInitTransition(ATimingService* self) {
100014b0:	b590      	push	{r4, r7, lr}
100014b2:	b085      	sub	sp, #20
100014b4:	af00      	add	r7, sp, #0
100014b6:	6078      	str	r0, [r7, #4]
	int chain__et = CHAIN_TRANS_INITIAL_TO__Operational;
100014b8:	2301      	movs	r3, #1
100014ba:	60fb      	str	r3, [r7, #12]
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
100014bc:	1c3c      	adds	r4, r7, #0
100014be:	340a      	adds	r4, #10
100014c0:	687a      	ldr	r2, [r7, #4]
100014c2:	68fb      	ldr	r3, [r7, #12]
100014c4:	1c10      	adds	r0, r2, #0
100014c6:	1c19      	adds	r1, r3, #0
100014c8:	2200      	movs	r2, #0
100014ca:	2300      	movs	r3, #0
100014cc:	f7ff ff72 	bl	100013b4 <executeTransitionChain>
100014d0:	1c03      	adds	r3, r0, #0
100014d2:	8023      	strh	r3, [r4, #0]
	next__et = enterHistory(self, next__et);
100014d4:	1c3c      	adds	r4, r7, #0
100014d6:	340a      	adds	r4, #10
100014d8:	687a      	ldr	r2, [r7, #4]
100014da:	1c3b      	adds	r3, r7, #0
100014dc:	330a      	adds	r3, #10
100014de:	2100      	movs	r1, #0
100014e0:	5e5b      	ldrsh	r3, [r3, r1]
100014e2:	1c10      	adds	r0, r2, #0
100014e4:	1c19      	adds	r1, r3, #0
100014e6:	f7ff ffa7 	bl	10001438 <enterHistory>
100014ea:	1c03      	adds	r3, r0, #0
100014ec:	8023      	strh	r3, [r4, #0]
	setState(self, next__et);
100014ee:	687a      	ldr	r2, [r7, #4]
100014f0:	1c3b      	adds	r3, r7, #0
100014f2:	330a      	adds	r3, #10
100014f4:	2100      	movs	r1, #0
100014f6:	5e5b      	ldrsh	r3, [r3, r1]
100014f8:	1c10      	adds	r0, r2, #0
100014fa:	1c19      	adds	r1, r3, #0
100014fc:	f7ff fdea 	bl	100010d4 <setState>
}
10001500:	46bd      	mov	sp, r7
10001502:	b005      	add	sp, #20
10001504:	bd90      	pop	{r4, r7, pc}
10001506:	46c0      	nop			; (mov r8, r8)

10001508 <ATimingService_receiveEvent>:

/* receiveEvent contains the main implementation of the FSM */
static void ATimingService_receiveEvent(ATimingService* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
10001508:	b590      	push	{r4, r7, lr}
1000150a:	b089      	sub	sp, #36	; 0x24
1000150c:	af00      	add	r7, sp, #0
1000150e:	60f8      	str	r0, [r7, #12]
10001510:	60b9      	str	r1, [r7, #8]
10001512:	607a      	str	r2, [r7, #4]
10001514:	603b      	str	r3, [r7, #0]
	int trigger__et = (ifitem==NULL)? POLLING : ifitem->localId + EVT_SHIFT*evt;
10001516:	68bb      	ldr	r3, [r7, #8]
10001518:	2b00      	cmp	r3, #0
1000151a:	d007      	beq.n	1000152c <ATimingService_receiveEvent+0x24>
1000151c:	68bb      	ldr	r3, [r7, #8]
1000151e:	7a5b      	ldrb	r3, [r3, #9]
10001520:	1c1a      	adds	r2, r3, #0
10001522:	687b      	ldr	r3, [r7, #4]
10001524:	2164      	movs	r1, #100	; 0x64
10001526:	434b      	muls	r3, r1
10001528:	18d3      	adds	r3, r2, r3
1000152a:	e000      	b.n	1000152e <ATimingService_receiveEvent+0x26>
1000152c:	2300      	movs	r3, #0
1000152e:	617b      	str	r3, [r7, #20]
	int chain__et = NOT_CAUGHT;
10001530:	2300      	movs	r3, #0
10001532:	61fb      	str	r3, [r7, #28]
	etInt16 catching_state__et = NO_STATE;
10001534:	1c3b      	adds	r3, r7, #0
10001536:	331a      	adds	r3, #26
10001538:	2200      	movs	r2, #0
1000153a:	801a      	strh	r2, [r3, #0]
	((void)trigger__et);	/* avoids unused warning */
	
	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
1000153c:	68b9      	ldr	r1, [r7, #8]
1000153e:	687a      	ldr	r2, [r7, #4]
10001540:	683b      	ldr	r3, [r7, #0]
10001542:	1c08      	adds	r0, r1, #0
10001544:	1c11      	adds	r1, r2, #0
10001546:	1c1a      	adds	r2, r3, #0
10001548:	f004 fd66 	bl	10006018 <handleSystemEvent>
1000154c:	1c03      	adds	r3, r0, #0
1000154e:	2b00      	cmp	r3, #0
10001550:	d131      	bne.n	100015b6 <ATimingService_receiveEvent+0xae>
		switch (getState(self)) {
10001552:	68fb      	ldr	r3, [r7, #12]
10001554:	1c18      	adds	r0, r3, #0
10001556:	f7ff fdcb 	bl	100010f0 <getState>
1000155a:	1c03      	adds	r3, r0, #0
1000155c:	2b02      	cmp	r3, #2
1000155e:	d129      	bne.n	100015b4 <ATimingService_receiveEvent+0xac>
			case STATE_Operational:
				switch(trigger__et) {
10001560:	697b      	ldr	r3, [r7, #20]
10001562:	2bc9      	cmp	r3, #201	; 0xc9
10001564:	d016      	beq.n	10001594 <ATimingService_receiveEvent+0x8c>
10001566:	dc02      	bgt.n	1000156e <ATimingService_receiveEvent+0x66>
10001568:	2b00      	cmp	r3, #0
1000156a:	d007      	beq.n	1000157c <ATimingService_receiveEvent+0x74>
1000156c:	e020      	b.n	100015b0 <ATimingService_receiveEvent+0xa8>
1000156e:	4a2d      	ldr	r2, [pc, #180]	; (10001624 <ATimingService_receiveEvent+0x11c>)
10001570:	4293      	cmp	r3, r2
10001572:	d008      	beq.n	10001586 <ATimingService_receiveEvent+0x7e>
10001574:	4a2c      	ldr	r2, [pc, #176]	; (10001628 <ATimingService_receiveEvent+0x120>)
10001576:	4293      	cmp	r3, r2
10001578:	d013      	beq.n	100015a2 <ATimingService_receiveEvent+0x9a>
1000157a:	e019      	b.n	100015b0 <ATimingService_receiveEvent+0xa8>
					case POLLING:
						do_Operational(self);
1000157c:	68fb      	ldr	r3, [r7, #12]
1000157e:	1c18      	adds	r0, r3, #0
10001580:	f7ff fdca 	bl	10001118 <do_Operational>
						break;
10001584:	e015      	b.n	100015b2 <ATimingService_receiveEvent+0xaa>
					case TRIG_timer__startTimeout:
						{
							chain__et = CHAIN_TRANS_tr1_FROM_Operational_TO_Operational_BY_startTimeouttimer_tr1;
10001586:	2302      	movs	r3, #2
10001588:	61fb      	str	r3, [r7, #28]
							catching_state__et = STATE_TOP;
1000158a:	1c3b      	adds	r3, r7, #0
1000158c:	331a      	adds	r3, #26
1000158e:	2201      	movs	r2, #1
10001590:	801a      	strh	r2, [r3, #0]
						}
					break;
10001592:	e00e      	b.n	100015b2 <ATimingService_receiveEvent+0xaa>
					case TRIG_timer__startTimer:
						{
							chain__et = CHAIN_TRANS_tr3_FROM_Operational_TO_Operational_BY_startTimertimer_tr3;
10001594:	2303      	movs	r3, #3
10001596:	61fb      	str	r3, [r7, #28]
							catching_state__et = STATE_TOP;
10001598:	1c3b      	adds	r3, r7, #0
1000159a:	331a      	adds	r3, #26
1000159c:	2201      	movs	r2, #1
1000159e:	801a      	strh	r2, [r3, #0]
						}
					break;
100015a0:	e007      	b.n	100015b2 <ATimingService_receiveEvent+0xaa>
					case TRIG_timer__kill:
						{
							chain__et = CHAIN_TRANS_tr4_FROM_Operational_TO_Operational_BY_killtimer_tr4;
100015a2:	2304      	movs	r3, #4
100015a4:	61fb      	str	r3, [r7, #28]
							catching_state__et = STATE_TOP;
100015a6:	1c3b      	adds	r3, r7, #0
100015a8:	331a      	adds	r3, #26
100015aa:	2201      	movs	r2, #1
100015ac:	801a      	strh	r2, [r3, #0]
						}
					break;
100015ae:	e000      	b.n	100015b2 <ATimingService_receiveEvent+0xaa>
					default:
						/* should not occur */
						break;
100015b0:	46c0      	nop			; (mov r8, r8)
				}
				break;
100015b2:	e000      	b.n	100015b6 <ATimingService_receiveEvent+0xae>
			default:
				/* should not occur */
				break;
100015b4:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (chain__et != NOT_CAUGHT) {
100015b6:	69fb      	ldr	r3, [r7, #28]
100015b8:	2b00      	cmp	r3, #0
100015ba:	d02f      	beq.n	1000161c <ATimingService_receiveEvent+0x114>
		exitTo(self, getState(self), catching_state__et);
100015bc:	68fb      	ldr	r3, [r7, #12]
100015be:	1c18      	adds	r0, r3, #0
100015c0:	f7ff fd96 	bl	100010f0 <getState>
100015c4:	1c03      	adds	r3, r0, #0
100015c6:	1c1a      	adds	r2, r3, #0
100015c8:	68f9      	ldr	r1, [r7, #12]
100015ca:	1c3b      	adds	r3, r7, #0
100015cc:	331a      	adds	r3, #26
100015ce:	2000      	movs	r0, #0
100015d0:	5e1b      	ldrsh	r3, [r3, r0]
100015d2:	1c08      	adds	r0, r1, #0
100015d4:	1c11      	adds	r1, r2, #0
100015d6:	1c1a      	adds	r2, r3, #0
100015d8:	f7ff fec6 	bl	10001368 <exitTo>
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
100015dc:	1c3c      	adds	r4, r7, #0
100015de:	3412      	adds	r4, #18
100015e0:	68f8      	ldr	r0, [r7, #12]
100015e2:	69f9      	ldr	r1, [r7, #28]
100015e4:	68ba      	ldr	r2, [r7, #8]
100015e6:	683b      	ldr	r3, [r7, #0]
100015e8:	f7ff fee4 	bl	100013b4 <executeTransitionChain>
100015ec:	1c03      	adds	r3, r0, #0
100015ee:	8023      	strh	r3, [r4, #0]
			next__et = enterHistory(self, next__et);
100015f0:	1c3c      	adds	r4, r7, #0
100015f2:	3412      	adds	r4, #18
100015f4:	68fa      	ldr	r2, [r7, #12]
100015f6:	1c3b      	adds	r3, r7, #0
100015f8:	3312      	adds	r3, #18
100015fa:	2100      	movs	r1, #0
100015fc:	5e5b      	ldrsh	r3, [r3, r1]
100015fe:	1c10      	adds	r0, r2, #0
10001600:	1c19      	adds	r1, r3, #0
10001602:	f7ff ff19 	bl	10001438 <enterHistory>
10001606:	1c03      	adds	r3, r0, #0
10001608:	8023      	strh	r3, [r4, #0]
			setState(self, next__et);
1000160a:	68fa      	ldr	r2, [r7, #12]
1000160c:	1c3b      	adds	r3, r7, #0
1000160e:	3312      	adds	r3, #18
10001610:	2000      	movs	r0, #0
10001612:	5e1b      	ldrsh	r3, [r3, r0]
10001614:	1c10      	adds	r0, r2, #0
10001616:	1c19      	adds	r1, r3, #0
10001618:	f7ff fd5c 	bl	100010d4 <setState>
		}
	}
}
1000161c:	46bd      	mov	sp, r7
1000161e:	b009      	add	sp, #36	; 0x24
10001620:	bd90      	pop	{r4, r7, pc}
10001622:	46c0      	nop			; (mov r8, r8)
10001624:	0000012d 	.word	0x0000012d
10001628:	00000191 	.word	0x00000191

1000162c <ATimingService_init>:

void ATimingService_init(ATimingService* self){
1000162c:	b580      	push	{r7, lr}
1000162e:	b084      	sub	sp, #16
10001630:	af00      	add	r7, sp, #0
10001632:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ATimingService", "init")
	self->state = STATE_TOP;
10001634:	687b      	ldr	r3, [r7, #4]
10001636:	2201      	movs	r2, #1
10001638:	809a      	strh	r2, [r3, #4]
	{
		int i;
		for (i=0; i<ATIMINGSERVICE_HISTORY_SIZE; ++i)
1000163a:	2300      	movs	r3, #0
1000163c:	60fb      	str	r3, [r7, #12]
1000163e:	e008      	b.n	10001652 <ATimingService_init+0x26>
			self->history[i] = NO_STATE;
10001640:	687a      	ldr	r2, [r7, #4]
10001642:	68fb      	ldr	r3, [r7, #12]
10001644:	005b      	lsls	r3, r3, #1
10001646:	18d3      	adds	r3, r2, r3
10001648:	2200      	movs	r2, #0
1000164a:	80da      	strh	r2, [r3, #6]
void ATimingService_init(ATimingService* self){
	ET_MSC_LOGGER_SYNC_ENTRY("ATimingService", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<ATIMINGSERVICE_HISTORY_SIZE; ++i)
1000164c:	68fb      	ldr	r3, [r7, #12]
1000164e:	3301      	adds	r3, #1
10001650:	60fb      	str	r3, [r7, #12]
10001652:	68fb      	ldr	r3, [r7, #12]
10001654:	2b01      	cmp	r3, #1
10001656:	ddf3      	ble.n	10001640 <ATimingService_init+0x14>
			self->history[i] = NO_STATE;
	}
	ATimingService_executeInitTransition(self);
10001658:	687b      	ldr	r3, [r7, #4]
1000165a:	1c18      	adds	r0, r3, #0
1000165c:	f7ff ff28 	bl	100014b0 <ATimingService_executeInitTransition>
	ET_MSC_LOGGER_SYNC_EXIT
}
10001660:	46bd      	mov	sp, r7
10001662:	b004      	add	sp, #16
10001664:	bd80      	pop	{r7, pc}
10001666:	46c0      	nop			; (mov r8, r8)

10001668 <ATimingService_receiveMessage>:


void ATimingService_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
10001668:	b580      	push	{r7, lr}
1000166a:	b084      	sub	sp, #16
1000166c:	af00      	add	r7, sp, #0
1000166e:	60f8      	str	r0, [r7, #12]
10001670:	60b9      	str	r1, [r7, #8]
10001672:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ATimingService", "_receiveMessage")
	
	ATimingService_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));
10001674:	687b      	ldr	r3, [r7, #4]
10001676:	88db      	ldrh	r3, [r3, #6]
10001678:	b21a      	sxth	r2, r3
1000167a:	687b      	ldr	r3, [r7, #4]
1000167c:	3308      	adds	r3, #8
1000167e:	68f8      	ldr	r0, [r7, #12]
10001680:	68b9      	ldr	r1, [r7, #8]
10001682:	f7ff ff41 	bl	10001508 <ATimingService_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10001686:	46bd      	mov	sp, r7
10001688:	b004      	add	sp, #16
1000168a:	bd80      	pop	{r7, pc}

1000168c <ATimingService_execute>:

void ATimingService_execute(ATimingService* self) {
1000168c:	b580      	push	{r7, lr}
1000168e:	b082      	sub	sp, #8
10001690:	af00      	add	r7, sp, #0
10001692:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ATimingService", "_execute")
	
	ATimingService_receiveEvent(self, NULL, 0, NULL);
10001694:	687b      	ldr	r3, [r7, #4]
10001696:	1c18      	adds	r0, r3, #0
10001698:	2100      	movs	r1, #0
1000169a:	2200      	movs	r2, #0
1000169c:	2300      	movs	r3, #0
1000169e:	f7ff ff33 	bl	10001508 <ATimingService_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
100016a2:	46bd      	mov	sp, r7
100016a4:	b002      	add	sp, #8
100016a6:	bd80      	pop	{r7, pc}

100016a8 <ATimingService_getTcb>:

/*--------------------- operations ---------------------*/
etTimerControlBlock* ATimingService_getTcb(ATimingService* self) {
100016a8:	b580      	push	{r7, lr}
100016aa:	b084      	sub	sp, #16
100016ac:	af00      	add	r7, sp, #0
100016ae:	6078      	str	r0, [r7, #4]
	
				etTimerControlBlock* temp = freeTcbsRoot;
100016b0:	4b09      	ldr	r3, [pc, #36]	; (100016d8 <ATimingService_getTcb+0x30>)
100016b2:	681b      	ldr	r3, [r3, #0]
100016b4:	60fb      	str	r3, [r7, #12]
				
				if(freeTcbsRoot!=0) {
100016b6:	4b08      	ldr	r3, [pc, #32]	; (100016d8 <ATimingService_getTcb+0x30>)
100016b8:	681b      	ldr	r3, [r3, #0]
100016ba:	2b00      	cmp	r3, #0
100016bc:	d007      	beq.n	100016ce <ATimingService_getTcb+0x26>
					freeTcbsRoot=freeTcbsRoot->next;
100016be:	4b06      	ldr	r3, [pc, #24]	; (100016d8 <ATimingService_getTcb+0x30>)
100016c0:	681b      	ldr	r3, [r3, #0]
100016c2:	695a      	ldr	r2, [r3, #20]
100016c4:	4b04      	ldr	r3, [pc, #16]	; (100016d8 <ATimingService_getTcb+0x30>)
100016c6:	601a      	str	r2, [r3, #0]
					temp->next=0;
100016c8:	68fb      	ldr	r3, [r7, #12]
100016ca:	2200      	movs	r2, #0
100016cc:	615a      	str	r2, [r3, #20]
					}
				return temp;
100016ce:	68fb      	ldr	r3, [r7, #12]
}
100016d0:	1c18      	adds	r0, r3, #0
100016d2:	46bd      	mov	sp, r7
100016d4:	b004      	add	sp, #16
100016d6:	bd80      	pop	{r7, pc}
100016d8:	20001fdc 	.word	0x20001fdc

100016dc <ATimingService_returnTcb>:
void ATimingService_returnTcb(ATimingService* self, etTimerControlBlock* block) {
100016dc:	b580      	push	{r7, lr}
100016de:	b082      	sub	sp, #8
100016e0:	af00      	add	r7, sp, #0
100016e2:	6078      	str	r0, [r7, #4]
100016e4:	6039      	str	r1, [r7, #0]
	
				block->next=freeTcbsRoot;
100016e6:	4b05      	ldr	r3, [pc, #20]	; (100016fc <ATimingService_returnTcb+0x20>)
100016e8:	681a      	ldr	r2, [r3, #0]
100016ea:	683b      	ldr	r3, [r7, #0]
100016ec:	615a      	str	r2, [r3, #20]
				freeTcbsRoot=block;
100016ee:	4b03      	ldr	r3, [pc, #12]	; (100016fc <ATimingService_returnTcb+0x20>)
100016f0:	683a      	ldr	r2, [r7, #0]
100016f2:	601a      	str	r2, [r3, #0]
}
100016f4:	46bd      	mov	sp, r7
100016f6:	b002      	add	sp, #8
100016f8:	bd80      	pop	{r7, pc}
100016fa:	46c0      	nop			; (mov r8, r8)
100016fc:	20001fdc 	.word	0x20001fdc

10001700 <ATimingService_removeTcbFromUsedList>:
void ATimingService_removeTcbFromUsedList(ATimingService* self, int32 idx) {
10001700:	b580      	push	{r7, lr}
10001702:	b084      	sub	sp, #16
10001704:	af00      	add	r7, sp, #0
10001706:	6078      	str	r0, [r7, #4]
10001708:	6039      	str	r1, [r7, #0]
	
				etTimerControlBlock* temp=usedTcbsRoot;
1000170a:	4b1e      	ldr	r3, [pc, #120]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
1000170c:	681b      	ldr	r3, [r3, #0]
1000170e:	60fb      	str	r3, [r7, #12]
				etTimerControlBlock* temp2=usedTcbsRoot;
10001710:	4b1c      	ldr	r3, [pc, #112]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
10001712:	681b      	ldr	r3, [r3, #0]
10001714:	60bb      	str	r3, [r7, #8]
				
				if (temp==0) return;
10001716:	68fb      	ldr	r3, [r7, #12]
10001718:	2b00      	cmp	r3, #0
1000171a:	d02e      	beq.n	1000177a <ATimingService_removeTcbFromUsedList+0x7a>
	
				if (usedTcbsRoot->portIdx == idx){
1000171c:	4b19      	ldr	r3, [pc, #100]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
1000171e:	681b      	ldr	r3, [r3, #0]
10001720:	691a      	ldr	r2, [r3, #16]
10001722:	683b      	ldr	r3, [r7, #0]
10001724:	429a      	cmp	r2, r3
10001726:	d10b      	bne.n	10001740 <ATimingService_removeTcbFromUsedList+0x40>
					/* element found, the first one */
					usedTcbsRoot = usedTcbsRoot->next;
10001728:	4b16      	ldr	r3, [pc, #88]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
1000172a:	681b      	ldr	r3, [r3, #0]
1000172c:	695a      	ldr	r2, [r3, #20]
1000172e:	4b15      	ldr	r3, [pc, #84]	; (10001784 <ATimingService_removeTcbFromUsedList+0x84>)
10001730:	601a      	str	r2, [r3, #0]
					returnTcb(temp);
10001732:	687a      	ldr	r2, [r7, #4]
10001734:	68fb      	ldr	r3, [r7, #12]
10001736:	1c10      	adds	r0, r2, #0
10001738:	1c19      	adds	r1, r3, #0
1000173a:	f7ff ffcf 	bl	100016dc <ATimingService_returnTcb>
					return;
1000173e:	e01d      	b.n	1000177c <ATimingService_removeTcbFromUsedList+0x7c>
					}
	
				temp=temp->next;
10001740:	68fb      	ldr	r3, [r7, #12]
10001742:	695b      	ldr	r3, [r3, #20]
10001744:	60fb      	str	r3, [r7, #12]
				while(temp!=0){
10001746:	e014      	b.n	10001772 <ATimingService_removeTcbFromUsedList+0x72>
					if(temp->portIdx==idx){
10001748:	68fb      	ldr	r3, [r7, #12]
1000174a:	691a      	ldr	r2, [r3, #16]
1000174c:	683b      	ldr	r3, [r7, #0]
1000174e:	429a      	cmp	r2, r3
10001750:	d10a      	bne.n	10001768 <ATimingService_removeTcbFromUsedList+0x68>
						temp2->next=temp->next;
10001752:	68fb      	ldr	r3, [r7, #12]
10001754:	695a      	ldr	r2, [r3, #20]
10001756:	68bb      	ldr	r3, [r7, #8]
10001758:	615a      	str	r2, [r3, #20]
						returnTcb(temp);
1000175a:	687a      	ldr	r2, [r7, #4]
1000175c:	68fb      	ldr	r3, [r7, #12]
1000175e:	1c10      	adds	r0, r2, #0
10001760:	1c19      	adds	r1, r3, #0
10001762:	f7ff ffbb 	bl	100016dc <ATimingService_returnTcb>
						return;			
10001766:	e009      	b.n	1000177c <ATimingService_removeTcbFromUsedList+0x7c>
					}else{
						/* try next */
						temp2=temp;
10001768:	68fb      	ldr	r3, [r7, #12]
1000176a:	60bb      	str	r3, [r7, #8]
						temp=temp->next;
1000176c:	68fb      	ldr	r3, [r7, #12]
1000176e:	695b      	ldr	r3, [r3, #20]
10001770:	60fb      	str	r3, [r7, #12]
					returnTcb(temp);
					return;
					}
	
				temp=temp->next;
				while(temp!=0){
10001772:	68fb      	ldr	r3, [r7, #12]
10001774:	2b00      	cmp	r3, #0
10001776:	d1e7      	bne.n	10001748 <ATimingService_removeTcbFromUsedList+0x48>
10001778:	e000      	b.n	1000177c <ATimingService_removeTcbFromUsedList+0x7c>
void ATimingService_removeTcbFromUsedList(ATimingService* self, int32 idx) {
	
				etTimerControlBlock* temp=usedTcbsRoot;
				etTimerControlBlock* temp2=usedTcbsRoot;
				
				if (temp==0) return;
1000177a:	46c0      	nop			; (mov r8, r8)
						/* try next */
						temp2=temp;
						temp=temp->next;
						}
					}
}
1000177c:	46bd      	mov	sp, r7
1000177e:	b004      	add	sp, #16
10001780:	bd80      	pop	{r7, pc}
10001782:	46c0      	nop			; (mov r8, r8)
10001784:	20001fd8 	.word	0x20001fd8

10001788 <ATimingService_putTcbToUsedList>:
void ATimingService_putTcbToUsedList(ATimingService* self, etTimerControlBlock* block) {
10001788:	b580      	push	{r7, lr}
1000178a:	b084      	sub	sp, #16
1000178c:	af00      	add	r7, sp, #0
1000178e:	6078      	str	r0, [r7, #4]
10001790:	6039      	str	r1, [r7, #0]
	
				etTimerControlBlock* temp=usedTcbsRoot;
10001792:	4b1f      	ldr	r3, [pc, #124]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
10001794:	681b      	ldr	r3, [r3, #0]
10001796:	60fb      	str	r3, [r7, #12]
				etTimerControlBlock* temp2=usedTcbsRoot;
10001798:	4b1d      	ldr	r3, [pc, #116]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
1000179a:	681b      	ldr	r3, [r3, #0]
1000179c:	60bb      	str	r3, [r7, #8]
	
				if (temp==0){
1000179e:	68fb      	ldr	r3, [r7, #12]
100017a0:	2b00      	cmp	r3, #0
100017a2:	d106      	bne.n	100017b2 <ATimingService_putTcbToUsedList+0x2a>
					/* list empty put new block to root */
					block->next=0;
100017a4:	683b      	ldr	r3, [r7, #0]
100017a6:	2200      	movs	r2, #0
100017a8:	615a      	str	r2, [r3, #20]
					usedTcbsRoot=block;
100017aa:	4b19      	ldr	r3, [pc, #100]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
100017ac:	683a      	ldr	r2, [r7, #0]
100017ae:	601a      	str	r2, [r3, #0]
					return;
100017b0:	e02a      	b.n	10001808 <ATimingService_putTcbToUsedList+0x80>
					}
				
				while(1){
					if (temp != 0){
100017b2:	68fb      	ldr	r3, [r7, #12]
100017b4:	2b00      	cmp	r3, #0
100017b6:	d020      	beq.n	100017fa <ATimingService_putTcbToUsedList+0x72>
						if (isTimeGreater(&block->expTime,&temp->expTime)){
100017b8:	683a      	ldr	r2, [r7, #0]
100017ba:	68fb      	ldr	r3, [r7, #12]
100017bc:	6879      	ldr	r1, [r7, #4]
100017be:	1c08      	adds	r0, r1, #0
100017c0:	1c11      	adds	r1, r2, #0
100017c2:	1c1a      	adds	r2, r3, #0
100017c4:	f000 f826 	bl	10001814 <ATimingService_isTimeGreater>
100017c8:	1c03      	adds	r3, r0, #0
100017ca:	2b00      	cmp	r3, #0
100017cc:	d005      	beq.n	100017da <ATimingService_putTcbToUsedList+0x52>
							/* try next position */
							temp2=temp;	
100017ce:	68fb      	ldr	r3, [r7, #12]
100017d0:	60bb      	str	r3, [r7, #8]
							temp=temp->next;
100017d2:	68fb      	ldr	r3, [r7, #12]
100017d4:	695b      	ldr	r3, [r3, #20]
100017d6:	60fb      	str	r3, [r7, #12]
						/* end of list reached */
						block->next=0;
						temp2->next=block;
						return;
					}
				}
100017d8:	e7eb      	b.n	100017b2 <ATimingService_putTcbToUsedList+0x2a>
							/* try next position */
							temp2=temp;	
							temp=temp->next;
							}else{
							/* right position found */
							block->next=temp;
100017da:	683b      	ldr	r3, [r7, #0]
100017dc:	68fa      	ldr	r2, [r7, #12]
100017de:	615a      	str	r2, [r3, #20]
							if(temp==usedTcbsRoot){
100017e0:	4b0b      	ldr	r3, [pc, #44]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
100017e2:	681b      	ldr	r3, [r3, #0]
100017e4:	68fa      	ldr	r2, [r7, #12]
100017e6:	429a      	cmp	r2, r3
100017e8:	d103      	bne.n	100017f2 <ATimingService_putTcbToUsedList+0x6a>
								usedTcbsRoot=block;
100017ea:	4b09      	ldr	r3, [pc, #36]	; (10001810 <ATimingService_putTcbToUsedList+0x88>)
100017ec:	683a      	ldr	r2, [r7, #0]
100017ee:	601a      	str	r2, [r3, #0]
								}else{
								temp2->next=block;
								}
							return;
100017f0:	e00a      	b.n	10001808 <ATimingService_putTcbToUsedList+0x80>
							/* right position found */
							block->next=temp;
							if(temp==usedTcbsRoot){
								usedTcbsRoot=block;
								}else{
								temp2->next=block;
100017f2:	68bb      	ldr	r3, [r7, #8]
100017f4:	683a      	ldr	r2, [r7, #0]
100017f6:	615a      	str	r2, [r3, #20]
								}
							return;
100017f8:	e006      	b.n	10001808 <ATimingService_putTcbToUsedList+0x80>
							}
						}else{
						/* end of list reached */
						block->next=0;
100017fa:	683b      	ldr	r3, [r7, #0]
100017fc:	2200      	movs	r2, #0
100017fe:	615a      	str	r2, [r3, #20]
						temp2->next=block;
10001800:	68bb      	ldr	r3, [r7, #8]
10001802:	683a      	ldr	r2, [r7, #0]
10001804:	615a      	str	r2, [r3, #20]
						return;
10001806:	46c0      	nop			; (mov r8, r8)
					}
				}
}
10001808:	46bd      	mov	sp, r7
1000180a:	b004      	add	sp, #16
1000180c:	bd80      	pop	{r7, pc}
1000180e:	46c0      	nop			; (mov r8, r8)
10001810:	20001fd8 	.word	0x20001fd8

10001814 <ATimingService_isTimeGreater>:
boolean ATimingService_isTimeGreater(ATimingService* self, etTime* t1, etTime* t2) {
10001814:	b580      	push	{r7, lr}
10001816:	b084      	sub	sp, #16
10001818:	af00      	add	r7, sp, #0
1000181a:	60f8      	str	r0, [r7, #12]
1000181c:	60b9      	str	r1, [r7, #8]
1000181e:	607a      	str	r2, [r7, #4]
	
					if (t1->sec > t2->sec) return ET_TRUE;
10001820:	68bb      	ldr	r3, [r7, #8]
10001822:	681a      	ldr	r2, [r3, #0]
10001824:	687b      	ldr	r3, [r7, #4]
10001826:	681b      	ldr	r3, [r3, #0]
10001828:	429a      	cmp	r2, r3
1000182a:	dd01      	ble.n	10001830 <ATimingService_isTimeGreater+0x1c>
1000182c:	2301      	movs	r3, #1
1000182e:	e010      	b.n	10001852 <ATimingService_isTimeGreater+0x3e>
					if (t1->sec < t2->sec) return ET_FALSE;
10001830:	68bb      	ldr	r3, [r7, #8]
10001832:	681a      	ldr	r2, [r3, #0]
10001834:	687b      	ldr	r3, [r7, #4]
10001836:	681b      	ldr	r3, [r3, #0]
10001838:	429a      	cmp	r2, r3
1000183a:	da01      	bge.n	10001840 <ATimingService_isTimeGreater+0x2c>
1000183c:	2300      	movs	r3, #0
1000183e:	e008      	b.n	10001852 <ATimingService_isTimeGreater+0x3e>
					if (t1->nSec > t2->nSec) return ET_TRUE;
10001840:	68bb      	ldr	r3, [r7, #8]
10001842:	685a      	ldr	r2, [r3, #4]
10001844:	687b      	ldr	r3, [r7, #4]
10001846:	685b      	ldr	r3, [r3, #4]
10001848:	429a      	cmp	r2, r3
1000184a:	dd01      	ble.n	10001850 <ATimingService_isTimeGreater+0x3c>
1000184c:	2301      	movs	r3, #1
1000184e:	e000      	b.n	10001852 <ATimingService_isTimeGreater+0x3e>
					return ET_FALSE;
10001850:	2300      	movs	r3, #0
}
10001852:	1c18      	adds	r0, r3, #0
10001854:	46bd      	mov	sp, r7
10001856:	b004      	add	sp, #16
10001858:	bd80      	pop	{r7, pc}
1000185a:	46c0      	nop			; (mov r8, r8)

1000185c <ATimingService_addTime>:
void ATimingService_addTime(ATimingService* self, etTime* t1, etTime* t2) {
1000185c:	b580      	push	{r7, lr}
1000185e:	b084      	sub	sp, #16
10001860:	af00      	add	r7, sp, #0
10001862:	60f8      	str	r0, [r7, #12]
10001864:	60b9      	str	r1, [r7, #8]
10001866:	607a      	str	r2, [r7, #4]
	
					t1->sec += t2->sec;
10001868:	68bb      	ldr	r3, [r7, #8]
1000186a:	681a      	ldr	r2, [r3, #0]
1000186c:	687b      	ldr	r3, [r7, #4]
1000186e:	681b      	ldr	r3, [r3, #0]
10001870:	18d2      	adds	r2, r2, r3
10001872:	68bb      	ldr	r3, [r7, #8]
10001874:	601a      	str	r2, [r3, #0]
					t1->nSec += t2->nSec;
10001876:	68bb      	ldr	r3, [r7, #8]
10001878:	685a      	ldr	r2, [r3, #4]
1000187a:	687b      	ldr	r3, [r7, #4]
1000187c:	685b      	ldr	r3, [r3, #4]
1000187e:	18d2      	adds	r2, r2, r3
10001880:	68bb      	ldr	r3, [r7, #8]
10001882:	605a      	str	r2, [r3, #4]
					while(t1->nSec >= 1000000000L){
10001884:	e00a      	b.n	1000189c <ATimingService_addTime+0x40>
						t1->sec++;
10001886:	68bb      	ldr	r3, [r7, #8]
10001888:	681b      	ldr	r3, [r3, #0]
1000188a:	1c5a      	adds	r2, r3, #1
1000188c:	68bb      	ldr	r3, [r7, #8]
1000188e:	601a      	str	r2, [r3, #0]
						t1->nSec-=1000000000L;
10001890:	68bb      	ldr	r3, [r7, #8]
10001892:	685b      	ldr	r3, [r3, #4]
10001894:	4905      	ldr	r1, [pc, #20]	; (100018ac <ATimingService_addTime+0x50>)
10001896:	185a      	adds	r2, r3, r1
10001898:	68bb      	ldr	r3, [r7, #8]
1000189a:	605a      	str	r2, [r3, #4]
}
void ATimingService_addTime(ATimingService* self, etTime* t1, etTime* t2) {
	
					t1->sec += t2->sec;
					t1->nSec += t2->nSec;
					while(t1->nSec >= 1000000000L){
1000189c:	68bb      	ldr	r3, [r7, #8]
1000189e:	685a      	ldr	r2, [r3, #4]
100018a0:	4b03      	ldr	r3, [pc, #12]	; (100018b0 <ATimingService_addTime+0x54>)
100018a2:	429a      	cmp	r2, r3
100018a4:	dcef      	bgt.n	10001886 <ATimingService_addTime+0x2a>
						t1->sec++;
						t1->nSec-=1000000000L;
						}
}
100018a6:	46bd      	mov	sp, r7
100018a8:	b004      	add	sp, #16
100018aa:	bd80      	pop	{r7, pc}
100018ac:	c4653600 	.word	0xc4653600
100018b0:	3b9ac9ff 	.word	0x3b9ac9ff

100018b4 <PTimerPort_timeout>:
#include "PTimer_Utils.h"


/*--------------------- port methods */

void PTimerPort_timeout(const PTimerPort* self) {
100018b4:	b580      	push	{r7, lr}
100018b6:	b082      	sub	sp, #8
100018b8:	af00      	add	r7, sp, #0
100018ba:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PTimerPort", "timeout")
		etPort_sendMessage(self, PTimer_OUT_timeout, 0, NULL);
100018bc:	687b      	ldr	r3, [r7, #4]
100018be:	1c18      	adds	r0, r3, #0
100018c0:	2101      	movs	r1, #1
100018c2:	2200      	movs	r2, #0
100018c4:	2300      	movs	r3, #0
100018c6:	f004 fbb3 	bl	10006030 <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
100018ca:	46bd      	mov	sp, r7
100018cc:	b002      	add	sp, #8
100018ce:	bd80      	pop	{r7, pc}

100018d0 <PTimerReplPort_timeout_broadcast>:

void PTimerReplPort_timeout_broadcast(const PTimerReplPort* self) {
100018d0:	b580      	push	{r7, lr}
100018d2:	b084      	sub	sp, #16
100018d4:	af00      	add	r7, sp, #0
100018d6:	6078      	str	r0, [r7, #4]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PTimerReplPort", "timeout")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100018d8:	2300      	movs	r3, #0
100018da:	60fb      	str	r3, [r7, #12]
100018dc:	e00d      	b.n	100018fa <PTimerReplPort_timeout_broadcast+0x2a>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PTimer_OUT_timeout, 0, NULL);
100018de:	687b      	ldr	r3, [r7, #4]
100018e0:	685a      	ldr	r2, [r3, #4]
100018e2:	68fb      	ldr	r3, [r7, #12]
100018e4:	011b      	lsls	r3, r3, #4
100018e6:	18d3      	adds	r3, r2, r3
100018e8:	1c18      	adds	r0, r3, #0
100018ea:	2101      	movs	r1, #1
100018ec:	2200      	movs	r2, #0
100018ee:	2300      	movs	r3, #0
100018f0:	f004 fb9e 	bl	10006030 <etPort_sendMessage>
}

void PTimerReplPort_timeout_broadcast(const PTimerReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PTimerReplPort", "timeout")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100018f4:	68fb      	ldr	r3, [r7, #12]
100018f6:	3301      	adds	r3, #1
100018f8:	60fb      	str	r3, [r7, #12]
100018fa:	687b      	ldr	r3, [r7, #4]
100018fc:	881b      	ldrh	r3, [r3, #0]
100018fe:	b21a      	sxth	r2, r3
10001900:	68fb      	ldr	r3, [r7, #12]
10001902:	429a      	cmp	r2, r3
10001904:	dceb      	bgt.n	100018de <PTimerReplPort_timeout_broadcast+0xe>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PTimer_OUT_timeout, 0, NULL);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10001906:	46bd      	mov	sp, r7
10001908:	b004      	add	sp, #16
1000190a:	bd80      	pop	{r7, pc}

1000190c <PTimerReplPort_timeout>:

void PTimerReplPort_timeout(const PTimerReplPort* self, int idx__et) {
1000190c:	b580      	push	{r7, lr}
1000190e:	b082      	sub	sp, #8
10001910:	af00      	add	r7, sp, #0
10001912:	6078      	str	r0, [r7, #4]
10001914:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("PTimerReplPort", "timeout")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
10001916:	683b      	ldr	r3, [r7, #0]
10001918:	2b00      	cmp	r3, #0
1000191a:	db10      	blt.n	1000193e <PTimerReplPort_timeout+0x32>
1000191c:	687b      	ldr	r3, [r7, #4]
1000191e:	881b      	ldrh	r3, [r3, #0]
10001920:	b21a      	sxth	r2, r3
10001922:	683b      	ldr	r3, [r7, #0]
10001924:	429a      	cmp	r2, r3
10001926:	dd0a      	ble.n	1000193e <PTimerReplPort_timeout+0x32>
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PTimer_OUT_timeout, 0, NULL);
10001928:	687b      	ldr	r3, [r7, #4]
1000192a:	685a      	ldr	r2, [r3, #4]
1000192c:	683b      	ldr	r3, [r7, #0]
1000192e:	011b      	lsls	r3, r3, #4
10001930:	18d3      	adds	r3, r2, r3
10001932:	1c18      	adds	r0, r3, #0
10001934:	2101      	movs	r1, #1
10001936:	2200      	movs	r2, #0
10001938:	2300      	movs	r3, #0
1000193a:	f004 fb79 	bl	10006030 <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000193e:	46bd      	mov	sp, r7
10001940:	b002      	add	sp, #8
10001942:	bd80      	pop	{r7, pc}

10001944 <PTimerReplPort_getReplication>:

etInt32 PTimerReplPort_getReplication(const PTimerReplPort* self) {
10001944:	b580      	push	{r7, lr}
10001946:	b082      	sub	sp, #8
10001948:	af00      	add	r7, sp, #0
1000194a:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
1000194c:	687b      	ldr	r3, [r7, #4]
1000194e:	881b      	ldrh	r3, [r3, #0]
10001950:	b21b      	sxth	r3, r3
}
10001952:	1c18      	adds	r0, r3, #0
10001954:	46bd      	mov	sp, r7
10001956:	b002      	add	sp, #8
10001958:	bd80      	pop	{r7, pc}
1000195a:	46c0      	nop			; (mov r8, r8)

1000195c <PTimerConjPort_startTimer>:



void PTimerConjPort_startTimer(const PTimerConjPort* self, uint32 data__et) {
1000195c:	b580      	push	{r7, lr}
1000195e:	b082      	sub	sp, #8
10001960:	af00      	add	r7, sp, #0
10001962:	6078      	str	r0, [r7, #4]
10001964:	6039      	str	r1, [r7, #0]
	if (status==0){
10001966:	687b      	ldr	r3, [r7, #4]
10001968:	681b      	ldr	r3, [r3, #0]
1000196a:	781b      	ldrb	r3, [r3, #0]
1000196c:	2b00      	cmp	r3, #0
1000196e:	d10a      	bne.n	10001986 <PTimerConjPort_startTimer+0x2a>
					status=ET_TIMER_RUNNING | ET_TIMER_PERIODIC;
10001970:	687b      	ldr	r3, [r7, #4]
10001972:	681b      	ldr	r3, [r3, #0]
10001974:	2203      	movs	r2, #3
10001976:	701a      	strb	r2, [r3, #0]
					etPort_sendMessage(self, PTimer_IN_startTimer, sizeof(int32), &data__et);
10001978:	687a      	ldr	r2, [r7, #4]
1000197a:	1c3b      	adds	r3, r7, #0
1000197c:	1c10      	adds	r0, r2, #0
1000197e:	2102      	movs	r1, #2
10001980:	2204      	movs	r2, #4
10001982:	f004 fb55 	bl	10006030 <etPort_sendMessage>
					}
}
10001986:	46bd      	mov	sp, r7
10001988:	b002      	add	sp, #8
1000198a:	bd80      	pop	{r7, pc}

1000198c <PTimerConjReplPort_startTimer_broadcast>:

void PTimerConjReplPort_startTimer_broadcast(const PTimerConjReplPort* self, uint32 data__et) {
1000198c:	b580      	push	{r7, lr}
1000198e:	b084      	sub	sp, #16
10001990:	af00      	add	r7, sp, #0
10001992:	6078      	str	r0, [r7, #4]
10001994:	6039      	str	r1, [r7, #0]
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001996:	2300      	movs	r3, #0
10001998:	60fb      	str	r3, [r7, #12]
1000199a:	e00d      	b.n	100019b8 <PTimerConjReplPort_startTimer_broadcast+0x2c>
		PTimerConjPort_startTimer(&((etReplPort*)self)->ports[i].port, data__et);
1000199c:	687b      	ldr	r3, [r7, #4]
1000199e:	685a      	ldr	r2, [r3, #4]
100019a0:	68fb      	ldr	r3, [r7, #12]
100019a2:	011b      	lsls	r3, r3, #4
100019a4:	18d3      	adds	r3, r2, r3
100019a6:	1c1a      	adds	r2, r3, #0
100019a8:	683b      	ldr	r3, [r7, #0]
100019aa:	1c10      	adds	r0, r2, #0
100019ac:	1c19      	adds	r1, r3, #0
100019ae:	f7ff ffd5 	bl	1000195c <PTimerConjPort_startTimer>
					}
}

void PTimerConjReplPort_startTimer_broadcast(const PTimerConjReplPort* self, uint32 data__et) {
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100019b2:	68fb      	ldr	r3, [r7, #12]
100019b4:	3301      	adds	r3, #1
100019b6:	60fb      	str	r3, [r7, #12]
100019b8:	687b      	ldr	r3, [r7, #4]
100019ba:	881b      	ldrh	r3, [r3, #0]
100019bc:	b21a      	sxth	r2, r3
100019be:	68fb      	ldr	r3, [r7, #12]
100019c0:	429a      	cmp	r2, r3
100019c2:	dceb      	bgt.n	1000199c <PTimerConjReplPort_startTimer_broadcast+0x10>
		PTimerConjPort_startTimer(&((etReplPort*)self)->ports[i].port, data__et);
	}					
}
100019c4:	46bd      	mov	sp, r7
100019c6:	b004      	add	sp, #16
100019c8:	bd80      	pop	{r7, pc}
100019ca:	46c0      	nop			; (mov r8, r8)

100019cc <PTimerConjReplPort_startTimer>:

void PTimerConjReplPort_startTimer(const PTimerConjReplPort* self, int idx__et, uint32 data__et) {
100019cc:	b580      	push	{r7, lr}
100019ce:	b084      	sub	sp, #16
100019d0:	af00      	add	r7, sp, #0
100019d2:	60f8      	str	r0, [r7, #12]
100019d4:	60b9      	str	r1, [r7, #8]
100019d6:	607a      	str	r2, [r7, #4]
	PTimerConjPort_startTimer(&((etReplPort*)self)->ports[idx__et].port, data__et);
100019d8:	68fb      	ldr	r3, [r7, #12]
100019da:	685a      	ldr	r2, [r3, #4]
100019dc:	68bb      	ldr	r3, [r7, #8]
100019de:	011b      	lsls	r3, r3, #4
100019e0:	18d3      	adds	r3, r2, r3
100019e2:	1c1a      	adds	r2, r3, #0
100019e4:	687b      	ldr	r3, [r7, #4]
100019e6:	1c10      	adds	r0, r2, #0
100019e8:	1c19      	adds	r1, r3, #0
100019ea:	f7ff ffb7 	bl	1000195c <PTimerConjPort_startTimer>
}
100019ee:	46bd      	mov	sp, r7
100019f0:	b004      	add	sp, #16
100019f2:	bd80      	pop	{r7, pc}

100019f4 <PTimerConjPort_startTimeout>:


void PTimerConjPort_startTimeout(const PTimerConjPort* self, uint32 data__et) {
100019f4:	b580      	push	{r7, lr}
100019f6:	b082      	sub	sp, #8
100019f8:	af00      	add	r7, sp, #0
100019fa:	6078      	str	r0, [r7, #4]
100019fc:	6039      	str	r1, [r7, #0]
	if (status==0){
100019fe:	687b      	ldr	r3, [r7, #4]
10001a00:	681b      	ldr	r3, [r3, #0]
10001a02:	781b      	ldrb	r3, [r3, #0]
10001a04:	2b00      	cmp	r3, #0
10001a06:	d10a      	bne.n	10001a1e <PTimerConjPort_startTimeout+0x2a>
					status = ET_TIMER_RUNNING;
10001a08:	687b      	ldr	r3, [r7, #4]
10001a0a:	681b      	ldr	r3, [r3, #0]
10001a0c:	2201      	movs	r2, #1
10001a0e:	701a      	strb	r2, [r3, #0]
					etPort_sendMessage(self, PTimer_IN_startTimeout, sizeof(int32), &data__et);
10001a10:	687a      	ldr	r2, [r7, #4]
10001a12:	1c3b      	adds	r3, r7, #0
10001a14:	1c10      	adds	r0, r2, #0
10001a16:	2103      	movs	r1, #3
10001a18:	2204      	movs	r2, #4
10001a1a:	f004 fb09 	bl	10006030 <etPort_sendMessage>
					}
}
10001a1e:	46bd      	mov	sp, r7
10001a20:	b002      	add	sp, #8
10001a22:	bd80      	pop	{r7, pc}

10001a24 <PTimerConjReplPort_startTimeout_broadcast>:

void PTimerConjReplPort_startTimeout_broadcast(const PTimerConjReplPort* self, uint32 data__et) {
10001a24:	b580      	push	{r7, lr}
10001a26:	b084      	sub	sp, #16
10001a28:	af00      	add	r7, sp, #0
10001a2a:	6078      	str	r0, [r7, #4]
10001a2c:	6039      	str	r1, [r7, #0]
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001a2e:	2300      	movs	r3, #0
10001a30:	60fb      	str	r3, [r7, #12]
10001a32:	e00d      	b.n	10001a50 <PTimerConjReplPort_startTimeout_broadcast+0x2c>
		PTimerConjPort_startTimeout(&((etReplPort*)self)->ports[i].port, data__et);
10001a34:	687b      	ldr	r3, [r7, #4]
10001a36:	685a      	ldr	r2, [r3, #4]
10001a38:	68fb      	ldr	r3, [r7, #12]
10001a3a:	011b      	lsls	r3, r3, #4
10001a3c:	18d3      	adds	r3, r2, r3
10001a3e:	1c1a      	adds	r2, r3, #0
10001a40:	683b      	ldr	r3, [r7, #0]
10001a42:	1c10      	adds	r0, r2, #0
10001a44:	1c19      	adds	r1, r3, #0
10001a46:	f7ff ffd5 	bl	100019f4 <PTimerConjPort_startTimeout>
					}
}

void PTimerConjReplPort_startTimeout_broadcast(const PTimerConjReplPort* self, uint32 data__et) {
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001a4a:	68fb      	ldr	r3, [r7, #12]
10001a4c:	3301      	adds	r3, #1
10001a4e:	60fb      	str	r3, [r7, #12]
10001a50:	687b      	ldr	r3, [r7, #4]
10001a52:	881b      	ldrh	r3, [r3, #0]
10001a54:	b21a      	sxth	r2, r3
10001a56:	68fb      	ldr	r3, [r7, #12]
10001a58:	429a      	cmp	r2, r3
10001a5a:	dceb      	bgt.n	10001a34 <PTimerConjReplPort_startTimeout_broadcast+0x10>
		PTimerConjPort_startTimeout(&((etReplPort*)self)->ports[i].port, data__et);
	}					
}
10001a5c:	46bd      	mov	sp, r7
10001a5e:	b004      	add	sp, #16
10001a60:	bd80      	pop	{r7, pc}
10001a62:	46c0      	nop			; (mov r8, r8)

10001a64 <PTimerConjReplPort_startTimeout>:

void PTimerConjReplPort_startTimeout(const PTimerConjReplPort* self, int idx__et, uint32 data__et) {
10001a64:	b580      	push	{r7, lr}
10001a66:	b084      	sub	sp, #16
10001a68:	af00      	add	r7, sp, #0
10001a6a:	60f8      	str	r0, [r7, #12]
10001a6c:	60b9      	str	r1, [r7, #8]
10001a6e:	607a      	str	r2, [r7, #4]
	PTimerConjPort_startTimeout(&((etReplPort*)self)->ports[idx__et].port, data__et);
10001a70:	68fb      	ldr	r3, [r7, #12]
10001a72:	685a      	ldr	r2, [r3, #4]
10001a74:	68bb      	ldr	r3, [r7, #8]
10001a76:	011b      	lsls	r3, r3, #4
10001a78:	18d3      	adds	r3, r2, r3
10001a7a:	1c1a      	adds	r2, r3, #0
10001a7c:	687b      	ldr	r3, [r7, #4]
10001a7e:	1c10      	adds	r0, r2, #0
10001a80:	1c19      	adds	r1, r3, #0
10001a82:	f7ff ffb7 	bl	100019f4 <PTimerConjPort_startTimeout>
}
10001a86:	46bd      	mov	sp, r7
10001a88:	b004      	add	sp, #16
10001a8a:	bd80      	pop	{r7, pc}

10001a8c <PTimerConjPort_kill>:


void PTimerConjPort_kill(const PTimerConjPort* self) {
10001a8c:	b580      	push	{r7, lr}
10001a8e:	b082      	sub	sp, #8
10001a90:	af00      	add	r7, sp, #0
10001a92:	6078      	str	r0, [r7, #4]
	
				if (status!=0){
10001a94:	687b      	ldr	r3, [r7, #4]
10001a96:	681b      	ldr	r3, [r3, #0]
10001a98:	781b      	ldrb	r3, [r3, #0]
10001a9a:	2b00      	cmp	r3, #0
10001a9c:	d00a      	beq.n	10001ab4 <PTimerConjPort_kill+0x28>
					status=0;
10001a9e:	687b      	ldr	r3, [r7, #4]
10001aa0:	681b      	ldr	r3, [r3, #0]
10001aa2:	2200      	movs	r2, #0
10001aa4:	701a      	strb	r2, [r3, #0]
					etPort_sendMessage(self, PTimer_IN_kill, 0,NULL);
10001aa6:	687b      	ldr	r3, [r7, #4]
10001aa8:	1c18      	adds	r0, r3, #0
10001aaa:	2104      	movs	r1, #4
10001aac:	2200      	movs	r2, #0
10001aae:	2300      	movs	r3, #0
10001ab0:	f004 fabe 	bl	10006030 <etPort_sendMessage>
					}
}
10001ab4:	46bd      	mov	sp, r7
10001ab6:	b002      	add	sp, #8
10001ab8:	bd80      	pop	{r7, pc}
10001aba:	46c0      	nop			; (mov r8, r8)

10001abc <PTimerConjReplPort_kill_broadcast>:

void PTimerConjReplPort_kill_broadcast(const PTimerConjReplPort* self) {
10001abc:	b580      	push	{r7, lr}
10001abe:	b084      	sub	sp, #16
10001ac0:	af00      	add	r7, sp, #0
10001ac2:	6078      	str	r0, [r7, #4]
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001ac4:	2300      	movs	r3, #0
10001ac6:	60fb      	str	r3, [r7, #12]
10001ac8:	e00a      	b.n	10001ae0 <PTimerConjReplPort_kill_broadcast+0x24>
		PTimerConjPort_kill(&((etReplPort*)self)->ports[i].port);
10001aca:	687b      	ldr	r3, [r7, #4]
10001acc:	685a      	ldr	r2, [r3, #4]
10001ace:	68fb      	ldr	r3, [r7, #12]
10001ad0:	011b      	lsls	r3, r3, #4
10001ad2:	18d3      	adds	r3, r2, r3
10001ad4:	1c18      	adds	r0, r3, #0
10001ad6:	f7ff ffd9 	bl	10001a8c <PTimerConjPort_kill>
					}
}

void PTimerConjReplPort_kill_broadcast(const PTimerConjReplPort* self) {
	int i;
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10001ada:	68fb      	ldr	r3, [r7, #12]
10001adc:	3301      	adds	r3, #1
10001ade:	60fb      	str	r3, [r7, #12]
10001ae0:	687b      	ldr	r3, [r7, #4]
10001ae2:	881b      	ldrh	r3, [r3, #0]
10001ae4:	b21a      	sxth	r2, r3
10001ae6:	68fb      	ldr	r3, [r7, #12]
10001ae8:	429a      	cmp	r2, r3
10001aea:	dcee      	bgt.n	10001aca <PTimerConjReplPort_kill_broadcast+0xe>
		PTimerConjPort_kill(&((etReplPort*)self)->ports[i].port);
	}					
}
10001aec:	46bd      	mov	sp, r7
10001aee:	b004      	add	sp, #16
10001af0:	bd80      	pop	{r7, pc}
10001af2:	46c0      	nop			; (mov r8, r8)

10001af4 <PTimerConjReplPort_kill>:

void PTimerConjReplPort_kill(const PTimerConjReplPort* self, int idx__et) {
10001af4:	b580      	push	{r7, lr}
10001af6:	b082      	sub	sp, #8
10001af8:	af00      	add	r7, sp, #0
10001afa:	6078      	str	r0, [r7, #4]
10001afc:	6039      	str	r1, [r7, #0]
	PTimerConjPort_kill(&((etReplPort*)self)->ports[idx__et].port);
10001afe:	687b      	ldr	r3, [r7, #4]
10001b00:	685a      	ldr	r2, [r3, #4]
10001b02:	683b      	ldr	r3, [r7, #0]
10001b04:	011b      	lsls	r3, r3, #4
10001b06:	18d3      	adds	r3, r2, r3
10001b08:	1c18      	adds	r0, r3, #0
10001b0a:	f7ff ffbf 	bl	10001a8c <PTimerConjPort_kill>
}
10001b0e:	46bd      	mov	sp, r7
10001b10:	b002      	add	sp, #8
10001b12:	bd80      	pop	{r7, pc}

10001b14 <PTimerConjReplPort_getReplication>:
/* begin PTimerConjPort specific */

/*--------------------- operations ---------------------*/
/* end PTimerConjPort specific */

etInt32 PTimerConjReplPort_getReplication(const PTimerConjReplPort* self) {
10001b14:	b580      	push	{r7, lr}
10001b16:	b082      	sub	sp, #8
10001b18:	af00      	add	r7, sp, #0
10001b1a:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10001b1c:	687b      	ldr	r3, [r7, #4]
10001b1e:	881b      	ldrh	r3, [r3, #0]
10001b20:	b21b      	sxth	r3, r3
}
10001b22:	1c18      	adds	r0, r3, #0
10001b24:	46bd      	mov	sp, r7
10001b26:	b002      	add	sp, #8
10001b28:	bd80      	pop	{r7, pc}
10001b2a:	46c0      	nop			; (mov r8, r8)

10001b2c <PTimerConjPort_timeout_receiveHandler>:

/* receiver handlers */
void PTimerConjPort_timeout_receiveHandler(PTimerConjPort* self, const etMessage* msg, void * actor, etActorReceiveMessage receiveMessageFunc){
10001b2c:	b580      	push	{r7, lr}
10001b2e:	b084      	sub	sp, #16
10001b30:	af00      	add	r7, sp, #0
10001b32:	60f8      	str	r0, [r7, #12]
10001b34:	60b9      	str	r1, [r7, #8]
10001b36:	607a      	str	r2, [r7, #4]
10001b38:	603b      	str	r3, [r7, #0]
	/* TODO: clear active bit in case of single shot timer */
				if (status!=0){
10001b3a:	68fb      	ldr	r3, [r7, #12]
10001b3c:	681b      	ldr	r3, [r3, #0]
10001b3e:	781b      	ldrb	r3, [r3, #0]
10001b40:	2b00      	cmp	r3, #0
10001b42:	d00d      	beq.n	10001b60 <PTimerConjPort_timeout_receiveHandler+0x34>
					if (status==ET_TIMER_RUNNING){
10001b44:	68fb      	ldr	r3, [r7, #12]
10001b46:	681b      	ldr	r3, [r3, #0]
10001b48:	781b      	ldrb	r3, [r3, #0]
10001b4a:	2b01      	cmp	r3, #1
10001b4c:	d103      	bne.n	10001b56 <PTimerConjPort_timeout_receiveHandler+0x2a>
						/* single shot timer */
						status=0;
10001b4e:	68fb      	ldr	r3, [r7, #12]
10001b50:	681b      	ldr	r3, [r3, #0]
10001b52:	2200      	movs	r2, #0
10001b54:	701a      	strb	r2, [r3, #0]
						}
					/* msg to fsm */
					(*receiveMessageFunc)(actor, self, msg);
10001b56:	6878      	ldr	r0, [r7, #4]
10001b58:	68f9      	ldr	r1, [r7, #12]
10001b5a:	68ba      	ldr	r2, [r7, #8]
10001b5c:	683b      	ldr	r3, [r7, #0]
10001b5e:	4798      	blx	r3
					}
	/* hand over the message to the actor:      */
	/* (*receiveMessageFunc)(actor, self, msg); */
}
10001b60:	46bd      	mov	sp, r7
10001b62:	b004      	add	sp, #16
10001b64:	bd80      	pop	{r7, pc}
10001b66:	46c0      	nop			; (mov r8, r8)

10001b68 <setState>:
	POLLING = 0,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};


static void setState(ADimmer* self, etInt16 new_state) {
10001b68:	b580      	push	{r7, lr}
10001b6a:	b082      	sub	sp, #8
10001b6c:	af00      	add	r7, sp, #0
10001b6e:	6078      	str	r0, [r7, #4]
10001b70:	1c0a      	adds	r2, r1, #0
10001b72:	1cbb      	adds	r3, r7, #2
10001b74:	801a      	strh	r2, [r3, #0]
	self->state = new_state;
10001b76:	687b      	ldr	r3, [r7, #4]
10001b78:	1cba      	adds	r2, r7, #2
10001b7a:	8812      	ldrh	r2, [r2, #0]
10001b7c:	819a      	strh	r2, [r3, #12]
}
10001b7e:	46bd      	mov	sp, r7
10001b80:	b002      	add	sp, #8
10001b82:	bd80      	pop	{r7, pc}

10001b84 <getState>:

static etInt16 getState(ADimmer* self) {
10001b84:	b580      	push	{r7, lr}
10001b86:	b082      	sub	sp, #8
10001b88:	af00      	add	r7, sp, #0
10001b8a:	6078      	str	r0, [r7, #4]
	return self->state;
10001b8c:	687b      	ldr	r3, [r7, #4]
10001b8e:	899b      	ldrh	r3, [r3, #12]
10001b90:	b21b      	sxth	r3, r3
}
10001b92:	1c18      	adds	r0, r3, #0
10001b94:	46bd      	mov	sp, r7
10001b96:	b002      	add	sp, #8
10001b98:	bd80      	pop	{r7, pc}
10001b9a:	46c0      	nop			; (mov r8, r8)

10001b9c <action_TRANS_INITIAL_TO__goingOn>:

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_INITIAL_TO__goingOn(ADimmer* self) {
10001b9c:	b580      	push	{r7, lr}
10001b9e:	b082      	sub	sp, #8
10001ba0:	af00      	add	r7, sp, #0
10001ba2:	6078      	str	r0, [r7, #4]
	pwm_setInstance(instance);
10001ba4:	687b      	ldr	r3, [r7, #4]
10001ba6:	681b      	ldr	r3, [r3, #0]
10001ba8:	1c1a      	adds	r2, r3, #0
10001baa:	687b      	ldr	r3, [r7, #4]
10001bac:	689b      	ldr	r3, [r3, #8]
10001bae:	1c10      	adds	r0, r2, #0
10001bb0:	1c19      	adds	r1, r3, #0
10001bb2:	f001 fa7d 	bl	100030b0 <PWMSP001ConjPort_setInstance>
	//PWMSP001ConjPort_setInstance(&self->constData->pwm,0);
	timer_startTimer(10);
10001bb6:	687b      	ldr	r3, [r7, #4]
10001bb8:	681b      	ldr	r3, [r3, #0]
10001bba:	330c      	adds	r3, #12
10001bbc:	1c18      	adds	r0, r3, #0
10001bbe:	210a      	movs	r1, #10
10001bc0:	f7ff fecc 	bl	1000195c <PTimerConjPort_startTimer>
	counter=0;
10001bc4:	687b      	ldr	r3, [r7, #4]
10001bc6:	2200      	movs	r2, #0
10001bc8:	711a      	strb	r2, [r3, #4]
}
10001bca:	46bd      	mov	sp, r7
10001bcc:	b002      	add	sp, #8
10001bce:	bd80      	pop	{r7, pc}

10001bd0 <action_TRANS_tr2_FROM_cp0_TO_goingOn_COND_tr2>:
static void action_TRANS_tr2_FROM_cp0_TO_goingOn_COND_tr2(ADimmer* self, const InterfaceItemBase* ifitem) {
10001bd0:	b580      	push	{r7, lr}
10001bd2:	b082      	sub	sp, #8
10001bd4:	af00      	add	r7, sp, #0
10001bd6:	6078      	str	r0, [r7, #4]
10001bd8:	6039      	str	r1, [r7, #0]
	pwm_setDutyCycle(counter);
10001bda:	687b      	ldr	r3, [r7, #4]
10001bdc:	681b      	ldr	r3, [r3, #0]
10001bde:	1c1a      	adds	r2, r3, #0
10001be0:	687b      	ldr	r3, [r7, #4]
10001be2:	791b      	ldrb	r3, [r3, #4]
10001be4:	1c10      	adds	r0, r2, #0
10001be6:	1c19      	adds	r1, r3, #0
10001be8:	f001 fa80 	bl	100030ec <PWMSP001ConjPort_setDutyCycle>
	//PWMSP001ConjPort_setDutyCycle(&self->constData->pwm,counter);
}
10001bec:	46bd      	mov	sp, r7
10001bee:	b002      	add	sp, #8
10001bf0:	bd80      	pop	{r7, pc}
10001bf2:	46c0      	nop			; (mov r8, r8)

10001bf4 <action_TRANS_tr4_FROM_cp1_TO_off>:
static void action_TRANS_tr4_FROM_cp1_TO_off(ADimmer* self, const InterfaceItemBase* ifitem) {
10001bf4:	b580      	push	{r7, lr}
10001bf6:	b082      	sub	sp, #8
10001bf8:	af00      	add	r7, sp, #0
10001bfa:	6078      	str	r0, [r7, #4]
10001bfc:	6039      	str	r1, [r7, #0]
	pwm_setDutyCycle(counter);
10001bfe:	687b      	ldr	r3, [r7, #4]
10001c00:	681b      	ldr	r3, [r3, #0]
10001c02:	1c1a      	adds	r2, r3, #0
10001c04:	687b      	ldr	r3, [r7, #4]
10001c06:	791b      	ldrb	r3, [r3, #4]
10001c08:	1c10      	adds	r0, r2, #0
10001c0a:	1c19      	adds	r1, r3, #0
10001c0c:	f001 fa6e 	bl	100030ec <PWMSP001ConjPort_setDutyCycle>
	//PWMSP001ConjPort_setDutyCycle(&self->constData->pwm,0);
	
	counter = 200;
10001c10:	687b      	ldr	r3, [r7, #4]
10001c12:	22c8      	movs	r2, #200	; 0xc8
10001c14:	711a      	strb	r2, [r3, #4]
}
10001c16:	46bd      	mov	sp, r7
10001c18:	b002      	add	sp, #8
10001c1a:	bd80      	pop	{r7, pc}

10001c1c <action_TRANS_tr5_FROM_cp1_TO_goingOff_COND_tr5>:
static void action_TRANS_tr5_FROM_cp1_TO_goingOff_COND_tr5(ADimmer* self, const InterfaceItemBase* ifitem) {
10001c1c:	b580      	push	{r7, lr}
10001c1e:	b082      	sub	sp, #8
10001c20:	af00      	add	r7, sp, #0
10001c22:	6078      	str	r0, [r7, #4]
10001c24:	6039      	str	r1, [r7, #0]
	pwm_setDutyCycle(counter);
10001c26:	687b      	ldr	r3, [r7, #4]
10001c28:	681b      	ldr	r3, [r3, #0]
10001c2a:	1c1a      	adds	r2, r3, #0
10001c2c:	687b      	ldr	r3, [r7, #4]
10001c2e:	791b      	ldrb	r3, [r3, #4]
10001c30:	1c10      	adds	r0, r2, #0
10001c32:	1c19      	adds	r1, r3, #0
10001c34:	f001 fa5a 	bl	100030ec <PWMSP001ConjPort_setDutyCycle>
	//PWMSP001ConjPort_setDutyCycle(&self->constData->pwm,counter);
}
10001c38:	46bd      	mov	sp, r7
10001c3a:	b002      	add	sp, #8
10001c3c:	bd80      	pop	{r7, pc}
10001c3e:	46c0      	nop			; (mov r8, r8)

10001c40 <exitTo>:
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ADimmer* self, etInt16 current__et, etInt16 to) {
10001c40:	b580      	push	{r7, lr}
10001c42:	b082      	sub	sp, #8
10001c44:	af00      	add	r7, sp, #0
10001c46:	6078      	str	r0, [r7, #4]
10001c48:	1cbb      	adds	r3, r7, #2
10001c4a:	8019      	strh	r1, [r3, #0]
10001c4c:	1c3b      	adds	r3, r7, #0
10001c4e:	801a      	strh	r2, [r3, #0]
	while (current__et!=to) {
10001c50:	e022      	b.n	10001c98 <exitTo+0x58>
		switch (current__et) {
10001c52:	1cbb      	adds	r3, r7, #2
10001c54:	2100      	movs	r1, #0
10001c56:	5e5b      	ldrsh	r3, [r3, r1]
10001c58:	2b03      	cmp	r3, #3
10001c5a:	d00a      	beq.n	10001c72 <exitTo+0x32>
10001c5c:	2b04      	cmp	r3, #4
10001c5e:	d00f      	beq.n	10001c80 <exitTo+0x40>
10001c60:	2b02      	cmp	r3, #2
10001c62:	d114      	bne.n	10001c8e <exitTo+0x4e>
			case STATE_goingOn:
				self->history[STATE_TOP] = STATE_goingOn;
10001c64:	687b      	ldr	r3, [r7, #4]
10001c66:	2202      	movs	r2, #2
10001c68:	821a      	strh	r2, [r3, #16]
				current__et = STATE_TOP;
10001c6a:	1cbb      	adds	r3, r7, #2
10001c6c:	2201      	movs	r2, #1
10001c6e:	801a      	strh	r2, [r3, #0]
				break;
10001c70:	e012      	b.n	10001c98 <exitTo+0x58>
			case STATE_goingOff:
				self->history[STATE_TOP] = STATE_goingOff;
10001c72:	687b      	ldr	r3, [r7, #4]
10001c74:	2203      	movs	r2, #3
10001c76:	821a      	strh	r2, [r3, #16]
				current__et = STATE_TOP;
10001c78:	1cbb      	adds	r3, r7, #2
10001c7a:	2201      	movs	r2, #1
10001c7c:	801a      	strh	r2, [r3, #0]
				break;
10001c7e:	e00b      	b.n	10001c98 <exitTo+0x58>
			case STATE_off:
				self->history[STATE_TOP] = STATE_off;
10001c80:	687b      	ldr	r3, [r7, #4]
10001c82:	2204      	movs	r2, #4
10001c84:	821a      	strh	r2, [r3, #16]
				current__et = STATE_TOP;
10001c86:	1cbb      	adds	r3, r7, #2
10001c88:	2201      	movs	r2, #1
10001c8a:	801a      	strh	r2, [r3, #0]
				break;
10001c8c:	e004      	b.n	10001c98 <exitTo+0x58>
10001c8e:	1cbb      	adds	r3, r7, #2
10001c90:	1cba      	adds	r2, r7, #2
10001c92:	8812      	ldrh	r2, [r2, #0]
10001c94:	801a      	strh	r2, [r3, #0]
			default:
				/* should not occur */
				break;
10001c96:	46c0      	nop			; (mov r8, r8)
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ADimmer* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
10001c98:	1cba      	adds	r2, r7, #2
10001c9a:	1c3b      	adds	r3, r7, #0
10001c9c:	2100      	movs	r1, #0
10001c9e:	5e52      	ldrsh	r2, [r2, r1]
10001ca0:	2100      	movs	r1, #0
10001ca2:	5e5b      	ldrsh	r3, [r3, r1]
10001ca4:	429a      	cmp	r2, r3
10001ca6:	d1d4      	bne.n	10001c52 <exitTo+0x12>
			default:
				/* should not occur */
				break;
		}
	}
}
10001ca8:	46bd      	mov	sp, r7
10001caa:	b002      	add	sp, #8
10001cac:	bd80      	pop	{r7, pc}
10001cae:	46c0      	nop			; (mov r8, r8)

10001cb0 <executeTransitionChain>:
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(ADimmer* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
10001cb0:	b580      	push	{r7, lr}
10001cb2:	b084      	sub	sp, #16
10001cb4:	af00      	add	r7, sp, #0
10001cb6:	60f8      	str	r0, [r7, #12]
10001cb8:	60b9      	str	r1, [r7, #8]
10001cba:	607a      	str	r2, [r7, #4]
10001cbc:	603b      	str	r3, [r7, #0]
	switch (chain__et) {
10001cbe:	68bb      	ldr	r3, [r7, #8]
10001cc0:	2b02      	cmp	r3, #2
10001cc2:	d00e      	beq.n	10001ce2 <executeTransitionChain+0x32>
10001cc4:	dc02      	bgt.n	10001ccc <executeTransitionChain+0x1c>
10001cc6:	2b01      	cmp	r3, #1
10001cc8:	d005      	beq.n	10001cd6 <executeTransitionChain+0x26>
10001cca:	e046      	b.n	10001d5a <executeTransitionChain+0xaa>
10001ccc:	2b03      	cmp	r3, #3
10001cce:	d01c      	beq.n	10001d0a <executeTransitionChain+0x5a>
10001cd0:	2b04      	cmp	r3, #4
10001cd2:	d034      	beq.n	10001d3e <executeTransitionChain+0x8e>
10001cd4:	e041      	b.n	10001d5a <executeTransitionChain+0xaa>
		case CHAIN_TRANS_INITIAL_TO__goingOn:
		{
			action_TRANS_INITIAL_TO__goingOn(self);
10001cd6:	68fb      	ldr	r3, [r7, #12]
10001cd8:	1c18      	adds	r0, r3, #0
10001cda:	f7ff ff5f 	bl	10001b9c <action_TRANS_INITIAL_TO__goingOn>
			return STATE_goingOn;
10001cde:	2302      	movs	r3, #2
10001ce0:	e03d      	b.n	10001d5e <executeTransitionChain+0xae>
		}
		case CHAIN_TRANS_tr1_FROM_goingOn_TO_cp0_BY_timeouttimer:
		{
			if (++counter<100) {
10001ce2:	68fb      	ldr	r3, [r7, #12]
10001ce4:	791b      	ldrb	r3, [r3, #4]
10001ce6:	3301      	adds	r3, #1
10001ce8:	b2da      	uxtb	r2, r3
10001cea:	68fb      	ldr	r3, [r7, #12]
10001cec:	711a      	strb	r2, [r3, #4]
10001cee:	68fb      	ldr	r3, [r7, #12]
10001cf0:	791b      	ldrb	r3, [r3, #4]
10001cf2:	2b63      	cmp	r3, #99	; 0x63
10001cf4:	d807      	bhi.n	10001d06 <executeTransitionChain+0x56>
			action_TRANS_tr2_FROM_cp0_TO_goingOn_COND_tr2(self, ifitem);
10001cf6:	68fa      	ldr	r2, [r7, #12]
10001cf8:	687b      	ldr	r3, [r7, #4]
10001cfa:	1c10      	adds	r0, r2, #0
10001cfc:	1c19      	adds	r1, r3, #0
10001cfe:	f7ff ff67 	bl	10001bd0 <action_TRANS_tr2_FROM_cp0_TO_goingOn_COND_tr2>
			return STATE_goingOn;}
10001d02:	2302      	movs	r3, #2
10001d04:	e02b      	b.n	10001d5e <executeTransitionChain+0xae>
			else {
			return STATE_goingOff;}
10001d06:	2303      	movs	r3, #3
10001d08:	e029      	b.n	10001d5e <executeTransitionChain+0xae>
		}
		case CHAIN_TRANS_tr3_FROM_goingOff_TO_cp1_BY_timeouttimer:
		{
			if (--counter>0) {
10001d0a:	68fb      	ldr	r3, [r7, #12]
10001d0c:	791b      	ldrb	r3, [r3, #4]
10001d0e:	3b01      	subs	r3, #1
10001d10:	b2da      	uxtb	r2, r3
10001d12:	68fb      	ldr	r3, [r7, #12]
10001d14:	711a      	strb	r2, [r3, #4]
10001d16:	68fb      	ldr	r3, [r7, #12]
10001d18:	791b      	ldrb	r3, [r3, #4]
10001d1a:	2b00      	cmp	r3, #0
10001d1c:	d007      	beq.n	10001d2e <executeTransitionChain+0x7e>
			action_TRANS_tr5_FROM_cp1_TO_goingOff_COND_tr5(self, ifitem);
10001d1e:	68fa      	ldr	r2, [r7, #12]
10001d20:	687b      	ldr	r3, [r7, #4]
10001d22:	1c10      	adds	r0, r2, #0
10001d24:	1c19      	adds	r1, r3, #0
10001d26:	f7ff ff79 	bl	10001c1c <action_TRANS_tr5_FROM_cp1_TO_goingOff_COND_tr5>
			return STATE_goingOff;}
10001d2a:	2303      	movs	r3, #3
10001d2c:	e017      	b.n	10001d5e <executeTransitionChain+0xae>
			else {
			action_TRANS_tr4_FROM_cp1_TO_off(self, ifitem);
10001d2e:	68fa      	ldr	r2, [r7, #12]
10001d30:	687b      	ldr	r3, [r7, #4]
10001d32:	1c10      	adds	r0, r2, #0
10001d34:	1c19      	adds	r1, r3, #0
10001d36:	f7ff ff5d 	bl	10001bf4 <action_TRANS_tr4_FROM_cp1_TO_off>
			return STATE_off;}
10001d3a:	2304      	movs	r3, #4
10001d3c:	e00f      	b.n	10001d5e <executeTransitionChain+0xae>
		}
		case CHAIN_TRANS_tr7_FROM_off_TO_cp2_BY_timeouttimer:
		{
			if (--counter > 0) {
10001d3e:	68fb      	ldr	r3, [r7, #12]
10001d40:	791b      	ldrb	r3, [r3, #4]
10001d42:	3b01      	subs	r3, #1
10001d44:	b2da      	uxtb	r2, r3
10001d46:	68fb      	ldr	r3, [r7, #12]
10001d48:	711a      	strb	r2, [r3, #4]
10001d4a:	68fb      	ldr	r3, [r7, #12]
10001d4c:	791b      	ldrb	r3, [r3, #4]
10001d4e:	2b00      	cmp	r3, #0
10001d50:	d001      	beq.n	10001d56 <executeTransitionChain+0xa6>
			return STATE_off;}
10001d52:	2304      	movs	r3, #4
10001d54:	e003      	b.n	10001d5e <executeTransitionChain+0xae>
			else {
			return STATE_goingOn;}
10001d56:	2302      	movs	r3, #2
10001d58:	e001      	b.n	10001d5e <executeTransitionChain+0xae>
		}
			default:
				/* should not occur */
				break;
10001d5a:	46c0      	nop			; (mov r8, r8)
	}
	return NO_STATE;
10001d5c:	2300      	movs	r3, #0
10001d5e:	b21b      	sxth	r3, r3
}
10001d60:	1c18      	adds	r0, r3, #0
10001d62:	46bd      	mov	sp, r7
10001d64:	b004      	add	sp, #16
10001d66:	bd80      	pop	{r7, pc}

10001d68 <enterHistory>:
/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(ADimmer* self, etInt16 state__et) {
10001d68:	b580      	push	{r7, lr}
10001d6a:	b084      	sub	sp, #16
10001d6c:	af00      	add	r7, sp, #0
10001d6e:	6078      	str	r0, [r7, #4]
10001d70:	1c0a      	adds	r2, r1, #0
10001d72:	1cbb      	adds	r3, r7, #2
10001d74:	801a      	strh	r2, [r3, #0]
	boolean skip_entry__et = ET_FALSE;
10001d76:	1c3b      	adds	r3, r7, #0
10001d78:	330f      	adds	r3, #15
10001d7a:	2200      	movs	r2, #0
10001d7c:	701a      	strb	r2, [r3, #0]
	if (state__et >= STATE_MAX) {
10001d7e:	1cbb      	adds	r3, r7, #2
10001d80:	2200      	movs	r2, #0
10001d82:	5e9b      	ldrsh	r3, [r3, r2]
10001d84:	2b04      	cmp	r3, #4
10001d86:	dd09      	ble.n	10001d9c <enterHistory+0x34>
		state__et = (etInt16) (state__et - STATE_MAX);
10001d88:	1cbb      	adds	r3, r7, #2
10001d8a:	881b      	ldrh	r3, [r3, #0]
10001d8c:	3b05      	subs	r3, #5
10001d8e:	b29a      	uxth	r2, r3
10001d90:	1cbb      	adds	r3, r7, #2
10001d92:	801a      	strh	r2, [r3, #0]
		skip_entry__et = ET_TRUE;
10001d94:	1c3b      	adds	r3, r7, #0
10001d96:	330f      	adds	r3, #15
10001d98:	2201      	movs	r2, #1
10001d9a:	701a      	strb	r2, [r3, #0]
	}
	while (ET_TRUE) {
		switch (state__et) {
10001d9c:	1cbb      	adds	r3, r7, #2
10001d9e:	2200      	movs	r2, #0
10001da0:	5e9b      	ldrsh	r3, [r3, r2]
10001da2:	2b02      	cmp	r3, #2
10001da4:	d008      	beq.n	10001db8 <enterHistory+0x50>
10001da6:	dc02      	bgt.n	10001dae <enterHistory+0x46>
10001da8:	2b01      	cmp	r3, #1
10001daa:	d00b      	beq.n	10001dc4 <enterHistory+0x5c>
10001dac:	e00f      	b.n	10001dce <enterHistory+0x66>
10001dae:	2b03      	cmp	r3, #3
10001db0:	d004      	beq.n	10001dbc <enterHistory+0x54>
10001db2:	2b04      	cmp	r3, #4
10001db4:	d004      	beq.n	10001dc0 <enterHistory+0x58>
10001db6:	e00a      	b.n	10001dce <enterHistory+0x66>
			case STATE_goingOn:
				/* in leaf state: return state id */
				return STATE_goingOn;
10001db8:	2302      	movs	r3, #2
10001dba:	e00e      	b.n	10001dda <enterHistory+0x72>
			case STATE_goingOff:
				/* in leaf state: return state id */
				return STATE_goingOff;
10001dbc:	2303      	movs	r3, #3
10001dbe:	e00c      	b.n	10001dda <enterHistory+0x72>
			case STATE_off:
				/* in leaf state: return state id */
				return STATE_off;
10001dc0:	2304      	movs	r3, #4
10001dc2:	e00a      	b.n	10001dda <enterHistory+0x72>
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
10001dc4:	1cbb      	adds	r3, r7, #2
10001dc6:	687a      	ldr	r2, [r7, #4]
10001dc8:	8a12      	ldrh	r2, [r2, #16]
10001dca:	801a      	strh	r2, [r3, #0]
				break;
10001dcc:	e000      	b.n	10001dd0 <enterHistory+0x68>
			default:
				/* should not occur */
				break;
10001dce:	46c0      	nop			; (mov r8, r8)
		}
		skip_entry__et = ET_FALSE;
10001dd0:	1c3b      	adds	r3, r7, #0
10001dd2:	330f      	adds	r3, #15
10001dd4:	2200      	movs	r2, #0
10001dd6:	701a      	strb	r2, [r3, #0]
	}
10001dd8:	e7e0      	b.n	10001d9c <enterHistory+0x34>
10001dda:	b21b      	sxth	r3, r3
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}
10001ddc:	1c18      	adds	r0, r3, #0
10001dde:	46bd      	mov	sp, r7
10001de0:	b004      	add	sp, #16
10001de2:	bd80      	pop	{r7, pc}

10001de4 <ADimmer_executeInitTransition>:

static void ADimmer_executeInitTransition(ADimmer* self) {
10001de4:	b590      	push	{r4, r7, lr}
10001de6:	b085      	sub	sp, #20
10001de8:	af00      	add	r7, sp, #0
10001dea:	6078      	str	r0, [r7, #4]
	int chain__et = CHAIN_TRANS_INITIAL_TO__goingOn;
10001dec:	2301      	movs	r3, #1
10001dee:	60fb      	str	r3, [r7, #12]
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
10001df0:	1c3c      	adds	r4, r7, #0
10001df2:	340a      	adds	r4, #10
10001df4:	687a      	ldr	r2, [r7, #4]
10001df6:	68fb      	ldr	r3, [r7, #12]
10001df8:	1c10      	adds	r0, r2, #0
10001dfa:	1c19      	adds	r1, r3, #0
10001dfc:	2200      	movs	r2, #0
10001dfe:	2300      	movs	r3, #0
10001e00:	f7ff ff56 	bl	10001cb0 <executeTransitionChain>
10001e04:	1c03      	adds	r3, r0, #0
10001e06:	8023      	strh	r3, [r4, #0]
	next__et = enterHistory(self, next__et);
10001e08:	1c3c      	adds	r4, r7, #0
10001e0a:	340a      	adds	r4, #10
10001e0c:	687a      	ldr	r2, [r7, #4]
10001e0e:	1c3b      	adds	r3, r7, #0
10001e10:	330a      	adds	r3, #10
10001e12:	2100      	movs	r1, #0
10001e14:	5e5b      	ldrsh	r3, [r3, r1]
10001e16:	1c10      	adds	r0, r2, #0
10001e18:	1c19      	adds	r1, r3, #0
10001e1a:	f7ff ffa5 	bl	10001d68 <enterHistory>
10001e1e:	1c03      	adds	r3, r0, #0
10001e20:	8023      	strh	r3, [r4, #0]
	setState(self, next__et);
10001e22:	687a      	ldr	r2, [r7, #4]
10001e24:	1c3b      	adds	r3, r7, #0
10001e26:	330a      	adds	r3, #10
10001e28:	2100      	movs	r1, #0
10001e2a:	5e5b      	ldrsh	r3, [r3, r1]
10001e2c:	1c10      	adds	r0, r2, #0
10001e2e:	1c19      	adds	r1, r3, #0
10001e30:	f7ff fe9a 	bl	10001b68 <setState>
}
10001e34:	46bd      	mov	sp, r7
10001e36:	b005      	add	sp, #20
10001e38:	bd90      	pop	{r4, r7, pc}
10001e3a:	46c0      	nop			; (mov r8, r8)

10001e3c <ADimmer_receiveEvent>:

/* receiveEvent contains the main implementation of the FSM */
static void ADimmer_receiveEvent(ADimmer* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
10001e3c:	b590      	push	{r4, r7, lr}
10001e3e:	b089      	sub	sp, #36	; 0x24
10001e40:	af00      	add	r7, sp, #0
10001e42:	60f8      	str	r0, [r7, #12]
10001e44:	60b9      	str	r1, [r7, #8]
10001e46:	607a      	str	r2, [r7, #4]
10001e48:	603b      	str	r3, [r7, #0]
	int trigger__et = ifitem->localId + EVT_SHIFT*evt;
10001e4a:	68bb      	ldr	r3, [r7, #8]
10001e4c:	7a5b      	ldrb	r3, [r3, #9]
10001e4e:	1c1a      	adds	r2, r3, #0
10001e50:	687b      	ldr	r3, [r7, #4]
10001e52:	2164      	movs	r1, #100	; 0x64
10001e54:	434b      	muls	r3, r1
10001e56:	18d3      	adds	r3, r2, r3
10001e58:	617b      	str	r3, [r7, #20]
	int chain__et = NOT_CAUGHT;
10001e5a:	2300      	movs	r3, #0
10001e5c:	61fb      	str	r3, [r7, #28]
	etInt16 catching_state__et = NO_STATE;
10001e5e:	1c3b      	adds	r3, r7, #0
10001e60:	331a      	adds	r3, #26
10001e62:	2200      	movs	r2, #0
10001e64:	801a      	strh	r2, [r3, #0]
	((void)trigger__et);	/* avoids unused warning */
	
	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
10001e66:	68b9      	ldr	r1, [r7, #8]
10001e68:	687a      	ldr	r2, [r7, #4]
10001e6a:	683b      	ldr	r3, [r7, #0]
10001e6c:	1c08      	adds	r0, r1, #0
10001e6e:	1c11      	adds	r1, r2, #0
10001e70:	1c1a      	adds	r2, r3, #0
10001e72:	f004 f8d1 	bl	10006018 <handleSystemEvent>
10001e76:	1c03      	adds	r3, r0, #0
10001e78:	2b00      	cmp	r3, #0
10001e7a:	d12f      	bne.n	10001edc <ADimmer_receiveEvent+0xa0>
		switch (getState(self)) {
10001e7c:	68fb      	ldr	r3, [r7, #12]
10001e7e:	1c18      	adds	r0, r3, #0
10001e80:	f7ff fe80 	bl	10001b84 <getState>
10001e84:	1c03      	adds	r3, r0, #0
10001e86:	2b03      	cmp	r3, #3
10001e88:	d00f      	beq.n	10001eaa <ADimmer_receiveEvent+0x6e>
10001e8a:	2b04      	cmp	r3, #4
10001e8c:	d019      	beq.n	10001ec2 <ADimmer_receiveEvent+0x86>
10001e8e:	2b02      	cmp	r3, #2
10001e90:	d123      	bne.n	10001eda <ADimmer_receiveEvent+0x9e>
			case STATE_goingOn:
				switch(trigger__et) {
10001e92:	697b      	ldr	r3, [r7, #20]
10001e94:	2b66      	cmp	r3, #102	; 0x66
10001e96:	d106      	bne.n	10001ea6 <ADimmer_receiveEvent+0x6a>
						case TRIG_timer__timeout:
							{
								chain__et = CHAIN_TRANS_tr1_FROM_goingOn_TO_cp0_BY_timeouttimer;
10001e98:	2302      	movs	r3, #2
10001e9a:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
10001e9c:	1c3b      	adds	r3, r7, #0
10001e9e:	331a      	adds	r3, #26
10001ea0:	2201      	movs	r2, #1
10001ea2:	801a      	strh	r2, [r3, #0]
							}
						break;
10001ea4:	e000      	b.n	10001ea8 <ADimmer_receiveEvent+0x6c>
						default:
							/* should not occur */
							break;
10001ea6:	46c0      	nop			; (mov r8, r8)
				}
				break;
10001ea8:	e018      	b.n	10001edc <ADimmer_receiveEvent+0xa0>
			case STATE_goingOff:
				switch(trigger__et) {
10001eaa:	697b      	ldr	r3, [r7, #20]
10001eac:	2b66      	cmp	r3, #102	; 0x66
10001eae:	d106      	bne.n	10001ebe <ADimmer_receiveEvent+0x82>
						case TRIG_timer__timeout:
							{
								chain__et = CHAIN_TRANS_tr3_FROM_goingOff_TO_cp1_BY_timeouttimer;
10001eb0:	2303      	movs	r3, #3
10001eb2:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
10001eb4:	1c3b      	adds	r3, r7, #0
10001eb6:	331a      	adds	r3, #26
10001eb8:	2201      	movs	r2, #1
10001eba:	801a      	strh	r2, [r3, #0]
							}
						break;
10001ebc:	e000      	b.n	10001ec0 <ADimmer_receiveEvent+0x84>
						default:
							/* should not occur */
							break;
10001ebe:	46c0      	nop			; (mov r8, r8)
				}
				break;
10001ec0:	e00c      	b.n	10001edc <ADimmer_receiveEvent+0xa0>
			case STATE_off:
				switch(trigger__et) {
10001ec2:	697b      	ldr	r3, [r7, #20]
10001ec4:	2b66      	cmp	r3, #102	; 0x66
10001ec6:	d106      	bne.n	10001ed6 <ADimmer_receiveEvent+0x9a>
						case TRIG_timer__timeout:
							{
								chain__et = CHAIN_TRANS_tr7_FROM_off_TO_cp2_BY_timeouttimer;
10001ec8:	2304      	movs	r3, #4
10001eca:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
10001ecc:	1c3b      	adds	r3, r7, #0
10001ece:	331a      	adds	r3, #26
10001ed0:	2201      	movs	r2, #1
10001ed2:	801a      	strh	r2, [r3, #0]
							}
						break;
10001ed4:	e000      	b.n	10001ed8 <ADimmer_receiveEvent+0x9c>
						default:
							/* should not occur */
							break;
10001ed6:	46c0      	nop			; (mov r8, r8)
				}
				break;
10001ed8:	e000      	b.n	10001edc <ADimmer_receiveEvent+0xa0>
			default:
				/* should not occur */
				break;
10001eda:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (chain__et != NOT_CAUGHT) {
10001edc:	69fb      	ldr	r3, [r7, #28]
10001ede:	2b00      	cmp	r3, #0
10001ee0:	d02f      	beq.n	10001f42 <ADimmer_receiveEvent+0x106>
		exitTo(self, getState(self), catching_state__et);
10001ee2:	68fb      	ldr	r3, [r7, #12]
10001ee4:	1c18      	adds	r0, r3, #0
10001ee6:	f7ff fe4d 	bl	10001b84 <getState>
10001eea:	1c03      	adds	r3, r0, #0
10001eec:	1c1a      	adds	r2, r3, #0
10001eee:	68f9      	ldr	r1, [r7, #12]
10001ef0:	1c3b      	adds	r3, r7, #0
10001ef2:	331a      	adds	r3, #26
10001ef4:	2000      	movs	r0, #0
10001ef6:	5e1b      	ldrsh	r3, [r3, r0]
10001ef8:	1c08      	adds	r0, r1, #0
10001efa:	1c11      	adds	r1, r2, #0
10001efc:	1c1a      	adds	r2, r3, #0
10001efe:	f7ff fe9f 	bl	10001c40 <exitTo>
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
10001f02:	1c3c      	adds	r4, r7, #0
10001f04:	3412      	adds	r4, #18
10001f06:	68f8      	ldr	r0, [r7, #12]
10001f08:	69f9      	ldr	r1, [r7, #28]
10001f0a:	68ba      	ldr	r2, [r7, #8]
10001f0c:	683b      	ldr	r3, [r7, #0]
10001f0e:	f7ff fecf 	bl	10001cb0 <executeTransitionChain>
10001f12:	1c03      	adds	r3, r0, #0
10001f14:	8023      	strh	r3, [r4, #0]
			next__et = enterHistory(self, next__et);
10001f16:	1c3c      	adds	r4, r7, #0
10001f18:	3412      	adds	r4, #18
10001f1a:	68fa      	ldr	r2, [r7, #12]
10001f1c:	1c3b      	adds	r3, r7, #0
10001f1e:	3312      	adds	r3, #18
10001f20:	2100      	movs	r1, #0
10001f22:	5e5b      	ldrsh	r3, [r3, r1]
10001f24:	1c10      	adds	r0, r2, #0
10001f26:	1c19      	adds	r1, r3, #0
10001f28:	f7ff ff1e 	bl	10001d68 <enterHistory>
10001f2c:	1c03      	adds	r3, r0, #0
10001f2e:	8023      	strh	r3, [r4, #0]
			setState(self, next__et);
10001f30:	68fa      	ldr	r2, [r7, #12]
10001f32:	1c3b      	adds	r3, r7, #0
10001f34:	3312      	adds	r3, #18
10001f36:	2000      	movs	r0, #0
10001f38:	5e1b      	ldrsh	r3, [r3, r0]
10001f3a:	1c10      	adds	r0, r2, #0
10001f3c:	1c19      	adds	r1, r3, #0
10001f3e:	f7ff fe13 	bl	10001b68 <setState>
		}
	}
}
10001f42:	46bd      	mov	sp, r7
10001f44:	b009      	add	sp, #36	; 0x24
10001f46:	bd90      	pop	{r4, r7, pc}

10001f48 <ADimmer_init>:

void ADimmer_init(ADimmer* self){
10001f48:	b580      	push	{r7, lr}
10001f4a:	b084      	sub	sp, #16
10001f4c:	af00      	add	r7, sp, #0
10001f4e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ADimmer", "init")
	self->state = STATE_TOP;
10001f50:	687b      	ldr	r3, [r7, #4]
10001f52:	2201      	movs	r2, #1
10001f54:	819a      	strh	r2, [r3, #12]
	{
		int i;
		for (i=0; i<ADIMMER_HISTORY_SIZE; ++i)
10001f56:	2300      	movs	r3, #0
10001f58:	60fb      	str	r3, [r7, #12]
10001f5a:	e009      	b.n	10001f70 <ADimmer_init+0x28>
			self->history[i] = NO_STATE;
10001f5c:	687a      	ldr	r2, [r7, #4]
10001f5e:	68fb      	ldr	r3, [r7, #12]
10001f60:	3304      	adds	r3, #4
10001f62:	005b      	lsls	r3, r3, #1
10001f64:	18d3      	adds	r3, r2, r3
10001f66:	2200      	movs	r2, #0
10001f68:	80da      	strh	r2, [r3, #6]
void ADimmer_init(ADimmer* self){
	ET_MSC_LOGGER_SYNC_ENTRY("ADimmer", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<ADIMMER_HISTORY_SIZE; ++i)
10001f6a:	68fb      	ldr	r3, [r7, #12]
10001f6c:	3301      	adds	r3, #1
10001f6e:	60fb      	str	r3, [r7, #12]
10001f70:	68fb      	ldr	r3, [r7, #12]
10001f72:	2b01      	cmp	r3, #1
10001f74:	ddf2      	ble.n	10001f5c <ADimmer_init+0x14>
			self->history[i] = NO_STATE;
	}
	ADimmer_executeInitTransition(self);
10001f76:	687b      	ldr	r3, [r7, #4]
10001f78:	1c18      	adds	r0, r3, #0
10001f7a:	f7ff ff33 	bl	10001de4 <ADimmer_executeInitTransition>
	ET_MSC_LOGGER_SYNC_EXIT
}
10001f7e:	46bd      	mov	sp, r7
10001f80:	b004      	add	sp, #16
10001f82:	bd80      	pop	{r7, pc}

10001f84 <ADimmer_receiveMessage>:


void ADimmer_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
10001f84:	b580      	push	{r7, lr}
10001f86:	b084      	sub	sp, #16
10001f88:	af00      	add	r7, sp, #0
10001f8a:	60f8      	str	r0, [r7, #12]
10001f8c:	60b9      	str	r1, [r7, #8]
10001f8e:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("ADimmer", "_receiveMessage")
	
	ADimmer_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));
10001f90:	687b      	ldr	r3, [r7, #4]
10001f92:	88db      	ldrh	r3, [r3, #6]
10001f94:	b21a      	sxth	r2, r3
10001f96:	687b      	ldr	r3, [r7, #4]
10001f98:	3308      	adds	r3, #8
10001f9a:	68f8      	ldr	r0, [r7, #12]
10001f9c:	68b9      	ldr	r1, [r7, #8]
10001f9e:	f7ff ff4d 	bl	10001e3c <ADimmer_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10001fa2:	46bd      	mov	sp, r7
10001fa4:	b004      	add	sp, #16
10001fa6:	bd80      	pop	{r7, pc}

10001fa8 <setState>:
	TRIG_p0__pong = IFITEM_p0 + EVT_SHIFT*PingPongProtocol_OUT_pong,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};


static void setState(MrPing* self, etInt16 new_state) {
10001fa8:	b580      	push	{r7, lr}
10001faa:	b082      	sub	sp, #8
10001fac:	af00      	add	r7, sp, #0
10001fae:	6078      	str	r0, [r7, #4]
10001fb0:	1c0a      	adds	r2, r1, #0
10001fb2:	1cbb      	adds	r3, r7, #2
10001fb4:	801a      	strh	r2, [r3, #0]
	self->state = new_state;
10001fb6:	687b      	ldr	r3, [r7, #4]
10001fb8:	1cba      	adds	r2, r7, #2
10001fba:	8812      	ldrh	r2, [r2, #0]
10001fbc:	841a      	strh	r2, [r3, #32]
}
10001fbe:	46bd      	mov	sp, r7
10001fc0:	b002      	add	sp, #8
10001fc2:	bd80      	pop	{r7, pc}

10001fc4 <getState>:

static etInt16 getState(MrPing* self) {
10001fc4:	b580      	push	{r7, lr}
10001fc6:	b082      	sub	sp, #8
10001fc8:	af00      	add	r7, sp, #0
10001fca:	6078      	str	r0, [r7, #4]
	return self->state;
10001fcc:	687b      	ldr	r3, [r7, #4]
10001fce:	8c1b      	ldrh	r3, [r3, #32]
10001fd0:	b21b      	sxth	r3, r3
}
10001fd2:	1c18      	adds	r0, r3, #0
10001fd4:	46bd      	mov	sp, r7
10001fd6:	b002      	add	sp, #8
10001fd8:	bd80      	pop	{r7, pc}
10001fda:	46c0      	nop			; (mov r8, r8)

10001fdc <action_TRANS_INITIAL_TO__running>:

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_INITIAL_TO__running(MrPing* self) {
10001fdc:	b580      	push	{r7, lr}
10001fde:	b082      	sub	sp, #8
10001fe0:	af00      	add	r7, sp, #0
10001fe2:	6078      	str	r0, [r7, #4]
	counter=0;
10001fe4:	687b      	ldr	r3, [r7, #4]
10001fe6:	2200      	movs	r2, #0
10001fe8:	605a      	str	r2, [r3, #4]
	PingPongData_initData(&myData);
10001fea:	687b      	ldr	r3, [r7, #4]
10001fec:	3308      	adds	r3, #8
10001fee:	1c18      	adds	r0, r3, #0
10001ff0:	f000 fb5a 	bl	100026a8 <PingPongData_initData>
	
	timer_startTimeout(500);
10001ff4:	687b      	ldr	r3, [r7, #4]
10001ff6:	681b      	ldr	r3, [r3, #0]
10001ff8:	1c1a      	adds	r2, r3, #0
10001ffa:	3230      	adds	r2, #48	; 0x30
10001ffc:	23fa      	movs	r3, #250	; 0xfa
10001ffe:	005b      	lsls	r3, r3, #1
10002000:	1c10      	adds	r0, r2, #0
10002002:	1c19      	adds	r1, r3, #0
10002004:	f7ff fcf6 	bl	100019f4 <PTimerConjPort_startTimeout>
	
	//uart.setInstance(0);
	PUART001ConjPort_setInstance(&self->constData->uart,0);
10002008:	687b      	ldr	r3, [r7, #4]
1000200a:	681b      	ldr	r3, [r3, #0]
1000200c:	3324      	adds	r3, #36	; 0x24
1000200e:	1c18      	adds	r0, r3, #0
10002010:	2100      	movs	r1, #0
10002012:	f000 ffeb 	bl	10002fec <PUART001ConjPort_setInstance>
	
	// Led0.setInstance(0);
	PIO004ConjPort_setInstance(&self->constData->Led0,0);  
10002016:	687b      	ldr	r3, [r7, #4]
10002018:	681b      	ldr	r3, [r3, #0]
1000201a:	330c      	adds	r3, #12
1000201c:	1c18      	adds	r0, r3, #0
1000201e:	2100      	movs	r1, #0
10002020:	f000 fece 	bl	10002dc0 <PIO004ConjPort_setInstance>
	
	// Led1.setInstance(1);
	PIO004ConjPort_setInstance(&self->constData->Led1,1);  
10002024:	687b      	ldr	r3, [r7, #4]
10002026:	681b      	ldr	r3, [r3, #0]
10002028:	3318      	adds	r3, #24
1000202a:	1c18      	adds	r0, r3, #0
1000202c:	2101      	movs	r1, #1
1000202e:	f000 fec7 	bl	10002dc0 <PIO004ConjPort_setInstance>
	
	// Led0.setPin();
	PIO004ConjPort_setPin(&self->constData->Led0);  
10002032:	687b      	ldr	r3, [r7, #4]
10002034:	681b      	ldr	r3, [r3, #0]
10002036:	330c      	adds	r3, #12
10002038:	1c18      	adds	r0, r3, #0
1000203a:	f000 fef3 	bl	10002e24 <PIO004ConjPort_setPin>
	
	// Led1.resetPin();
	PIO004ConjPort_resetPin(&self->constData->Led1);  
1000203e:	687b      	ldr	r3, [r7, #4]
10002040:	681b      	ldr	r3, [r3, #0]
10002042:	3318      	adds	r3, #24
10002044:	1c18      	adds	r0, r3, #0
10002046:	f000 ff21 	bl	10002e8c <PIO004ConjPort_resetPin>
}
1000204a:	46bd      	mov	sp, r7
1000204c:	b002      	add	sp, #8
1000204e:	bd80      	pop	{r7, pc}

10002050 <action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0>:
static void action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0(MrPing* self, const InterfaceItemBase* ifitem, PingPongData* data) {
10002050:	b580      	push	{r7, lr}
10002052:	b084      	sub	sp, #16
10002054:	af00      	add	r7, sp, #0
10002056:	60f8      	str	r0, [r7, #12]
10002058:	60b9      	str	r1, [r7, #8]
1000205a:	607a      	str	r2, [r7, #4]
	timer_startTimeout(200);
1000205c:	68fb      	ldr	r3, [r7, #12]
1000205e:	681b      	ldr	r3, [r3, #0]
10002060:	3330      	adds	r3, #48	; 0x30
10002062:	1c18      	adds	r0, r3, #0
10002064:	21c8      	movs	r1, #200	; 0xc8
10002066:	f7ff fcc5 	bl	100019f4 <PTimerConjPort_startTimeout>
	
	counter++;
1000206a:	68fb      	ldr	r3, [r7, #12]
1000206c:	685b      	ldr	r3, [r3, #4]
1000206e:	1c5a      	adds	r2, r3, #1
10002070:	68fb      	ldr	r3, [r7, #12]
10002072:	605a      	str	r2, [r3, #4]
	//toggleLED0();
	
	// Led1.togglePin();
	PIO004ConjPort_togglePin(&self->constData->Led1);
10002074:	68fb      	ldr	r3, [r7, #12]
10002076:	681b      	ldr	r3, [r3, #0]
10002078:	3318      	adds	r3, #24
1000207a:	1c18      	adds	r0, r3, #0
1000207c:	f000 ff1a 	bl	10002eb4 <PIO004ConjPort_togglePin>
	
	// Led0.togglePin();
	PIO004ConjPort_togglePin(&self->constData->Led0);   
10002080:	68fb      	ldr	r3, [r7, #12]
10002082:	681b      	ldr	r3, [r3, #0]
10002084:	330c      	adds	r3, #12
10002086:	1c18      	adds	r0, r3, #0
10002088:	f000 ff14 	bl	10002eb4 <PIO004ConjPort_togglePin>
	
	//uart.writeDataBytes("Das ist ein Test\n", 17);
	PUART001ConjPort_writeDataBytes(&self->constData->uart,"Das ist ein Test!\n",18);
1000208c:	68fb      	ldr	r3, [r7, #12]
1000208e:	681b      	ldr	r3, [r3, #0]
10002090:	1c1a      	adds	r2, r3, #0
10002092:	3224      	adds	r2, #36	; 0x24
10002094:	4b04      	ldr	r3, [pc, #16]	; (100020a8 <action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0+0x58>)
10002096:	1c10      	adds	r0, r2, #0
10002098:	1c19      	adds	r1, r3, #0
1000209a:	2212      	movs	r2, #18
1000209c:	f000 ffd4 	bl	10003048 <PUART001ConjPort_writeDataBytes>
}
100020a0:	46bd      	mov	sp, r7
100020a2:	b004      	add	sp, #16
100020a4:	bd80      	pop	{r7, pc}
100020a6:	46c0      	nop			; (mov r8, r8)
100020a8:	1000a7c4 	.word	0x1000a7c4

100020ac <action_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1>:
static void action_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1(MrPing* self, const InterfaceItemBase* ifitem) {
100020ac:	b580      	push	{r7, lr}
100020ae:	b082      	sub	sp, #8
100020b0:	af00      	add	r7, sp, #0
100020b2:	6078      	str	r0, [r7, #4]
100020b4:	6039      	str	r1, [r7, #0]
	p0_ping(&myData);
100020b6:	687b      	ldr	r3, [r7, #4]
100020b8:	681b      	ldr	r3, [r3, #0]
100020ba:	1c1a      	adds	r2, r3, #0
100020bc:	687b      	ldr	r3, [r7, #4]
100020be:	3308      	adds	r3, #8
100020c0:	1c10      	adds	r0, r2, #0
100020c2:	1c19      	adds	r1, r3, #0
100020c4:	f000 fb70 	bl	100027a8 <PingPongProtocolConjPort_ping>
}
100020c8:	46bd      	mov	sp, r7
100020ca:	b002      	add	sp, #8
100020cc:	bd80      	pop	{r7, pc}
100020ce:	46c0      	nop			; (mov r8, r8)

100020d0 <exitTo>:
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(MrPing* self, etInt16 current__et, etInt16 to) {
100020d0:	b580      	push	{r7, lr}
100020d2:	b082      	sub	sp, #8
100020d4:	af00      	add	r7, sp, #0
100020d6:	6078      	str	r0, [r7, #4]
100020d8:	1cbb      	adds	r3, r7, #2
100020da:	8019      	strh	r1, [r3, #0]
100020dc:	1c3b      	adds	r3, r7, #0
100020de:	801a      	strh	r2, [r3, #0]
	while (current__et!=to) {
100020e0:	e010      	b.n	10002104 <exitTo+0x34>
		switch (current__et) {
100020e2:	1cbb      	adds	r3, r7, #2
100020e4:	2100      	movs	r1, #0
100020e6:	5e5b      	ldrsh	r3, [r3, r1]
100020e8:	2b02      	cmp	r3, #2
100020ea:	d106      	bne.n	100020fa <exitTo+0x2a>
			case STATE_running:
				self->history[STATE_TOP] = STATE_running;
100020ec:	687b      	ldr	r3, [r7, #4]
100020ee:	2202      	movs	r2, #2
100020f0:	849a      	strh	r2, [r3, #36]	; 0x24
				current__et = STATE_TOP;
100020f2:	1cbb      	adds	r3, r7, #2
100020f4:	2201      	movs	r2, #1
100020f6:	801a      	strh	r2, [r3, #0]
				break;
100020f8:	e004      	b.n	10002104 <exitTo+0x34>
100020fa:	1cbb      	adds	r3, r7, #2
100020fc:	1cba      	adds	r2, r7, #2
100020fe:	8812      	ldrh	r2, [r2, #0]
10002100:	801a      	strh	r2, [r3, #0]
			default:
				/* should not occur */
				break;
10002102:	46c0      	nop			; (mov r8, r8)
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(MrPing* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
10002104:	1cba      	adds	r2, r7, #2
10002106:	1c3b      	adds	r3, r7, #0
10002108:	2100      	movs	r1, #0
1000210a:	5e52      	ldrsh	r2, [r2, r1]
1000210c:	2100      	movs	r1, #0
1000210e:	5e5b      	ldrsh	r3, [r3, r1]
10002110:	429a      	cmp	r2, r3
10002112:	d1e6      	bne.n	100020e2 <exitTo+0x12>
			default:
				/* should not occur */
				break;
		}
	}
}
10002114:	46bd      	mov	sp, r7
10002116:	b002      	add	sp, #8
10002118:	bd80      	pop	{r7, pc}
1000211a:	46c0      	nop			; (mov r8, r8)

1000211c <executeTransitionChain>:
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(MrPing* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
1000211c:	b580      	push	{r7, lr}
1000211e:	b086      	sub	sp, #24
10002120:	af00      	add	r7, sp, #0
10002122:	60f8      	str	r0, [r7, #12]
10002124:	60b9      	str	r1, [r7, #8]
10002126:	607a      	str	r2, [r7, #4]
10002128:	603b      	str	r3, [r7, #0]
	switch (chain__et) {
1000212a:	68bb      	ldr	r3, [r7, #8]
1000212c:	2b02      	cmp	r3, #2
1000212e:	d009      	beq.n	10002144 <executeTransitionChain+0x28>
10002130:	2b03      	cmp	r3, #3
10002132:	d013      	beq.n	1000215c <executeTransitionChain+0x40>
10002134:	2b01      	cmp	r3, #1
10002136:	d119      	bne.n	1000216c <executeTransitionChain+0x50>
		case CHAIN_TRANS_INITIAL_TO__running:
		{
			action_TRANS_INITIAL_TO__running(self);
10002138:	68fb      	ldr	r3, [r7, #12]
1000213a:	1c18      	adds	r0, r3, #0
1000213c:	f7ff ff4e 	bl	10001fdc <action_TRANS_INITIAL_TO__running>
			return STATE_running;
10002140:	2302      	movs	r3, #2
10002142:	e015      	b.n	10002170 <executeTransitionChain+0x54>
		}
		case CHAIN_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0:
		{
			PingPongData* data = ((PingPongData*) generic_data__et);
10002144:	683b      	ldr	r3, [r7, #0]
10002146:	617b      	str	r3, [r7, #20]
			action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0(self, ifitem, data);
10002148:	68f9      	ldr	r1, [r7, #12]
1000214a:	687a      	ldr	r2, [r7, #4]
1000214c:	697b      	ldr	r3, [r7, #20]
1000214e:	1c08      	adds	r0, r1, #0
10002150:	1c11      	adds	r1, r2, #0
10002152:	1c1a      	adds	r2, r3, #0
10002154:	f7ff ff7c 	bl	10002050 <action_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0>
			return STATE_running;
10002158:	2302      	movs	r3, #2
1000215a:	e009      	b.n	10002170 <executeTransitionChain+0x54>
		}
		case CHAIN_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1:
		{
			action_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1(self, ifitem);
1000215c:	68fa      	ldr	r2, [r7, #12]
1000215e:	687b      	ldr	r3, [r7, #4]
10002160:	1c10      	adds	r0, r2, #0
10002162:	1c19      	adds	r1, r3, #0
10002164:	f7ff ffa2 	bl	100020ac <action_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1>
			return STATE_running;
10002168:	2302      	movs	r3, #2
1000216a:	e001      	b.n	10002170 <executeTransitionChain+0x54>
		}
			default:
				/* should not occur */
				break;
1000216c:	46c0      	nop			; (mov r8, r8)
	}
	return NO_STATE;
1000216e:	2300      	movs	r3, #0
10002170:	b21b      	sxth	r3, r3
}
10002172:	1c18      	adds	r0, r3, #0
10002174:	46bd      	mov	sp, r7
10002176:	b006      	add	sp, #24
10002178:	bd80      	pop	{r7, pc}
1000217a:	46c0      	nop			; (mov r8, r8)

1000217c <enterHistory>:
/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(MrPing* self, etInt16 state__et) {
1000217c:	b580      	push	{r7, lr}
1000217e:	b084      	sub	sp, #16
10002180:	af00      	add	r7, sp, #0
10002182:	6078      	str	r0, [r7, #4]
10002184:	1c0a      	adds	r2, r1, #0
10002186:	1cbb      	adds	r3, r7, #2
10002188:	801a      	strh	r2, [r3, #0]
	boolean skip_entry__et = ET_FALSE;
1000218a:	1c3b      	adds	r3, r7, #0
1000218c:	330f      	adds	r3, #15
1000218e:	2200      	movs	r2, #0
10002190:	701a      	strb	r2, [r3, #0]
	if (state__et >= STATE_MAX) {
10002192:	1cbb      	adds	r3, r7, #2
10002194:	2200      	movs	r2, #0
10002196:	5e9b      	ldrsh	r3, [r3, r2]
10002198:	2b02      	cmp	r3, #2
1000219a:	dd09      	ble.n	100021b0 <enterHistory+0x34>
		state__et = (etInt16) (state__et - STATE_MAX);
1000219c:	1cbb      	adds	r3, r7, #2
1000219e:	881b      	ldrh	r3, [r3, #0]
100021a0:	3b03      	subs	r3, #3
100021a2:	b29a      	uxth	r2, r3
100021a4:	1cbb      	adds	r3, r7, #2
100021a6:	801a      	strh	r2, [r3, #0]
		skip_entry__et = ET_TRUE;
100021a8:	1c3b      	adds	r3, r7, #0
100021aa:	330f      	adds	r3, #15
100021ac:	2201      	movs	r2, #1
100021ae:	701a      	strb	r2, [r3, #0]
	}
	while (ET_TRUE) {
		switch (state__et) {
100021b0:	1cbb      	adds	r3, r7, #2
100021b2:	2200      	movs	r2, #0
100021b4:	5e9b      	ldrsh	r3, [r3, r2]
100021b6:	2b01      	cmp	r3, #1
100021b8:	d004      	beq.n	100021c4 <enterHistory+0x48>
100021ba:	2b02      	cmp	r3, #2
100021bc:	d107      	bne.n	100021ce <enterHistory+0x52>
			case STATE_running:
				/* in leaf state: return state id */
				return STATE_running;
100021be:	2302      	movs	r3, #2
100021c0:	b21b      	sxth	r3, r3
100021c2:	e00a      	b.n	100021da <enterHistory+0x5e>
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
100021c4:	1cbb      	adds	r3, r7, #2
100021c6:	687a      	ldr	r2, [r7, #4]
100021c8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
100021ca:	801a      	strh	r2, [r3, #0]
				break;
100021cc:	e000      	b.n	100021d0 <enterHistory+0x54>
			default:
				/* should not occur */
				break;
100021ce:	46c0      	nop			; (mov r8, r8)
		}
		skip_entry__et = ET_FALSE;
100021d0:	1c3b      	adds	r3, r7, #0
100021d2:	330f      	adds	r3, #15
100021d4:	2200      	movs	r2, #0
100021d6:	701a      	strb	r2, [r3, #0]
	}
100021d8:	e7ea      	b.n	100021b0 <enterHistory+0x34>
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}
100021da:	1c18      	adds	r0, r3, #0
100021dc:	46bd      	mov	sp, r7
100021de:	b004      	add	sp, #16
100021e0:	bd80      	pop	{r7, pc}
100021e2:	46c0      	nop			; (mov r8, r8)

100021e4 <MrPing_executeInitTransition>:

static void MrPing_executeInitTransition(MrPing* self) {
100021e4:	b590      	push	{r4, r7, lr}
100021e6:	b085      	sub	sp, #20
100021e8:	af00      	add	r7, sp, #0
100021ea:	6078      	str	r0, [r7, #4]
	int chain__et = CHAIN_TRANS_INITIAL_TO__running;
100021ec:	2301      	movs	r3, #1
100021ee:	60fb      	str	r3, [r7, #12]
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
100021f0:	1c3c      	adds	r4, r7, #0
100021f2:	340a      	adds	r4, #10
100021f4:	687a      	ldr	r2, [r7, #4]
100021f6:	68fb      	ldr	r3, [r7, #12]
100021f8:	1c10      	adds	r0, r2, #0
100021fa:	1c19      	adds	r1, r3, #0
100021fc:	2200      	movs	r2, #0
100021fe:	2300      	movs	r3, #0
10002200:	f7ff ff8c 	bl	1000211c <executeTransitionChain>
10002204:	1c03      	adds	r3, r0, #0
10002206:	8023      	strh	r3, [r4, #0]
	next__et = enterHistory(self, next__et);
10002208:	1c3c      	adds	r4, r7, #0
1000220a:	340a      	adds	r4, #10
1000220c:	687a      	ldr	r2, [r7, #4]
1000220e:	1c3b      	adds	r3, r7, #0
10002210:	330a      	adds	r3, #10
10002212:	2100      	movs	r1, #0
10002214:	5e5b      	ldrsh	r3, [r3, r1]
10002216:	1c10      	adds	r0, r2, #0
10002218:	1c19      	adds	r1, r3, #0
1000221a:	f7ff ffaf 	bl	1000217c <enterHistory>
1000221e:	1c03      	adds	r3, r0, #0
10002220:	8023      	strh	r3, [r4, #0]
	setState(self, next__et);
10002222:	687a      	ldr	r2, [r7, #4]
10002224:	1c3b      	adds	r3, r7, #0
10002226:	330a      	adds	r3, #10
10002228:	2100      	movs	r1, #0
1000222a:	5e5b      	ldrsh	r3, [r3, r1]
1000222c:	1c10      	adds	r0, r2, #0
1000222e:	1c19      	adds	r1, r3, #0
10002230:	f7ff feba 	bl	10001fa8 <setState>
}
10002234:	46bd      	mov	sp, r7
10002236:	b005      	add	sp, #20
10002238:	bd90      	pop	{r4, r7, pc}
1000223a:	46c0      	nop			; (mov r8, r8)

1000223c <MrPing_receiveEvent>:

/* receiveEvent contains the main implementation of the FSM */
static void MrPing_receiveEvent(MrPing* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
1000223c:	b590      	push	{r4, r7, lr}
1000223e:	b089      	sub	sp, #36	; 0x24
10002240:	af00      	add	r7, sp, #0
10002242:	60f8      	str	r0, [r7, #12]
10002244:	60b9      	str	r1, [r7, #8]
10002246:	607a      	str	r2, [r7, #4]
10002248:	603b      	str	r3, [r7, #0]
	int trigger__et = ifitem->localId + EVT_SHIFT*evt;
1000224a:	68bb      	ldr	r3, [r7, #8]
1000224c:	7a5b      	ldrb	r3, [r3, #9]
1000224e:	1c1a      	adds	r2, r3, #0
10002250:	687b      	ldr	r3, [r7, #4]
10002252:	2164      	movs	r1, #100	; 0x64
10002254:	434b      	muls	r3, r1
10002256:	18d3      	adds	r3, r2, r3
10002258:	617b      	str	r3, [r7, #20]
	int chain__et = NOT_CAUGHT;
1000225a:	2300      	movs	r3, #0
1000225c:	61fb      	str	r3, [r7, #28]
	etInt16 catching_state__et = NO_STATE;
1000225e:	1c3b      	adds	r3, r7, #0
10002260:	331a      	adds	r3, #26
10002262:	2200      	movs	r2, #0
10002264:	801a      	strh	r2, [r3, #0]
	((void)trigger__et);	/* avoids unused warning */
	
	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
10002266:	68b9      	ldr	r1, [r7, #8]
10002268:	687a      	ldr	r2, [r7, #4]
1000226a:	683b      	ldr	r3, [r7, #0]
1000226c:	1c08      	adds	r0, r1, #0
1000226e:	1c11      	adds	r1, r2, #0
10002270:	1c1a      	adds	r2, r3, #0
10002272:	f003 fed1 	bl	10006018 <handleSystemEvent>
10002276:	1c03      	adds	r3, r0, #0
10002278:	2b00      	cmp	r3, #0
1000227a:	d11d      	bne.n	100022b8 <MrPing_receiveEvent+0x7c>
		switch (getState(self)) {
1000227c:	68fb      	ldr	r3, [r7, #12]
1000227e:	1c18      	adds	r0, r3, #0
10002280:	f7ff fea0 	bl	10001fc4 <getState>
10002284:	1c03      	adds	r3, r0, #0
10002286:	2b02      	cmp	r3, #2
10002288:	d115      	bne.n	100022b6 <MrPing_receiveEvent+0x7a>
			case STATE_running:
				switch(trigger__et) {
1000228a:	697b      	ldr	r3, [r7, #20]
1000228c:	2b68      	cmp	r3, #104	; 0x68
1000228e:	d002      	beq.n	10002296 <MrPing_receiveEvent+0x5a>
10002290:	2b69      	cmp	r3, #105	; 0x69
10002292:	d007      	beq.n	100022a4 <MrPing_receiveEvent+0x68>
10002294:	e00d      	b.n	100022b2 <MrPing_receiveEvent+0x76>
						case TRIG_p0__pong:
							{
								chain__et = CHAIN_TRANS_tr0_FROM_running_TO_running_BY_pongp0_tr0;
10002296:	2302      	movs	r3, #2
10002298:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
1000229a:	1c3b      	adds	r3, r7, #0
1000229c:	331a      	adds	r3, #26
1000229e:	2201      	movs	r2, #1
100022a0:	801a      	strh	r2, [r3, #0]
							}
						break;
100022a2:	e007      	b.n	100022b4 <MrPing_receiveEvent+0x78>
						case TRIG_timer__timeout:
							{
								chain__et = CHAIN_TRANS_tr1_FROM_running_TO_running_BY_timeouttimer_tr1;
100022a4:	2303      	movs	r3, #3
100022a6:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
100022a8:	1c3b      	adds	r3, r7, #0
100022aa:	331a      	adds	r3, #26
100022ac:	2201      	movs	r2, #1
100022ae:	801a      	strh	r2, [r3, #0]
							}
						break;
100022b0:	e000      	b.n	100022b4 <MrPing_receiveEvent+0x78>
						default:
							/* should not occur */
							break;
100022b2:	46c0      	nop			; (mov r8, r8)
				}
				break;
100022b4:	e000      	b.n	100022b8 <MrPing_receiveEvent+0x7c>
			default:
				/* should not occur */
				break;
100022b6:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (chain__et != NOT_CAUGHT) {
100022b8:	69fb      	ldr	r3, [r7, #28]
100022ba:	2b00      	cmp	r3, #0
100022bc:	d02f      	beq.n	1000231e <MrPing_receiveEvent+0xe2>
		exitTo(self, getState(self), catching_state__et);
100022be:	68fb      	ldr	r3, [r7, #12]
100022c0:	1c18      	adds	r0, r3, #0
100022c2:	f7ff fe7f 	bl	10001fc4 <getState>
100022c6:	1c03      	adds	r3, r0, #0
100022c8:	1c1a      	adds	r2, r3, #0
100022ca:	68f9      	ldr	r1, [r7, #12]
100022cc:	1c3b      	adds	r3, r7, #0
100022ce:	331a      	adds	r3, #26
100022d0:	2000      	movs	r0, #0
100022d2:	5e1b      	ldrsh	r3, [r3, r0]
100022d4:	1c08      	adds	r0, r1, #0
100022d6:	1c11      	adds	r1, r2, #0
100022d8:	1c1a      	adds	r2, r3, #0
100022da:	f7ff fef9 	bl	100020d0 <exitTo>
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
100022de:	1c3c      	adds	r4, r7, #0
100022e0:	3412      	adds	r4, #18
100022e2:	68f8      	ldr	r0, [r7, #12]
100022e4:	69f9      	ldr	r1, [r7, #28]
100022e6:	68ba      	ldr	r2, [r7, #8]
100022e8:	683b      	ldr	r3, [r7, #0]
100022ea:	f7ff ff17 	bl	1000211c <executeTransitionChain>
100022ee:	1c03      	adds	r3, r0, #0
100022f0:	8023      	strh	r3, [r4, #0]
			next__et = enterHistory(self, next__et);
100022f2:	1c3c      	adds	r4, r7, #0
100022f4:	3412      	adds	r4, #18
100022f6:	68fa      	ldr	r2, [r7, #12]
100022f8:	1c3b      	adds	r3, r7, #0
100022fa:	3312      	adds	r3, #18
100022fc:	2100      	movs	r1, #0
100022fe:	5e5b      	ldrsh	r3, [r3, r1]
10002300:	1c10      	adds	r0, r2, #0
10002302:	1c19      	adds	r1, r3, #0
10002304:	f7ff ff3a 	bl	1000217c <enterHistory>
10002308:	1c03      	adds	r3, r0, #0
1000230a:	8023      	strh	r3, [r4, #0]
			setState(self, next__et);
1000230c:	68fa      	ldr	r2, [r7, #12]
1000230e:	1c3b      	adds	r3, r7, #0
10002310:	3312      	adds	r3, #18
10002312:	2000      	movs	r0, #0
10002314:	5e1b      	ldrsh	r3, [r3, r0]
10002316:	1c10      	adds	r0, r2, #0
10002318:	1c19      	adds	r1, r3, #0
1000231a:	f7ff fe45 	bl	10001fa8 <setState>
		}
	}
}
1000231e:	46bd      	mov	sp, r7
10002320:	b009      	add	sp, #36	; 0x24
10002322:	bd90      	pop	{r4, r7, pc}

10002324 <MrPing_init>:

void MrPing_init(MrPing* self){
10002324:	b580      	push	{r7, lr}
10002326:	b084      	sub	sp, #16
10002328:	af00      	add	r7, sp, #0
1000232a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MrPing", "init")
	self->state = STATE_TOP;
1000232c:	687b      	ldr	r3, [r7, #4]
1000232e:	2201      	movs	r2, #1
10002330:	841a      	strh	r2, [r3, #32]
	{
		int i;
		for (i=0; i<MRPING_HISTORY_SIZE; ++i)
10002332:	2300      	movs	r3, #0
10002334:	60fb      	str	r3, [r7, #12]
10002336:	e009      	b.n	1000234c <MrPing_init+0x28>
			self->history[i] = NO_STATE;
10002338:	687a      	ldr	r2, [r7, #4]
1000233a:	68fb      	ldr	r3, [r7, #12]
1000233c:	3310      	adds	r3, #16
1000233e:	005b      	lsls	r3, r3, #1
10002340:	18d3      	adds	r3, r2, r3
10002342:	2200      	movs	r2, #0
10002344:	805a      	strh	r2, [r3, #2]
void MrPing_init(MrPing* self){
	ET_MSC_LOGGER_SYNC_ENTRY("MrPing", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<MRPING_HISTORY_SIZE; ++i)
10002346:	68fb      	ldr	r3, [r7, #12]
10002348:	3301      	adds	r3, #1
1000234a:	60fb      	str	r3, [r7, #12]
1000234c:	68fb      	ldr	r3, [r7, #12]
1000234e:	2b01      	cmp	r3, #1
10002350:	ddf2      	ble.n	10002338 <MrPing_init+0x14>
			self->history[i] = NO_STATE;
	}
	MrPing_executeInitTransition(self);
10002352:	687b      	ldr	r3, [r7, #4]
10002354:	1c18      	adds	r0, r3, #0
10002356:	f7ff ff45 	bl	100021e4 <MrPing_executeInitTransition>
	ET_MSC_LOGGER_SYNC_EXIT
}
1000235a:	46bd      	mov	sp, r7
1000235c:	b004      	add	sp, #16
1000235e:	bd80      	pop	{r7, pc}

10002360 <MrPing_receiveMessage>:


void MrPing_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
10002360:	b580      	push	{r7, lr}
10002362:	b084      	sub	sp, #16
10002364:	af00      	add	r7, sp, #0
10002366:	60f8      	str	r0, [r7, #12]
10002368:	60b9      	str	r1, [r7, #8]
1000236a:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MrPing", "_receiveMessage")
	
	MrPing_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));
1000236c:	687b      	ldr	r3, [r7, #4]
1000236e:	88db      	ldrh	r3, [r3, #6]
10002370:	b21a      	sxth	r2, r3
10002372:	687b      	ldr	r3, [r7, #4]
10002374:	3308      	adds	r3, #8
10002376:	68f8      	ldr	r0, [r7, #12]
10002378:	68b9      	ldr	r1, [r7, #8]
1000237a:	f7ff ff5f 	bl	1000223c <MrPing_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
1000237e:	46bd      	mov	sp, r7
10002380:	b004      	add	sp, #16
10002382:	bd80      	pop	{r7, pc}

10002384 <setState>:
	POLLING = 0,
	TRIG_p0__ping = IFITEM_p0 + EVT_SHIFT*PingPongProtocol_IN_ping
};


static void setState(MrPong* self, etInt16 new_state) {
10002384:	b580      	push	{r7, lr}
10002386:	b082      	sub	sp, #8
10002388:	af00      	add	r7, sp, #0
1000238a:	6078      	str	r0, [r7, #4]
1000238c:	1c0a      	adds	r2, r1, #0
1000238e:	1cbb      	adds	r3, r7, #2
10002390:	801a      	strh	r2, [r3, #0]
	self->state = new_state;
10002392:	687b      	ldr	r3, [r7, #4]
10002394:	1cba      	adds	r2, r7, #2
10002396:	8812      	ldrh	r2, [r2, #0]
10002398:	809a      	strh	r2, [r3, #4]
}
1000239a:	46bd      	mov	sp, r7
1000239c:	b002      	add	sp, #8
1000239e:	bd80      	pop	{r7, pc}

100023a0 <getState>:

static etInt16 getState(MrPong* self) {
100023a0:	b580      	push	{r7, lr}
100023a2:	b082      	sub	sp, #8
100023a4:	af00      	add	r7, sp, #0
100023a6:	6078      	str	r0, [r7, #4]
	return self->state;
100023a8:	687b      	ldr	r3, [r7, #4]
100023aa:	889b      	ldrh	r3, [r3, #4]
100023ac:	b21b      	sxth	r3, r3
}
100023ae:	1c18      	adds	r0, r3, #0
100023b0:	46bd      	mov	sp, r7
100023b2:	b002      	add	sp, #8
100023b4:	bd80      	pop	{r7, pc}
100023b6:	46c0      	nop			; (mov r8, r8)

100023b8 <action_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0>:

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0(MrPong* self, const InterfaceItemBase* ifitem, PingPongData* data) {
100023b8:	b580      	push	{r7, lr}
100023ba:	b084      	sub	sp, #16
100023bc:	af00      	add	r7, sp, #0
100023be:	60f8      	str	r0, [r7, #12]
100023c0:	60b9      	str	r1, [r7, #8]
100023c2:	607a      	str	r2, [r7, #4]
	p0_pong(data);
100023c4:	68fb      	ldr	r3, [r7, #12]
100023c6:	681b      	ldr	r3, [r3, #0]
100023c8:	1c1a      	adds	r2, r3, #0
100023ca:	687b      	ldr	r3, [r7, #4]
100023cc:	1c10      	adds	r0, r2, #0
100023ce:	1c19      	adds	r1, r3, #0
100023d0:	f000 f990 	bl	100026f4 <PingPongProtocolPort_pong>
}
100023d4:	46bd      	mov	sp, r7
100023d6:	b004      	add	sp, #16
100023d8:	bd80      	pop	{r7, pc}
100023da:	46c0      	nop			; (mov r8, r8)

100023dc <exitTo>:
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(MrPong* self, etInt16 current__et, etInt16 to) {
100023dc:	b580      	push	{r7, lr}
100023de:	b082      	sub	sp, #8
100023e0:	af00      	add	r7, sp, #0
100023e2:	6078      	str	r0, [r7, #4]
100023e4:	1cbb      	adds	r3, r7, #2
100023e6:	8019      	strh	r1, [r3, #0]
100023e8:	1c3b      	adds	r3, r7, #0
100023ea:	801a      	strh	r2, [r3, #0]
	while (current__et!=to) {
100023ec:	e010      	b.n	10002410 <exitTo+0x34>
		switch (current__et) {
100023ee:	1cbb      	adds	r3, r7, #2
100023f0:	2100      	movs	r1, #0
100023f2:	5e5b      	ldrsh	r3, [r3, r1]
100023f4:	2b02      	cmp	r3, #2
100023f6:	d106      	bne.n	10002406 <exitTo+0x2a>
			case STATE_running:
				self->history[STATE_TOP] = STATE_running;
100023f8:	687b      	ldr	r3, [r7, #4]
100023fa:	2202      	movs	r2, #2
100023fc:	811a      	strh	r2, [r3, #8]
				current__et = STATE_TOP;
100023fe:	1cbb      	adds	r3, r7, #2
10002400:	2201      	movs	r2, #1
10002402:	801a      	strh	r2, [r3, #0]
				break;
10002404:	e004      	b.n	10002410 <exitTo+0x34>
10002406:	1cbb      	adds	r3, r7, #2
10002408:	1cba      	adds	r2, r7, #2
1000240a:	8812      	ldrh	r2, [r2, #0]
1000240c:	801a      	strh	r2, [r3, #0]
			default:
				/* should not occur */
				break;
1000240e:	46c0      	nop			; (mov r8, r8)
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(MrPong* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
10002410:	1cba      	adds	r2, r7, #2
10002412:	1c3b      	adds	r3, r7, #0
10002414:	2100      	movs	r1, #0
10002416:	5e52      	ldrsh	r2, [r2, r1]
10002418:	2100      	movs	r1, #0
1000241a:	5e5b      	ldrsh	r3, [r3, r1]
1000241c:	429a      	cmp	r2, r3
1000241e:	d1e6      	bne.n	100023ee <exitTo+0x12>
			default:
				/* should not occur */
				break;
		}
	}
}
10002420:	46bd      	mov	sp, r7
10002422:	b002      	add	sp, #8
10002424:	bd80      	pop	{r7, pc}
10002426:	46c0      	nop			; (mov r8, r8)

10002428 <executeTransitionChain>:
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(MrPong* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
10002428:	b580      	push	{r7, lr}
1000242a:	b086      	sub	sp, #24
1000242c:	af00      	add	r7, sp, #0
1000242e:	60f8      	str	r0, [r7, #12]
10002430:	60b9      	str	r1, [r7, #8]
10002432:	607a      	str	r2, [r7, #4]
10002434:	603b      	str	r3, [r7, #0]
	switch (chain__et) {
10002436:	68bb      	ldr	r3, [r7, #8]
10002438:	2b01      	cmp	r3, #1
1000243a:	d002      	beq.n	10002442 <executeTransitionChain+0x1a>
1000243c:	2b02      	cmp	r3, #2
1000243e:	d002      	beq.n	10002446 <executeTransitionChain+0x1e>
10002440:	e00d      	b.n	1000245e <executeTransitionChain+0x36>
		case CHAIN_TRANS_INITIAL_TO__running:
		{
			return STATE_running;
10002442:	2302      	movs	r3, #2
10002444:	e00d      	b.n	10002462 <executeTransitionChain+0x3a>
		}
		case CHAIN_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0:
		{
			PingPongData* data = ((PingPongData*) generic_data__et);
10002446:	683b      	ldr	r3, [r7, #0]
10002448:	617b      	str	r3, [r7, #20]
			action_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0(self, ifitem, data);
1000244a:	68f9      	ldr	r1, [r7, #12]
1000244c:	687a      	ldr	r2, [r7, #4]
1000244e:	697b      	ldr	r3, [r7, #20]
10002450:	1c08      	adds	r0, r1, #0
10002452:	1c11      	adds	r1, r2, #0
10002454:	1c1a      	adds	r2, r3, #0
10002456:	f7ff ffaf 	bl	100023b8 <action_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0>
			return STATE_running;
1000245a:	2302      	movs	r3, #2
1000245c:	e001      	b.n	10002462 <executeTransitionChain+0x3a>
		}
			default:
				/* should not occur */
				break;
1000245e:	46c0      	nop			; (mov r8, r8)
	}
	return NO_STATE;
10002460:	2300      	movs	r3, #0
10002462:	b21b      	sxth	r3, r3
}
10002464:	1c18      	adds	r0, r3, #0
10002466:	46bd      	mov	sp, r7
10002468:	b006      	add	sp, #24
1000246a:	bd80      	pop	{r7, pc}

1000246c <enterHistory>:
/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(MrPong* self, etInt16 state__et) {
1000246c:	b580      	push	{r7, lr}
1000246e:	b084      	sub	sp, #16
10002470:	af00      	add	r7, sp, #0
10002472:	6078      	str	r0, [r7, #4]
10002474:	1c0a      	adds	r2, r1, #0
10002476:	1cbb      	adds	r3, r7, #2
10002478:	801a      	strh	r2, [r3, #0]
	boolean skip_entry__et = ET_FALSE;
1000247a:	1c3b      	adds	r3, r7, #0
1000247c:	330f      	adds	r3, #15
1000247e:	2200      	movs	r2, #0
10002480:	701a      	strb	r2, [r3, #0]
	if (state__et >= STATE_MAX) {
10002482:	1cbb      	adds	r3, r7, #2
10002484:	2200      	movs	r2, #0
10002486:	5e9b      	ldrsh	r3, [r3, r2]
10002488:	2b02      	cmp	r3, #2
1000248a:	dd09      	ble.n	100024a0 <enterHistory+0x34>
		state__et = (etInt16) (state__et - STATE_MAX);
1000248c:	1cbb      	adds	r3, r7, #2
1000248e:	881b      	ldrh	r3, [r3, #0]
10002490:	3b03      	subs	r3, #3
10002492:	b29a      	uxth	r2, r3
10002494:	1cbb      	adds	r3, r7, #2
10002496:	801a      	strh	r2, [r3, #0]
		skip_entry__et = ET_TRUE;
10002498:	1c3b      	adds	r3, r7, #0
1000249a:	330f      	adds	r3, #15
1000249c:	2201      	movs	r2, #1
1000249e:	701a      	strb	r2, [r3, #0]
	}
	while (ET_TRUE) {
		switch (state__et) {
100024a0:	1cbb      	adds	r3, r7, #2
100024a2:	2200      	movs	r2, #0
100024a4:	5e9b      	ldrsh	r3, [r3, r2]
100024a6:	2b01      	cmp	r3, #1
100024a8:	d004      	beq.n	100024b4 <enterHistory+0x48>
100024aa:	2b02      	cmp	r3, #2
100024ac:	d107      	bne.n	100024be <enterHistory+0x52>
			case STATE_running:
				/* in leaf state: return state id */
				return STATE_running;
100024ae:	2302      	movs	r3, #2
100024b0:	b21b      	sxth	r3, r3
100024b2:	e00a      	b.n	100024ca <enterHistory+0x5e>
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
100024b4:	1cbb      	adds	r3, r7, #2
100024b6:	687a      	ldr	r2, [r7, #4]
100024b8:	8912      	ldrh	r2, [r2, #8]
100024ba:	801a      	strh	r2, [r3, #0]
				break;
100024bc:	e000      	b.n	100024c0 <enterHistory+0x54>
			default:
				/* should not occur */
				break;
100024be:	46c0      	nop			; (mov r8, r8)
		}
		skip_entry__et = ET_FALSE;
100024c0:	1c3b      	adds	r3, r7, #0
100024c2:	330f      	adds	r3, #15
100024c4:	2200      	movs	r2, #0
100024c6:	701a      	strb	r2, [r3, #0]
	}
100024c8:	e7ea      	b.n	100024a0 <enterHistory+0x34>
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}
100024ca:	1c18      	adds	r0, r3, #0
100024cc:	46bd      	mov	sp, r7
100024ce:	b004      	add	sp, #16
100024d0:	bd80      	pop	{r7, pc}
100024d2:	46c0      	nop			; (mov r8, r8)

100024d4 <MrPong_executeInitTransition>:

static void MrPong_executeInitTransition(MrPong* self) {
100024d4:	b590      	push	{r4, r7, lr}
100024d6:	b085      	sub	sp, #20
100024d8:	af00      	add	r7, sp, #0
100024da:	6078      	str	r0, [r7, #4]
	int chain__et = CHAIN_TRANS_INITIAL_TO__running;
100024dc:	2301      	movs	r3, #1
100024de:	60fb      	str	r3, [r7, #12]
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
100024e0:	1c3c      	adds	r4, r7, #0
100024e2:	340a      	adds	r4, #10
100024e4:	687a      	ldr	r2, [r7, #4]
100024e6:	68fb      	ldr	r3, [r7, #12]
100024e8:	1c10      	adds	r0, r2, #0
100024ea:	1c19      	adds	r1, r3, #0
100024ec:	2200      	movs	r2, #0
100024ee:	2300      	movs	r3, #0
100024f0:	f7ff ff9a 	bl	10002428 <executeTransitionChain>
100024f4:	1c03      	adds	r3, r0, #0
100024f6:	8023      	strh	r3, [r4, #0]
	next__et = enterHistory(self, next__et);
100024f8:	1c3c      	adds	r4, r7, #0
100024fa:	340a      	adds	r4, #10
100024fc:	687a      	ldr	r2, [r7, #4]
100024fe:	1c3b      	adds	r3, r7, #0
10002500:	330a      	adds	r3, #10
10002502:	2100      	movs	r1, #0
10002504:	5e5b      	ldrsh	r3, [r3, r1]
10002506:	1c10      	adds	r0, r2, #0
10002508:	1c19      	adds	r1, r3, #0
1000250a:	f7ff ffaf 	bl	1000246c <enterHistory>
1000250e:	1c03      	adds	r3, r0, #0
10002510:	8023      	strh	r3, [r4, #0]
	setState(self, next__et);
10002512:	687a      	ldr	r2, [r7, #4]
10002514:	1c3b      	adds	r3, r7, #0
10002516:	330a      	adds	r3, #10
10002518:	2100      	movs	r1, #0
1000251a:	5e5b      	ldrsh	r3, [r3, r1]
1000251c:	1c10      	adds	r0, r2, #0
1000251e:	1c19      	adds	r1, r3, #0
10002520:	f7ff ff30 	bl	10002384 <setState>
}
10002524:	46bd      	mov	sp, r7
10002526:	b005      	add	sp, #20
10002528:	bd90      	pop	{r4, r7, pc}
1000252a:	46c0      	nop			; (mov r8, r8)

1000252c <MrPong_receiveEvent>:

/* receiveEvent contains the main implementation of the FSM */
static void MrPong_receiveEvent(MrPong* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
1000252c:	b590      	push	{r4, r7, lr}
1000252e:	b089      	sub	sp, #36	; 0x24
10002530:	af00      	add	r7, sp, #0
10002532:	60f8      	str	r0, [r7, #12]
10002534:	60b9      	str	r1, [r7, #8]
10002536:	607a      	str	r2, [r7, #4]
10002538:	603b      	str	r3, [r7, #0]
	int trigger__et = ifitem->localId + EVT_SHIFT*evt;
1000253a:	68bb      	ldr	r3, [r7, #8]
1000253c:	7a5b      	ldrb	r3, [r3, #9]
1000253e:	1c1a      	adds	r2, r3, #0
10002540:	687b      	ldr	r3, [r7, #4]
10002542:	2164      	movs	r1, #100	; 0x64
10002544:	434b      	muls	r3, r1
10002546:	18d3      	adds	r3, r2, r3
10002548:	617b      	str	r3, [r7, #20]
	int chain__et = NOT_CAUGHT;
1000254a:	2300      	movs	r3, #0
1000254c:	61fb      	str	r3, [r7, #28]
	etInt16 catching_state__et = NO_STATE;
1000254e:	1c3b      	adds	r3, r7, #0
10002550:	331a      	adds	r3, #26
10002552:	2200      	movs	r2, #0
10002554:	801a      	strh	r2, [r3, #0]
	((void)trigger__et);	/* avoids unused warning */
	
	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
10002556:	68b9      	ldr	r1, [r7, #8]
10002558:	687a      	ldr	r2, [r7, #4]
1000255a:	683b      	ldr	r3, [r7, #0]
1000255c:	1c08      	adds	r0, r1, #0
1000255e:	1c11      	adds	r1, r2, #0
10002560:	1c1a      	adds	r2, r3, #0
10002562:	f003 fd59 	bl	10006018 <handleSystemEvent>
10002566:	1c03      	adds	r3, r0, #0
10002568:	2b00      	cmp	r3, #0
1000256a:	d113      	bne.n	10002594 <MrPong_receiveEvent+0x68>
		switch (getState(self)) {
1000256c:	68fb      	ldr	r3, [r7, #12]
1000256e:	1c18      	adds	r0, r3, #0
10002570:	f7ff ff16 	bl	100023a0 <getState>
10002574:	1c03      	adds	r3, r0, #0
10002576:	2b02      	cmp	r3, #2
10002578:	d10b      	bne.n	10002592 <MrPong_receiveEvent+0x66>
			case STATE_running:
				switch(trigger__et) {
1000257a:	697b      	ldr	r3, [r7, #20]
1000257c:	2bc9      	cmp	r3, #201	; 0xc9
1000257e:	d106      	bne.n	1000258e <MrPong_receiveEvent+0x62>
						case TRIG_p0__ping:
							{
								chain__et = CHAIN_TRANS_tr0_FROM_running_TO_running_BY_pingp0_tr0;
10002580:	2302      	movs	r3, #2
10002582:	61fb      	str	r3, [r7, #28]
								catching_state__et = STATE_TOP;
10002584:	1c3b      	adds	r3, r7, #0
10002586:	331a      	adds	r3, #26
10002588:	2201      	movs	r2, #1
1000258a:	801a      	strh	r2, [r3, #0]
							}
						break;
1000258c:	e000      	b.n	10002590 <MrPong_receiveEvent+0x64>
						default:
							/* should not occur */
							break;
1000258e:	46c0      	nop			; (mov r8, r8)
				}
				break;
10002590:	e000      	b.n	10002594 <MrPong_receiveEvent+0x68>
			default:
				/* should not occur */
				break;
10002592:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (chain__et != NOT_CAUGHT) {
10002594:	69fb      	ldr	r3, [r7, #28]
10002596:	2b00      	cmp	r3, #0
10002598:	d02f      	beq.n	100025fa <MrPong_receiveEvent+0xce>
		exitTo(self, getState(self), catching_state__et);
1000259a:	68fb      	ldr	r3, [r7, #12]
1000259c:	1c18      	adds	r0, r3, #0
1000259e:	f7ff feff 	bl	100023a0 <getState>
100025a2:	1c03      	adds	r3, r0, #0
100025a4:	1c1a      	adds	r2, r3, #0
100025a6:	68f9      	ldr	r1, [r7, #12]
100025a8:	1c3b      	adds	r3, r7, #0
100025aa:	331a      	adds	r3, #26
100025ac:	2000      	movs	r0, #0
100025ae:	5e1b      	ldrsh	r3, [r3, r0]
100025b0:	1c08      	adds	r0, r1, #0
100025b2:	1c11      	adds	r1, r2, #0
100025b4:	1c1a      	adds	r2, r3, #0
100025b6:	f7ff ff11 	bl	100023dc <exitTo>
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
100025ba:	1c3c      	adds	r4, r7, #0
100025bc:	3412      	adds	r4, #18
100025be:	68f8      	ldr	r0, [r7, #12]
100025c0:	69f9      	ldr	r1, [r7, #28]
100025c2:	68ba      	ldr	r2, [r7, #8]
100025c4:	683b      	ldr	r3, [r7, #0]
100025c6:	f7ff ff2f 	bl	10002428 <executeTransitionChain>
100025ca:	1c03      	adds	r3, r0, #0
100025cc:	8023      	strh	r3, [r4, #0]
			next__et = enterHistory(self, next__et);
100025ce:	1c3c      	adds	r4, r7, #0
100025d0:	3412      	adds	r4, #18
100025d2:	68fa      	ldr	r2, [r7, #12]
100025d4:	1c3b      	adds	r3, r7, #0
100025d6:	3312      	adds	r3, #18
100025d8:	2100      	movs	r1, #0
100025da:	5e5b      	ldrsh	r3, [r3, r1]
100025dc:	1c10      	adds	r0, r2, #0
100025de:	1c19      	adds	r1, r3, #0
100025e0:	f7ff ff44 	bl	1000246c <enterHistory>
100025e4:	1c03      	adds	r3, r0, #0
100025e6:	8023      	strh	r3, [r4, #0]
			setState(self, next__et);
100025e8:	68fa      	ldr	r2, [r7, #12]
100025ea:	1c3b      	adds	r3, r7, #0
100025ec:	3312      	adds	r3, #18
100025ee:	2000      	movs	r0, #0
100025f0:	5e1b      	ldrsh	r3, [r3, r0]
100025f2:	1c10      	adds	r0, r2, #0
100025f4:	1c19      	adds	r1, r3, #0
100025f6:	f7ff fec5 	bl	10002384 <setState>
		}
	}
}
100025fa:	46bd      	mov	sp, r7
100025fc:	b009      	add	sp, #36	; 0x24
100025fe:	bd90      	pop	{r4, r7, pc}

10002600 <MrPong_init>:

void MrPong_init(MrPong* self){
10002600:	b580      	push	{r7, lr}
10002602:	b084      	sub	sp, #16
10002604:	af00      	add	r7, sp, #0
10002606:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MrPong", "init")
	self->state = STATE_TOP;
10002608:	687b      	ldr	r3, [r7, #4]
1000260a:	2201      	movs	r2, #1
1000260c:	809a      	strh	r2, [r3, #4]
	{
		int i;
		for (i=0; i<MRPONG_HISTORY_SIZE; ++i)
1000260e:	2300      	movs	r3, #0
10002610:	60fb      	str	r3, [r7, #12]
10002612:	e008      	b.n	10002626 <MrPong_init+0x26>
			self->history[i] = NO_STATE;
10002614:	687a      	ldr	r2, [r7, #4]
10002616:	68fb      	ldr	r3, [r7, #12]
10002618:	005b      	lsls	r3, r3, #1
1000261a:	18d3      	adds	r3, r2, r3
1000261c:	2200      	movs	r2, #0
1000261e:	80da      	strh	r2, [r3, #6]
void MrPong_init(MrPong* self){
	ET_MSC_LOGGER_SYNC_ENTRY("MrPong", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<MRPONG_HISTORY_SIZE; ++i)
10002620:	68fb      	ldr	r3, [r7, #12]
10002622:	3301      	adds	r3, #1
10002624:	60fb      	str	r3, [r7, #12]
10002626:	68fb      	ldr	r3, [r7, #12]
10002628:	2b01      	cmp	r3, #1
1000262a:	ddf3      	ble.n	10002614 <MrPong_init+0x14>
			self->history[i] = NO_STATE;
	}
	MrPong_executeInitTransition(self);
1000262c:	687b      	ldr	r3, [r7, #4]
1000262e:	1c18      	adds	r0, r3, #0
10002630:	f7ff ff50 	bl	100024d4 <MrPong_executeInitTransition>
	ET_MSC_LOGGER_SYNC_EXIT
}
10002634:	46bd      	mov	sp, r7
10002636:	b004      	add	sp, #16
10002638:	bd80      	pop	{r7, pc}
1000263a:	46c0      	nop			; (mov r8, r8)

1000263c <MrPong_receiveMessage>:


void MrPong_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
1000263c:	b580      	push	{r7, lr}
1000263e:	b084      	sub	sp, #16
10002640:	af00      	add	r7, sp, #0
10002642:	60f8      	str	r0, [r7, #12]
10002644:	60b9      	str	r1, [r7, #8]
10002646:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MrPong", "_receiveMessage")
	
	MrPong_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));
10002648:	687b      	ldr	r3, [r7, #4]
1000264a:	88db      	ldrh	r3, [r3, #6]
1000264c:	b21a      	sxth	r2, r3
1000264e:	687b      	ldr	r3, [r7, #4]
10002650:	3308      	adds	r3, #8
10002652:	68f8      	ldr	r0, [r7, #12]
10002654:	68b9      	ldr	r1, [r7, #8]
10002656:	f7ff ff69 	bl	1000252c <MrPong_receiveEvent>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
1000265a:	46bd      	mov	sp, r7
1000265c:	b004      	add	sp, #16
1000265e:	bd80      	pop	{r7, pc}

10002660 <PingPongData_getData>:
#include "PingPongData_Utils.h"



/*--------------------- operations ---------------------*/
void PingPongData_getData(PingPongData* self, uint8* p) {
10002660:	b580      	push	{r7, lr}
10002662:	b084      	sub	sp, #16
10002664:	af00      	add	r7, sp, #0
10002666:	6078      	str	r0, [r7, #4]
10002668:	6039      	str	r1, [r7, #0]
	uint8 i;
	for(i=0;i<10;i++){*p++=data[i];};
1000266a:	1c3b      	adds	r3, r7, #0
1000266c:	330f      	adds	r3, #15
1000266e:	2200      	movs	r2, #0
10002670:	701a      	strb	r2, [r3, #0]
10002672:	e010      	b.n	10002696 <PingPongData_getData+0x36>
10002674:	1c3b      	adds	r3, r7, #0
10002676:	330f      	adds	r3, #15
10002678:	781b      	ldrb	r3, [r3, #0]
1000267a:	687a      	ldr	r2, [r7, #4]
1000267c:	5cd2      	ldrb	r2, [r2, r3]
1000267e:	683b      	ldr	r3, [r7, #0]
10002680:	701a      	strb	r2, [r3, #0]
10002682:	683b      	ldr	r3, [r7, #0]
10002684:	3301      	adds	r3, #1
10002686:	603b      	str	r3, [r7, #0]
10002688:	1c3b      	adds	r3, r7, #0
1000268a:	330f      	adds	r3, #15
1000268c:	1c3a      	adds	r2, r7, #0
1000268e:	320f      	adds	r2, #15
10002690:	7812      	ldrb	r2, [r2, #0]
10002692:	3201      	adds	r2, #1
10002694:	701a      	strb	r2, [r3, #0]
10002696:	1c3b      	adds	r3, r7, #0
10002698:	330f      	adds	r3, #15
1000269a:	781b      	ldrb	r3, [r3, #0]
1000269c:	2b09      	cmp	r3, #9
1000269e:	d9e9      	bls.n	10002674 <PingPongData_getData+0x14>
}
100026a0:	46bd      	mov	sp, r7
100026a2:	b004      	add	sp, #16
100026a4:	bd80      	pop	{r7, pc}
100026a6:	46c0      	nop			; (mov r8, r8)

100026a8 <PingPongData_initData>:
void PingPongData_initData(PingPongData* self) {
100026a8:	b580      	push	{r7, lr}
100026aa:	b084      	sub	sp, #16
100026ac:	af00      	add	r7, sp, #0
100026ae:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<10;i++){data[i]=i;};
100026b0:	2300      	movs	r3, #0
100026b2:	60fb      	str	r3, [r7, #12]
100026b4:	e008      	b.n	100026c8 <PingPongData_initData+0x20>
100026b6:	68fb      	ldr	r3, [r7, #12]
100026b8:	b2da      	uxtb	r2, r3
100026ba:	6879      	ldr	r1, [r7, #4]
100026bc:	68fb      	ldr	r3, [r7, #12]
100026be:	18cb      	adds	r3, r1, r3
100026c0:	701a      	strb	r2, [r3, #0]
100026c2:	68fb      	ldr	r3, [r7, #12]
100026c4:	3301      	adds	r3, #1
100026c6:	60fb      	str	r3, [r7, #12]
100026c8:	68fb      	ldr	r3, [r7, #12]
100026ca:	2b09      	cmp	r3, #9
100026cc:	ddf3      	ble.n	100026b6 <PingPongData_initData+0xe>
}
100026ce:	46bd      	mov	sp, r7
100026d0:	b004      	add	sp, #16
100026d2:	bd80      	pop	{r7, pc}

100026d4 <PingPongData_deepCopy>:

void PingPongData_deepCopy(PingPongData* source, PingPongData* target) {
100026d4:	b580      	push	{r7, lr}
100026d6:	b082      	sub	sp, #8
100026d8:	af00      	add	r7, sp, #0
100026da:	6078      	str	r0, [r7, #4]
100026dc:	6039      	str	r1, [r7, #0]
	memcpy(target, source, sizeof(PingPongData));
100026de:	683a      	ldr	r2, [r7, #0]
100026e0:	687b      	ldr	r3, [r7, #4]
100026e2:	1c10      	adds	r0, r2, #0
100026e4:	1c19      	adds	r1, r3, #0
100026e6:	220a      	movs	r2, #10
100026e8:	f007 ff2c 	bl	1000a544 <memcpy>
}
100026ec:	46bd      	mov	sp, r7
100026ee:	b002      	add	sp, #8
100026f0:	bd80      	pop	{r7, pc}
100026f2:	46c0      	nop			; (mov r8, r8)

100026f4 <PingPongProtocolPort_pong>:
#include "PingPongProtocol_Utils.h"


/*--------------------- port methods */

void PingPongProtocolPort_pong(const PingPongProtocolPort* self, PingPongData* data__et) {
100026f4:	b580      	push	{r7, lr}
100026f6:	b082      	sub	sp, #8
100026f8:	af00      	add	r7, sp, #0
100026fa:	6078      	str	r0, [r7, #4]
100026fc:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolPort", "pong")
		etPort_sendMessage(self, PingPongProtocol_OUT_pong, sizeof(PingPongData), data__et);
100026fe:	687a      	ldr	r2, [r7, #4]
10002700:	683b      	ldr	r3, [r7, #0]
10002702:	1c10      	adds	r0, r2, #0
10002704:	2101      	movs	r1, #1
10002706:	220a      	movs	r2, #10
10002708:	f003 fc92 	bl	10006030 <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
1000270c:	46bd      	mov	sp, r7
1000270e:	b002      	add	sp, #8
10002710:	bd80      	pop	{r7, pc}
10002712:	46c0      	nop			; (mov r8, r8)

10002714 <PingPongProtocolReplPort_pong_broadcast>:

void PingPongProtocolReplPort_pong_broadcast(const PingPongProtocolReplPort* self, PingPongData* data__et) {
10002714:	b580      	push	{r7, lr}
10002716:	b084      	sub	sp, #16
10002718:	af00      	add	r7, sp, #0
1000271a:	6078      	str	r0, [r7, #4]
1000271c:	6039      	str	r1, [r7, #0]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolReplPort", "pong")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
1000271e:	2300      	movs	r3, #0
10002720:	60fb      	str	r3, [r7, #12]
10002722:	e00e      	b.n	10002742 <PingPongProtocolReplPort_pong_broadcast+0x2e>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_OUT_pong, sizeof(PingPongData), data__et);
10002724:	687b      	ldr	r3, [r7, #4]
10002726:	685a      	ldr	r2, [r3, #4]
10002728:	68fb      	ldr	r3, [r7, #12]
1000272a:	011b      	lsls	r3, r3, #4
1000272c:	18d3      	adds	r3, r2, r3
1000272e:	1c1a      	adds	r2, r3, #0
10002730:	683b      	ldr	r3, [r7, #0]
10002732:	1c10      	adds	r0, r2, #0
10002734:	2101      	movs	r1, #1
10002736:	220a      	movs	r2, #10
10002738:	f003 fc7a 	bl	10006030 <etPort_sendMessage>
}

void PingPongProtocolReplPort_pong_broadcast(const PingPongProtocolReplPort* self, PingPongData* data__et) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolReplPort", "pong")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
1000273c:	68fb      	ldr	r3, [r7, #12]
1000273e:	3301      	adds	r3, #1
10002740:	60fb      	str	r3, [r7, #12]
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	881b      	ldrh	r3, [r3, #0]
10002746:	b21a      	sxth	r2, r3
10002748:	68fb      	ldr	r3, [r7, #12]
1000274a:	429a      	cmp	r2, r3
1000274c:	dcea      	bgt.n	10002724 <PingPongProtocolReplPort_pong_broadcast+0x10>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_OUT_pong, sizeof(PingPongData), data__et);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000274e:	46bd      	mov	sp, r7
10002750:	b004      	add	sp, #16
10002752:	bd80      	pop	{r7, pc}

10002754 <PingPongProtocolReplPort_pong>:

void PingPongProtocolReplPort_pong(const PingPongProtocolReplPort* self, int idx__et, PingPongData* data__et) {
10002754:	b580      	push	{r7, lr}
10002756:	b084      	sub	sp, #16
10002758:	af00      	add	r7, sp, #0
1000275a:	60f8      	str	r0, [r7, #12]
1000275c:	60b9      	str	r1, [r7, #8]
1000275e:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolReplPort", "pong")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
10002760:	68bb      	ldr	r3, [r7, #8]
10002762:	2b00      	cmp	r3, #0
10002764:	db11      	blt.n	1000278a <PingPongProtocolReplPort_pong+0x36>
10002766:	68fb      	ldr	r3, [r7, #12]
10002768:	881b      	ldrh	r3, [r3, #0]
1000276a:	b21a      	sxth	r2, r3
1000276c:	68bb      	ldr	r3, [r7, #8]
1000276e:	429a      	cmp	r2, r3
10002770:	dd0b      	ble.n	1000278a <PingPongProtocolReplPort_pong+0x36>
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PingPongProtocol_OUT_pong, sizeof(PingPongData), data__et);
10002772:	68fb      	ldr	r3, [r7, #12]
10002774:	685a      	ldr	r2, [r3, #4]
10002776:	68bb      	ldr	r3, [r7, #8]
10002778:	011b      	lsls	r3, r3, #4
1000277a:	18d3      	adds	r3, r2, r3
1000277c:	1c1a      	adds	r2, r3, #0
1000277e:	687b      	ldr	r3, [r7, #4]
10002780:	1c10      	adds	r0, r2, #0
10002782:	2101      	movs	r1, #1
10002784:	220a      	movs	r2, #10
10002786:	f003 fc53 	bl	10006030 <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000278a:	46bd      	mov	sp, r7
1000278c:	b004      	add	sp, #16
1000278e:	bd80      	pop	{r7, pc}

10002790 <PingPongProtocolReplPort_getReplication>:

etInt32 PingPongProtocolReplPort_getReplication(const PingPongProtocolReplPort* self) {
10002790:	b580      	push	{r7, lr}
10002792:	b082      	sub	sp, #8
10002794:	af00      	add	r7, sp, #0
10002796:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002798:	687b      	ldr	r3, [r7, #4]
1000279a:	881b      	ldrh	r3, [r3, #0]
1000279c:	b21b      	sxth	r3, r3
}
1000279e:	1c18      	adds	r0, r3, #0
100027a0:	46bd      	mov	sp, r7
100027a2:	b002      	add	sp, #8
100027a4:	bd80      	pop	{r7, pc}
100027a6:	46c0      	nop			; (mov r8, r8)

100027a8 <PingPongProtocolConjPort_ping>:



void PingPongProtocolConjPort_ping(const PingPongProtocolConjPort* self, PingPongData* data__et) {
100027a8:	b580      	push	{r7, lr}
100027aa:	b082      	sub	sp, #8
100027ac:	af00      	add	r7, sp, #0
100027ae:	6078      	str	r0, [r7, #4]
100027b0:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjPort", "ping")
		etPort_sendMessage(self, PingPongProtocol_IN_ping, sizeof(PingPongData), data__et);
100027b2:	687a      	ldr	r2, [r7, #4]
100027b4:	683b      	ldr	r3, [r7, #0]
100027b6:	1c10      	adds	r0, r2, #0
100027b8:	2102      	movs	r1, #2
100027ba:	220a      	movs	r2, #10
100027bc:	f003 fc38 	bl	10006030 <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
100027c0:	46bd      	mov	sp, r7
100027c2:	b002      	add	sp, #8
100027c4:	bd80      	pop	{r7, pc}
100027c6:	46c0      	nop			; (mov r8, r8)

100027c8 <PingPongProtocolConjReplPort_ping_broadcast>:

void PingPongProtocolConjReplPort_ping_broadcast(const PingPongProtocolConjReplPort* self, PingPongData* data__et) {
100027c8:	b580      	push	{r7, lr}
100027ca:	b084      	sub	sp, #16
100027cc:	af00      	add	r7, sp, #0
100027ce:	6078      	str	r0, [r7, #4]
100027d0:	6039      	str	r1, [r7, #0]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjReplPort", "ping")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100027d2:	2300      	movs	r3, #0
100027d4:	60fb      	str	r3, [r7, #12]
100027d6:	e00e      	b.n	100027f6 <PingPongProtocolConjReplPort_ping_broadcast+0x2e>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_IN_ping, sizeof(PingPongData), data__et);
100027d8:	687b      	ldr	r3, [r7, #4]
100027da:	685a      	ldr	r2, [r3, #4]
100027dc:	68fb      	ldr	r3, [r7, #12]
100027de:	011b      	lsls	r3, r3, #4
100027e0:	18d3      	adds	r3, r2, r3
100027e2:	1c1a      	adds	r2, r3, #0
100027e4:	683b      	ldr	r3, [r7, #0]
100027e6:	1c10      	adds	r0, r2, #0
100027e8:	2102      	movs	r1, #2
100027ea:	220a      	movs	r2, #10
100027ec:	f003 fc20 	bl	10006030 <etPort_sendMessage>
}

void PingPongProtocolConjReplPort_ping_broadcast(const PingPongProtocolConjReplPort* self, PingPongData* data__et) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjReplPort", "ping")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100027f0:	68fb      	ldr	r3, [r7, #12]
100027f2:	3301      	adds	r3, #1
100027f4:	60fb      	str	r3, [r7, #12]
100027f6:	687b      	ldr	r3, [r7, #4]
100027f8:	881b      	ldrh	r3, [r3, #0]
100027fa:	b21a      	sxth	r2, r3
100027fc:	68fb      	ldr	r3, [r7, #12]
100027fe:	429a      	cmp	r2, r3
10002800:	dcea      	bgt.n	100027d8 <PingPongProtocolConjReplPort_ping_broadcast+0x10>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_IN_ping, sizeof(PingPongData), data__et);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10002802:	46bd      	mov	sp, r7
10002804:	b004      	add	sp, #16
10002806:	bd80      	pop	{r7, pc}

10002808 <PingPongProtocolConjReplPort_ping>:

void PingPongProtocolConjReplPort_ping(const PingPongProtocolConjReplPort* self, int idx__et, PingPongData* data__et) {
10002808:	b580      	push	{r7, lr}
1000280a:	b084      	sub	sp, #16
1000280c:	af00      	add	r7, sp, #0
1000280e:	60f8      	str	r0, [r7, #12]
10002810:	60b9      	str	r1, [r7, #8]
10002812:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjReplPort", "ping")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
10002814:	68bb      	ldr	r3, [r7, #8]
10002816:	2b00      	cmp	r3, #0
10002818:	db11      	blt.n	1000283e <PingPongProtocolConjReplPort_ping+0x36>
1000281a:	68fb      	ldr	r3, [r7, #12]
1000281c:	881b      	ldrh	r3, [r3, #0]
1000281e:	b21a      	sxth	r2, r3
10002820:	68bb      	ldr	r3, [r7, #8]
10002822:	429a      	cmp	r2, r3
10002824:	dd0b      	ble.n	1000283e <PingPongProtocolConjReplPort_ping+0x36>
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PingPongProtocol_IN_ping, sizeof(PingPongData), data__et);
10002826:	68fb      	ldr	r3, [r7, #12]
10002828:	685a      	ldr	r2, [r3, #4]
1000282a:	68bb      	ldr	r3, [r7, #8]
1000282c:	011b      	lsls	r3, r3, #4
1000282e:	18d3      	adds	r3, r2, r3
10002830:	1c1a      	adds	r2, r3, #0
10002832:	687b      	ldr	r3, [r7, #4]
10002834:	1c10      	adds	r0, r2, #0
10002836:	2102      	movs	r1, #2
10002838:	220a      	movs	r2, #10
1000283a:	f003 fbf9 	bl	10006030 <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000283e:	46bd      	mov	sp, r7
10002840:	b004      	add	sp, #16
10002842:	bd80      	pop	{r7, pc}

10002844 <PingPongProtocolConjReplPort_getReplication>:

etInt32 PingPongProtocolConjReplPort_getReplication(const PingPongProtocolConjReplPort* self) {
10002844:	b580      	push	{r7, lr}
10002846:	b082      	sub	sp, #8
10002848:	af00      	add	r7, sp, #0
1000284a:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
1000284c:	687b      	ldr	r3, [r7, #4]
1000284e:	881b      	ldrh	r3, [r3, #0]
10002850:	b21b      	sxth	r3, r3
}
10002852:	1c18      	adds	r0, r3, #0
10002854:	46bd      	mov	sp, r7
10002856:	b002      	add	sp, #8
10002858:	bd80      	pop	{r7, pc}
1000285a:	46c0      	nop			; (mov r8, r8)

1000285c <PingPongTop_init>:

/* interface item IDs */
/* empty enum not generated */


void PingPongTop_init(PingPongTop* self){
1000285c:	b580      	push	{r7, lr}
1000285e:	b082      	sub	sp, #8
10002860:	af00      	add	r7, sp, #0
10002862:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongTop", "init")
	ET_MSC_LOGGER_SYNC_EXIT
}
10002864:	46bd      	mov	sp, r7
10002866:	b002      	add	sp, #8
10002868:	bd80      	pop	{r7, pc}
1000286a:	46c0      	nop			; (mov r8, r8)

1000286c <PingPongTop_receiveMessage>:


void PingPongTop_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
1000286c:	b580      	push	{r7, lr}
1000286e:	b084      	sub	sp, #16
10002870:	af00      	add	r7, sp, #0
10002872:	60f8      	str	r0, [r7, #12]
10002874:	60b9      	str	r1, [r7, #8]
10002876:	607a      	str	r2, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongTop", "_receiveMessage")
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002878:	46bd      	mov	sp, r7
1000287a:	b004      	add	sp, #16
1000287c:	bd80      	pop	{r7, pc}
1000287e:	46c0      	nop			; (mov r8, r8)

10002880 <MsgDispatcher_LowPrioThread_receiveMessage>:


/**
 * generated dispatch function for all messages for the thread "LowPrioThread"
 */
static etBool MsgDispatcher_LowPrioThread_receiveMessage(const etMessage* msg){
10002880:	b580      	push	{r7, lr}
10002882:	b082      	sub	sp, #8
10002884:	af00      	add	r7, sp, #0
10002886:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_LowPrioThread", "receiveMessage")
	switch(msg->address){
10002888:	687b      	ldr	r3, [r7, #4]
1000288a:	889b      	ldrh	r3, [r3, #4]
1000288c:	b21b      	sxth	r3, r3
1000288e:	2b2f      	cmp	r3, #47	; 0x2f
10002890:	d864      	bhi.n	1000295c <MsgDispatcher_LowPrioThread_receiveMessage+0xdc>
10002892:	009a      	lsls	r2, r3, #2
10002894:	4b39      	ldr	r3, [pc, #228]	; (1000297c <MsgDispatcher_LowPrioThread_receiveMessage+0xfc>)
10002896:	18d3      	adds	r3, r2, r3
10002898:	681b      	ldr	r3, [r3, #0]
1000289a:	469f      	mov	pc, r3
	
		case MESSAGESERVICE_ADDRESS:
			if (msg->evtID == etSystemProtocol_IN_terminate)
1000289c:	687b      	ldr	r3, [r7, #4]
1000289e:	88db      	ldrh	r3, [r3, #6]
100028a0:	b21b      	sxth	r3, r3
100028a2:	2b02      	cmp	r3, #2
100028a4:	d163      	bne.n	1000296e <MsgDispatcher_LowPrioThread_receiveMessage+0xee>
				return ET_FALSE;
100028a6:	2300      	movs	r3, #0
100028a8:	e063      	b.n	10002972 <MsgDispatcher_LowPrioThread_receiveMessage+0xf2>
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong */
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong/ref0 */
		case 3+BASE_ADDRESS:
			MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.p0, msg);
100028aa:	4935      	ldr	r1, [pc, #212]	; (10002980 <MsgDispatcher_LowPrioThread_receiveMessage+0x100>)
100028ac:	4a35      	ldr	r2, [pc, #212]	; (10002984 <MsgDispatcher_LowPrioThread_receiveMessage+0x104>)
100028ae:	687b      	ldr	r3, [r7, #4]
100028b0:	1c08      	adds	r0, r1, #0
100028b2:	1c11      	adds	r1, r2, #0
100028b4:	1c1a      	adds	r2, r3, #0
100028b6:	f7ff fd53 	bl	10002360 <MrPing_receiveMessage>
			break;
100028ba:	e059      	b.n	10002970 <MsgDispatcher_LowPrioThread_receiveMessage+0xf0>
		case 4+BASE_ADDRESS:
			MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.Led0, msg);
100028bc:	4930      	ldr	r1, [pc, #192]	; (10002980 <MsgDispatcher_LowPrioThread_receiveMessage+0x100>)
100028be:	4a32      	ldr	r2, [pc, #200]	; (10002988 <MsgDispatcher_LowPrioThread_receiveMessage+0x108>)
100028c0:	687b      	ldr	r3, [r7, #4]
100028c2:	1c08      	adds	r0, r1, #0
100028c4:	1c11      	adds	r1, r2, #0
100028c6:	1c1a      	adds	r2, r3, #0
100028c8:	f7ff fd4a 	bl	10002360 <MrPing_receiveMessage>
			break;
100028cc:	e050      	b.n	10002970 <MsgDispatcher_LowPrioThread_receiveMessage+0xf0>
		case 5+BASE_ADDRESS:
			MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.Led1, msg);
100028ce:	492c      	ldr	r1, [pc, #176]	; (10002980 <MsgDispatcher_LowPrioThread_receiveMessage+0x100>)
100028d0:	4a2e      	ldr	r2, [pc, #184]	; (1000298c <MsgDispatcher_LowPrioThread_receiveMessage+0x10c>)
100028d2:	687b      	ldr	r3, [r7, #4]
100028d4:	1c08      	adds	r0, r1, #0
100028d6:	1c11      	adds	r1, r2, #0
100028d8:	1c1a      	adds	r2, r3, #0
100028da:	f7ff fd41 	bl	10002360 <MrPing_receiveMessage>
			break;
100028de:	e047      	b.n	10002970 <MsgDispatcher_LowPrioThread_receiveMessage+0xf0>
		case 6+BASE_ADDRESS:
			MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.uart, msg);
100028e0:	4927      	ldr	r1, [pc, #156]	; (10002980 <MsgDispatcher_LowPrioThread_receiveMessage+0x100>)
100028e2:	4a2b      	ldr	r2, [pc, #172]	; (10002990 <MsgDispatcher_LowPrioThread_receiveMessage+0x110>)
100028e4:	687b      	ldr	r3, [r7, #4]
100028e6:	1c08      	adds	r0, r1, #0
100028e8:	1c11      	adds	r1, r2, #0
100028ea:	1c1a      	adds	r2, r3, #0
100028ec:	f7ff fd38 	bl	10002360 <MrPing_receiveMessage>
			break;
100028f0:	e03e      	b.n	10002970 <MsgDispatcher_LowPrioThread_receiveMessage+0xf0>
		case 7+BASE_ADDRESS:
			switch (msg->evtID){
100028f2:	687b      	ldr	r3, [r7, #4]
100028f4:	88db      	ldrh	r3, [r3, #6]
100028f6:	b21b      	sxth	r3, r3
100028f8:	2b01      	cmp	r3, #1
100028fa:	d106      	bne.n	1000290a <MsgDispatcher_LowPrioThread_receiveMessage+0x8a>
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.timer,msg,(void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,MrPing_receiveMessage);
100028fc:	4825      	ldr	r0, [pc, #148]	; (10002994 <MsgDispatcher_LowPrioThread_receiveMessage+0x114>)
100028fe:	6879      	ldr	r1, [r7, #4]
10002900:	4a1f      	ldr	r2, [pc, #124]	; (10002980 <MsgDispatcher_LowPrioThread_receiveMessage+0x100>)
10002902:	4b25      	ldr	r3, [pc, #148]	; (10002998 <MsgDispatcher_LowPrioThread_receiveMessage+0x118>)
10002904:	f7ff f912 	bl	10001b2c <PTimerConjPort_timeout_receiveHandler>
					break;
10002908:	e008      	b.n	1000291c <MsgDispatcher_LowPrioThread_receiveMessage+0x9c>
				default: MrPing_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0_const.timer, msg);
1000290a:	491d      	ldr	r1, [pc, #116]	; (10002980 <MsgDispatcher_LowPrioThread_receiveMessage+0x100>)
1000290c:	4a21      	ldr	r2, [pc, #132]	; (10002994 <MsgDispatcher_LowPrioThread_receiveMessage+0x114>)
1000290e:	687b      	ldr	r3, [r7, #4]
10002910:	1c08      	adds	r0, r1, #0
10002912:	1c11      	adds	r1, r2, #0
10002914:	1c1a      	adds	r2, r3, #0
10002916:	f7ff fd23 	bl	10002360 <MrPing_receiveMessage>
					break;
1000291a:	46c0      	nop			; (mov r8, r8)
			}
			break;
1000291c:	e028      	b.n	10002970 <MsgDispatcher_LowPrioThread_receiveMessage+0xf0>
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong/dimmer2 */
		case 14+BASE_ADDRESS:
			ADimmer_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2_const.pwm, msg);
1000291e:	491f      	ldr	r1, [pc, #124]	; (1000299c <MsgDispatcher_LowPrioThread_receiveMessage+0x11c>)
10002920:	4a1f      	ldr	r2, [pc, #124]	; (100029a0 <MsgDispatcher_LowPrioThread_receiveMessage+0x120>)
10002922:	687b      	ldr	r3, [r7, #4]
10002924:	1c08      	adds	r0, r1, #0
10002926:	1c11      	adds	r1, r2, #0
10002928:	1c1a      	adds	r2, r3, #0
1000292a:	f7ff fb2b 	bl	10001f84 <ADimmer_receiveMessage>
			break;
1000292e:	e01f      	b.n	10002970 <MsgDispatcher_LowPrioThread_receiveMessage+0xf0>
		case 15+BASE_ADDRESS:
			switch (msg->evtID){
10002930:	687b      	ldr	r3, [r7, #4]
10002932:	88db      	ldrh	r3, [r3, #6]
10002934:	b21b      	sxth	r3, r3
10002936:	2b01      	cmp	r3, #1
10002938:	d106      	bne.n	10002948 <MsgDispatcher_LowPrioThread_receiveMessage+0xc8>
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2_const.timer,msg,(void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2,ADimmer_receiveMessage);
1000293a:	481a      	ldr	r0, [pc, #104]	; (100029a4 <MsgDispatcher_LowPrioThread_receiveMessage+0x124>)
1000293c:	6879      	ldr	r1, [r7, #4]
1000293e:	4a17      	ldr	r2, [pc, #92]	; (1000299c <MsgDispatcher_LowPrioThread_receiveMessage+0x11c>)
10002940:	4b19      	ldr	r3, [pc, #100]	; (100029a8 <MsgDispatcher_LowPrioThread_receiveMessage+0x128>)
10002942:	f7ff f8f3 	bl	10001b2c <PTimerConjPort_timeout_receiveHandler>
					break;
10002946:	e008      	b.n	1000295a <MsgDispatcher_LowPrioThread_receiveMessage+0xda>
				default: ADimmer_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2_const.timer, msg);
10002948:	4914      	ldr	r1, [pc, #80]	; (1000299c <MsgDispatcher_LowPrioThread_receiveMessage+0x11c>)
1000294a:	4a16      	ldr	r2, [pc, #88]	; (100029a4 <MsgDispatcher_LowPrioThread_receiveMessage+0x124>)
1000294c:	687b      	ldr	r3, [r7, #4]
1000294e:	1c08      	adds	r0, r1, #0
10002950:	1c11      	adds	r1, r2, #0
10002952:	1c1a      	adds	r2, r3, #0
10002954:	f7ff fb16 	bl	10001f84 <ADimmer_receiveMessage>
					break;
10002958:	46c0      	nop			; (mov r8, r8)
			}
			break;
1000295a:	e009      	b.n	10002970 <MsgDispatcher_LowPrioThread_receiveMessage+0xf0>
		
		default:
			etLogger_logErrorF("MessageService_LowPrioThread_receiveMessage: address %d does not exist ", msg->address);
1000295c:	687b      	ldr	r3, [r7, #4]
1000295e:	889b      	ldrh	r3, [r3, #4]
10002960:	b21b      	sxth	r3, r3
10002962:	4a12      	ldr	r2, [pc, #72]	; (100029ac <MsgDispatcher_LowPrioThread_receiveMessage+0x12c>)
10002964:	1c10      	adds	r0, r2, #0
10002966:	1c19      	adds	r1, r3, #0
10002968:	f003 fac6 	bl	10005ef8 <etLogger_logErrorF>
			break;
1000296c:	e000      	b.n	10002970 <MsgDispatcher_LowPrioThread_receiveMessage+0xf0>
	switch(msg->address){
	
		case MESSAGESERVICE_ADDRESS:
			if (msg->evtID == etSystemProtocol_IN_terminate)
				return ET_FALSE;
			break;
1000296e:	46c0      	nop			; (mov r8, r8)
		default:
			etLogger_logErrorF("MessageService_LowPrioThread_receiveMessage: address %d does not exist ", msg->address);
			break;
	}
	ET_MSC_LOGGER_SYNC_EXIT
	return ET_TRUE;
10002970:	2301      	movs	r3, #1
}
10002972:	1c18      	adds	r0, r3, #0
10002974:	46bd      	mov	sp, r7
10002976:	b002      	add	sp, #8
10002978:	bd80      	pop	{r7, pc}
1000297a:	46c0      	nop			; (mov r8, r8)
1000297c:	1000a8ec 	.word	0x1000a8ec
10002980:	20002038 	.word	0x20002038
10002984:	1000a7f4 	.word	0x1000a7f4
10002988:	1000a800 	.word	0x1000a800
1000298c:	1000a80c 	.word	0x1000a80c
10002990:	1000a818 	.word	0x1000a818
10002994:	1000a824 	.word	0x1000a824
10002998:	10002361 	.word	0x10002361
1000299c:	20002080 	.word	0x20002080
100029a0:	1000a854 	.word	0x1000a854
100029a4:	1000a860 	.word	0x1000a860
100029a8:	10001f85 	.word	0x10001f85
100029ac:	1000a8a4 	.word	0x1000a8a4

100029b0 <MsgDispatcher_HighPrioThread_poll>:


/**
 * generated execute function for all cyclic execute calls for the async or datadriven actor instances of thread "HighPrioThread"
 */
static void MsgDispatcher_HighPrioThread_poll(void){
100029b0:	b580      	push	{r7, lr}
100029b2:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_HighPrioThread", "execute")
	ATimingService_execute((void*)&_PingPong_LogSys_PingPong_subSysRef_timingService);
100029b4:	4b02      	ldr	r3, [pc, #8]	; (100029c0 <MsgDispatcher_HighPrioThread_poll+0x10>)
100029b6:	1c18      	adds	r0, r3, #0
100029b8:	f7fe fe68 	bl	1000168c <ATimingService_execute>
	ET_MSC_LOGGER_SYNC_EXIT
}
100029bc:	46bd      	mov	sp, r7
100029be:	bd80      	pop	{r7, pc}
100029c0:	20002094 	.word	0x20002094

100029c4 <MsgDispatcher_HighPrioThread_receiveMessage>:

/**
 * generated dispatch function for all messages for the thread "HighPrioThread"
 */
static etBool MsgDispatcher_HighPrioThread_receiveMessage(const etMessage* msg){
100029c4:	b580      	push	{r7, lr}
100029c6:	b082      	sub	sp, #8
100029c8:	af00      	add	r7, sp, #0
100029ca:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_HighPrioThread", "receiveMessage")
	switch(msg->address){
100029cc:	687b      	ldr	r3, [r7, #4]
100029ce:	889b      	ldrh	r3, [r3, #4]
100029d0:	b21b      	sxth	r3, r3
100029d2:	2b33      	cmp	r3, #51	; 0x33
100029d4:	d85e      	bhi.n	10002a94 <MsgDispatcher_HighPrioThread_receiveMessage+0xd0>
100029d6:	009a      	lsls	r2, r3, #2
100029d8:	4b36      	ldr	r3, [pc, #216]	; (10002ab4 <MsgDispatcher_HighPrioThread_receiveMessage+0xf0>)
100029da:	18d3      	adds	r3, r2, r3
100029dc:	681b      	ldr	r3, [r3, #0]
100029de:	469f      	mov	pc, r3
	
		case MESSAGESERVICE_ADDRESS:
			if (msg->evtID == etSystemProtocol_IN_poll) {
100029e0:	687b      	ldr	r3, [r7, #4]
100029e2:	88db      	ldrh	r3, [r3, #6]
100029e4:	b21b      	sxth	r3, r3
100029e6:	2b01      	cmp	r3, #1
100029e8:	d102      	bne.n	100029f0 <MsgDispatcher_HighPrioThread_receiveMessage+0x2c>
				MsgDispatcher_HighPrioThread_poll();
100029ea:	f7ff ffe1 	bl	100029b0 <MsgDispatcher_HighPrioThread_poll>
			}
			else
			if (msg->evtID == etSystemProtocol_IN_terminate)
				return ET_FALSE;
			break;
100029ee:	e05a      	b.n	10002aa6 <MsgDispatcher_HighPrioThread_receiveMessage+0xe2>
		case MESSAGESERVICE_ADDRESS:
			if (msg->evtID == etSystemProtocol_IN_poll) {
				MsgDispatcher_HighPrioThread_poll();
			}
			else
			if (msg->evtID == etSystemProtocol_IN_terminate)
100029f0:	687b      	ldr	r3, [r7, #4]
100029f2:	88db      	ldrh	r3, [r3, #6]
100029f4:	b21b      	sxth	r3, r3
100029f6:	2b02      	cmp	r3, #2
100029f8:	d155      	bne.n	10002aa6 <MsgDispatcher_HighPrioThread_receiveMessage+0xe2>
				return ET_FALSE;
100029fa:	2300      	movs	r3, #0
100029fc:	e055      	b.n	10002aaa <MsgDispatcher_HighPrioThread_receiveMessage+0xe6>
			break;
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong/ref1 */
		case 9+BASE_ADDRESS:
			MrPong_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref1,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref1_const.p0, msg);
100029fe:	492e      	ldr	r1, [pc, #184]	; (10002ab8 <MsgDispatcher_HighPrioThread_receiveMessage+0xf4>)
10002a00:	4a2e      	ldr	r2, [pc, #184]	; (10002abc <MsgDispatcher_HighPrioThread_receiveMessage+0xf8>)
10002a02:	687b      	ldr	r3, [r7, #4]
10002a04:	1c08      	adds	r0, r1, #0
10002a06:	1c11      	adds	r1, r2, #0
10002a08:	1c1a      	adds	r2, r3, #0
10002a0a:	f7ff fe17 	bl	1000263c <MrPong_receiveMessage>
			break;
10002a0e:	e04b      	b.n	10002aa8 <MsgDispatcher_HighPrioThread_receiveMessage+0xe4>
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/pingPong/dimmer */
		case 11+BASE_ADDRESS:
			ADimmer_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer_const.pwm, msg);
10002a10:	492b      	ldr	r1, [pc, #172]	; (10002ac0 <MsgDispatcher_HighPrioThread_receiveMessage+0xfc>)
10002a12:	4a2c      	ldr	r2, [pc, #176]	; (10002ac4 <MsgDispatcher_HighPrioThread_receiveMessage+0x100>)
10002a14:	687b      	ldr	r3, [r7, #4]
10002a16:	1c08      	adds	r0, r1, #0
10002a18:	1c11      	adds	r1, r2, #0
10002a1a:	1c1a      	adds	r2, r3, #0
10002a1c:	f7ff fab2 	bl	10001f84 <ADimmer_receiveMessage>
			break;
10002a20:	e042      	b.n	10002aa8 <MsgDispatcher_HighPrioThread_receiveMessage+0xe4>
		case 12+BASE_ADDRESS:
			switch (msg->evtID){
10002a22:	687b      	ldr	r3, [r7, #4]
10002a24:	88db      	ldrh	r3, [r3, #6]
10002a26:	b21b      	sxth	r3, r3
10002a28:	2b01      	cmp	r3, #1
10002a2a:	d106      	bne.n	10002a3a <MsgDispatcher_HighPrioThread_receiveMessage+0x76>
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer_const.timer,msg,(void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer,ADimmer_receiveMessage);
10002a2c:	4826      	ldr	r0, [pc, #152]	; (10002ac8 <MsgDispatcher_HighPrioThread_receiveMessage+0x104>)
10002a2e:	6879      	ldr	r1, [r7, #4]
10002a30:	4a23      	ldr	r2, [pc, #140]	; (10002ac0 <MsgDispatcher_HighPrioThread_receiveMessage+0xfc>)
10002a32:	4b26      	ldr	r3, [pc, #152]	; (10002acc <MsgDispatcher_HighPrioThread_receiveMessage+0x108>)
10002a34:	f7ff f87a 	bl	10001b2c <PTimerConjPort_timeout_receiveHandler>
					break;
10002a38:	e008      	b.n	10002a4c <MsgDispatcher_HighPrioThread_receiveMessage+0x88>
				default: ADimmer_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer,(etPort*)&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer_const.timer, msg);
10002a3a:	4921      	ldr	r1, [pc, #132]	; (10002ac0 <MsgDispatcher_HighPrioThread_receiveMessage+0xfc>)
10002a3c:	4a22      	ldr	r2, [pc, #136]	; (10002ac8 <MsgDispatcher_HighPrioThread_receiveMessage+0x104>)
10002a3e:	687b      	ldr	r3, [r7, #4]
10002a40:	1c08      	adds	r0, r1, #0
10002a42:	1c11      	adds	r1, r2, #0
10002a44:	1c1a      	adds	r2, r3, #0
10002a46:	f7ff fa9d 	bl	10001f84 <ADimmer_receiveMessage>
					break;
10002a4a:	46c0      	nop			; (mov r8, r8)
			}
			break;
10002a4c:	e02c      	b.n	10002aa8 <MsgDispatcher_HighPrioThread_receiveMessage+0xe4>
		
		/* interface items of /PingPong_LogSys/PingPong_subSysRef/timingService */
		case 17+BASE_ADDRESS:
			ATimingService_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_timingService,&_PingPong_LogSys_PingPong_subSysRef_timingService_const.timer.ports[0].port, msg);
10002a4e:	4b20      	ldr	r3, [pc, #128]	; (10002ad0 <MsgDispatcher_HighPrioThread_receiveMessage+0x10c>)
10002a50:	685b      	ldr	r3, [r3, #4]
10002a52:	1c1a      	adds	r2, r3, #0
10002a54:	491f      	ldr	r1, [pc, #124]	; (10002ad4 <MsgDispatcher_HighPrioThread_receiveMessage+0x110>)
10002a56:	687b      	ldr	r3, [r7, #4]
10002a58:	1c08      	adds	r0, r1, #0
10002a5a:	1c11      	adds	r1, r2, #0
10002a5c:	1c1a      	adds	r2, r3, #0
10002a5e:	f7fe fe03 	bl	10001668 <ATimingService_receiveMessage>
		break;
10002a62:	e021      	b.n	10002aa8 <MsgDispatcher_HighPrioThread_receiveMessage+0xe4>
		case 18+BASE_ADDRESS:
			ATimingService_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_timingService,&_PingPong_LogSys_PingPong_subSysRef_timingService_const.timer.ports[1].port, msg);
10002a64:	4b1a      	ldr	r3, [pc, #104]	; (10002ad0 <MsgDispatcher_HighPrioThread_receiveMessage+0x10c>)
10002a66:	685b      	ldr	r3, [r3, #4]
10002a68:	3310      	adds	r3, #16
10002a6a:	1c1a      	adds	r2, r3, #0
10002a6c:	4919      	ldr	r1, [pc, #100]	; (10002ad4 <MsgDispatcher_HighPrioThread_receiveMessage+0x110>)
10002a6e:	687b      	ldr	r3, [r7, #4]
10002a70:	1c08      	adds	r0, r1, #0
10002a72:	1c11      	adds	r1, r2, #0
10002a74:	1c1a      	adds	r2, r3, #0
10002a76:	f7fe fdf7 	bl	10001668 <ATimingService_receiveMessage>
		break;
10002a7a:	e015      	b.n	10002aa8 <MsgDispatcher_HighPrioThread_receiveMessage+0xe4>
		case 19+BASE_ADDRESS:
			ATimingService_receiveMessage((void*)&_PingPong_LogSys_PingPong_subSysRef_timingService,&_PingPong_LogSys_PingPong_subSysRef_timingService_const.timer.ports[2].port, msg);
10002a7c:	4b14      	ldr	r3, [pc, #80]	; (10002ad0 <MsgDispatcher_HighPrioThread_receiveMessage+0x10c>)
10002a7e:	685b      	ldr	r3, [r3, #4]
10002a80:	3320      	adds	r3, #32
10002a82:	1c1a      	adds	r2, r3, #0
10002a84:	4913      	ldr	r1, [pc, #76]	; (10002ad4 <MsgDispatcher_HighPrioThread_receiveMessage+0x110>)
10002a86:	687b      	ldr	r3, [r7, #4]
10002a88:	1c08      	adds	r0, r1, #0
10002a8a:	1c11      	adds	r1, r2, #0
10002a8c:	1c1a      	adds	r2, r3, #0
10002a8e:	f7fe fdeb 	bl	10001668 <ATimingService_receiveMessage>
		break;
10002a92:	e009      	b.n	10002aa8 <MsgDispatcher_HighPrioThread_receiveMessage+0xe4>
		
		default:
			etLogger_logErrorF("MessageService_HighPrioThread_receiveMessage: address %d does not exist ", msg->address);
10002a94:	687b      	ldr	r3, [r7, #4]
10002a96:	889b      	ldrh	r3, [r3, #4]
10002a98:	b21b      	sxth	r3, r3
10002a9a:	4a0f      	ldr	r2, [pc, #60]	; (10002ad8 <MsgDispatcher_HighPrioThread_receiveMessage+0x114>)
10002a9c:	1c10      	adds	r0, r2, #0
10002a9e:	1c19      	adds	r1, r3, #0
10002aa0:	f003 fa2a 	bl	10005ef8 <etLogger_logErrorF>
			break;
10002aa4:	e000      	b.n	10002aa8 <MsgDispatcher_HighPrioThread_receiveMessage+0xe4>
				MsgDispatcher_HighPrioThread_poll();
			}
			else
			if (msg->evtID == etSystemProtocol_IN_terminate)
				return ET_FALSE;
			break;
10002aa6:	46c0      	nop			; (mov r8, r8)
		default:
			etLogger_logErrorF("MessageService_HighPrioThread_receiveMessage: address %d does not exist ", msg->address);
			break;
	}
	ET_MSC_LOGGER_SYNC_EXIT
	return ET_TRUE;
10002aa8:	2301      	movs	r3, #1
}
10002aaa:	1c18      	adds	r0, r3, #0
10002aac:	46bd      	mov	sp, r7
10002aae:	b002      	add	sp, #8
10002ab0:	bd80      	pop	{r7, pc}
10002ab2:	46c0      	nop			; (mov r8, r8)
10002ab4:	1000a9f8 	.word	0x1000a9f8
10002ab8:	20002060 	.word	0x20002060
10002abc:	1000a830 	.word	0x1000a830
10002ac0:	2000206c 	.word	0x2000206c
10002ac4:	1000a83c 	.word	0x1000a83c
10002ac8:	1000a848 	.word	0x1000a848
10002acc:	10001f85 	.word	0x10001f85
10002ad0:	1000a89c 	.word	0x1000a89c
10002ad4:	20002094 	.word	0x20002094
10002ad8:	1000a9ac 	.word	0x1000a9ac

10002adc <XMC2Go_PingPong_subSysRef_initMessageServices>:

/* include instances for all classes */
#include "XMC2Go_PingPong_subSysRef_Inst.h"
#include "XMC2Go_PingPong_subSysRef_Disp.h"

static void XMC2Go_PingPong_subSysRef_initMessageServices(void) {
10002adc:	b5b0      	push	{r4, r5, r7, lr}
10002ade:	b088      	sub	sp, #32
10002ae0:	af06      	add	r7, sp, #24
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "initMessageServices")
	{
		etTime interval;
		
		/* initialization of all message services */
		interval.sec = 0;
10002ae2:	1c3b      	adds	r3, r7, #0
10002ae4:	2200      	movs	r2, #0
10002ae6:	601a      	str	r2, [r3, #0]
		interval.nSec = 50000000;
10002ae8:	1c3b      	adds	r3, r7, #0
10002aea:	4a19      	ldr	r2, [pc, #100]	; (10002b50 <XMC2Go_PingPong_subSysRef_initMessageServices+0x74>)
10002aec:	605a      	str	r2, [r3, #4]
		etMessageService_init(
10002aee:	4819      	ldr	r0, [pc, #100]	; (10002b54 <XMC2Go_PingPong_subSysRef_initMessageServices+0x78>)
10002af0:	4919      	ldr	r1, [pc, #100]	; (10002b58 <XMC2Go_PingPong_subSysRef_initMessageServices+0x7c>)
10002af2:	2396      	movs	r3, #150	; 0x96
10002af4:	9300      	str	r3, [sp, #0]
10002af6:	2301      	movs	r3, #1
10002af8:	9301      	str	r3, [sp, #4]
10002afa:	1c3a      	adds	r2, r7, #0
10002afc:	2308      	movs	r3, #8
10002afe:	466c      	mov	r4, sp
10002b00:	18e3      	adds	r3, r4, r3
10002b02:	ca30      	ldmia	r2!, {r4, r5}
10002b04:	c330      	stmia	r3!, {r4, r5}
10002b06:	4b15      	ldr	r3, [pc, #84]	; (10002b5c <XMC2Go_PingPong_subSysRef_initMessageServices+0x80>)
10002b08:	9304      	str	r3, [sp, #16]
10002b0a:	2302      	movs	r3, #2
10002b0c:	9305      	str	r3, [sp, #20]
10002b0e:	220a      	movs	r2, #10
10002b10:	2320      	movs	r3, #32
10002b12:	f003 fad1 	bl	100060b8 <etMessageService_init>
			1,
			interval,
			MsgDispatcher_LowPrioThread_receiveMessage,
			EXECMODE_MIXED);
			
		interval.sec = 0;
10002b16:	1c3b      	adds	r3, r7, #0
10002b18:	2200      	movs	r2, #0
10002b1a:	601a      	str	r2, [r3, #0]
		interval.nSec = 5000000;
10002b1c:	1c3b      	adds	r3, r7, #0
10002b1e:	4a10      	ldr	r2, [pc, #64]	; (10002b60 <XMC2Go_PingPong_subSysRef_initMessageServices+0x84>)
10002b20:	605a      	str	r2, [r3, #4]
		etMessageService_init(
10002b22:	4810      	ldr	r0, [pc, #64]	; (10002b64 <XMC2Go_PingPong_subSysRef_initMessageServices+0x88>)
10002b24:	4910      	ldr	r1, [pc, #64]	; (10002b68 <XMC2Go_PingPong_subSysRef_initMessageServices+0x8c>)
10002b26:	2396      	movs	r3, #150	; 0x96
10002b28:	9300      	str	r3, [sp, #0]
10002b2a:	2302      	movs	r3, #2
10002b2c:	9301      	str	r3, [sp, #4]
10002b2e:	1c3a      	adds	r2, r7, #0
10002b30:	2308      	movs	r3, #8
10002b32:	466d      	mov	r5, sp
10002b34:	18eb      	adds	r3, r5, r3
10002b36:	ca30      	ldmia	r2!, {r4, r5}
10002b38:	c330      	stmia	r3!, {r4, r5}
10002b3a:	4b0c      	ldr	r3, [pc, #48]	; (10002b6c <XMC2Go_PingPong_subSysRef_initMessageServices+0x90>)
10002b3c:	9304      	str	r3, [sp, #16]
10002b3e:	2302      	movs	r3, #2
10002b40:	9305      	str	r3, [sp, #20]
10002b42:	220a      	movs	r2, #10
10002b44:	2320      	movs	r3, #32
10002b46:	f003 fab7 	bl	100060b8 <etMessageService_init>
			EXECMODE_MIXED);
			
	}
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002b4a:	46bd      	mov	sp, r7
10002b4c:	b002      	add	sp, #8
10002b4e:	bdb0      	pop	{r4, r5, r7, pc}
10002b50:	02faf080 	.word	0x02faf080
10002b54:	20000a60 	.word	0x20000a60
10002b58:	20000920 	.word	0x20000920
10002b5c:	10002881 	.word	0x10002881
10002b60:	004c4b40 	.word	0x004c4b40
10002b64:	20000c0c 	.word	0x20000c0c
10002b68:	20000acc 	.word	0x20000acc
10002b6c:	100029c5 	.word	0x100029c5

10002b70 <XMC2Go_PingPong_subSysRef_startMessageServices>:

static void XMC2Go_PingPong_subSysRef_startMessageServices(void) {
10002b70:	b580      	push	{r7, lr}
10002b72:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "startMessageServices")
	
	etMessageService_start(&msgService_HighPrioThread);
10002b74:	4b04      	ldr	r3, [pc, #16]	; (10002b88 <XMC2Go_PingPong_subSysRef_startMessageServices+0x18>)
10002b76:	1c18      	adds	r0, r3, #0
10002b78:	f003 fb02 	bl	10006180 <etMessageService_start>
	etMessageService_start(&msgService_LowPrioThread);
10002b7c:	4b03      	ldr	r3, [pc, #12]	; (10002b8c <XMC2Go_PingPong_subSysRef_startMessageServices+0x1c>)
10002b7e:	1c18      	adds	r0, r3, #0
10002b80:	f003 fafe 	bl	10006180 <etMessageService_start>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002b84:	46bd      	mov	sp, r7
10002b86:	bd80      	pop	{r7, pc}
10002b88:	20000c0c 	.word	0x20000c0c
10002b8c:	20000a60 	.word	0x20000a60

10002b90 <XMC2Go_PingPong_subSysRef_stopMessageServices>:

static void XMC2Go_PingPong_subSysRef_stopMessageServices(void) {
10002b90:	b580      	push	{r7, lr}
10002b92:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "stopMessageServices")
	
	etMessageService_stop(&msgService_LowPrioThread);
10002b94:	4b04      	ldr	r3, [pc, #16]	; (10002ba8 <XMC2Go_PingPong_subSysRef_stopMessageServices+0x18>)
10002b96:	1c18      	adds	r0, r3, #0
10002b98:	f003 fb0e 	bl	100061b8 <etMessageService_stop>
	etMessageService_stop(&msgService_HighPrioThread);
10002b9c:	4b03      	ldr	r3, [pc, #12]	; (10002bac <XMC2Go_PingPong_subSysRef_stopMessageServices+0x1c>)
10002b9e:	1c18      	adds	r0, r3, #0
10002ba0:	f003 fb0a 	bl	100061b8 <etMessageService_stop>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002ba4:	46bd      	mov	sp, r7
10002ba6:	bd80      	pop	{r7, pc}
10002ba8:	20000a60 	.word	0x20000a60
10002bac:	20000c0c 	.word	0x20000c0c

10002bb0 <XMC2Go_PingPong_subSysRef_destroyMessageServices>:

static void XMC2Go_PingPong_subSysRef_destroyMessageServices(void) {
10002bb0:	b580      	push	{r7, lr}
10002bb2:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "destroyMessageServices")
	
	etMessageService_destroy(&msgService_LowPrioThread);
10002bb4:	4b04      	ldr	r3, [pc, #16]	; (10002bc8 <XMC2Go_PingPong_subSysRef_destroyMessageServices+0x18>)
10002bb6:	1c18      	adds	r0, r3, #0
10002bb8:	f003 fb26 	bl	10006208 <etMessageService_destroy>
	etMessageService_destroy(&msgService_HighPrioThread);
10002bbc:	4b03      	ldr	r3, [pc, #12]	; (10002bcc <XMC2Go_PingPong_subSysRef_destroyMessageServices+0x1c>)
10002bbe:	1c18      	adds	r0, r3, #0
10002bc0:	f003 fb22 	bl	10006208 <etMessageService_destroy>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002bc4:	46bd      	mov	sp, r7
10002bc6:	bd80      	pop	{r7, pc}
10002bc8:	20000a60 	.word	0x20000a60
10002bcc:	20000c0c 	.word	0x20000c0c

10002bd0 <XMC2Go_PingPong_subSysRef_init>:

void XMC2Go_PingPong_subSysRef_init(void) {
10002bd0:	b580      	push	{r7, lr}
10002bd2:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "init")
	etLogger_logInfoF("%s_init", XMC2Go_PingPong_subSysRefInst.name);
10002bd4:	4b07      	ldr	r3, [pc, #28]	; (10002bf4 <XMC2Go_PingPong_subSysRef_init+0x24>)
10002bd6:	681b      	ldr	r3, [r3, #0]
10002bd8:	4a07      	ldr	r2, [pc, #28]	; (10002bf8 <XMC2Go_PingPong_subSysRef_init+0x28>)
10002bda:	1c10      	adds	r0, r2, #0
10002bdc:	1c19      	adds	r1, r3, #0
10002bde:	f003 f99b 	bl	10005f18 <etLogger_logInfoF>
	
	/* construct all actors */
	XMC2Go_PingPong_subSysRef_constructActorInstances();
10002be2:	f000 f85d 	bl	10002ca0 <XMC2Go_PingPong_subSysRef_constructActorInstances>
	
	/* initialization of all message services */
	XMC2Go_PingPong_subSysRef_initMessageServices();
10002be6:	f7ff ff79 	bl	10002adc <XMC2Go_PingPong_subSysRef_initMessageServices>
	
	/* init all actors */
	XMC2Go_PingPong_subSysRef_initActorInstances();
10002bea:	f000 f85d 	bl	10002ca8 <XMC2Go_PingPong_subSysRef_initActorInstances>
	
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002bee:	46bd      	mov	sp, r7
10002bf0:	bd80      	pop	{r7, pc}
10002bf2:	46c0      	nop			; (mov r8, r8)
10002bf4:	20002030 	.word	0x20002030
10002bf8:	1000aac8 	.word	0x1000aac8

10002bfc <XMC2Go_PingPong_subSysRef_start>:

void XMC2Go_PingPong_subSysRef_start(void) {
10002bfc:	b580      	push	{r7, lr}
10002bfe:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "start")
	etLogger_logInfoF("%s_start", XMC2Go_PingPong_subSysRefInst.name);
10002c00:	4b05      	ldr	r3, [pc, #20]	; (10002c18 <XMC2Go_PingPong_subSysRef_start+0x1c>)
10002c02:	681b      	ldr	r3, [r3, #0]
10002c04:	4a05      	ldr	r2, [pc, #20]	; (10002c1c <XMC2Go_PingPong_subSysRef_start+0x20>)
10002c06:	1c10      	adds	r0, r2, #0
10002c08:	1c19      	adds	r1, r3, #0
10002c0a:	f003 f985 	bl	10005f18 <etLogger_logInfoF>
	XMC2Go_PingPong_subSysRef_startMessageServices();
10002c0e:	f7ff ffaf 	bl	10002b70 <XMC2Go_PingPong_subSysRef_startMessageServices>
	ET_MSC_LOGGER_SYNC_EXIT
}
10002c12:	46bd      	mov	sp, r7
10002c14:	bd80      	pop	{r7, pc}
10002c16:	46c0      	nop			; (mov r8, r8)
10002c18:	20002030 	.word	0x20002030
10002c1c:	1000aad0 	.word	0x1000aad0

10002c20 <XMC2Go_PingPong_subSysRef_run>:

void XMC2Go_PingPong_subSysRef_run(etBool runAsTest) {
10002c20:	b580      	push	{r7, lr}
10002c22:	b082      	sub	sp, #8
10002c24:	af00      	add	r7, sp, #0
10002c26:	1c02      	adds	r2, r0, #0
10002c28:	1dfb      	adds	r3, r7, #7
10002c2a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	ET_MSC_LOGGER_SYNC_EXIT
#endif	
}
10002c2c:	46bd      	mov	sp, r7
10002c2e:	b002      	add	sp, #8
10002c30:	bd80      	pop	{r7, pc}
10002c32:	46c0      	nop			; (mov r8, r8)

10002c34 <XMC2Go_PingPong_subSysRef_stop>:

void XMC2Go_PingPong_subSysRef_stop(void){
10002c34:	b580      	push	{r7, lr}
10002c36:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "stop")
	etLogger_logInfoF("%s_stop", XMC2Go_PingPong_subSysRefInst.name);
10002c38:	4b05      	ldr	r3, [pc, #20]	; (10002c50 <XMC2Go_PingPong_subSysRef_stop+0x1c>)
10002c3a:	681b      	ldr	r3, [r3, #0]
10002c3c:	4a05      	ldr	r2, [pc, #20]	; (10002c54 <XMC2Go_PingPong_subSysRef_stop+0x20>)
10002c3e:	1c10      	adds	r0, r2, #0
10002c40:	1c19      	adds	r1, r3, #0
10002c42:	f003 f969 	bl	10005f18 <etLogger_logInfoF>

	XMC2Go_PingPong_subSysRef_stopMessageServices();
10002c46:	f7ff ffa3 	bl	10002b90 <XMC2Go_PingPong_subSysRef_stopMessageServices>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002c4a:	46bd      	mov	sp, r7
10002c4c:	bd80      	pop	{r7, pc}
10002c4e:	46c0      	nop			; (mov r8, r8)
10002c50:	20002030 	.word	0x20002030
10002c54:	1000aadc 	.word	0x1000aadc

10002c58 <XMC2Go_PingPong_subSysRef_destroy>:

void XMC2Go_PingPong_subSysRef_destroy(void){
10002c58:	b580      	push	{r7, lr}
10002c5a:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "destroy")
	etLogger_logInfoF("%s_destroy", XMC2Go_PingPong_subSysRefInst.name);
10002c5c:	4b05      	ldr	r3, [pc, #20]	; (10002c74 <XMC2Go_PingPong_subSysRef_destroy+0x1c>)
10002c5e:	681b      	ldr	r3, [r3, #0]
10002c60:	4a05      	ldr	r2, [pc, #20]	; (10002c78 <XMC2Go_PingPong_subSysRef_destroy+0x20>)
10002c62:	1c10      	adds	r0, r2, #0
10002c64:	1c19      	adds	r1, r3, #0
10002c66:	f003 f957 	bl	10005f18 <etLogger_logInfoF>
	
	XMC2Go_PingPong_subSysRef_destroyMessageServices();
10002c6a:	f7ff ffa1 	bl	10002bb0 <XMC2Go_PingPong_subSysRef_destroyMessageServices>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002c6e:	46bd      	mov	sp, r7
10002c70:	bd80      	pop	{r7, pc}
10002c72:	46c0      	nop			; (mov r8, r8)
10002c74:	20002030 	.word	0x20002030
10002c78:	1000aae4 	.word	0x1000aae4

10002c7c <XMC2Go_PingPong_subSysRef_shutdown>:

void XMC2Go_PingPong_subSysRef_shutdown(void){
10002c7c:	b580      	push	{r7, lr}
10002c7e:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "shutdown")
	etLogger_logInfoF("%s_shutdown", XMC2Go_PingPong_subSysRefInst.name);
10002c80:	4b05      	ldr	r3, [pc, #20]	; (10002c98 <XMC2Go_PingPong_subSysRef_shutdown+0x1c>)
10002c82:	681b      	ldr	r3, [r3, #0]
10002c84:	4a05      	ldr	r2, [pc, #20]	; (10002c9c <XMC2Go_PingPong_subSysRef_shutdown+0x20>)
10002c86:	1c10      	adds	r0, r2, #0
10002c88:	1c19      	adds	r1, r3, #0
10002c8a:	f003 f945 	bl	10005f18 <etLogger_logInfoF>
	
	XMC2Go_PingPong_subSysRefInst.shutdownRequest = 1;
10002c8e:	4b02      	ldr	r3, [pc, #8]	; (10002c98 <XMC2Go_PingPong_subSysRef_shutdown+0x1c>)
10002c90:	2201      	movs	r2, #1
10002c92:	605a      	str	r2, [r3, #4]
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002c94:	46bd      	mov	sp, r7
10002c96:	bd80      	pop	{r7, pc}
10002c98:	20002030 	.word	0x20002030
10002c9c:	1000aaf0 	.word	0x1000aaf0

10002ca0 <XMC2Go_PingPong_subSysRef_constructActorInstances>:


static void XMC2Go_PingPong_subSysRef_constructActorInstances(void){
10002ca0:	b580      	push	{r7, lr}
10002ca2:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "constructActorInstances")
	
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002ca4:	46bd      	mov	sp, r7
10002ca6:	bd80      	pop	{r7, pc}

10002ca8 <XMC2Go_PingPong_subSysRef_initActorInstances>:

static void XMC2Go_PingPong_subSysRef_initActorInstances(void){
10002ca8:	b580      	push	{r7, lr}
10002caa:	af00      	add	r7, sp, #0
	ET_MSC_LOGGER_SYNC_ENTRY("XMC2Go_PingPong_subSysRef", "initActorInstances")
	
	PingPongTop_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong);
10002cac:	4b0c      	ldr	r3, [pc, #48]	; (10002ce0 <XMC2Go_PingPong_subSysRef_initActorInstances+0x38>)
10002cae:	1c18      	adds	r0, r3, #0
10002cb0:	f7ff fdd4 	bl	1000285c <PingPongTop_init>
	MrPing_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref0);
10002cb4:	4b0b      	ldr	r3, [pc, #44]	; (10002ce4 <XMC2Go_PingPong_subSysRef_initActorInstances+0x3c>)
10002cb6:	1c18      	adds	r0, r3, #0
10002cb8:	f7ff fb34 	bl	10002324 <MrPing_init>
	MrPong_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong_ref1);
10002cbc:	4b0a      	ldr	r3, [pc, #40]	; (10002ce8 <XMC2Go_PingPong_subSysRef_initActorInstances+0x40>)
10002cbe:	1c18      	adds	r0, r3, #0
10002cc0:	f7ff fc9e 	bl	10002600 <MrPong_init>
	ADimmer_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer);
10002cc4:	4b09      	ldr	r3, [pc, #36]	; (10002cec <XMC2Go_PingPong_subSysRef_initActorInstances+0x44>)
10002cc6:	1c18      	adds	r0, r3, #0
10002cc8:	f7ff f93e 	bl	10001f48 <ADimmer_init>
	ADimmer_init(&_PingPong_LogSys_PingPong_subSysRef_pingPong_dimmer2);
10002ccc:	4b08      	ldr	r3, [pc, #32]	; (10002cf0 <XMC2Go_PingPong_subSysRef_initActorInstances+0x48>)
10002cce:	1c18      	adds	r0, r3, #0
10002cd0:	f7ff f93a 	bl	10001f48 <ADimmer_init>
	ATimingService_init(&_PingPong_LogSys_PingPong_subSysRef_timingService);
10002cd4:	4b07      	ldr	r3, [pc, #28]	; (10002cf4 <XMC2Go_PingPong_subSysRef_initActorInstances+0x4c>)
10002cd6:	1c18      	adds	r0, r3, #0
10002cd8:	f7fe fca8 	bl	1000162c <ATimingService_init>
	
	ET_MSC_LOGGER_SYNC_EXIT
}
10002cdc:	46bd      	mov	sp, r7
10002cde:	bd80      	pop	{r7, pc}
10002ce0:	20000c78 	.word	0x20000c78
10002ce4:	20002038 	.word	0x20002038
10002ce8:	20002060 	.word	0x20002060
10002cec:	2000206c 	.word	0x2000206c
10002cf0:	20002080 	.word	0x20002080
10002cf4:	20002094 	.word	0x20002094

10002cf8 <main>:
/**
 * main function
 * creates component and starts and stops the lifecycle
 */

int main(int argc, char** argv) {
10002cf8:	b580      	push	{r7, lr}
10002cfa:	b084      	sub	sp, #16
10002cfc:	af00      	add	r7, sp, #0
10002cfe:	6078      	str	r0, [r7, #4]
10002d00:	6039      	str	r1, [r7, #0]
	etBool runAsTest = ET_FALSE;
10002d02:	1c3b      	adds	r3, r7, #0
10002d04:	330f      	adds	r3, #15
10002d06:	2200      	movs	r2, #0
10002d08:	701a      	strb	r2, [r3, #0]

	if (argc>1 && strcmp(argv[1], "-headless")==0)
10002d0a:	687b      	ldr	r3, [r7, #4]
10002d0c:	2b01      	cmp	r3, #1
10002d0e:	dd0e      	ble.n	10002d2e <main+0x36>
10002d10:	683b      	ldr	r3, [r7, #0]
10002d12:	3304      	adds	r3, #4
10002d14:	681a      	ldr	r2, [r3, #0]
10002d16:	4b20      	ldr	r3, [pc, #128]	; (10002d98 <main+0xa0>)
10002d18:	1c10      	adds	r0, r2, #0
10002d1a:	1c19      	adds	r1, r3, #0
10002d1c:	f007 fd40 	bl	1000a7a0 <strcmp>
10002d20:	1c03      	adds	r3, r0, #0
10002d22:	2b00      	cmp	r3, #0
10002d24:	d103      	bne.n	10002d2e <main+0x36>
		runAsTest = ET_TRUE;
10002d26:	1c3b      	adds	r3, r7, #0
10002d28:	330f      	adds	r3, #15
10002d2a:	2201      	movs	r2, #1
10002d2c:	701a      	strb	r2, [r3, #0]
	if (argc>1 && strcmp(argv[1], "-run_as_test")==0)
10002d2e:	687b      	ldr	r3, [r7, #4]
10002d30:	2b01      	cmp	r3, #1
10002d32:	dd0e      	ble.n	10002d52 <main+0x5a>
10002d34:	683b      	ldr	r3, [r7, #0]
10002d36:	3304      	adds	r3, #4
10002d38:	681a      	ldr	r2, [r3, #0]
10002d3a:	4b18      	ldr	r3, [pc, #96]	; (10002d9c <main+0xa4>)
10002d3c:	1c10      	adds	r0, r2, #0
10002d3e:	1c19      	adds	r1, r3, #0
10002d40:	f007 fd2e 	bl	1000a7a0 <strcmp>
10002d44:	1c03      	adds	r3, r0, #0
10002d46:	2b00      	cmp	r3, #0
10002d48:	d103      	bne.n	10002d52 <main+0x5a>
		runAsTest = ET_TRUE;
10002d4a:	1c3b      	adds	r3, r7, #0
10002d4c:	330f      	adds	r3, #15
10002d4e:	2201      	movs	r2, #1
10002d50:	701a      	strb	r2, [r3, #0]

	etUserEntry(); /* platform specific */
10002d52:	f003 f909 	bl	10005f68 <etUserEntry>
	
	etLogger_logInfo("***   T H E   B E G I N   ***");
10002d56:	4b12      	ldr	r3, [pc, #72]	; (10002da0 <main+0xa8>)
10002d58:	1c18      	adds	r0, r3, #0
10002d5a:	f003 f8c5 	bl	10005ee8 <etLogger_logInfo>
	ET_MSC_LOGGER_OPEN("main");

	/* startup sequence  of lifecycle */
	XMC2Go_PingPong_subSysRef_init(); 		/* lifecycle init */
10002d5e:	f7ff ff37 	bl	10002bd0 <XMC2Go_PingPong_subSysRef_init>
	XMC2Go_PingPong_subSysRef_start(); 	/* lifecycle start */
10002d62:	f7ff ff4b 	bl	10002bfc <XMC2Go_PingPong_subSysRef_start>

	etUserPreRun(); /* platform specific */
10002d66:	f003 f905 	bl	10005f74 <etUserPreRun>

	/* run Scheduler */
	XMC2Go_PingPong_subSysRef_run(runAsTest);
10002d6a:	1c3b      	adds	r3, r7, #0
10002d6c:	330f      	adds	r3, #15
10002d6e:	781b      	ldrb	r3, [r3, #0]
10002d70:	1c18      	adds	r0, r3, #0
10002d72:	f7ff ff55 	bl	10002c20 <XMC2Go_PingPong_subSysRef_run>

	etUserPostRun(); /* platform specific */
10002d76:	f003 f903 	bl	10005f80 <etUserPostRun>

	/* shutdown sequence of lifecycle */
	XMC2Go_PingPong_subSysRef_stop(); 		/* lifecycle stop */
10002d7a:	f7ff ff5b 	bl	10002c34 <XMC2Go_PingPong_subSysRef_stop>
	XMC2Go_PingPong_subSysRef_destroy(); 	/* lifecycle destroy */
10002d7e:	f7ff ff6b 	bl	10002c58 <XMC2Go_PingPong_subSysRef_destroy>

	ET_MSC_LOGGER_CLOSE
	etLogger_logInfo("***   T H E   E N D   ***");
10002d82:	4b08      	ldr	r3, [pc, #32]	; (10002da4 <main+0xac>)
10002d84:	1c18      	adds	r0, r3, #0
10002d86:	f003 f8af 	bl	10005ee8 <etLogger_logInfo>

	etUserExit(); /* platform specific */
10002d8a:	f003 f8fd 	bl	10005f88 <etUserExit>

	return 0;
10002d8e:	2300      	movs	r3, #0
}
10002d90:	1c18      	adds	r0, r3, #0
10002d92:	46bd      	mov	sp, r7
10002d94:	b004      	add	sp, #16
10002d96:	bd80      	pop	{r7, pc}
10002d98:	1000aafc 	.word	0x1000aafc
10002d9c:	1000ab08 	.word	0x1000ab08
10002da0:	1000ab18 	.word	0x1000ab18
10002da4:	1000ab38 	.word	0x1000ab38

10002da8 <PIO004ReplPort_getReplication>:
#include "debugging/etMSCLogger.h"
#include "PIO004_Utils.h"


/*--------------------- port methods */
etInt32 PIO004ReplPort_getReplication(const PIO004ReplPort* self) {
10002da8:	b580      	push	{r7, lr}
10002daa:	b082      	sub	sp, #8
10002dac:	af00      	add	r7, sp, #0
10002dae:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002db0:	687b      	ldr	r3, [r7, #4]
10002db2:	881b      	ldrh	r3, [r3, #0]
10002db4:	b21b      	sxth	r3, r3
}
10002db6:	1c18      	adds	r0, r3, #0
10002db8:	46bd      	mov	sp, r7
10002dba:	b002      	add	sp, #8
10002dbc:	bd80      	pop	{r7, pc}
10002dbe:	46c0      	nop			; (mov r8, r8)

10002dc0 <PIO004ConjPort_setInstance>:


/* begin PIO004ConjPort specific */

/*--------------------- operations ---------------------*/
void PIO004ConjPort_setInstance(PIO004ConjPort* self, uint32 data) {
10002dc0:	b580      	push	{r7, lr}
10002dc2:	b082      	sub	sp, #8
10002dc4:	af00      	add	r7, sp, #0
10002dc6:	6078      	str	r0, [r7, #4]
10002dc8:	6039      	str	r1, [r7, #0]
	switch(data){
10002dca:	683b      	ldr	r3, [r7, #0]
10002dcc:	2b00      	cmp	r3, #0
10002dce:	d002      	beq.n	10002dd6 <PIO004ConjPort_setInstance+0x16>
10002dd0:	2b01      	cmp	r3, #1
10002dd2:	d006      	beq.n	10002de2 <PIO004ConjPort_setInstance+0x22>
10002dd4:	e00b      	b.n	10002dee <PIO004ConjPort_setInstance+0x2e>
	    case 0: Handle=IO004_Handle0;
10002dd6:	687b      	ldr	r3, [r7, #4]
10002dd8:	681b      	ldr	r3, [r3, #0]
10002dda:	4a07      	ldr	r2, [pc, #28]	; (10002df8 <PIO004ConjPort_setInstance+0x38>)
10002ddc:	ca03      	ldmia	r2!, {r0, r1}
10002dde:	c303      	stmia	r3!, {r0, r1}
			break;
10002de0:	e006      	b.n	10002df0 <PIO004ConjPort_setInstance+0x30>
	    case 1: Handle=IO004_Handle1;
10002de2:	687b      	ldr	r3, [r7, #4]
10002de4:	681b      	ldr	r3, [r3, #0]
10002de6:	4a05      	ldr	r2, [pc, #20]	; (10002dfc <PIO004ConjPort_setInstance+0x3c>)
10002de8:	ca03      	ldmia	r2!, {r0, r1}
10002dea:	c303      	stmia	r3!, {r0, r1}
			break;
10002dec:	e000      	b.n	10002df0 <PIO004ConjPort_setInstance+0x30>
	    default: break;
10002dee:	46c0      	nop			; (mov r8, r8)
	    }
}
10002df0:	46bd      	mov	sp, r7
10002df2:	b002      	add	sp, #8
10002df4:	bd80      	pop	{r7, pc}
10002df6:	46c0      	nop			; (mov r8, r8)
10002df8:	1000ac18 	.word	0x1000ac18
10002dfc:	1000ac20 	.word	0x1000ac20

10002e00 <PIO004ConjPort_readPin>:
uint32 PIO004ConjPort_readPin(PIO004ConjPort* self) {
10002e00:	b580      	push	{r7, lr}
10002e02:	b082      	sub	sp, #8
10002e04:	af00      	add	r7, sp, #0
10002e06:	6078      	str	r0, [r7, #4]
	return IO004_ReadPin(Handle);
10002e08:	687b      	ldr	r3, [r7, #4]
10002e0a:	681b      	ldr	r3, [r3, #0]
10002e0c:	685b      	ldr	r3, [r3, #4]
10002e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002e10:	687b      	ldr	r3, [r7, #4]
10002e12:	681b      	ldr	r3, [r3, #0]
10002e14:	785b      	ldrb	r3, [r3, #1]
10002e16:	40da      	lsrs	r2, r3
10002e18:	2301      	movs	r3, #1
10002e1a:	4013      	ands	r3, r2
}
10002e1c:	1c18      	adds	r0, r3, #0
10002e1e:	46bd      	mov	sp, r7
10002e20:	b002      	add	sp, #8
10002e22:	bd80      	pop	{r7, pc}

10002e24 <PIO004ConjPort_setPin>:
void PIO004ConjPort_setPin(PIO004ConjPort* self) {
10002e24:	b580      	push	{r7, lr}
10002e26:	b082      	sub	sp, #8
10002e28:	af00      	add	r7, sp, #0
10002e2a:	6078      	str	r0, [r7, #4]
	IO004_SetPin(Handle);
10002e2c:	687b      	ldr	r3, [r7, #4]
10002e2e:	681b      	ldr	r3, [r3, #0]
10002e30:	685b      	ldr	r3, [r3, #4]
10002e32:	687a      	ldr	r2, [r7, #4]
10002e34:	6812      	ldr	r2, [r2, #0]
10002e36:	7852      	ldrb	r2, [r2, #1]
10002e38:	2101      	movs	r1, #1
10002e3a:	1c08      	adds	r0, r1, #0
10002e3c:	4090      	lsls	r0, r2
10002e3e:	1c02      	adds	r2, r0, #0
10002e40:	605a      	str	r2, [r3, #4]
}
10002e42:	46bd      	mov	sp, r7
10002e44:	b002      	add	sp, #8
10002e46:	bd80      	pop	{r7, pc}

10002e48 <PIO004ConjPort_setOutputValue>:
void PIO004ConjPort_setOutputValue(PIO004ConjPort* self, boolean Value) {
10002e48:	b580      	push	{r7, lr}
10002e4a:	b082      	sub	sp, #8
10002e4c:	af00      	add	r7, sp, #0
10002e4e:	6078      	str	r0, [r7, #4]
10002e50:	1c0a      	adds	r2, r1, #0
10002e52:	1cfb      	adds	r3, r7, #3
10002e54:	701a      	strb	r2, [r3, #0]
	IO004_SetOutputValue(Handle,Value);
10002e56:	687b      	ldr	r3, [r7, #4]
10002e58:	681b      	ldr	r3, [r3, #0]
10002e5a:	685b      	ldr	r3, [r3, #4]
10002e5c:	1cfa      	adds	r2, r7, #3
10002e5e:	7812      	ldrb	r2, [r2, #0]
10002e60:	2a00      	cmp	r2, #0
10002e62:	d007      	beq.n	10002e74 <PIO004ConjPort_setOutputValue+0x2c>
10002e64:	687a      	ldr	r2, [r7, #4]
10002e66:	6812      	ldr	r2, [r2, #0]
10002e68:	7852      	ldrb	r2, [r2, #1]
10002e6a:	2101      	movs	r1, #1
10002e6c:	1c08      	adds	r0, r1, #0
10002e6e:	4090      	lsls	r0, r2
10002e70:	1c02      	adds	r2, r0, #0
10002e72:	e007      	b.n	10002e84 <PIO004ConjPort_setOutputValue+0x3c>
10002e74:	687a      	ldr	r2, [r7, #4]
10002e76:	6812      	ldr	r2, [r2, #0]
10002e78:	7852      	ldrb	r2, [r2, #1]
10002e7a:	2180      	movs	r1, #128	; 0x80
10002e7c:	0249      	lsls	r1, r1, #9
10002e7e:	1c08      	adds	r0, r1, #0
10002e80:	4090      	lsls	r0, r2
10002e82:	1c02      	adds	r2, r0, #0
10002e84:	605a      	str	r2, [r3, #4]
}
10002e86:	46bd      	mov	sp, r7
10002e88:	b002      	add	sp, #8
10002e8a:	bd80      	pop	{r7, pc}

10002e8c <PIO004ConjPort_resetPin>:
void PIO004ConjPort_resetPin(PIO004ConjPort* self) {
10002e8c:	b580      	push	{r7, lr}
10002e8e:	b082      	sub	sp, #8
10002e90:	af00      	add	r7, sp, #0
10002e92:	6078      	str	r0, [r7, #4]
	IO004_ResetPin(Handle);
10002e94:	687b      	ldr	r3, [r7, #4]
10002e96:	681b      	ldr	r3, [r3, #0]
10002e98:	685b      	ldr	r3, [r3, #4]
10002e9a:	687a      	ldr	r2, [r7, #4]
10002e9c:	6812      	ldr	r2, [r2, #0]
10002e9e:	7852      	ldrb	r2, [r2, #1]
10002ea0:	2180      	movs	r1, #128	; 0x80
10002ea2:	0249      	lsls	r1, r1, #9
10002ea4:	1c08      	adds	r0, r1, #0
10002ea6:	4090      	lsls	r0, r2
10002ea8:	1c02      	adds	r2, r0, #0
10002eaa:	605a      	str	r2, [r3, #4]
}
10002eac:	46bd      	mov	sp, r7
10002eae:	b002      	add	sp, #8
10002eb0:	bd80      	pop	{r7, pc}
10002eb2:	46c0      	nop			; (mov r8, r8)

10002eb4 <PIO004ConjPort_togglePin>:
void PIO004ConjPort_togglePin(PIO004ConjPort* self) {
10002eb4:	b580      	push	{r7, lr}
10002eb6:	b082      	sub	sp, #8
10002eb8:	af00      	add	r7, sp, #0
10002eba:	6078      	str	r0, [r7, #4]
	IO004_TogglePin(Handle);
10002ebc:	687b      	ldr	r3, [r7, #4]
10002ebe:	681b      	ldr	r3, [r3, #0]
10002ec0:	685b      	ldr	r3, [r3, #4]
10002ec2:	687a      	ldr	r2, [r7, #4]
10002ec4:	6812      	ldr	r2, [r2, #0]
10002ec6:	7852      	ldrb	r2, [r2, #1]
10002ec8:	4903      	ldr	r1, [pc, #12]	; (10002ed8 <PIO004ConjPort_togglePin+0x24>)
10002eca:	1c08      	adds	r0, r1, #0
10002ecc:	4090      	lsls	r0, r2
10002ece:	1c02      	adds	r2, r0, #0
10002ed0:	605a      	str	r2, [r3, #4]
}
10002ed2:	46bd      	mov	sp, r7
10002ed4:	b002      	add	sp, #8
10002ed6:	bd80      	pop	{r7, pc}
10002ed8:	00010001 	.word	0x00010001

10002edc <PIO004ConjPort_disableOutputBuffer>:
void PIO004ConjPort_disableOutputBuffer(PIO004ConjPort* self, IO004_InputModeType mode) {
10002edc:	b580      	push	{r7, lr}
10002ede:	b082      	sub	sp, #8
10002ee0:	af00      	add	r7, sp, #0
10002ee2:	6078      	str	r0, [r7, #4]
10002ee4:	1c0a      	adds	r2, r1, #0
10002ee6:	1cfb      	adds	r3, r7, #3
10002ee8:	701a      	strb	r2, [r3, #0]
	IO004_DisableOutputDriver(&Handle,mode);
10002eea:	687b      	ldr	r3, [r7, #4]
10002eec:	681b      	ldr	r3, [r3, #0]
10002eee:	1c1a      	adds	r2, r3, #0
10002ef0:	1cfb      	adds	r3, r7, #3
10002ef2:	781b      	ldrb	r3, [r3, #0]
10002ef4:	1c10      	adds	r0, r2, #0
10002ef6:	1c19      	adds	r1, r3, #0
10002ef8:	f002 fc1e 	bl	10005738 <IO004_DisableOutputDriver>
}
10002efc:	46bd      	mov	sp, r7
10002efe:	b002      	add	sp, #8
10002f00:	bd80      	pop	{r7, pc}
10002f02:	46c0      	nop			; (mov r8, r8)

10002f04 <PIO004ConjPort_enableOutputBuffer>:
void PIO004ConjPort_enableOutputBuffer(PIO004ConjPort* self, IO004_InputModeType mode) {
10002f04:	b580      	push	{r7, lr}
10002f06:	b082      	sub	sp, #8
10002f08:	af00      	add	r7, sp, #0
10002f0a:	6078      	str	r0, [r7, #4]
10002f0c:	1c0a      	adds	r2, r1, #0
10002f0e:	1cfb      	adds	r3, r7, #3
10002f10:	701a      	strb	r2, [r3, #0]
	IO004_EnableOutputDriver(&Handle,mode);
10002f12:	687b      	ldr	r3, [r7, #4]
10002f14:	681b      	ldr	r3, [r3, #0]
10002f16:	1c1a      	adds	r2, r3, #0
10002f18:	1cfb      	adds	r3, r7, #3
10002f1a:	781b      	ldrb	r3, [r3, #0]
10002f1c:	1c10      	adds	r0, r2, #0
10002f1e:	1c19      	adds	r1, r3, #0
10002f20:	f002 fce4 	bl	100058ec <IO004_EnableOutputDriver>
}
10002f24:	46bd      	mov	sp, r7
10002f26:	b002      	add	sp, #8
10002f28:	bd80      	pop	{r7, pc}
10002f2a:	46c0      	nop			; (mov r8, r8)

10002f2c <PIO004ConjReplPort_getReplication>:
/* end PIO004ConjPort specific */

etInt32 PIO004ConjReplPort_getReplication(const PIO004ConjReplPort* self) {
10002f2c:	b580      	push	{r7, lr}
10002f2e:	b082      	sub	sp, #8
10002f30:	af00      	add	r7, sp, #0
10002f32:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002f34:	687b      	ldr	r3, [r7, #4]
10002f36:	881b      	ldrh	r3, [r3, #0]
10002f38:	b21b      	sxth	r3, r3
}
10002f3a:	1c18      	adds	r0, r3, #0
10002f3c:	46bd      	mov	sp, r7
10002f3e:	b002      	add	sp, #8
10002f40:	bd80      	pop	{r7, pc}
10002f42:	46c0      	nop			; (mov r8, r8)

10002f44 <PUART001ReplPort_getReplication>:
#include "debugging/etMSCLogger.h"
#include "PUART001_Utils.h"


/*--------------------- port methods */
etInt32 PUART001ReplPort_getReplication(const PUART001ReplPort* self) {
10002f44:	b580      	push	{r7, lr}
10002f46:	b082      	sub	sp, #8
10002f48:	af00      	add	r7, sp, #0
10002f4a:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10002f4c:	687b      	ldr	r3, [r7, #4]
10002f4e:	881b      	ldrh	r3, [r3, #0]
10002f50:	b21b      	sxth	r3, r3
}
10002f52:	1c18      	adds	r0, r3, #0
10002f54:	46bd      	mov	sp, r7
10002f56:	b002      	add	sp, #8
10002f58:	bd80      	pop	{r7, pc}
10002f5a:	46c0      	nop			; (mov r8, r8)

10002f5c <PUART001ConjPort_dummy>:



void PUART001ConjPort_dummy(const PUART001ConjPort* self) {
10002f5c:	b580      	push	{r7, lr}
10002f5e:	b082      	sub	sp, #8
10002f60:	af00      	add	r7, sp, #0
10002f62:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("PUART001ConjPort", "dummy")
		etPort_sendMessage(self, PUART001_IN_dummy, 0, NULL);
10002f64:	687b      	ldr	r3, [r7, #4]
10002f66:	1c18      	adds	r0, r3, #0
10002f68:	2101      	movs	r1, #1
10002f6a:	2200      	movs	r2, #0
10002f6c:	2300      	movs	r3, #0
10002f6e:	f003 f85f 	bl	10006030 <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
10002f72:	46bd      	mov	sp, r7
10002f74:	b002      	add	sp, #8
10002f76:	bd80      	pop	{r7, pc}

10002f78 <PUART001ConjReplPort_dummy_broadcast>:

void PUART001ConjReplPort_dummy_broadcast(const PUART001ConjReplPort* self) {
10002f78:	b580      	push	{r7, lr}
10002f7a:	b084      	sub	sp, #16
10002f7c:	af00      	add	r7, sp, #0
10002f7e:	6078      	str	r0, [r7, #4]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PUART001ConjReplPort", "dummy")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10002f80:	2300      	movs	r3, #0
10002f82:	60fb      	str	r3, [r7, #12]
10002f84:	e00d      	b.n	10002fa2 <PUART001ConjReplPort_dummy_broadcast+0x2a>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PUART001_IN_dummy, 0, NULL);
10002f86:	687b      	ldr	r3, [r7, #4]
10002f88:	685a      	ldr	r2, [r3, #4]
10002f8a:	68fb      	ldr	r3, [r7, #12]
10002f8c:	011b      	lsls	r3, r3, #4
10002f8e:	18d3      	adds	r3, r2, r3
10002f90:	1c18      	adds	r0, r3, #0
10002f92:	2101      	movs	r1, #1
10002f94:	2200      	movs	r2, #0
10002f96:	2300      	movs	r3, #0
10002f98:	f003 f84a 	bl	10006030 <etPort_sendMessage>
}

void PUART001ConjReplPort_dummy_broadcast(const PUART001ConjReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PUART001ConjReplPort", "dummy")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10002f9c:	68fb      	ldr	r3, [r7, #12]
10002f9e:	3301      	adds	r3, #1
10002fa0:	60fb      	str	r3, [r7, #12]
10002fa2:	687b      	ldr	r3, [r7, #4]
10002fa4:	881b      	ldrh	r3, [r3, #0]
10002fa6:	b21a      	sxth	r2, r3
10002fa8:	68fb      	ldr	r3, [r7, #12]
10002faa:	429a      	cmp	r2, r3
10002fac:	dceb      	bgt.n	10002f86 <PUART001ConjReplPort_dummy_broadcast+0xe>
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PUART001_IN_dummy, 0, NULL);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10002fae:	46bd      	mov	sp, r7
10002fb0:	b004      	add	sp, #16
10002fb2:	bd80      	pop	{r7, pc}

10002fb4 <PUART001ConjReplPort_dummy>:

void PUART001ConjReplPort_dummy(const PUART001ConjReplPort* self, int idx__et) {
10002fb4:	b580      	push	{r7, lr}
10002fb6:	b082      	sub	sp, #8
10002fb8:	af00      	add	r7, sp, #0
10002fba:	6078      	str	r0, [r7, #4]
10002fbc:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("PUART001ConjReplPort", "dummy")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
10002fbe:	683b      	ldr	r3, [r7, #0]
10002fc0:	2b00      	cmp	r3, #0
10002fc2:	db10      	blt.n	10002fe6 <PUART001ConjReplPort_dummy+0x32>
10002fc4:	687b      	ldr	r3, [r7, #4]
10002fc6:	881b      	ldrh	r3, [r3, #0]
10002fc8:	b21a      	sxth	r2, r3
10002fca:	683b      	ldr	r3, [r7, #0]
10002fcc:	429a      	cmp	r2, r3
10002fce:	dd0a      	ble.n	10002fe6 <PUART001ConjReplPort_dummy+0x32>
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PUART001_IN_dummy, 0, NULL);
10002fd0:	687b      	ldr	r3, [r7, #4]
10002fd2:	685a      	ldr	r2, [r3, #4]
10002fd4:	683b      	ldr	r3, [r7, #0]
10002fd6:	011b      	lsls	r3, r3, #4
10002fd8:	18d3      	adds	r3, r2, r3
10002fda:	1c18      	adds	r0, r3, #0
10002fdc:	2101      	movs	r1, #1
10002fde:	2200      	movs	r2, #0
10002fe0:	2300      	movs	r3, #0
10002fe2:	f003 f825 	bl	10006030 <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10002fe6:	46bd      	mov	sp, r7
10002fe8:	b002      	add	sp, #8
10002fea:	bd80      	pop	{r7, pc}

10002fec <PUART001ConjPort_setInstance>:

/* begin PUART001ConjPort specific */

/*--------------------- operations ---------------------*/
void PUART001ConjPort_setInstance(PUART001ConjPort* self, uint32 data) {
10002fec:	b580      	push	{r7, lr}
10002fee:	b082      	sub	sp, #8
10002ff0:	af00      	add	r7, sp, #0
10002ff2:	6078      	str	r0, [r7, #4]
10002ff4:	6039      	str	r1, [r7, #0]
	Handle=UART001_HandleArray[data];
10002ff6:	687b      	ldr	r3, [r7, #4]
10002ff8:	681b      	ldr	r3, [r3, #0]
10002ffa:	4a04      	ldr	r2, [pc, #16]	; (1000300c <PUART001ConjPort_setInstance+0x20>)
10002ffc:	6839      	ldr	r1, [r7, #0]
10002ffe:	0089      	lsls	r1, r1, #2
10003000:	588a      	ldr	r2, [r1, r2]
10003002:	601a      	str	r2, [r3, #0]
}
10003004:	46bd      	mov	sp, r7
10003006:	b002      	add	sp, #8
10003008:	bd80      	pop	{r7, pc}
1000300a:	46c0      	nop			; (mov r8, r8)
1000300c:	200020a0 	.word	0x200020a0

10003010 <PUART001ConjPort_readDataBytes>:
uint32 PUART001ConjPort_readDataBytes(PUART001ConjPort* self, uint8* buffer, uint32 count) {
10003010:	b580      	push	{r7, lr}
10003012:	b084      	sub	sp, #16
10003014:	af00      	add	r7, sp, #0
10003016:	60f8      	str	r0, [r7, #12]
10003018:	60b9      	str	r1, [r7, #8]
1000301a:	607a      	str	r2, [r7, #4]
	if (Handle != 0){
1000301c:	68fb      	ldr	r3, [r7, #12]
1000301e:	681b      	ldr	r3, [r3, #0]
10003020:	681b      	ldr	r3, [r3, #0]
10003022:	2b00      	cmp	r3, #0
10003024:	d00b      	beq.n	1000303e <PUART001ConjPort_readDataBytes+0x2e>
		return UART001_ReadDataBytes(Handle,buffer,count);}
10003026:	68fb      	ldr	r3, [r7, #12]
10003028:	681b      	ldr	r3, [r3, #0]
1000302a:	6819      	ldr	r1, [r3, #0]
1000302c:	68ba      	ldr	r2, [r7, #8]
1000302e:	687b      	ldr	r3, [r7, #4]
10003030:	1c08      	adds	r0, r1, #0
10003032:	1c11      	adds	r1, r2, #0
10003034:	1c1a      	adds	r2, r3, #0
10003036:	f000 fea9 	bl	10003d8c <UART001_ReadDataBytes>
1000303a:	1c03      	adds	r3, r0, #0
1000303c:	e000      	b.n	10003040 <PUART001ConjPort_readDataBytes+0x30>
	return 0;
1000303e:	2300      	movs	r3, #0
}
10003040:	1c18      	adds	r0, r3, #0
10003042:	46bd      	mov	sp, r7
10003044:	b004      	add	sp, #16
10003046:	bd80      	pop	{r7, pc}

10003048 <PUART001ConjPort_writeDataBytes>:
uint32 PUART001ConjPort_writeDataBytes(PUART001ConjPort* self, uint8* buffer, uint32 count) {
10003048:	b580      	push	{r7, lr}
1000304a:	b084      	sub	sp, #16
1000304c:	af00      	add	r7, sp, #0
1000304e:	60f8      	str	r0, [r7, #12]
10003050:	60b9      	str	r1, [r7, #8]
10003052:	607a      	str	r2, [r7, #4]
	if (Handle != 0){
10003054:	68fb      	ldr	r3, [r7, #12]
10003056:	681b      	ldr	r3, [r3, #0]
10003058:	681b      	ldr	r3, [r3, #0]
1000305a:	2b00      	cmp	r3, #0
1000305c:	d00b      	beq.n	10003076 <PUART001ConjPort_writeDataBytes+0x2e>
	   return UART001_WriteDataBytes(Handle,buffer,count);}
1000305e:	68fb      	ldr	r3, [r7, #12]
10003060:	681b      	ldr	r3, [r3, #0]
10003062:	6819      	ldr	r1, [r3, #0]
10003064:	68ba      	ldr	r2, [r7, #8]
10003066:	687b      	ldr	r3, [r7, #4]
10003068:	1c08      	adds	r0, r1, #0
1000306a:	1c11      	adds	r1, r2, #0
1000306c:	1c1a      	adds	r2, r3, #0
1000306e:	f000 ff07 	bl	10003e80 <UART001_WriteDataBytes>
10003072:	1c03      	adds	r3, r0, #0
10003074:	e000      	b.n	10003078 <PUART001ConjPort_writeDataBytes+0x30>
	return 0;
10003076:	2300      	movs	r3, #0
}
10003078:	1c18      	adds	r0, r3, #0
1000307a:	46bd      	mov	sp, r7
1000307c:	b004      	add	sp, #16
1000307e:	bd80      	pop	{r7, pc}

10003080 <PUART001ConjReplPort_getReplication>:
/* end PUART001ConjPort specific */

etInt32 PUART001ConjReplPort_getReplication(const PUART001ConjReplPort* self) {
10003080:	b580      	push	{r7, lr}
10003082:	b082      	sub	sp, #8
10003084:	af00      	add	r7, sp, #0
10003086:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10003088:	687b      	ldr	r3, [r7, #4]
1000308a:	881b      	ldrh	r3, [r3, #0]
1000308c:	b21b      	sxth	r3, r3
}
1000308e:	1c18      	adds	r0, r3, #0
10003090:	46bd      	mov	sp, r7
10003092:	b002      	add	sp, #8
10003094:	bd80      	pop	{r7, pc}
10003096:	46c0      	nop			; (mov r8, r8)

10003098 <PWMSP001ReplPort_getReplication>:
#include "debugging/etMSCLogger.h"
#include "PWMSP001_Utils.h"


/*--------------------- port methods */
etInt32 PWMSP001ReplPort_getReplication(const PWMSP001ReplPort* self) {
10003098:	b580      	push	{r7, lr}
1000309a:	b082      	sub	sp, #8
1000309c:	af00      	add	r7, sp, #0
1000309e:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
100030a0:	687b      	ldr	r3, [r7, #4]
100030a2:	881b      	ldrh	r3, [r3, #0]
100030a4:	b21b      	sxth	r3, r3
}
100030a6:	1c18      	adds	r0, r3, #0
100030a8:	46bd      	mov	sp, r7
100030aa:	b002      	add	sp, #8
100030ac:	bd80      	pop	{r7, pc}
100030ae:	46c0      	nop			; (mov r8, r8)

100030b0 <PWMSP001ConjPort_setInstance>:


/* begin PWMSP001ConjPort specific */

/*--------------------- operations ---------------------*/
void PWMSP001ConjPort_setInstance(PWMSP001ConjPort* self, uint32 data) {
100030b0:	b580      	push	{r7, lr}
100030b2:	b082      	sub	sp, #8
100030b4:	af00      	add	r7, sp, #0
100030b6:	6078      	str	r0, [r7, #4]
100030b8:	6039      	str	r1, [r7, #0]
	switch(data){
100030ba:	683b      	ldr	r3, [r7, #0]
100030bc:	2b00      	cmp	r3, #0
100030be:	d002      	beq.n	100030c6 <PWMSP001ConjPort_setInstance+0x16>
100030c0:	2b01      	cmp	r3, #1
100030c2:	d005      	beq.n	100030d0 <PWMSP001ConjPort_setInstance+0x20>
100030c4:	e009      	b.n	100030da <PWMSP001ConjPort_setInstance+0x2a>
	    case 0: Handle=&PWMSP001_Handle0;
100030c6:	687b      	ldr	r3, [r7, #4]
100030c8:	681b      	ldr	r3, [r3, #0]
100030ca:	4a06      	ldr	r2, [pc, #24]	; (100030e4 <PWMSP001ConjPort_setInstance+0x34>)
100030cc:	601a      	str	r2, [r3, #0]
			break;
100030ce:	e005      	b.n	100030dc <PWMSP001ConjPort_setInstance+0x2c>
	    case 1: Handle=&PWMSP001_Handle1;
100030d0:	687b      	ldr	r3, [r7, #4]
100030d2:	681b      	ldr	r3, [r3, #0]
100030d4:	4a04      	ldr	r2, [pc, #16]	; (100030e8 <PWMSP001ConjPort_setInstance+0x38>)
100030d6:	601a      	str	r2, [r3, #0]
			break;
100030d8:	e000      	b.n	100030dc <PWMSP001ConjPort_setInstance+0x2c>
	    default: break;
100030da:	46c0      	nop			; (mov r8, r8)
	    }
}
100030dc:	46bd      	mov	sp, r7
100030de:	b002      	add	sp, #8
100030e0:	bd80      	pop	{r7, pc}
100030e2:	46c0      	nop			; (mov r8, r8)
100030e4:	1000ab88 	.word	0x1000ab88
100030e8:	1000abd0 	.word	0x1000abd0

100030ec <PWMSP001ConjPort_setDutyCycle>:
void PWMSP001ConjPort_setDutyCycle(PWMSP001ConjPort* self, uint8 dc) {
100030ec:	b590      	push	{r4, r7, lr}
100030ee:	b083      	sub	sp, #12
100030f0:	af00      	add	r7, sp, #0
100030f2:	6078      	str	r0, [r7, #4]
100030f4:	1c0a      	adds	r2, r1, #0
100030f6:	1cfb      	adds	r3, r7, #3
100030f8:	701a      	strb	r2, [r3, #0]
	PWMSP001_SetDutyCycle(Handle, dc);
100030fa:	687b      	ldr	r3, [r7, #4]
100030fc:	681b      	ldr	r3, [r3, #0]
100030fe:	681c      	ldr	r4, [r3, #0]
10003100:	1cfb      	adds	r3, r7, #3
10003102:	781b      	ldrb	r3, [r3, #0]
10003104:	1c18      	adds	r0, r3, #0
10003106:	f007 f951 	bl	1000a3ac <__aeabi_ui2f>
1000310a:	1c03      	adds	r3, r0, #0
1000310c:	1c20      	adds	r0, r4, #0
1000310e:	1c19      	adds	r1, r3, #0
10003110:	f001 fbc4 	bl	1000489c <PWMSP001_SetDutyCycle>
}
10003114:	46bd      	mov	sp, r7
10003116:	b003      	add	sp, #12
10003118:	bd90      	pop	{r4, r7, pc}
1000311a:	46c0      	nop			; (mov r8, r8)

1000311c <PWMSP001ConjReplPort_getReplication>:
/* end PWMSP001ConjPort specific */

etInt32 PWMSP001ConjReplPort_getReplication(const PWMSP001ConjReplPort* self) {
1000311c:	b580      	push	{r7, lr}
1000311e:	b082      	sub	sp, #8
10003120:	af00      	add	r7, sp, #0
10003122:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
10003124:	687b      	ldr	r3, [r7, #4]
10003126:	881b      	ldrh	r3, [r3, #0]
10003128:	b21b      	sxth	r3, r3
}
1000312a:	1c18      	adds	r0, r3, #0
1000312c:	46bd      	mov	sp, r7
1000312e:	b002      	add	sp, #8
10003130:	bd80      	pop	{r7, pc}
10003132:	46c0      	nop			; (mov r8, r8)

10003134 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
10003134:	e7fe      	b.n	10003134 <NMI_Handler>

10003136 <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
10003136:	e7fe      	b.n	10003136 <HardFault_Handler>
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
10003138:	e7fe      	b.n	10003138 <HardFault_Handler+0x2>
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
1000313a:	e7fe      	b.n	1000313a <HardFault_Handler+0x4>
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
1000313c:	e7fe      	b.n	1000313c <HardFault_Handler+0x6>

1000313e <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
1000313e:	e7fe      	b.n	1000313e <SCU_0_IRQHandler>

10003140 <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
10003140:	e7fe      	b.n	10003140 <SCU_1_IRQHandler>

10003142 <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
10003142:	e7fe      	b.n	10003142 <SCU_2_IRQHandler>

10003144 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
10003144:	e7fe      	b.n	10003144 <ERU0_0_IRQHandler>

10003146 <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
10003146:	e7fe      	b.n	10003146 <ERU0_1_IRQHandler>

10003148 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
10003148:	e7fe      	b.n	10003148 <ERU0_2_IRQHandler>

1000314a <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
1000314a:	e7fe      	b.n	1000314a <ERU0_3_IRQHandler>

1000314c <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
1000314c:	e7fe      	b.n	1000314c <VADC0_C0_0_IRQHandler>

1000314e <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
1000314e:	e7fe      	b.n	1000314e <VADC0_C0_1_IRQHandler>

10003150 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
10003150:	e7fe      	b.n	10003150 <CCU40_0_IRQHandler>

10003152 <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
10003152:	e7fe      	b.n	10003152 <CCU40_1_IRQHandler>

10003154 <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
10003154:	e7fe      	b.n	10003154 <CCU40_2_IRQHandler>

10003156 <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
10003156:	e7fe      	b.n	10003156 <CCU40_3_IRQHandler>

10003158 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
10003158:	e7fe      	b.n	10003158 <USIC0_0_IRQHandler>

1000315a <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
1000315a:	e7fe      	b.n	1000315a <USIC0_1_IRQHandler>

1000315c <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
1000315c:	e7fe      	b.n	1000315c <USIC0_2_IRQHandler>

1000315e <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
1000315e:	e7fe      	b.n	1000315e <USIC0_3_IRQHandler>

10003160 <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
10003160:	e7fe      	b.n	10003160 <USIC0_4_IRQHandler>

10003162 <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
10003162:	e7fe      	b.n	10003162 <USIC0_5_IRQHandler>

10003164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
10003164:	b580      	push	{r7, lr}
10003166:	af00      	add	r7, sp, #0
   * while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
   * SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
   * SystemCoreClockUpdate();
   *
   */
  SystemCoreClockUpdate();
10003168:	f000 f802 	bl	10003170 <SystemCoreClockUpdate>
}
1000316c:	46bd      	mov	sp, r7
1000316e:	bd80      	pop	{r7, pc}

10003170 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10003170:	b580      	push	{r7, lr}
10003172:	b082      	sub	sp, #8
10003174:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10003176:	4b11      	ldr	r3, [pc, #68]	; (100031bc <SystemCoreClockUpdate+0x4c>)
10003178:	681a      	ldr	r2, [r3, #0]
1000317a:	23ff      	movs	r3, #255	; 0xff
1000317c:	021b      	lsls	r3, r3, #8
1000317e:	4013      	ands	r3, r2
10003180:	0a1b      	lsrs	r3, r3, #8
10003182:	607b      	str	r3, [r7, #4]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10003184:	4b0d      	ldr	r3, [pc, #52]	; (100031bc <SystemCoreClockUpdate+0x4c>)
10003186:	681a      	ldr	r2, [r3, #0]
10003188:	23ff      	movs	r3, #255	; 0xff
1000318a:	4013      	ands	r3, r2
1000318c:	603b      	str	r3, [r7, #0]
  
  if(IDIV)
1000318e:	687b      	ldr	r3, [r7, #4]
10003190:	2b00      	cmp	r3, #0
10003192:	d00c      	beq.n	100031ae <SystemCoreClockUpdate+0x3e>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((MCLK_MHZ << 7) / ((IDIV << 8) + FDIV)) << 1;
10003194:	687b      	ldr	r3, [r7, #4]
10003196:	021a      	lsls	r2, r3, #8
10003198:	683b      	ldr	r3, [r7, #0]
1000319a:	18d3      	adds	r3, r2, r3
1000319c:	4808      	ldr	r0, [pc, #32]	; (100031c0 <SystemCoreClockUpdate+0x50>)
1000319e:	1c19      	adds	r1, r3, #0
100031a0:	f006 fb46 	bl	10009830 <__aeabi_uidiv>
100031a4:	1c03      	adds	r3, r0, #0
100031a6:	005a      	lsls	r2, r3, #1
100031a8:	4b06      	ldr	r3, [pc, #24]	; (100031c4 <SystemCoreClockUpdate+0x54>)
100031aa:	601a      	str	r2, [r3, #0]
100031ac:	e002      	b.n	100031b4 <SystemCoreClockUpdate+0x44>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = MCLK_MHZ;
100031ae:	4b05      	ldr	r3, [pc, #20]	; (100031c4 <SystemCoreClockUpdate+0x54>)
100031b0:	4a05      	ldr	r2, [pc, #20]	; (100031c8 <SystemCoreClockUpdate+0x58>)
100031b2:	601a      	str	r2, [r3, #0]
  }
}
100031b4:	46bd      	mov	sp, r7
100031b6:	b002      	add	sp, #8
100031b8:	bd80      	pop	{r7, pc}
100031ba:	46c0      	nop			; (mov r8, r8)
100031bc:	40010300 	.word	0x40010300
100031c0:	f4240000 	.word	0xf4240000
100031c4:	20001fe0 	.word	0x20001fe0
100031c8:	01e84800 	.word	0x01e84800

100031cc <_open>:
/* ========================================================================= */
/*
 * File open
 */
__attribute__((weak)) int _open(const char *name, int flags, int mode)
{
100031cc:	b580      	push	{r7, lr}
100031ce:	b084      	sub	sp, #16
100031d0:	af00      	add	r7, sp, #0
100031d2:	60f8      	str	r0, [r7, #12]
100031d4:	60b9      	str	r1, [r7, #8]
100031d6:	607a      	str	r2, [r7, #4]
 flags = flags;
 mode = mode;
 return -1;
100031d8:	2301      	movs	r3, #1
100031da:	425b      	negs	r3, r3
}
100031dc:	1c18      	adds	r0, r3, #0
100031de:	46bd      	mov	sp, r7
100031e0:	b004      	add	sp, #16
100031e2:	bd80      	pop	{r7, pc}

100031e4 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
100031e4:	b580      	push	{r7, lr}
100031e6:	b084      	sub	sp, #16
100031e8:	af00      	add	r7, sp, #0
100031ea:	60f8      	str	r0, [r7, #12]
100031ec:	60b9      	str	r1, [r7, #8]
100031ee:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
100031f0:	2301      	movs	r3, #1
100031f2:	425b      	negs	r3, r3
}
100031f4:	1c18      	adds	r0, r3, #0
100031f6:	46bd      	mov	sp, r7
100031f8:	b004      	add	sp, #16
100031fa:	bd80      	pop	{r7, pc}

100031fc <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100031fc:	b580      	push	{r7, lr}
100031fe:	b084      	sub	sp, #16
10003200:	af00      	add	r7, sp, #0
10003202:	60f8      	str	r0, [r7, #12]
10003204:	60b9      	str	r1, [r7, #8]
10003206:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
10003208:	2300      	movs	r3, #0
}
1000320a:	1c18      	adds	r0, r3, #0
1000320c:	46bd      	mov	sp, r7
1000320e:	b004      	add	sp, #16
10003210:	bd80      	pop	{r7, pc}
10003212:	46c0      	nop			; (mov r8, r8)

10003214 <_write>:

/*
 * File write
 */
__attribute__((weak)) int _write(int file, char *buf, int nbytes)
{
10003214:	b580      	push	{r7, lr}
10003216:	b084      	sub	sp, #16
10003218:	af00      	add	r7, sp, #0
1000321a:	60f8      	str	r0, [r7, #12]
1000321c:	60b9      	str	r1, [r7, #8]
1000321e:	607a      	str	r2, [r7, #4]
 return -1;
10003220:	2301      	movs	r3, #1
10003222:	425b      	negs	r3, r3
}
10003224:	1c18      	adds	r0, r3, #0
10003226:	46bd      	mov	sp, r7
10003228:	b004      	add	sp, #16
1000322a:	bd80      	pop	{r7, pc}

1000322c <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
1000322c:	b580      	push	{r7, lr}
1000322e:	af00      	add	r7, sp, #0
 return -1;
10003230:	2301      	movs	r3, #1
10003232:	425b      	negs	r3, r3
}
10003234:	1c18      	adds	r0, r3, #0
10003236:	46bd      	mov	sp, r7
10003238:	bd80      	pop	{r7, pc}
1000323a:	46c0      	nop			; (mov r8, r8)

1000323c <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
1000323c:	b580      	push	{r7, lr}
1000323e:	b082      	sub	sp, #8
10003240:	af00      	add	r7, sp, #0
10003242:	6078      	str	r0, [r7, #4]
10003244:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
10003246:	683b      	ldr	r3, [r7, #0]
10003248:	2b00      	cmp	r3, #0
1000324a:	d002      	beq.n	10003252 <_fstat+0x16>
  return -1;
1000324c:	2301      	movs	r3, #1
1000324e:	425b      	negs	r3, r3
10003250:	e001      	b.n	10003256 <_fstat+0x1a>
 else
  return -2;
10003252:	2302      	movs	r3, #2
10003254:	425b      	negs	r3, r3
}
10003256:	1c18      	adds	r0, r3, #0
10003258:	46bd      	mov	sp, r7
1000325a:	b002      	add	sp, #8
1000325c:	bd80      	pop	{r7, pc}
1000325e:	46c0      	nop			; (mov r8, r8)

10003260 <_link>:
/*
 * File linking
 */
__attribute__((weak)) int _link (char *old, char *new)
{
10003260:	b580      	push	{r7, lr}
10003262:	b082      	sub	sp, #8
10003264:	af00      	add	r7, sp, #0
10003266:	6078      	str	r0, [r7, #4]
10003268:	6039      	str	r1, [r7, #0]
 if (old == new)
1000326a:	687a      	ldr	r2, [r7, #4]
1000326c:	683b      	ldr	r3, [r7, #0]
1000326e:	429a      	cmp	r2, r3
10003270:	d102      	bne.n	10003278 <_link+0x18>
  return -1;
10003272:	2301      	movs	r3, #1
10003274:	425b      	negs	r3, r3
10003276:	e001      	b.n	1000327c <_link+0x1c>
 else
  return -2;
10003278:	2302      	movs	r3, #2
1000327a:	425b      	negs	r3, r3
}
1000327c:	1c18      	adds	r0, r3, #0
1000327e:	46bd      	mov	sp, r7
10003280:	b002      	add	sp, #8
10003282:	bd80      	pop	{r7, pc}

10003284 <_unlink>:

/*
 * Unlinking directory entry
 */
__attribute__((weak)) int _unlink(char *name)
{
10003284:	b580      	push	{r7, lr}
10003286:	b082      	sub	sp, #8
10003288:	af00      	add	r7, sp, #0
1000328a:	6078      	str	r0, [r7, #4]
 return -1;
1000328c:	2301      	movs	r3, #1
1000328e:	425b      	negs	r3, r3
}
10003290:	1c18      	adds	r0, r3, #0
10003292:	46bd      	mov	sp, r7
10003294:	b002      	add	sp, #8
10003296:	bd80      	pop	{r7, pc}

10003298 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
10003298:	b580      	push	{r7, lr}
1000329a:	b086      	sub	sp, #24
1000329c:	af00      	add	r7, sp, #0
1000329e:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
100032a0:	4b14      	ldr	r3, [pc, #80]	; (100032f4 <_sbrk+0x5c>)
100032a2:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
100032a4:	4b14      	ldr	r3, [pc, #80]	; (100032f8 <_sbrk+0x60>)
100032a6:	681b      	ldr	r3, [r3, #0]
100032a8:	2b00      	cmp	r3, #0
100032aa:	d108      	bne.n	100032be <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
100032ac:	4b12      	ldr	r3, [pc, #72]	; (100032f8 <_sbrk+0x60>)
100032ae:	4a13      	ldr	r2, [pc, #76]	; (100032fc <_sbrk+0x64>)
100032b0:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
100032b2:	4b11      	ldr	r3, [pc, #68]	; (100032f8 <_sbrk+0x60>)
100032b4:	681a      	ldr	r2, [r3, #0]
100032b6:	697b      	ldr	r3, [r7, #20]
100032b8:	18d2      	adds	r2, r2, r3
100032ba:	4b11      	ldr	r3, [pc, #68]	; (10003300 <_sbrk+0x68>)
100032bc:	601a      	str	r2, [r3, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
100032be:	4b0e      	ldr	r3, [pc, #56]	; (100032f8 <_sbrk+0x60>)
100032c0:	681b      	ldr	r3, [r3, #0]
100032c2:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
100032c4:	4b0c      	ldr	r3, [pc, #48]	; (100032f8 <_sbrk+0x60>)
100032c6:	681b      	ldr	r3, [r3, #0]
100032c8:	1c1a      	adds	r2, r3, #0
100032ca:	687b      	ldr	r3, [r7, #4]
100032cc:	18d3      	adds	r3, r2, r3
100032ce:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
100032d0:	2207      	movs	r2, #7
100032d2:	4393      	bics	r3, r2
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
100032d4:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
100032d6:	4b0a      	ldr	r3, [pc, #40]	; (10003300 <_sbrk+0x68>)
100032d8:	681b      	ldr	r3, [r3, #0]
100032da:	68fa      	ldr	r2, [r7, #12]
100032dc:	429a      	cmp	r2, r3
100032de:	d301      	bcc.n	100032e4 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
100032e0:	2300      	movs	r3, #0
100032e2:	e003      	b.n	100032ec <_sbrk+0x54>
 else
 {
  heap = NextBreak;
100032e4:	4b04      	ldr	r3, [pc, #16]	; (100032f8 <_sbrk+0x60>)
100032e6:	68fa      	ldr	r2, [r7, #12]
100032e8:	601a      	str	r2, [r3, #0]
  return CurrBreak;
100032ea:	693b      	ldr	r3, [r7, #16]
 }
}
100032ec:	1c18      	adds	r0, r3, #0
100032ee:	46bd      	mov	sp, r7
100032f0:	b006      	add	sp, #24
100032f2:	bd80      	pop	{r7, pc}
100032f4:	00001f50 	.word	0x00001f50
100032f8:	20000ca8 	.word	0x20000ca8
100032fc:	200020b0 	.word	0x200020b0
10003300:	20000cac 	.word	0x20000cac

10003304 <_times>:
/* ========================================================================= */
/*
 * Process timing information
 */
__attribute__((weak)) int _times(struct tms *buf)
{
10003304:	b580      	push	{r7, lr}
10003306:	b082      	sub	sp, #8
10003308:	af00      	add	r7, sp, #0
1000330a:	6078      	str	r0, [r7, #4]
 return -1;
1000330c:	2301      	movs	r3, #1
1000330e:	425b      	negs	r3, r3
}
10003310:	1c18      	adds	r0, r3, #0
10003312:	46bd      	mov	sp, r7
10003314:	b002      	add	sp, #8
10003316:	bd80      	pop	{r7, pc}

10003318 <_wait>:
/*
 * Waiting for a child process to complete
 */
__attribute__((weak)) int _wait(int *status)
{
10003318:	b580      	push	{r7, lr}
1000331a:	b082      	sub	sp, #8
1000331c:	af00      	add	r7, sp, #0
1000331e:	6078      	str	r0, [r7, #4]
 return -1;
10003320:	2301      	movs	r3, #1
10003322:	425b      	negs	r3, r3
}
10003324:	1c18      	adds	r0, r3, #0
10003326:	46bd      	mov	sp, r7
10003328:	b002      	add	sp, #8
1000332a:	bd80      	pop	{r7, pc}

1000332c <_kill>:

/*
 * Kill a process
 */
__attribute__((weak)) int _kill(int pid,int sig)
{
1000332c:	b580      	push	{r7, lr}
1000332e:	b082      	sub	sp, #8
10003330:	af00      	add	r7, sp, #0
10003332:	6078      	str	r0, [r7, #4]
10003334:	6039      	str	r1, [r7, #0]
 pid = pid;
 sig = sig;
 return -1;
10003336:	2301      	movs	r3, #1
10003338:	425b      	negs	r3, r3
}
1000333a:	1c18      	adds	r0, r3, #0
1000333c:	46bd      	mov	sp, r7
1000333e:	b002      	add	sp, #8
10003340:	bd80      	pop	{r7, pc}
10003342:	46c0      	nop			; (mov r8, r8)

10003344 <_fork>:

/*
 * Forking a child process
 */
__attribute__((weak)) int _fork(void)
{
10003344:	b580      	push	{r7, lr}
10003346:	af00      	add	r7, sp, #0
 return -1;
10003348:	2301      	movs	r3, #1
1000334a:	425b      	negs	r3, r3
}
1000334c:	1c18      	adds	r0, r3, #0
1000334e:	46bd      	mov	sp, r7
10003350:	bd80      	pop	{r7, pc}
10003352:	46c0      	nop			; (mov r8, r8)

10003354 <_getpid>:

/*
 * Process ID
 */
__attribute__((weak)) int _getpid(void)
{
10003354:	b580      	push	{r7, lr}
10003356:	af00      	add	r7, sp, #0
 return -1;
10003358:	2301      	movs	r3, #1
1000335a:	425b      	negs	r3, r3
}
1000335c:	1c18      	adds	r0, r3, #0
1000335e:	46bd      	mov	sp, r7
10003360:	bd80      	pop	{r7, pc}
10003362:	46c0      	nop			; (mov r8, r8)

10003364 <_exit>:

/*
 * Program/process exit
 */
__attribute__((weak)) void _exit(int rc)
{
10003364:	b580      	push	{r7, lr}
10003366:	b082      	sub	sp, #8
10003368:	af00      	add	r7, sp, #0
1000336a:	6078      	str	r0, [r7, #4]
 rc = rc;
 while(1){}
1000336c:	e7fe      	b.n	1000336c <_exit+0x8>
1000336e:	46c0      	nop			; (mov r8, r8)

10003370 <_init>:
}

/* Init */
__attribute__((weak)) void _init(void)
{}
10003370:	b580      	push	{r7, lr}
10003372:	af00      	add	r7, sp, #0
10003374:	46bd      	mov	sp, r7
10003376:	bd80      	pop	{r7, pc}

10003378 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
10003378:	b580      	push	{r7, lr}
1000337a:	b082      	sub	sp, #8
1000337c:	af00      	add	r7, sp, #0
1000337e:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
10003380:	2301      	movs	r3, #1
10003382:	425b      	negs	r3, r3
}
10003384:	1c18      	adds	r0, r3, #0
10003386:	46bd      	mov	sp, r7
10003388:	b002      	add	sp, #8
1000338a:	bd80      	pop	{r7, pc}

1000338c <UART001_lInit>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lInit (const UART001_HandleType* Handle)
{
1000338c:	b580      	push	{r7, lr}
1000338e:	b084      	sub	sp, #16
10003390:	af00      	add	r7, sp, #0
10003392:	6078      	str	r0, [r7, #4]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10003394:	687b      	ldr	r3, [r7, #4]
10003396:	681b      	ldr	r3, [r3, #0]
10003398:	60fb      	str	r3, [r7, #12]
 
  /** UART initialisation  */

  /* Disable UART mode before configuring all USIC registers to avoid 
   * unintended edges */ 
  UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk))); 
1000339a:	68fb      	ldr	r3, [r7, #12]
1000339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000339e:	2202      	movs	r2, #2
100033a0:	1c19      	adds	r1, r3, #0
100033a2:	4391      	bics	r1, r2
100033a4:	1c0a      	adds	r2, r1, #0
100033a6:	68fb      	ldr	r3, [r7, #12]
100033a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the USIC Channel */
  UartRegs->KSCFG |= ((((uint32_t)MASK_ONE  & USIC_CH_KSCFG_MODEN_Msk)) | \
100033aa:	68fb      	ldr	r3, [r7, #12]
100033ac:	68db      	ldr	r3, [r3, #12]
100033ae:	2203      	movs	r2, #3
100033b0:	431a      	orrs	r2, r3
100033b2:	68fb      	ldr	r3, [r7, #12]
100033b4:	60da      	str	r2, [r3, #12]
                         USIC_CH_KSCFG_BPMODEN_Msk)); 
   
  /* Configuration of USIC Channel Fractional Divider */

  /* Fractional divider mode selected */
  UartRegs->FDR |= (((uint32_t)SHIFT_TWO << USIC_CH_FDR_DM_Pos) \
100033b6:	68fb      	ldr	r3, [r7, #12]
100033b8:	691b      	ldr	r3, [r3, #16]
100033ba:	2280      	movs	r2, #128	; 0x80
100033bc:	0212      	lsls	r2, r2, #8
100033be:	431a      	orrs	r2, r3
100033c0:	68fb      	ldr	r3, [r7, #12]
100033c2:	611a      	str	r2, [r3, #16]
                                                     & USIC_CH_FDR_DM_Msk);
  
  /* Step value */
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
100033c4:	68fb      	ldr	r3, [r7, #12]
100033c6:	691a      	ldr	r2, [r3, #16]
100033c8:	687b      	ldr	r3, [r7, #4]
100033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
100033cc:	059b      	lsls	r3, r3, #22
100033ce:	0d9b      	lsrs	r3, r3, #22
100033d0:	431a      	orrs	r2, r3
100033d2:	68fb      	ldr	r3, [r7, #12]
100033d4:	611a      	str	r2, [r3, #16]
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
100033d6:	68fb      	ldr	r3, [r7, #12]
100033d8:	695a      	ldr	r2, [r3, #20]
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
100033da:	6879      	ldr	r1, [r7, #4]
100033dc:	2330      	movs	r3, #48	; 0x30
100033de:	5ccb      	ldrb	r3, [r1, r3]
100033e0:	0219      	lsls	r1, r3, #8
100033e2:	23c0      	movs	r3, #192	; 0xc0
100033e4:	009b      	lsls	r3, r3, #2
100033e6:	4019      	ands	r1, r3
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
100033e8:	687b      	ldr	r3, [r7, #4]
100033ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
100033ec:	0298      	lsls	r0, r3, #10
100033ee:	23f8      	movs	r3, #248	; 0xf8
100033f0:	01db      	lsls	r3, r3, #7
100033f2:	4003      	ands	r3, r0
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
100033f4:	4319      	orrs	r1, r3
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_PDIV) << USIC_CH_BRG_PDIV_Pos) &  \
100033f6:	687b      	ldr	r3, [r7, #4]
100033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
100033fa:	0418      	lsls	r0, r3, #16
100033fc:	4b4f      	ldr	r3, [pc, #316]	; (1000353c <UART001_lInit+0x1b0>)
100033fe:	4003      	ands	r3, r0
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
10003400:	430b      	orrs	r3, r1
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
10003402:	431a      	orrs	r2, r3
10003404:	68fb      	ldr	r3, [r7, #12]
10003406:	615a      	str	r2, [r3, #20]
  /* Configuration of USIC Shift Control */
  
  /* Transmit/Receive LSB first is selected  */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
10003408:	68fb      	ldr	r3, [r7, #12]
1000340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000340c:	2281      	movs	r2, #129	; 0x81
1000340e:	0052      	lsls	r2, r2, #1
10003410:	431a      	orrs	r2, r3
10003412:	68fb      	ldr	r3, [r7, #12]
10003414:	635a      	str	r2, [r3, #52]	; 0x34
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
10003416:	68fb      	ldr	r3, [r7, #12]
10003418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000341a:	687b      	ldr	r3, [r7, #4]
1000341c:	8b9b      	ldrh	r3, [r3, #28]
1000341e:	0419      	lsls	r1, r3, #16
10003420:	23fc      	movs	r3, #252	; 0xfc
10003422:	039b      	lsls	r3, r3, #14
10003424:	4019      	ands	r1, r3
                      USIC_CH_SCTR_FLE_Msk ) | \
                     (((uint32_t)Handle->DataBits  << USIC_CH_SCTR_WLE_Pos) & \
10003426:	687b      	ldr	r3, [r7, #4]
10003428:	8b9b      	ldrh	r3, [r3, #28]
1000342a:	0618      	lsls	r0, r3, #24
1000342c:	23f0      	movs	r3, #240	; 0xf0
1000342e:	051b      	lsls	r3, r3, #20
10003430:	4003      	ands	r3, r0
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
                      USIC_CH_SCTR_FLE_Msk ) | \
10003432:	430b      	orrs	r3, r1
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
10003434:	431a      	orrs	r2, r3
10003436:	68fb      	ldr	r3, [r7, #12]
10003438:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Configuration of USIC Transmit Control/Status Register */ 
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
	
  UartRegs->TCSR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_TCSR_TDEN_Pos) & \
1000343a:	68fb      	ldr	r3, [r7, #12]
1000343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000343e:	22a0      	movs	r2, #160	; 0xa0
10003440:	00d2      	lsls	r2, r2, #3
10003442:	431a      	orrs	r2, r3
10003444:	68fb      	ldr	r3, [r7, #12]
10003446:	639a      	str	r2, [r3, #56]	; 0x38
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
10003448:	68fb      	ldr	r3, [r7, #12]
1000344a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
1000344c:	687b      	ldr	r3, [r7, #4]
1000344e:	7d5b      	ldrb	r3, [r3, #21]
10003450:	0059      	lsls	r1, r3, #1
10003452:	2302      	movs	r3, #2
10003454:	4019      	ands	r1, r3
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
10003456:	687b      	ldr	r3, [r7, #4]
10003458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
1000345a:	0218      	lsls	r0, r3, #8
1000345c:	23f8      	movs	r3, #248	; 0xf8
1000345e:	015b      	lsls	r3, r3, #5
10003460:	4003      	ands	r3, r0
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
10003462:	430b      	orrs	r3, r1
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
10003464:	4313      	orrs	r3, r2
10003466:	2201      	movs	r2, #1
10003468:	431a      	orrs	r2, r3
1000346a:	68fb      	ldr	r3, [r7, #12]
1000346c:	63da      	str	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
    USIC_CH_PCR_ASCMode_SP_Msk));
      
  if(Handle->RecvNoiseEn)
1000346e:	687a      	ldr	r2, [r7, #4]
10003470:	2324      	movs	r3, #36	; 0x24
10003472:	5cd3      	ldrb	r3, [r2, r3]
10003474:	2b00      	cmp	r3, #0
10003476:	d005      	beq.n	10003484 <UART001_lInit+0xf8>
  {
   	/* Enable Receiver Noise Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR5_Pos) & \
10003478:	68fb      	ldr	r3, [r7, #12]
1000347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000347c:	2220      	movs	r2, #32
1000347e:	431a      	orrs	r2, r3
10003480:	68fb      	ldr	r3, [r7, #12]
10003482:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	  USIC_CH_PCR_CTR5_Msk); 
  }
  
  if(Handle->FormatErrEn)
10003484:	687a      	ldr	r2, [r7, #4]
10003486:	2325      	movs	r3, #37	; 0x25
10003488:	5cd3      	ldrb	r3, [r2, r3]
1000348a:	2b00      	cmp	r3, #0
1000348c:	d005      	beq.n	1000349a <UART001_lInit+0x10e>
  {
   	/* Enable Format Error Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR6_Pos) & \
1000348e:	68fb      	ldr	r3, [r7, #12]
10003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003492:	2240      	movs	r2, #64	; 0x40
10003494:	431a      	orrs	r2, r3
10003496:	68fb      	ldr	r3, [r7, #12]
10003498:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	                             USIC_CH_PCR_CTR6_Msk); 
  }
  
  if(Handle->FrameFinEn)
1000349a:	687a      	ldr	r2, [r7, #4]
1000349c:	2326      	movs	r3, #38	; 0x26
1000349e:	5cd3      	ldrb	r3, [r2, r3]
100034a0:	2b00      	cmp	r3, #0
100034a2:	d005      	beq.n	100034b0 <UART001_lInit+0x124>
  {
   	/* Enable Frame Finished Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR7_Pos) & \
100034a4:	68fb      	ldr	r3, [r7, #12]
100034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100034a8:	2280      	movs	r2, #128	; 0x80
100034aa:	431a      	orrs	r2, r3
100034ac:	68fb      	ldr	r3, [r7, #12]
100034ae:	63da      	str	r2, [r3, #60]	; 0x3c
		  	                                   	  	 USIC_CH_PCR_CTR7_Msk); 
  } 
  
  if (Handle->TxFifoEn)
100034b0:	687b      	ldr	r3, [r7, #4]
100034b2:	7f9b      	ldrb	r3, [r3, #30]
100034b4:	2b00      	cmp	r3, #0
100034b6:	d011      	beq.n	100034dc <UART001_lInit+0x150>
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
100034b8:	68fa      	ldr	r2, [r7, #12]
100034ba:	2384      	movs	r3, #132	; 0x84
100034bc:	005b      	lsls	r3, r3, #1
100034be:	58d2      	ldr	r2, [r2, r3]
100034c0:	6879      	ldr	r1, [r7, #4]
100034c2:	2320      	movs	r3, #32
100034c4:	5ccb      	ldrb	r3, [r1, r3]
100034c6:	0219      	lsls	r1, r3, #8
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
100034c8:	23fc      	movs	r3, #252	; 0xfc
100034ca:	019b      	lsls	r3, r3, #6
100034cc:	400b      	ands	r3, r1
  } 
  
  if (Handle->TxFifoEn)
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
100034ce:	1c11      	adds	r1, r2, #0
100034d0:	4319      	orrs	r1, r3
100034d2:	68fa      	ldr	r2, [r7, #12]
100034d4:	2384      	movs	r3, #132	; 0x84
100034d6:	005b      	lsls	r3, r3, #1
100034d8:	50d1      	str	r1, [r2, r3]
100034da:	e006      	b.n	100034ea <UART001_lInit+0x15e>
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
  }
  else
  {
	  /* TBIF is set to simplify polling*/
	  UartRegs->PSR_ASCMode |= (((uint32_t)SHIFT_ONE  << USIC_CH_PSR_TBIF_Pos) & \
100034dc:	68fb      	ldr	r3, [r7, #12]
100034de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100034e0:	2280      	movs	r2, #128	; 0x80
100034e2:	0192      	lsls	r2, r2, #6
100034e4:	431a      	orrs	r2, r3
100034e6:	68fb      	ldr	r3, [r7, #12]
100034e8:	649a      	str	r2, [r3, #72]	; 0x48
	 		  (uint32_t)USIC_CH_PSR_TBIF_Msk);
  }
  
  if (Handle->RxFifoEn)
100034ea:	687b      	ldr	r3, [r7, #4]
100034ec:	7fdb      	ldrb	r3, [r3, #31]
100034ee:	2b00      	cmp	r3, #0
100034f0:	d013      	beq.n	1000351a <UART001_lInit+0x18e>
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
100034f2:	68fa      	ldr	r2, [r7, #12]
100034f4:	2386      	movs	r3, #134	; 0x86
100034f6:	005b      	lsls	r3, r3, #1
100034f8:	58d2      	ldr	r2, [r2, r3]
100034fa:	6879      	ldr	r1, [r7, #4]
100034fc:	2321      	movs	r3, #33	; 0x21
100034fe:	5ccb      	ldrb	r3, [r1, r3]
10003500:	0219      	lsls	r1, r3, #8
						   USIC_CH_RBCTR_LIMIT_Pos) & USIC_CH_RBCTR_LIMIT_Msk) | \
10003502:	23fc      	movs	r3, #252	; 0xfc
10003504:	019b      	lsls	r3, r3, #6
10003506:	400b      	ands	r3, r1
  }
  
  if (Handle->RxFifoEn)
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
10003508:	4313      	orrs	r3, r2
1000350a:	2280      	movs	r2, #128	; 0x80
1000350c:	0552      	lsls	r2, r2, #21
1000350e:	1c11      	adds	r1, r2, #0
10003510:	4319      	orrs	r1, r3
10003512:	68fa      	ldr	r2, [r7, #12]
10003514:	2386      	movs	r3, #134	; 0x86
10003516:	005b      	lsls	r3, r3, #1
10003518:	50d1      	str	r1, [r2, r3]
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
1000351a:	68fb      	ldr	r3, [r7, #12]
1000351c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
1000351e:	687b      	ldr	r3, [r7, #4]
10003520:	7d9b      	ldrb	r3, [r3, #22]
10003522:	0219      	lsls	r1, r3, #8
10003524:	23c0      	movs	r3, #192	; 0xc0
10003526:	009b      	lsls	r3, r3, #2
10003528:	400b      	ands	r3, r1
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
1000352a:	4313      	orrs	r3, r2
1000352c:	2202      	movs	r2, #2
1000352e:	431a      	orrs	r2, r3
10003530:	68fb      	ldr	r3, [r7, #12]
10003532:	641a      	str	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
                     USIC_CH_CCR_PM_Msk));

}
10003534:	46bd      	mov	sp, r7
10003536:	b004      	add	sp, #16
10003538:	bd80      	pop	{r7, pc}
1000353a:	46c0      	nop			; (mov r8, r8)
1000353c:	03ff0000 	.word	0x03ff0000

10003540 <UART001_lConfigTXPin>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
10003540:	b590      	push	{r4, r7, lr}
10003542:	b085      	sub	sp, #20
10003544:	af00      	add	r7, sp, #0
10003546:	6078      	str	r0, [r7, #4]
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
10003548:	687b      	ldr	r3, [r7, #4]
1000354a:	685b      	ldr	r3, [r3, #4]
1000354c:	687a      	ldr	r2, [r7, #4]
1000354e:	6852      	ldr	r2, [r2, #4]
10003550:	6851      	ldr	r1, [r2, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
10003552:	687a      	ldr	r2, [r7, #4]
10003554:	7a12      	ldrb	r2, [r2, #8]
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
10003556:	2001      	movs	r0, #1
10003558:	1c04      	adds	r4, r0, #0
1000355a:	4094      	lsls	r4, r2
1000355c:	1c22      	adds	r2, r4, #0
1000355e:	430a      	orrs	r2, r1
10003560:	605a      	str	r2, [r3, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
     
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;
10003562:	687b      	ldr	r3, [r7, #4]
10003564:	7a1b      	ldrb	r3, [r3, #8]
10003566:	60fb      	str	r3, [r7, #12]

    if (FIRST_NIBBLE > TempPortPin)
10003568:	68fb      	ldr	r3, [r7, #12]
1000356a:	2b03      	cmp	r3, #3
1000356c:	d80e      	bhi.n	1000358c <UART001_lConfigTXPin+0x4c>
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
1000356e:	687b      	ldr	r3, [r7, #4]
10003570:	685b      	ldr	r3, [r3, #4]
10003572:	687a      	ldr	r2, [r7, #4]
10003574:	6852      	ldr	r2, [r2, #4]
10003576:	6911      	ldr	r1, [r2, #16]
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10003578:	68fa      	ldr	r2, [r7, #12]
1000357a:	00d2      	lsls	r2, r2, #3
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
1000357c:	3203      	adds	r2, #3
1000357e:	2018      	movs	r0, #24
10003580:	1c04      	adds	r4, r0, #0
10003582:	4094      	lsls	r4, r2
10003584:	1c22      	adds	r2, r4, #0
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
10003586:	430a      	orrs	r2, r1
10003588:	611a      	str	r2, [r3, #16]
1000358a:	e046      	b.n	1000361a <UART001_lConfigTXPin+0xda>
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
1000358c:	68fb      	ldr	r3, [r7, #12]
1000358e:	2b03      	cmp	r3, #3
10003590:	d914      	bls.n	100035bc <UART001_lConfigTXPin+0x7c>
10003592:	68fb      	ldr	r3, [r7, #12]
10003594:	2b07      	cmp	r3, #7
10003596:	d811      	bhi.n	100035bc <UART001_lConfigTXPin+0x7c>
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
10003598:	68fb      	ldr	r3, [r7, #12]
1000359a:	3b04      	subs	r3, #4
1000359c:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
1000359e:	687b      	ldr	r3, [r7, #4]
100035a0:	685b      	ldr	r3, [r3, #4]
100035a2:	687a      	ldr	r2, [r7, #4]
100035a4:	6852      	ldr	r2, [r2, #4]
100035a6:	6951      	ldr	r1, [r2, #20]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
100035a8:	68fa      	ldr	r2, [r7, #12]
100035aa:	00d2      	lsls	r2, r2, #3
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
100035ac:	3203      	adds	r2, #3
100035ae:	2018      	movs	r0, #24
100035b0:	1c04      	adds	r4, r0, #0
100035b2:	4094      	lsls	r4, r2
100035b4:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
100035b6:	430a      	orrs	r2, r1
100035b8:	615a      	str	r2, [r3, #20]
100035ba:	e02e      	b.n	1000361a <UART001_lConfigTXPin+0xda>
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
100035bc:	68fb      	ldr	r3, [r7, #12]
100035be:	2b07      	cmp	r3, #7
100035c0:	d914      	bls.n	100035ec <UART001_lConfigTXPin+0xac>
100035c2:	68fb      	ldr	r3, [r7, #12]
100035c4:	2b0b      	cmp	r3, #11
100035c6:	d811      	bhi.n	100035ec <UART001_lConfigTXPin+0xac>
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
100035c8:	68fb      	ldr	r3, [r7, #12]
100035ca:	3b08      	subs	r3, #8
100035cc:	60fb      	str	r3, [r7, #12]
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
100035ce:	687b      	ldr	r3, [r7, #4]
100035d0:	685b      	ldr	r3, [r3, #4]
100035d2:	687a      	ldr	r2, [r7, #4]
100035d4:	6852      	ldr	r2, [r2, #4]
100035d6:	6991      	ldr	r1, [r2, #24]
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
100035d8:	68fa      	ldr	r2, [r7, #12]
100035da:	00d2      	lsls	r2, r2, #3
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
100035dc:	3203      	adds	r2, #3
100035de:	2018      	movs	r0, #24
100035e0:	1c04      	adds	r4, r0, #0
100035e2:	4094      	lsls	r4, r2
100035e4:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
100035e6:	430a      	orrs	r2, r1
100035e8:	619a      	str	r2, [r3, #24]
100035ea:	e016      	b.n	1000361a <UART001_lConfigTXPin+0xda>
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
100035ec:	68fb      	ldr	r3, [r7, #12]
100035ee:	2b0b      	cmp	r3, #11
100035f0:	d913      	bls.n	1000361a <UART001_lConfigTXPin+0xda>
100035f2:	68fb      	ldr	r3, [r7, #12]
100035f4:	2b0f      	cmp	r3, #15
100035f6:	d810      	bhi.n	1000361a <UART001_lConfigTXPin+0xda>
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
100035f8:	68fb      	ldr	r3, [r7, #12]
100035fa:	3b0c      	subs	r3, #12
100035fc:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
100035fe:	687b      	ldr	r3, [r7, #4]
10003600:	685b      	ldr	r3, [r3, #4]
10003602:	687a      	ldr	r2, [r7, #4]
10003604:	6852      	ldr	r2, [r2, #4]
10003606:	69d1      	ldr	r1, [r2, #28]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10003608:	68fa      	ldr	r2, [r7, #12]
1000360a:	00d2      	lsls	r2, r2, #3
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
1000360c:	3203      	adds	r2, #3
1000360e:	2018      	movs	r0, #24
10003610:	1c04      	adds	r4, r0, #0
10003612:	4094      	lsls	r4, r2
10003614:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
10003616:	430a      	orrs	r2, r1
10003618:	61da      	str	r2, [r3, #28]
							(TempPortPin * 8U)));
    }
	else
	{}

}
1000361a:	46bd      	mov	sp, r7
1000361c:	b005      	add	sp, #20
1000361e:	bd90      	pop	{r4, r7, pc}

10003620 <UART001_labsRealType>:
 * 				 -ve float value if Number is >= 0.0 <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
float UART001_labsRealType(float Number)
{
10003620:	b580      	push	{r7, lr}
10003622:	b084      	sub	sp, #16
10003624:	af00      	add	r7, sp, #0
10003626:	6078      	str	r0, [r7, #4]
   float return_value;
	if (Number < 0.0F){
10003628:	6878      	ldr	r0, [r7, #4]
1000362a:	2100      	movs	r1, #0
1000362c:	f006 f962 	bl	100098f4 <__aeabi_fcmplt>
10003630:	1c03      	adds	r3, r0, #0
10003632:	2b00      	cmp	r3, #0
10003634:	d005      	beq.n	10003642 <UART001_labsRealType+0x22>
		return_value = -Number;
10003636:	687b      	ldr	r3, [r7, #4]
10003638:	2280      	movs	r2, #128	; 0x80
1000363a:	0612      	lsls	r2, r2, #24
1000363c:	4053      	eors	r3, r2
1000363e:	60fb      	str	r3, [r7, #12]
10003640:	e001      	b.n	10003646 <UART001_labsRealType+0x26>
	}
	else{
		return_value = Number;
10003642:	687b      	ldr	r3, [r7, #4]
10003644:	60fb      	str	r3, [r7, #12]
	}
	return return_value;
10003646:	68fb      	ldr	r3, [r7, #12]
}
10003648:	1c18      	adds	r0, r3, #0
1000364a:	46bd      	mov	sp, r7
1000364c:	b004      	add	sp, #16
1000364e:	bd80      	pop	{r7, pc}

10003650 <UART001_lConfigureBaudRate>:
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
void UART001_lConfigureBaudRate\
                              (uint32_t BaudRate,uint32_t* Pdiv,uint32_t* Step)
{
10003650:	b5b0      	push	{r4, r5, r7, lr}
10003652:	b0ae      	sub	sp, #184	; 0xb8
10003654:	af00      	add	r7, sp, #0
10003656:	60f8      	str	r0, [r7, #12]
10003658:	60b9      	str	r1, [r7, #8]
1000365a:	607a      	str	r2, [r7, #4]
	uint32_t fdr_step = 0x00U;
1000365c:	2300      	movs	r3, #0
1000365e:	20b4      	movs	r0, #180	; 0xb4
10003660:	19c0      	adds	r0, r0, r7
10003662:	6003      	str	r3, [r0, #0]
	uint32_t brg_pdiv = 0x00U;
10003664:	2300      	movs	r3, #0
10003666:	21b0      	movs	r1, #176	; 0xb0
10003668:	19c9      	adds	r1, r1, r7
1000366a:	600b      	str	r3, [r1, #0]
	uint32_t divisor_in = BaudRate ;
1000366c:	68fb      	ldr	r3, [r7, #12]
1000366e:	22ac      	movs	r2, #172	; 0xac
10003670:	19d2      	adds	r2, r2, r7
10003672:	6013      	str	r3, [r2, #0]
	/* fPB / 1024 * (Brg_dctq + 1) */
	uint32_t dividend_in = 0U;
10003674:	2300      	movs	r3, #0
10003676:	20a8      	movs	r0, #168	; 0xa8
10003678:	19c0      	adds	r0, r0, r7
1000367a:	6003      	str	r3, [r0, #0]
	uint32_t divisor_array[4];
	uint32_t dividend_array[4];
	uint32_t div_array[4];
	uint32_t max, frac,divisor1,divisor2,dividend1,dividend2;
	uint32_t array_count,array_count_1,array_count_2;
	uint32_t do_while_break = 0U;
1000367c:	2300      	movs	r3, #0
1000367e:	2188      	movs	r1, #136	; 0x88
10003680:	19c9      	adds	r1, r1, r7
10003682:	600b      	str	r3, [r1, #0]
	uint32_t temp = 0U;
10003684:	2300      	movs	r3, #0
10003686:	67fb      	str	r3, [r7, #124]	; 0x7c
	float div_factor;
	uint32_t loop_cnt;
	bool swapped;
	dividend_in = (uint32_t)((uint32_t)(UART001_CLOCK * 1000000)/ \
10003688:	4be0      	ldr	r3, [pc, #896]	; (10003a0c <UART001_lConfigureBaudRate+0x3bc>)
1000368a:	22a8      	movs	r2, #168	; 0xa8
1000368c:	19d2      	adds	r2, r2, r7
1000368e:	6013      	str	r3, [r2, #0]
                    	(UART001_MAX_VALUE * UART001_DCTQ_VALUE)); 
	/* swap if divisor_in/dividend_in > max_divisor/max_dividend */
	div_factor = (float) divisor_in/(float) dividend_in;
10003690:	23ac      	movs	r3, #172	; 0xac
10003692:	19db      	adds	r3, r3, r7
10003694:	6818      	ldr	r0, [r3, #0]
10003696:	f006 fe89 	bl	1000a3ac <__aeabi_ui2f>
1000369a:	1c04      	adds	r4, r0, #0
1000369c:	21a8      	movs	r1, #168	; 0xa8
1000369e:	19c9      	adds	r1, r1, r7
100036a0:	6808      	ldr	r0, [r1, #0]
100036a2:	f006 fe83 	bl	1000a3ac <__aeabi_ui2f>
100036a6:	1c03      	adds	r3, r0, #0
100036a8:	1c20      	adds	r0, r4, #0
100036aa:	1c19      	adds	r1, r3, #0
100036ac:	f006 f962 	bl	10009974 <__aeabi_fdiv>
100036b0:	1c03      	adds	r3, r0, #0
100036b2:	67bb      	str	r3, [r7, #120]	; 0x78
	if ( div_factor > 1.0F)
100036b4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
100036b6:	21fe      	movs	r1, #254	; 0xfe
100036b8:	0589      	lsls	r1, r1, #22
100036ba:	f006 f92f 	bl	1000991c <__aeabi_fcmpgt>
100036be:	1c03      	adds	r3, r0, #0
100036c0:	2b00      	cmp	r3, #0
100036c2:	d017      	beq.n	100036f4 <UART001_lConfigureBaudRate+0xa4>
	{
		max = UART001_MAX_VALUE;
100036c4:	2380      	movs	r3, #128	; 0x80
100036c6:	00db      	lsls	r3, r3, #3
100036c8:	22a4      	movs	r2, #164	; 0xa4
100036ca:	19d2      	adds	r2, r2, r7
100036cc:	6013      	str	r3, [r2, #0]
		swapped = 1U;
100036ce:	1c3b      	adds	r3, r7, #0
100036d0:	3383      	adds	r3, #131	; 0x83
100036d2:	2201      	movs	r2, #1
100036d4:	701a      	strb	r2, [r3, #0]
		temp = divisor_in;
100036d6:	20ac      	movs	r0, #172	; 0xac
100036d8:	19c0      	adds	r0, r0, r7
100036da:	6803      	ldr	r3, [r0, #0]
100036dc:	67fb      	str	r3, [r7, #124]	; 0x7c
		divisor_in = dividend_in;
100036de:	21a8      	movs	r1, #168	; 0xa8
100036e0:	19c9      	adds	r1, r1, r7
100036e2:	680b      	ldr	r3, [r1, #0]
100036e4:	22ac      	movs	r2, #172	; 0xac
100036e6:	19d2      	adds	r2, r2, r7
100036e8:	6013      	str	r3, [r2, #0]
		dividend_in = temp;
100036ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
100036ec:	20a8      	movs	r0, #168	; 0xa8
100036ee:	19c0      	adds	r0, r0, r7
100036f0:	6003      	str	r3, [r0, #0]
100036f2:	e008      	b.n	10003706 <UART001_lConfigureBaudRate+0xb6>
	}
	else
	{
		swapped = 0U;
100036f4:	1c3b      	adds	r3, r7, #0
100036f6:	3383      	adds	r3, #131	; 0x83
100036f8:	2200      	movs	r2, #0
100036fa:	701a      	strb	r2, [r3, #0]
		max = UART001_MAX_VALUE;
100036fc:	2380      	movs	r3, #128	; 0x80
100036fe:	00db      	lsls	r3, r3, #3
10003700:	21a4      	movs	r1, #164	; 0xa4
10003702:	19c9      	adds	r1, r1, r7
10003704:	600b      	str	r3, [r1, #0]
	}
	/*Init parameters*/
	loop_cnt = 0U;
10003706:	2300      	movs	r3, #0
10003708:	2284      	movs	r2, #132	; 0x84
1000370a:	19d2      	adds	r2, r2, r7
1000370c:	6013      	str	r3, [r2, #0]
	array_count = 0U;
1000370e:	2300      	movs	r3, #0
10003710:	2090      	movs	r0, #144	; 0x90
10003712:	19c0      	adds	r0, r0, r7
10003714:	6003      	str	r3, [r0, #0]
	array_count_1 = 0U;
10003716:	2300      	movs	r3, #0
10003718:	218c      	movs	r1, #140	; 0x8c
1000371a:	19c9      	adds	r1, r1, r7
1000371c:	600b      	str	r3, [r1, #0]
	divisor[0] = divisor_in;
1000371e:	1c3b      	adds	r3, r7, #0
10003720:	3360      	adds	r3, #96	; 0x60
10003722:	20ac      	movs	r0, #172	; 0xac
10003724:	19c0      	adds	r0, r0, r7
10003726:	6802      	ldr	r2, [r0, #0]
10003728:	601a      	str	r2, [r3, #0]
	remainder[0] = dividend_in;
1000372a:	1c3b      	adds	r3, r7, #0
1000372c:	3340      	adds	r3, #64	; 0x40
1000372e:	21a8      	movs	r1, #168	; 0xa8
10003730:	19c9      	adds	r1, r1, r7
10003732:	680a      	ldr	r2, [r1, #0]
10003734:	601a      	str	r2, [r3, #0]
	divisor_array[0] = 1U;
10003736:	1c3b      	adds	r3, r7, #0
10003738:	3330      	adds	r3, #48	; 0x30
1000373a:	2201      	movs	r2, #1
1000373c:	601a      	str	r2, [r3, #0]
	dividend_array[0] = 0U;
1000373e:	1c3b      	adds	r3, r7, #0
10003740:	3320      	adds	r3, #32
10003742:	2200      	movs	r2, #0
10003744:	601a      	str	r2, [r3, #0]
	do {
			++loop_cnt;
10003746:	2284      	movs	r2, #132	; 0x84
10003748:	19d2      	adds	r2, r2, r7
1000374a:	6813      	ldr	r3, [r2, #0]
1000374c:	3301      	adds	r3, #1
1000374e:	2084      	movs	r0, #132	; 0x84
10003750:	19c0      	adds	r0, r0, r7
10003752:	6003      	str	r3, [r0, #0]
			array_count_2 = array_count_1; /* on first loop is not used */
10003754:	218c      	movs	r1, #140	; 0x8c
10003756:	19c9      	adds	r1, r1, r7
10003758:	680b      	ldr	r3, [r1, #0]
1000375a:	677b      	str	r3, [r7, #116]	; 0x74
			array_count_1 = array_count;
1000375c:	2290      	movs	r2, #144	; 0x90
1000375e:	19d2      	adds	r2, r2, r7
10003760:	6813      	ldr	r3, [r2, #0]
10003762:	208c      	movs	r0, #140	; 0x8c
10003764:	19c0      	adds	r0, r0, r7
10003766:	6003      	str	r3, [r0, #0]
			array_count = loop_cnt % 4U;
10003768:	2184      	movs	r1, #132	; 0x84
1000376a:	19c9      	adds	r1, r1, r7
1000376c:	680a      	ldr	r2, [r1, #0]
1000376e:	2303      	movs	r3, #3
10003770:	4013      	ands	r3, r2
10003772:	2290      	movs	r2, #144	; 0x90
10003774:	19d2      	adds	r2, r2, r7
10003776:	6013      	str	r3, [r2, #0]
			dividend[array_count] = divisor[array_count_1];
10003778:	1c3b      	adds	r3, r7, #0
1000377a:	3360      	adds	r3, #96	; 0x60
1000377c:	208c      	movs	r0, #140	; 0x8c
1000377e:	19c0      	adds	r0, r0, r7
10003780:	6802      	ldr	r2, [r0, #0]
10003782:	0092      	lsls	r2, r2, #2
10003784:	58d1      	ldr	r1, [r2, r3]
10003786:	1c3b      	adds	r3, r7, #0
10003788:	3350      	adds	r3, #80	; 0x50
1000378a:	2090      	movs	r0, #144	; 0x90
1000378c:	19c0      	adds	r0, r0, r7
1000378e:	6802      	ldr	r2, [r0, #0]
10003790:	0092      	lsls	r2, r2, #2
10003792:	50d1      	str	r1, [r2, r3]
			
			divisor[array_count] = remainder[array_count_1];
10003794:	1c3b      	adds	r3, r7, #0
10003796:	3340      	adds	r3, #64	; 0x40
10003798:	218c      	movs	r1, #140	; 0x8c
1000379a:	19c9      	adds	r1, r1, r7
1000379c:	680a      	ldr	r2, [r1, #0]
1000379e:	0092      	lsls	r2, r2, #2
100037a0:	58d1      	ldr	r1, [r2, r3]
100037a2:	1c3b      	adds	r3, r7, #0
100037a4:	3360      	adds	r3, #96	; 0x60
100037a6:	2090      	movs	r0, #144	; 0x90
100037a8:	19c0      	adds	r0, r0, r7
100037aa:	6802      	ldr	r2, [r0, #0]
100037ac:	0092      	lsls	r2, r2, #2
100037ae:	50d1      	str	r1, [r2, r3]
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
100037b0:	1c3b      	adds	r3, r7, #0
100037b2:	3350      	adds	r3, #80	; 0x50
100037b4:	2190      	movs	r1, #144	; 0x90
100037b6:	19c9      	adds	r1, r1, r7
100037b8:	680a      	ldr	r2, [r1, #0]
100037ba:	0092      	lsls	r2, r2, #2
100037bc:	58d2      	ldr	r2, [r2, r3]
100037be:	1c3b      	adds	r3, r7, #0
100037c0:	3360      	adds	r3, #96	; 0x60
100037c2:	2090      	movs	r0, #144	; 0x90
100037c4:	19c0      	adds	r0, r0, r7
100037c6:	6801      	ldr	r1, [r0, #0]
100037c8:	0089      	lsls	r1, r1, #2
100037ca:	58cb      	ldr	r3, [r1, r3]
100037cc:	1c10      	adds	r0, r2, #0
100037ce:	1c19      	adds	r1, r3, #0
100037d0:	f006 f82e 	bl	10009830 <__aeabi_uidiv>
100037d4:	1c03      	adds	r3, r0, #0
100037d6:	1c19      	adds	r1, r3, #0
			array_count = loop_cnt % 4U;
			dividend[array_count] = divisor[array_count_1];
			
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
100037d8:	1c3b      	adds	r3, r7, #0
100037da:	3310      	adds	r3, #16
100037dc:	2090      	movs	r0, #144	; 0x90
100037de:	19c0      	adds	r0, r0, r7
100037e0:	6802      	ldr	r2, [r0, #0]
100037e2:	0092      	lsls	r2, r2, #2
100037e4:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
			                       dividend[array_count] % divisor[array_count];
100037e6:	1c3b      	adds	r3, r7, #0
100037e8:	3350      	adds	r3, #80	; 0x50
100037ea:	2190      	movs	r1, #144	; 0x90
100037ec:	19c9      	adds	r1, r1, r7
100037ee:	680a      	ldr	r2, [r1, #0]
100037f0:	0092      	lsls	r2, r2, #2
100037f2:	58d2      	ldr	r2, [r2, r3]
100037f4:	1c3b      	adds	r3, r7, #0
100037f6:	3360      	adds	r3, #96	; 0x60
100037f8:	2090      	movs	r0, #144	; 0x90
100037fa:	19c0      	adds	r0, r0, r7
100037fc:	6801      	ldr	r1, [r0, #0]
100037fe:	0089      	lsls	r1, r1, #2
10003800:	58cb      	ldr	r3, [r1, r3]
10003802:	1c10      	adds	r0, r2, #0
10003804:	1c19      	adds	r1, r3, #0
10003806:	f006 f857 	bl	100098b8 <__aeabi_uidivmod>
1000380a:	1c0b      	adds	r3, r1, #0
1000380c:	1c19      	adds	r1, r3, #0
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
1000380e:	1c3b      	adds	r3, r7, #0
10003810:	3340      	adds	r3, #64	; 0x40
10003812:	2090      	movs	r0, #144	; 0x90
10003814:	19c0      	adds	r0, r0, r7
10003816:	6802      	ldr	r2, [r0, #0]
10003818:	0092      	lsls	r2, r2, #2
1000381a:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] % divisor[array_count];
			
			/* This executed only on first loop */
			if (loop_cnt == 1U)
1000381c:	2184      	movs	r1, #132	; 0x84
1000381e:	19c9      	adds	r1, r1, r7
10003820:	680b      	ldr	r3, [r1, #0]
10003822:	2b01      	cmp	r3, #1
10003824:	d10a      	bne.n	1000383c <UART001_lConfigureBaudRate+0x1ec>
			{ 
				divisor_array[1] = div_array[1];
10003826:	1c3b      	adds	r3, r7, #0
10003828:	3310      	adds	r3, #16
1000382a:	685a      	ldr	r2, [r3, #4]
1000382c:	1c3b      	adds	r3, r7, #0
1000382e:	3330      	adds	r3, #48	; 0x30
10003830:	605a      	str	r2, [r3, #4]
				dividend_array[1] = 1U;
10003832:	1c3b      	adds	r3, r7, #0
10003834:	3320      	adds	r3, #32
10003836:	2201      	movs	r2, #1
10003838:	605a      	str	r2, [r3, #4]
1000383a:	e037      	b.n	100038ac <UART001_lConfigureBaudRate+0x25c>
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
1000383c:	1c3b      	adds	r3, r7, #0
1000383e:	3310      	adds	r3, #16
10003840:	2090      	movs	r0, #144	; 0x90
10003842:	19c0      	adds	r0, r0, r7
10003844:	6802      	ldr	r2, [r0, #0]
10003846:	0092      	lsls	r2, r2, #2
10003848:	58d3      	ldr	r3, [r2, r3]
1000384a:	1c3a      	adds	r2, r7, #0
1000384c:	3230      	adds	r2, #48	; 0x30
1000384e:	208c      	movs	r0, #140	; 0x8c
10003850:	19c0      	adds	r0, r0, r7
10003852:	6801      	ldr	r1, [r0, #0]
10003854:	0089      	lsls	r1, r1, #2
10003856:	588a      	ldr	r2, [r1, r2]
10003858:	435a      	muls	r2, r3
				       divisor_array[array_count_2];
1000385a:	1c3b      	adds	r3, r7, #0
1000385c:	3330      	adds	r3, #48	; 0x30
1000385e:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003860:	0089      	lsls	r1, r1, #2
10003862:	58cb      	ldr	r3, [r1, r3]
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
10003864:	18d1      	adds	r1, r2, r3
				divisor_array[1] = div_array[1];
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
10003866:	1c3b      	adds	r3, r7, #0
10003868:	3330      	adds	r3, #48	; 0x30
1000386a:	2090      	movs	r0, #144	; 0x90
1000386c:	19c0      	adds	r0, r0, r7
1000386e:	6802      	ldr	r2, [r0, #0]
10003870:	0092      	lsls	r2, r2, #2
10003872:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10003874:	1c3b      	adds	r3, r7, #0
10003876:	3310      	adds	r3, #16
10003878:	2190      	movs	r1, #144	; 0x90
1000387a:	19c9      	adds	r1, r1, r7
1000387c:	680a      	ldr	r2, [r1, #0]
1000387e:	0092      	lsls	r2, r2, #2
10003880:	58d3      	ldr	r3, [r2, r3]
10003882:	1c3a      	adds	r2, r7, #0
10003884:	3220      	adds	r2, #32
10003886:	208c      	movs	r0, #140	; 0x8c
10003888:	19c0      	adds	r0, r0, r7
1000388a:	6801      	ldr	r1, [r0, #0]
1000388c:	0089      	lsls	r1, r1, #2
1000388e:	588a      	ldr	r2, [r1, r2]
10003890:	435a      	muls	r2, r3
				       dividend_array[array_count_2];
10003892:	1c3b      	adds	r3, r7, #0
10003894:	3320      	adds	r3, #32
10003896:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003898:	0089      	lsls	r1, r1, #2
1000389a:	58cb      	ldr	r3, [r1, r3]
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
1000389c:	18d1      	adds	r1, r2, r3
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
1000389e:	1c3b      	adds	r3, r7, #0
100038a0:	3320      	adds	r3, #32
100038a2:	2090      	movs	r0, #144	; 0x90
100038a4:	19c0      	adds	r0, r0, r7
100038a6:	6802      	ldr	r2, [r0, #0]
100038a8:	0092      	lsls	r2, r2, #2
100038aa:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * dividend_array[array_count_1]) + \
				       dividend_array[array_count_2];
			}
			if (dividend_array[array_count] > max) 
100038ac:	1c3b      	adds	r3, r7, #0
100038ae:	3320      	adds	r3, #32
100038b0:	2190      	movs	r1, #144	; 0x90
100038b2:	19c9      	adds	r1, r1, r7
100038b4:	680a      	ldr	r2, [r1, #0]
100038b6:	0092      	lsls	r2, r2, #2
100038b8:	58d2      	ldr	r2, [r2, r3]
100038ba:	20a4      	movs	r0, #164	; 0xa4
100038bc:	19c0      	adds	r0, r0, r7
100038be:	6803      	ldr	r3, [r0, #0]
100038c0:	429a      	cmp	r2, r3
100038c2:	d800      	bhi.n	100038c6 <UART001_lConfigureBaudRate+0x276>
100038c4:	e0fd      	b.n	10003ac2 <UART001_lConfigureBaudRate+0x472>
			{
				divisor1 = divisor_array[array_count_1];
100038c6:	1c3b      	adds	r3, r7, #0
100038c8:	3330      	adds	r3, #48	; 0x30
100038ca:	218c      	movs	r1, #140	; 0x8c
100038cc:	19c9      	adds	r1, r1, r7
100038ce:	680a      	ldr	r2, [r1, #0]
100038d0:	0092      	lsls	r2, r2, #2
100038d2:	58d3      	ldr	r3, [r2, r3]
100038d4:	22a0      	movs	r2, #160	; 0xa0
100038d6:	19d2      	adds	r2, r2, r7
100038d8:	6013      	str	r3, [r2, #0]
				dividend1 = dividend_array[array_count_1];
100038da:	1c3b      	adds	r3, r7, #0
100038dc:	3320      	adds	r3, #32
100038de:	208c      	movs	r0, #140	; 0x8c
100038e0:	19c0      	adds	r0, r0, r7
100038e2:	6802      	ldr	r2, [r0, #0]
100038e4:	0092      	lsls	r2, r2, #2
100038e6:	58d3      	ldr	r3, [r2, r3]
100038e8:	2198      	movs	r1, #152	; 0x98
100038ea:	19c9      	adds	r1, r1, r7
100038ec:	600b      	str	r3, [r1, #0]
				frac = (max - dividend_array[array_count_2]) / \
100038ee:	1c3b      	adds	r3, r7, #0
100038f0:	3320      	adds	r3, #32
100038f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100038f4:	0092      	lsls	r2, r2, #2
100038f6:	58d3      	ldr	r3, [r2, r3]
100038f8:	20a4      	movs	r0, #164	; 0xa4
100038fa:	19c0      	adds	r0, r0, r7
100038fc:	6802      	ldr	r2, [r0, #0]
100038fe:	1ad2      	subs	r2, r2, r3
				                               dividend_array[array_count_1];
10003900:	1c3b      	adds	r3, r7, #0
10003902:	3320      	adds	r3, #32
10003904:	208c      	movs	r0, #140	; 0x8c
10003906:	19c0      	adds	r0, r0, r7
10003908:	6801      	ldr	r1, [r0, #0]
1000390a:	0089      	lsls	r1, r1, #2
1000390c:	58cb      	ldr	r3, [r1, r3]
			}
			if (dividend_array[array_count] > max) 
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
1000390e:	1c10      	adds	r0, r2, #0
10003910:	1c19      	adds	r1, r3, #0
10003912:	f005 ff8d 	bl	10009830 <__aeabi_uidiv>
10003916:	1c03      	adds	r3, r0, #0
10003918:	673b      	str	r3, [r7, #112]	; 0x70
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
1000391a:	2190      	movs	r1, #144	; 0x90
1000391c:	19c9      	adds	r1, r1, r7
1000391e:	680b      	ldr	r3, [r1, #0]
10003920:	1e5a      	subs	r2, r3, #1
10003922:	1c3b      	adds	r3, r7, #0
10003924:	3330      	adds	r3, #48	; 0x30
10003926:	0092      	lsls	r2, r2, #2
10003928:	58d3      	ldr	r3, [r2, r3]
1000392a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
1000392c:	435a      	muls	r2, r3
				                                divisor_array[array_count-2U];
1000392e:	2090      	movs	r0, #144	; 0x90
10003930:	19c0      	adds	r0, r0, r7
10003932:	6803      	ldr	r3, [r0, #0]
10003934:	1e99      	subs	r1, r3, #2
10003936:	1c3b      	adds	r3, r7, #0
10003938:	3330      	adds	r3, #48	; 0x30
1000393a:	0089      	lsls	r1, r1, #2
1000393c:	58cb      	ldr	r3, [r1, r3]
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
1000393e:	18d3      	adds	r3, r2, r3
10003940:	219c      	movs	r1, #156	; 0x9c
10003942:	19c9      	adds	r1, r1, r7
10003944:	600b      	str	r3, [r1, #0]
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
10003946:	2290      	movs	r2, #144	; 0x90
10003948:	19d2      	adds	r2, r2, r7
1000394a:	6813      	ldr	r3, [r2, #0]
1000394c:	1e5a      	subs	r2, r3, #1
1000394e:	1c3b      	adds	r3, r7, #0
10003950:	3320      	adds	r3, #32
10003952:	0092      	lsls	r2, r2, #2
10003954:	58d3      	ldr	r3, [r2, r3]
10003956:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10003958:	435a      	muls	r2, r3
				                               dividend_array[array_count_2];
1000395a:	1c3b      	adds	r3, r7, #0
1000395c:	3320      	adds	r3, #32
1000395e:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003960:	0089      	lsls	r1, r1, #2
10003962:	58cb      	ldr	r3, [r1, r3]
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
10003964:	18d3      	adds	r3, r2, r3
10003966:	2094      	movs	r0, #148	; 0x94
10003968:	19c0      	adds	r0, r0, r7
1000396a:	6003      	str	r3, [r0, #0]
				                               dividend_array[array_count_2];
				/* Swap if required */
				if (swapped) {
1000396c:	1c3b      	adds	r3, r7, #0
1000396e:	3383      	adds	r3, #131	; 0x83
10003970:	781b      	ldrb	r3, [r3, #0]
10003972:	2b00      	cmp	r3, #0
10003974:	d01b      	beq.n	100039ae <UART001_lConfigureBaudRate+0x35e>
						/* Swap divisor1 and dividend1 */
						temp = divisor1;
10003976:	21a0      	movs	r1, #160	; 0xa0
10003978:	19c9      	adds	r1, r1, r7
1000397a:	680b      	ldr	r3, [r1, #0]
1000397c:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor1 = dividend1;
1000397e:	2298      	movs	r2, #152	; 0x98
10003980:	19d2      	adds	r2, r2, r7
10003982:	6813      	ldr	r3, [r2, #0]
10003984:	20a0      	movs	r0, #160	; 0xa0
10003986:	19c0      	adds	r0, r0, r7
10003988:	6003      	str	r3, [r0, #0]
						dividend1 = temp;
1000398a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000398c:	2198      	movs	r1, #152	; 0x98
1000398e:	19c9      	adds	r1, r1, r7
10003990:	600b      	str	r3, [r1, #0]
						/* Swap divisor2 and dividend2 */
						temp = divisor2;
10003992:	229c      	movs	r2, #156	; 0x9c
10003994:	19d2      	adds	r2, r2, r7
10003996:	6813      	ldr	r3, [r2, #0]
10003998:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor2 = dividend2;
1000399a:	2094      	movs	r0, #148	; 0x94
1000399c:	19c0      	adds	r0, r0, r7
1000399e:	6803      	ldr	r3, [r0, #0]
100039a0:	219c      	movs	r1, #156	; 0x9c
100039a2:	19c9      	adds	r1, r1, r7
100039a4:	600b      	str	r3, [r1, #0]
						dividend2 = temp;
100039a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
100039a8:	2294      	movs	r2, #148	; 0x94
100039aa:	19d2      	adds	r2, r2, r7
100039ac:	6013      	str	r3, [r2, #0]
					}
				/* Remove if one of has divisor 0 */
				if ((dividend1 == 0U) || (divisor1 == 0U)) {
100039ae:	2098      	movs	r0, #152	; 0x98
100039b0:	19c0      	adds	r0, r0, r7
100039b2:	6803      	ldr	r3, [r0, #0]
100039b4:	2b00      	cmp	r3, #0
100039b6:	d004      	beq.n	100039c2 <UART001_lConfigureBaudRate+0x372>
100039b8:	21a0      	movs	r1, #160	; 0xa0
100039ba:	19c9      	adds	r1, r1, r7
100039bc:	680b      	ldr	r3, [r1, #0]
100039be:	2b00      	cmp	r3, #0
100039c0:	d10c      	bne.n	100039dc <UART001_lConfigureBaudRate+0x38c>
					fdr_step = divisor2;
100039c2:	229c      	movs	r2, #156	; 0x9c
100039c4:	19d2      	adds	r2, r2, r7
100039c6:	6813      	ldr	r3, [r2, #0]
100039c8:	20b4      	movs	r0, #180	; 0xb4
100039ca:	19c0      	adds	r0, r0, r7
100039cc:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend2;
100039ce:	2194      	movs	r1, #148	; 0x94
100039d0:	19c9      	adds	r1, r1, r7
100039d2:	680b      	ldr	r3, [r1, #0]
100039d4:	22b0      	movs	r2, #176	; 0xb0
100039d6:	19d2      	adds	r2, r2, r7
100039d8:	6013      	str	r3, [r2, #0]
100039da:	e06d      	b.n	10003ab8 <UART001_lConfigureBaudRate+0x468>
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
100039dc:	2094      	movs	r0, #148	; 0x94
100039de:	19c0      	adds	r0, r0, r7
100039e0:	6803      	ldr	r3, [r0, #0]
100039e2:	2b00      	cmp	r3, #0
100039e4:	d004      	beq.n	100039f0 <UART001_lConfigureBaudRate+0x3a0>
100039e6:	219c      	movs	r1, #156	; 0x9c
100039e8:	19c9      	adds	r1, r1, r7
100039ea:	680b      	ldr	r3, [r1, #0]
100039ec:	2b00      	cmp	r3, #0
100039ee:	d10f      	bne.n	10003a10 <UART001_lConfigureBaudRate+0x3c0>
					fdr_step = divisor1;
100039f0:	22a0      	movs	r2, #160	; 0xa0
100039f2:	19d2      	adds	r2, r2, r7
100039f4:	6813      	ldr	r3, [r2, #0]
100039f6:	20b4      	movs	r0, #180	; 0xb4
100039f8:	19c0      	adds	r0, r0, r7
100039fa:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend1;
100039fc:	2198      	movs	r1, #152	; 0x98
100039fe:	19c9      	adds	r1, r1, r7
10003a00:	680b      	ldr	r3, [r1, #0]
10003a02:	22b0      	movs	r2, #176	; 0xb0
10003a04:	19d2      	adds	r2, r2, r7
10003a06:	6013      	str	r3, [r2, #0]
10003a08:	e056      	b.n	10003ab8 <UART001_lConfigureBaudRate+0x468>
10003a0a:	46c0      	nop			; (mov r8, r8)
10003a0c:	00000c35 	.word	0x00000c35
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
10003a10:	23a0      	movs	r3, #160	; 0xa0
10003a12:	19db      	adds	r3, r3, r7
10003a14:	6818      	ldr	r0, [r3, #0]
10003a16:	f006 fcc9 	bl	1000a3ac <__aeabi_ui2f>
10003a1a:	1c04      	adds	r4, r0, #0
10003a1c:	2198      	movs	r1, #152	; 0x98
10003a1e:	19c9      	adds	r1, r1, r7
10003a20:	6808      	ldr	r0, [r1, #0]
10003a22:	f006 fcc3 	bl	1000a3ac <__aeabi_ui2f>
10003a26:	1c03      	adds	r3, r0, #0
10003a28:	1c20      	adds	r0, r4, #0
10003a2a:	1c19      	adds	r1, r3, #0
10003a2c:	f005 ffa2 	bl	10009974 <__aeabi_fdiv>
10003a30:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
10003a32:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10003a34:	1c19      	adds	r1, r3, #0
10003a36:	f006 fabf 	bl	10009fb8 <__aeabi_fsub>
10003a3a:	1c03      	adds	r3, r0, #0
10003a3c:	1c18      	adds	r0, r3, #0
10003a3e:	f7ff fdef 	bl	10003620 <UART001_labsRealType>
10003a42:	1c04      	adds	r4, r0, #0
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
10003a44:	229c      	movs	r2, #156	; 0x9c
10003a46:	19d2      	adds	r2, r2, r7
10003a48:	6810      	ldr	r0, [r2, #0]
10003a4a:	f006 fcaf 	bl	1000a3ac <__aeabi_ui2f>
10003a4e:	1c05      	adds	r5, r0, #0
10003a50:	2394      	movs	r3, #148	; 0x94
10003a52:	19db      	adds	r3, r3, r7
10003a54:	6818      	ldr	r0, [r3, #0]
10003a56:	f006 fca9 	bl	1000a3ac <__aeabi_ui2f>
10003a5a:	1c03      	adds	r3, r0, #0
10003a5c:	1c28      	adds	r0, r5, #0
10003a5e:	1c19      	adds	r1, r3, #0
10003a60:	f005 ff88 	bl	10009974 <__aeabi_fdiv>
10003a64:	1c03      	adds	r3, r0, #0
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
10003a66:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10003a68:	1c19      	adds	r1, r3, #0
10003a6a:	f006 faa5 	bl	10009fb8 <__aeabi_fsub>
10003a6e:	1c03      	adds	r3, r0, #0
10003a70:	1c18      	adds	r0, r3, #0
10003a72:	f7ff fdd5 	bl	10003620 <UART001_labsRealType>
10003a76:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
10003a78:	1c20      	adds	r0, r4, #0
10003a7a:	1c19      	adds	r1, r3, #0
10003a7c:	f005 ff4e 	bl	1000991c <__aeabi_fcmpgt>
10003a80:	1c03      	adds	r3, r0, #0
10003a82:	2b00      	cmp	r3, #0
10003a84:	d00c      	beq.n	10003aa0 <UART001_lConfigureBaudRate+0x450>
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
					{
						fdr_step = divisor2;
10003a86:	209c      	movs	r0, #156	; 0x9c
10003a88:	19c0      	adds	r0, r0, r7
10003a8a:	6803      	ldr	r3, [r0, #0]
10003a8c:	21b4      	movs	r1, #180	; 0xb4
10003a8e:	19c9      	adds	r1, r1, r7
10003a90:	600b      	str	r3, [r1, #0]
						brg_pdiv = dividend2;
10003a92:	2294      	movs	r2, #148	; 0x94
10003a94:	19d2      	adds	r2, r2, r7
10003a96:	6813      	ldr	r3, [r2, #0]
10003a98:	20b0      	movs	r0, #176	; 0xb0
10003a9a:	19c0      	adds	r0, r0, r7
10003a9c:	6003      	str	r3, [r0, #0]
10003a9e:	e00b      	b.n	10003ab8 <UART001_lConfigureBaudRate+0x468>
					}else {
						fdr_step = divisor1;
10003aa0:	21a0      	movs	r1, #160	; 0xa0
10003aa2:	19c9      	adds	r1, r1, r7
10003aa4:	680b      	ldr	r3, [r1, #0]
10003aa6:	22b4      	movs	r2, #180	; 0xb4
10003aa8:	19d2      	adds	r2, r2, r7
10003aaa:	6013      	str	r3, [r2, #0]
						brg_pdiv = dividend1;
10003aac:	2098      	movs	r0, #152	; 0x98
10003aae:	19c0      	adds	r0, r0, r7
10003ab0:	6803      	ldr	r3, [r0, #0]
10003ab2:	21b0      	movs	r1, #176	; 0xb0
10003ab4:	19c9      	adds	r1, r1, r7
10003ab6:	600b      	str	r3, [r1, #0]
					}
				}
				do_while_break = 0x05U;
10003ab8:	2305      	movs	r3, #5
10003aba:	2288      	movs	r2, #136	; 0x88
10003abc:	19d2      	adds	r2, r2, r7
10003abe:	6013      	str	r3, [r2, #0]
10003ac0:	e033      	b.n	10003b2a <UART001_lConfigureBaudRate+0x4da>
			}
			else if (remainder[array_count]== 0U) 
10003ac2:	1c3b      	adds	r3, r7, #0
10003ac4:	3340      	adds	r3, #64	; 0x40
10003ac6:	2090      	movs	r0, #144	; 0x90
10003ac8:	19c0      	adds	r0, r0, r7
10003aca:	6802      	ldr	r2, [r0, #0]
10003acc:	0092      	lsls	r2, r2, #2
10003ace:	58d3      	ldr	r3, [r2, r3]
10003ad0:	2b00      	cmp	r3, #0
10003ad2:	d12a      	bne.n	10003b2a <UART001_lConfigureBaudRate+0x4da>
			{
				fdr_step = divisor_array[array_count];
10003ad4:	1c3b      	adds	r3, r7, #0
10003ad6:	3330      	adds	r3, #48	; 0x30
10003ad8:	2190      	movs	r1, #144	; 0x90
10003ada:	19c9      	adds	r1, r1, r7
10003adc:	680a      	ldr	r2, [r1, #0]
10003ade:	0092      	lsls	r2, r2, #2
10003ae0:	58d3      	ldr	r3, [r2, r3]
10003ae2:	22b4      	movs	r2, #180	; 0xb4
10003ae4:	19d2      	adds	r2, r2, r7
10003ae6:	6013      	str	r3, [r2, #0]
				brg_pdiv = dividend_array[array_count];
10003ae8:	1c3b      	adds	r3, r7, #0
10003aea:	3320      	adds	r3, #32
10003aec:	2090      	movs	r0, #144	; 0x90
10003aee:	19c0      	adds	r0, r0, r7
10003af0:	6802      	ldr	r2, [r0, #0]
10003af2:	0092      	lsls	r2, r2, #2
10003af4:	58d3      	ldr	r3, [r2, r3]
10003af6:	21b0      	movs	r1, #176	; 0xb0
10003af8:	19c9      	adds	r1, r1, r7
10003afa:	600b      	str	r3, [r1, #0]
				if (swapped)
10003afc:	1c3b      	adds	r3, r7, #0
10003afe:	3383      	adds	r3, #131	; 0x83
10003b00:	781b      	ldrb	r3, [r3, #0]
10003b02:	2b00      	cmp	r3, #0
10003b04:	d00d      	beq.n	10003b22 <UART001_lConfigureBaudRate+0x4d2>
				{
					/* Swap fdr_step and brg_pdiv */
					temp = fdr_step;
10003b06:	22b4      	movs	r2, #180	; 0xb4
10003b08:	19d2      	adds	r2, r2, r7
10003b0a:	6813      	ldr	r3, [r2, #0]
10003b0c:	67fb      	str	r3, [r7, #124]	; 0x7c
					fdr_step = brg_pdiv;
10003b0e:	20b0      	movs	r0, #176	; 0xb0
10003b10:	19c0      	adds	r0, r0, r7
10003b12:	6803      	ldr	r3, [r0, #0]
10003b14:	21b4      	movs	r1, #180	; 0xb4
10003b16:	19c9      	adds	r1, r1, r7
10003b18:	600b      	str	r3, [r1, #0]
					brg_pdiv = temp;
10003b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10003b1c:	22b0      	movs	r2, #176	; 0xb0
10003b1e:	19d2      	adds	r2, r2, r7
10003b20:	6013      	str	r3, [r2, #0]
				}
				do_while_break = 0x05U;
10003b22:	2305      	movs	r3, #5
10003b24:	2088      	movs	r0, #136	; 0x88
10003b26:	19c0      	adds	r0, r0, r7
10003b28:	6003      	str	r3, [r0, #0]
			}
			else {
			  /* Do Nothing */
			}
		} while (do_while_break != 0x05U);
10003b2a:	2188      	movs	r1, #136	; 0x88
10003b2c:	19c9      	adds	r1, r1, r7
10003b2e:	680b      	ldr	r3, [r1, #0]
10003b30:	2b05      	cmp	r3, #5
10003b32:	d000      	beq.n	10003b36 <UART001_lConfigureBaudRate+0x4e6>
10003b34:	e607      	b.n	10003746 <UART001_lConfigureBaudRate+0xf6>

	if(fdr_step >= UART001_MAX_VALUE)
10003b36:	23b4      	movs	r3, #180	; 0xb4
10003b38:	19db      	adds	r3, r3, r7
10003b3a:	681a      	ldr	r2, [r3, #0]
10003b3c:	4b0a      	ldr	r3, [pc, #40]	; (10003b68 <UART001_lConfigureBaudRate+0x518>)
10003b3e:	429a      	cmp	r2, r3
10003b40:	d903      	bls.n	10003b4a <UART001_lConfigureBaudRate+0x4fa>
	{
	   fdr_step = 1023U;
10003b42:	4b09      	ldr	r3, [pc, #36]	; (10003b68 <UART001_lConfigureBaudRate+0x518>)
10003b44:	20b4      	movs	r0, #180	; 0xb4
10003b46:	19c0      	adds	r0, r0, r7
10003b48:	6003      	str	r3, [r0, #0]
	}

	*Step = fdr_step;
10003b4a:	687b      	ldr	r3, [r7, #4]
10003b4c:	21b4      	movs	r1, #180	; 0xb4
10003b4e:	19c9      	adds	r1, r1, r7
10003b50:	680a      	ldr	r2, [r1, #0]
10003b52:	601a      	str	r2, [r3, #0]

	*Pdiv = brg_pdiv - 1U;
10003b54:	22b0      	movs	r2, #176	; 0xb0
10003b56:	19d2      	adds	r2, r2, r7
10003b58:	6813      	ldr	r3, [r2, #0]
10003b5a:	1e5a      	subs	r2, r3, #1
10003b5c:	68bb      	ldr	r3, [r7, #8]
10003b5e:	601a      	str	r2, [r3, #0]
}
10003b60:	46bd      	mov	sp, r7
10003b62:	b02e      	add	sp, #184	; 0xb8
10003b64:	bdb0      	pop	{r4, r5, r7, pc}
10003b66:	46c0      	nop			; (mov r8, r8)
10003b68:	000003ff 	.word	0x000003ff

10003b6c <UART001_Init>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
void UART001_Init(void)
{
10003b6c:	b580      	push	{r7, lr}
10003b6e:	b082      	sub	sp, #8
10003b70:	af00      	add	r7, sp, #0
    #if (__TARGET_DEVICE__ != XMC45)
	#if ((__TARGET_DEVICE__ == XMC13) || \
	     (__TARGET_DEVICE__ == XMC12) || \
	     (__TARGET_DEVICE__ == XMC11))
	  /* Disable the USIC0/USIC1 clock gating for XMC1000 devices */	     
	  SCU_GENERAL->PASSWD = 0x000000C0UL;
10003b72:	4b1d      	ldr	r3, [pc, #116]	; (10003be8 <UART001_Init+0x7c>)
10003b74:	22c0      	movs	r2, #192	; 0xc0
10003b76:	625a      	str	r2, [r3, #36]	; 0x24
	  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, \
10003b78:	4b1c      	ldr	r3, [pc, #112]	; (10003bec <UART001_Init+0x80>)
10003b7a:	4a1c      	ldr	r2, [pc, #112]	; (10003bec <UART001_Init+0x80>)
10003b7c:	6812      	ldr	r2, [r2, #0]
10003b7e:	491c      	ldr	r1, [pc, #112]	; (10003bf0 <UART001_Init+0x84>)
10003b80:	430a      	orrs	r2, r1
10003b82:	601a      	str	r2, [r3, #0]
	                                SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);

	  #if defined(UART001_PER0_USIC0_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_USIC0_Pos);
10003b84:	4b19      	ldr	r3, [pc, #100]	; (10003bec <UART001_Init+0x80>)
10003b86:	4a19      	ldr	r2, [pc, #100]	; (10003bec <UART001_Init+0x80>)
10003b88:	6912      	ldr	r2, [r2, #16]
10003b8a:	2108      	movs	r1, #8
10003b8c:	430a      	orrs	r2, r1
10003b8e:	611a      	str	r2, [r3, #16]
      #endif
      #if defined(UART001_PER1_USIC1_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR1, SCU_CLK_CGATCLR1_USIC1_Pos);
	  #endif
	  while ((SCU_CLK->CLKCR)&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003b90:	46c0      	nop			; (mov r8, r8)
10003b92:	4b16      	ldr	r3, [pc, #88]	; (10003bec <UART001_Init+0x80>)
10003b94:	681a      	ldr	r2, [r3, #0]
10003b96:	2380      	movs	r3, #128	; 0x80
10003b98:	05db      	lsls	r3, r3, #23
10003b9a:	4013      	ands	r3, r2
10003b9c:	d1f9      	bne.n	10003b92 <UART001_Init+0x26>
	  {
	  	;
	  }
	  SCU_GENERAL->PASSWD = 0x000000C3UL;
10003b9e:	4b12      	ldr	r3, [pc, #72]	; (10003be8 <UART001_Init+0x7c>)
10003ba0:	22c3      	movs	r2, #195	; 0xc3
10003ba2:	625a      	str	r2, [r3, #36]	; 0x24
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10003ba4:	2300      	movs	r3, #0
10003ba6:	607b      	str	r3, [r7, #4]
10003ba8:	e017      	b.n	10003bda <UART001_Init+0x6e>
	                           LoopIndex++)
   {
	  if (UART001_HandleArray[LoopIndex]->Mode == UART_HALFDUPLEX)
10003baa:	4b12      	ldr	r3, [pc, #72]	; (10003bf4 <UART001_Init+0x88>)
10003bac:	687a      	ldr	r2, [r7, #4]
10003bae:	0092      	lsls	r2, r2, #2
10003bb0:	58d3      	ldr	r3, [r2, r3]
10003bb2:	7d1b      	ldrb	r3, [r3, #20]
10003bb4:	2b01      	cmp	r3, #1
10003bb6:	d106      	bne.n	10003bc6 <UART001_Init+0x5a>
	  {
	   /*Configure TX Pin in Open-drain mode to allow the Wired-AND connection*/
		UART001_lConfigTXPin(UART001_HandleArray[LoopIndex]);
10003bb8:	4b0e      	ldr	r3, [pc, #56]	; (10003bf4 <UART001_Init+0x88>)
10003bba:	687a      	ldr	r2, [r7, #4]
10003bbc:	0092      	lsls	r2, r2, #2
10003bbe:	58d3      	ldr	r3, [r2, r3]
10003bc0:	1c18      	adds	r0, r3, #0
10003bc2:	f7ff fcbd 	bl	10003540 <UART001_lConfigTXPin>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
10003bc6:	4b0b      	ldr	r3, [pc, #44]	; (10003bf4 <UART001_Init+0x88>)
10003bc8:	687a      	ldr	r2, [r7, #4]
10003bca:	0092      	lsls	r2, r2, #2
10003bcc:	58d3      	ldr	r3, [r2, r3]
10003bce:	1c18      	adds	r0, r3, #0
10003bd0:	f7ff fbdc 	bl	1000338c <UART001_lInit>
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
	                           LoopIndex++)
10003bd4:	687b      	ldr	r3, [r7, #4]
10003bd6:	3301      	adds	r3, #1
10003bd8:	607b      	str	r3, [r7, #4]
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10003bda:	687b      	ldr	r3, [r7, #4]
10003bdc:	2b00      	cmp	r3, #0
10003bde:	d0e4      	beq.n	10003baa <UART001_Init+0x3e>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
   }
   
}
10003be0:	46bd      	mov	sp, r7
10003be2:	b002      	add	sp, #8
10003be4:	bd80      	pop	{r7, pc}
10003be6:	46c0      	nop			; (mov r8, r8)
10003be8:	40010000 	.word	0x40010000
10003bec:	40010300 	.word	0x40010300
10003bf0:	3ff00000 	.word	0x3ff00000
10003bf4:	200020a0 	.word	0x200020a0

10003bf8 <UART001_DeInit>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
 void  UART001_DeInit (const UART001_HandleType* Handle)
{
10003bf8:	b580      	push	{r7, lr}
10003bfa:	b082      	sub	sp, #8
10003bfc:	af00      	add	r7, sp, #0
10003bfe:	6078      	str	r0, [r7, #4]
  /* <<<DD_UART001_API_2>>> */
  /* Place holder function */      
}
10003c00:	46bd      	mov	sp, r7
10003c02:	b002      	add	sp, #8
10003c04:	bd80      	pop	{r7, pc}
10003c06:	46c0      	nop			; (mov r8, r8)

10003c08 <UART001_Configure>:
  const UART001_HandleType* Handle,
  uint32_t BaudRate,
  UART_ParityType Parity,
  UART_StopBitType Stopbit
)
{
10003c08:	b580      	push	{r7, lr}
10003c0a:	b08a      	sub	sp, #40	; 0x28
10003c0c:	af00      	add	r7, sp, #0
10003c0e:	60f8      	str	r0, [r7, #12]
10003c10:	60b9      	str	r1, [r7, #8]
10003c12:	1c11      	adds	r1, r2, #0
10003c14:	1c1a      	adds	r2, r3, #0
10003c16:	1dfb      	adds	r3, r7, #7
10003c18:	7019      	strb	r1, [r3, #0]
10003c1a:	1dbb      	adds	r3, r7, #6
10003c1c:	701a      	strb	r2, [r3, #0]
   uint32_t Brg_Pdiv = 0x00U;
10003c1e:	2300      	movs	r3, #0
10003c20:	617b      	str	r3, [r7, #20]
   uint32_t Fdr_Step = 0x00U;
10003c22:	2300      	movs	r3, #0
10003c24:	613b      	str	r3, [r7, #16]
   uint32_t TXIDLE_status;
   uint32_t RXIDLE_status;
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10003c26:	68fb      	ldr	r3, [r7, #12]
10003c28:	681b      	ldr	r3, [r3, #0]
10003c2a:	623b      	str	r3, [r7, #32]
   status_t Status = (status_t)UART001_ERROR;
10003c2c:	2305      	movs	r3, #5
10003c2e:	627b      	str	r3, [r7, #36]	; 0x24
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
10003c30:	6a3b      	ldr	r3, [r7, #32]
10003c32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
   status_t Status = (status_t)UART001_ERROR;
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
10003c34:	2301      	movs	r3, #1
10003c36:	4013      	ands	r3, r2
10003c38:	61fb      	str	r3, [r7, #28]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
10003c3a:	6a3b      	ldr	r3, [r7, #32]
10003c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10003c3e:	2302      	movs	r3, #2
10003c40:	4013      	ands	r3, r2

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
10003c42:	085b      	lsrs	r3, r3, #1
10003c44:	61bb      	str	r3, [r7, #24]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_RXIDLE_Pos);
   if(( TXIDLE_status & RXIDLE_status) == 0x01U)
10003c46:	69fb      	ldr	r3, [r7, #28]
10003c48:	69ba      	ldr	r2, [r7, #24]
10003c4a:	4013      	ands	r3, r2
10003c4c:	2b01      	cmp	r3, #1
10003c4e:	d156      	bne.n	10003cfe <UART001_Configure+0xf6>
    {
      /* Disable UART mode before configuring all USIC registers to avoid 
       * unintended edges */ 
      UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)));  
10003c50:	6a3b      	ldr	r3, [r7, #32]
10003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003c54:	2202      	movs	r2, #2
10003c56:	1c19      	adds	r1, r3, #0
10003c58:	4391      	bics	r1, r2
10003c5a:	1c0a      	adds	r2, r1, #0
10003c5c:	6a3b      	ldr	r3, [r7, #32]
10003c5e:	641a      	str	r2, [r3, #64]	; 0x40
	  
      /* Configuration of USIC Channel Fractional Divider */
      UART001_lConfigureBaudRate(BaudRate,&Brg_Pdiv,&Fdr_Step);
10003c60:	68b9      	ldr	r1, [r7, #8]
10003c62:	1c3a      	adds	r2, r7, #0
10003c64:	3214      	adds	r2, #20
10003c66:	1c3b      	adds	r3, r7, #0
10003c68:	3310      	adds	r3, #16
10003c6a:	1c08      	adds	r0, r1, #0
10003c6c:	1c11      	adds	r1, r2, #0
10003c6e:	1c1a      	adds	r2, r3, #0
10003c70:	f7ff fcee 	bl	10003650 <UART001_lConfigureBaudRate>

      /* Step value: 0x3FF */
      UartRegs->FDR &= ~(USIC_CH_FDR_STEP_Msk);
10003c74:	6a3b      	ldr	r3, [r7, #32]
10003c76:	691b      	ldr	r3, [r3, #16]
10003c78:	0a9b      	lsrs	r3, r3, #10
10003c7a:	029a      	lsls	r2, r3, #10
10003c7c:	6a3b      	ldr	r3, [r7, #32]
10003c7e:	611a      	str	r2, [r3, #16]
      UartRegs->FDR |= ( Fdr_Step & USIC_CH_FDR_STEP_Msk);
10003c80:	6a3b      	ldr	r3, [r7, #32]
10003c82:	691a      	ldr	r2, [r3, #16]
10003c84:	693b      	ldr	r3, [r7, #16]
10003c86:	059b      	lsls	r3, r3, #22
10003c88:	0d9b      	lsrs	r3, r3, #22
10003c8a:	431a      	orrs	r2, r3
10003c8c:	6a3b      	ldr	r3, [r7, #32]
10003c8e:	611a      	str	r2, [r3, #16]
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
10003c90:	6a3b      	ldr	r3, [r7, #32]
10003c92:	695a      	ldr	r2, [r3, #20]
10003c94:	4b1d      	ldr	r3, [pc, #116]	; (10003d0c <UART001_Configure+0x104>)
10003c96:	401a      	ands	r2, r3
10003c98:	6a3b      	ldr	r3, [r7, #32]
10003c9a:	615a      	str	r2, [r3, #20]
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10003c9c:	6a3b      	ldr	r3, [r7, #32]
10003c9e:	695a      	ldr	r2, [r3, #20]
10003ca0:	697b      	ldr	r3, [r7, #20]
10003ca2:	0419      	lsls	r1, r3, #16
    		                                          &  USIC_CH_BRG_PDIV_Msk));
10003ca4:	4b1a      	ldr	r3, [pc, #104]	; (10003d10 <UART001_Configure+0x108>)
10003ca6:	400b      	ands	r3, r1
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10003ca8:	431a      	orrs	r2, r3
10003caa:	6a3b      	ldr	r3, [r7, #32]
10003cac:	615a      	str	r2, [r3, #20]
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
10003cae:	6a3b      	ldr	r3, [r7, #32]
10003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003cb2:	2202      	movs	r2, #2
10003cb4:	1c19      	adds	r1, r3, #0
10003cb6:	4391      	bics	r1, r2
10003cb8:	1c0a      	adds	r2, r1, #0
10003cba:	6a3b      	ldr	r3, [r7, #32]
10003cbc:	63da      	str	r2, [r3, #60]	; 0x3c
      UartRegs->PCR_ASCMode |= \
10003cbe:	6a3b      	ldr	r3, [r7, #32]
10003cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
10003cc2:	1dbb      	adds	r3, r7, #6
10003cc4:	781b      	ldrb	r3, [r3, #0]
10003cc6:	0059      	lsls	r1, r3, #1
10003cc8:	2302      	movs	r3, #2
10003cca:	400b      	ands	r3, r1
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
      UartRegs->PCR_ASCMode |= \
10003ccc:	431a      	orrs	r2, r3
10003cce:	6a3b      	ldr	r3, [r7, #32]
10003cd0:	63da      	str	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
10003cd2:	6a3b      	ldr	r3, [r7, #32]
10003cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10003cd6:	4b0f      	ldr	r3, [pc, #60]	; (10003d14 <UART001_Configure+0x10c>)
10003cd8:	401a      	ands	r2, r3
10003cda:	6a3b      	ldr	r3, [r7, #32]
10003cdc:	641a      	str	r2, [r3, #64]	; 0x40
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10003cde:	6a3b      	ldr	r3, [r7, #32]
10003ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
10003ce2:	1dfb      	adds	r3, r7, #7
10003ce4:	781b      	ldrb	r3, [r3, #0]
10003ce6:	0219      	lsls	r1, r3, #8
10003ce8:	23c0      	movs	r3, #192	; 0xc0
10003cea:	009b      	lsls	r3, r3, #2
10003cec:	400b      	ands	r3, r1
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10003cee:	4313      	orrs	r3, r2
10003cf0:	2202      	movs	r2, #2
10003cf2:	431a      	orrs	r2, r3
10003cf4:	6a3b      	ldr	r3, [r7, #32]
10003cf6:	641a      	str	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
                                                       USIC_CH_CCR_PM_Msk));

      Status = (status_t)DAVEApp_SUCCESS;
10003cf8:	2300      	movs	r3, #0
10003cfa:	627b      	str	r3, [r7, #36]	; 0x24
10003cfc:	e001      	b.n	10003d02 <UART001_Configure+0xfa>
    }
    else
    {
      Status = (status_t)UART001_BUSY;
10003cfe:	2303      	movs	r3, #3
10003d00:	627b      	str	r3, [r7, #36]	; 0x24
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
    }
  
  return Status;
10003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
10003d04:	1c18      	adds	r0, r3, #0
10003d06:	46bd      	mov	sp, r7
10003d08:	b00a      	add	sp, #40	; 0x28
10003d0a:	bd80      	pop	{r7, pc}
10003d0c:	fc00ffff 	.word	0xfc00ffff
10003d10:	03ff0000 	.word	0x03ff0000
10003d14:	fffffcff 	.word	0xfffffcff

10003d18 <UART001_ReadDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{ 
10003d18:	b580      	push	{r7, lr}
10003d1a:	b086      	sub	sp, #24
10003d1c:	af00      	add	r7, sp, #0
10003d1e:	60f8      	str	r0, [r7, #12]
10003d20:	60b9      	str	r1, [r7, #8]
10003d22:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
10003d24:	2300      	movs	r3, #0
10003d26:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10003d28:	68fb      	ldr	r3, [r7, #12]
10003d2a:	681b      	ldr	r3, [r3, #0]
10003d2c:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
10003d2e:	68fb      	ldr	r3, [r7, #12]
10003d30:	7fdb      	ldrb	r3, [r3, #31]
10003d32:	2b00      	cmp	r3, #0
10003d34:	d01c      	beq.n	10003d70 <UART001_ReadDataMultiple+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10003d36:	e00f      	b.n	10003d58 <UART001_ReadDataMultiple+0x40>
	  {
		*DataPtr = (uint16_t)UartRegs->OUTR;
10003d38:	693a      	ldr	r2, [r7, #16]
10003d3a:	238e      	movs	r3, #142	; 0x8e
10003d3c:	005b      	lsls	r3, r3, #1
10003d3e:	58d3      	ldr	r3, [r2, r3]
10003d40:	b29a      	uxth	r2, r3
10003d42:	68bb      	ldr	r3, [r7, #8]
10003d44:	801a      	strh	r2, [r3, #0]
		Count--;
10003d46:	687b      	ldr	r3, [r7, #4]
10003d48:	3b01      	subs	r3, #1
10003d4a:	607b      	str	r3, [r7, #4]
		ReadCount++;
10003d4c:	697b      	ldr	r3, [r7, #20]
10003d4e:	3301      	adds	r3, #1
10003d50:	617b      	str	r3, [r7, #20]
		DataPtr++;
10003d52:	68bb      	ldr	r3, [r7, #8]
10003d54:	3302      	adds	r3, #2
10003d56:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10003d58:	693a      	ldr	r2, [r7, #16]
10003d5a:	238a      	movs	r3, #138	; 0x8a
10003d5c:	005b      	lsls	r3, r3, #1
10003d5e:	58d2      	ldr	r2, [r2, r3]
10003d60:	2308      	movs	r3, #8
10003d62:	4013      	ands	r3, r2
10003d64:	08db      	lsrs	r3, r3, #3
10003d66:	d10b      	bne.n	10003d80 <UART001_ReadDataMultiple+0x68>
10003d68:	687b      	ldr	r3, [r7, #4]
10003d6a:	2b00      	cmp	r3, #0
10003d6c:	d1e4      	bne.n	10003d38 <UART001_ReadDataMultiple+0x20>
10003d6e:	e007      	b.n	10003d80 <UART001_ReadDataMultiple+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint16_t)UartRegs->RBUF;
10003d70:	693b      	ldr	r3, [r7, #16]
10003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003d74:	b29a      	uxth	r2, r3
10003d76:	68bb      	ldr	r3, [r7, #8]
10003d78:	801a      	strh	r2, [r3, #0]
	  ReadCount++;
10003d7a:	697b      	ldr	r3, [r7, #20]
10003d7c:	3301      	adds	r3, #1
10003d7e:	617b      	str	r3, [r7, #20]
  }
  return ReadCount;
10003d80:	697b      	ldr	r3, [r7, #20]
}
10003d82:	1c18      	adds	r0, r3, #0
10003d84:	46bd      	mov	sp, r7
10003d86:	b006      	add	sp, #24
10003d88:	bd80      	pop	{r7, pc}
10003d8a:	46c0      	nop			; (mov r8, r8)

10003d8c <UART001_ReadDataBytes>:
(
  const UART001_HandleType* Handle,
  uint8_t* DataPtr,
  uint32_t Count
)
{ 
10003d8c:	b580      	push	{r7, lr}
10003d8e:	b086      	sub	sp, #24
10003d90:	af00      	add	r7, sp, #0
10003d92:	60f8      	str	r0, [r7, #12]
10003d94:	60b9      	str	r1, [r7, #8]
10003d96:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
10003d98:	2300      	movs	r3, #0
10003d9a:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10003d9c:	68fb      	ldr	r3, [r7, #12]
10003d9e:	681b      	ldr	r3, [r3, #0]
10003da0:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
10003da2:	68fb      	ldr	r3, [r7, #12]
10003da4:	7fdb      	ldrb	r3, [r3, #31]
10003da6:	2b00      	cmp	r3, #0
10003da8:	d01c      	beq.n	10003de4 <UART001_ReadDataBytes+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10003daa:	e00f      	b.n	10003dcc <UART001_ReadDataBytes+0x40>
	  {
		*DataPtr = (uint8_t)UartRegs->OUTR;
10003dac:	693a      	ldr	r2, [r7, #16]
10003dae:	238e      	movs	r3, #142	; 0x8e
10003db0:	005b      	lsls	r3, r3, #1
10003db2:	58d3      	ldr	r3, [r2, r3]
10003db4:	b2da      	uxtb	r2, r3
10003db6:	68bb      	ldr	r3, [r7, #8]
10003db8:	701a      	strb	r2, [r3, #0]
		Count--;
10003dba:	687b      	ldr	r3, [r7, #4]
10003dbc:	3b01      	subs	r3, #1
10003dbe:	607b      	str	r3, [r7, #4]
		ReadCount++;
10003dc0:	697b      	ldr	r3, [r7, #20]
10003dc2:	3301      	adds	r3, #1
10003dc4:	617b      	str	r3, [r7, #20]
		DataPtr++;
10003dc6:	68bb      	ldr	r3, [r7, #8]
10003dc8:	3301      	adds	r3, #1
10003dca:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10003dcc:	693a      	ldr	r2, [r7, #16]
10003dce:	238a      	movs	r3, #138	; 0x8a
10003dd0:	005b      	lsls	r3, r3, #1
10003dd2:	58d2      	ldr	r2, [r2, r3]
10003dd4:	2308      	movs	r3, #8
10003dd6:	4013      	ands	r3, r2
10003dd8:	08db      	lsrs	r3, r3, #3
10003dda:	d10b      	bne.n	10003df4 <UART001_ReadDataBytes+0x68>
10003ddc:	687b      	ldr	r3, [r7, #4]
10003dde:	2b00      	cmp	r3, #0
10003de0:	d1e4      	bne.n	10003dac <UART001_ReadDataBytes+0x20>
10003de2:	e007      	b.n	10003df4 <UART001_ReadDataBytes+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint8_t)UartRegs->RBUF;
10003de4:	693b      	ldr	r3, [r7, #16]
10003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003de8:	b2da      	uxtb	r2, r3
10003dea:	68bb      	ldr	r3, [r7, #8]
10003dec:	701a      	strb	r2, [r3, #0]
	  ReadCount++;
10003dee:	697b      	ldr	r3, [r7, #20]
10003df0:	3301      	adds	r3, #1
10003df2:	617b      	str	r3, [r7, #20]
  }  
  return ReadCount;
10003df4:	697b      	ldr	r3, [r7, #20]
}
10003df6:	1c18      	adds	r0, r3, #0
10003df8:	46bd      	mov	sp, r7
10003dfa:	b006      	add	sp, #24
10003dfc:	bd80      	pop	{r7, pc}
10003dfe:	46c0      	nop			; (mov r8, r8)

10003e00 <UART001_WriteDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{
10003e00:	b580      	push	{r7, lr}
10003e02:	b086      	sub	sp, #24
10003e04:	af00      	add	r7, sp, #0
10003e06:	60f8      	str	r0, [r7, #12]
10003e08:	60b9      	str	r1, [r7, #8]
10003e0a:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10003e0c:	2300      	movs	r3, #0
10003e0e:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
10003e10:	68fb      	ldr	r3, [r7, #12]
10003e12:	681b      	ldr	r3, [r3, #0]
10003e14:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
10003e16:	68fb      	ldr	r3, [r7, #12]
10003e18:	7f9b      	ldrb	r3, [r3, #30]
10003e1a:	2b00      	cmp	r3, #0
10003e1c:	d01d      	beq.n	10003e5a <UART001_WriteDataMultiple+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10003e1e:	e00f      	b.n	10003e40 <UART001_WriteDataMultiple+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10003e20:	68bb      	ldr	r3, [r7, #8]
10003e22:	881b      	ldrh	r3, [r3, #0]
10003e24:	1c19      	adds	r1, r3, #0
10003e26:	693a      	ldr	r2, [r7, #16]
10003e28:	23c0      	movs	r3, #192	; 0xc0
10003e2a:	005b      	lsls	r3, r3, #1
10003e2c:	50d1      	str	r1, [r2, r3]
		Count--;
10003e2e:	687b      	ldr	r3, [r7, #4]
10003e30:	3b01      	subs	r3, #1
10003e32:	607b      	str	r3, [r7, #4]
		WriteCount++;
10003e34:	697b      	ldr	r3, [r7, #20]
10003e36:	3301      	adds	r3, #1
10003e38:	617b      	str	r3, [r7, #20]
		DataPtr++;
10003e3a:	68bb      	ldr	r3, [r7, #8]
10003e3c:	3302      	adds	r3, #2
10003e3e:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10003e40:	693a      	ldr	r2, [r7, #16]
10003e42:	238a      	movs	r3, #138	; 0x8a
10003e44:	005b      	lsls	r3, r3, #1
10003e46:	58d2      	ldr	r2, [r2, r3]
10003e48:	2380      	movs	r3, #128	; 0x80
10003e4a:	015b      	lsls	r3, r3, #5
10003e4c:	4013      	ands	r3, r2
10003e4e:	0b1b      	lsrs	r3, r3, #12
10003e50:	d111      	bne.n	10003e76 <UART001_WriteDataMultiple+0x76>
10003e52:	687b      	ldr	r3, [r7, #4]
10003e54:	2b00      	cmp	r3, #0
10003e56:	d1e3      	bne.n	10003e20 <UART001_WriteDataMultiple+0x20>
10003e58:	e00d      	b.n	10003e76 <UART001_WriteDataMultiple+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
10003e5a:	693b      	ldr	r3, [r7, #16]
10003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10003e5e:	2380      	movs	r3, #128	; 0x80
10003e60:	4013      	ands	r3, r2
10003e62:	d108      	bne.n	10003e76 <UART001_WriteDataMultiple+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
10003e64:	68bb      	ldr	r3, [r7, #8]
10003e66:	881b      	ldrh	r3, [r3, #0]
10003e68:	1c19      	adds	r1, r3, #0
10003e6a:	693a      	ldr	r2, [r7, #16]
10003e6c:	2380      	movs	r3, #128	; 0x80
10003e6e:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
10003e70:	697b      	ldr	r3, [r7, #20]
10003e72:	3301      	adds	r3, #1
10003e74:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
10003e76:	697b      	ldr	r3, [r7, #20]
}
10003e78:	1c18      	adds	r0, r3, #0
10003e7a:	46bd      	mov	sp, r7
10003e7c:	b006      	add	sp, #24
10003e7e:	bd80      	pop	{r7, pc}

10003e80 <UART001_WriteDataBytes>:
(
  const UART001_HandleType* Handle,
  const uint8_t* DataPtr,
  uint32_t Count
)
{
10003e80:	b580      	push	{r7, lr}
10003e82:	b086      	sub	sp, #24
10003e84:	af00      	add	r7, sp, #0
10003e86:	60f8      	str	r0, [r7, #12]
10003e88:	60b9      	str	r1, [r7, #8]
10003e8a:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10003e8c:	2300      	movs	r3, #0
10003e8e:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
10003e90:	68fb      	ldr	r3, [r7, #12]
10003e92:	681b      	ldr	r3, [r3, #0]
10003e94:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
10003e96:	68fb      	ldr	r3, [r7, #12]
10003e98:	7f9b      	ldrb	r3, [r3, #30]
10003e9a:	2b00      	cmp	r3, #0
10003e9c:	d01d      	beq.n	10003eda <UART001_WriteDataBytes+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10003e9e:	e00f      	b.n	10003ec0 <UART001_WriteDataBytes+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10003ea0:	68bb      	ldr	r3, [r7, #8]
10003ea2:	781b      	ldrb	r3, [r3, #0]
10003ea4:	1c19      	adds	r1, r3, #0
10003ea6:	693a      	ldr	r2, [r7, #16]
10003ea8:	23c0      	movs	r3, #192	; 0xc0
10003eaa:	005b      	lsls	r3, r3, #1
10003eac:	50d1      	str	r1, [r2, r3]
		Count--;
10003eae:	687b      	ldr	r3, [r7, #4]
10003eb0:	3b01      	subs	r3, #1
10003eb2:	607b      	str	r3, [r7, #4]
		WriteCount++;
10003eb4:	697b      	ldr	r3, [r7, #20]
10003eb6:	3301      	adds	r3, #1
10003eb8:	617b      	str	r3, [r7, #20]
		DataPtr++;
10003eba:	68bb      	ldr	r3, [r7, #8]
10003ebc:	3301      	adds	r3, #1
10003ebe:	60bb      	str	r3, [r7, #8]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10003ec0:	693a      	ldr	r2, [r7, #16]
10003ec2:	238a      	movs	r3, #138	; 0x8a
10003ec4:	005b      	lsls	r3, r3, #1
10003ec6:	58d2      	ldr	r2, [r2, r3]
10003ec8:	2380      	movs	r3, #128	; 0x80
10003eca:	015b      	lsls	r3, r3, #5
10003ecc:	4013      	ands	r3, r2
10003ece:	0b1b      	lsrs	r3, r3, #12
10003ed0:	d111      	bne.n	10003ef6 <UART001_WriteDataBytes+0x76>
10003ed2:	687b      	ldr	r3, [r7, #4]
10003ed4:	2b00      	cmp	r3, #0
10003ed6:	d1e3      	bne.n	10003ea0 <UART001_WriteDataBytes+0x20>
10003ed8:	e00d      	b.n	10003ef6 <UART001_WriteDataBytes+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */  
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
10003eda:	693b      	ldr	r3, [r7, #16]
10003edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10003ede:	2380      	movs	r3, #128	; 0x80
10003ee0:	4013      	ands	r3, r2
10003ee2:	d108      	bne.n	10003ef6 <UART001_WriteDataBytes+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
10003ee4:	68bb      	ldr	r3, [r7, #8]
10003ee6:	781b      	ldrb	r3, [r3, #0]
10003ee8:	1c19      	adds	r1, r3, #0
10003eea:	693a      	ldr	r2, [r7, #16]
10003eec:	2380      	movs	r3, #128	; 0x80
10003eee:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
10003ef0:	697b      	ldr	r3, [r7, #20]
10003ef2:	3301      	adds	r3, #1
10003ef4:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
10003ef6:	697b      	ldr	r3, [r7, #20]
}
10003ef8:	1c18      	adds	r0, r3, #0
10003efa:	46bd      	mov	sp, r7
10003efc:	b006      	add	sp, #24
10003efe:	bd80      	pop	{r7, pc}

10003f00 <UART001_GetFlagStatus>:
status_t UART001_GetFlagStatus 
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
10003f00:	b580      	push	{r7, lr}
10003f02:	b086      	sub	sp, #24
10003f04:	af00      	add	r7, sp, #0
10003f06:	6078      	str	r0, [r7, #4]
10003f08:	1c0a      	adds	r2, r1, #0
10003f0a:	1cfb      	adds	r3, r7, #3
10003f0c:	701a      	strb	r2, [r3, #0]
  status_t Status = (status_t)UART001_RESET;
10003f0e:	2301      	movs	r3, #1
10003f10:	617b      	str	r3, [r7, #20]
  uint32_t TempValue = 0x00U;
10003f12:	2300      	movs	r3, #0
10003f14:	613b      	str	r3, [r7, #16]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10003f16:	687b      	ldr	r3, [r7, #4]
10003f18:	681b      	ldr	r3, [r3, #0]
10003f1a:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_7>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10003f1c:	1cfb      	adds	r3, r7, #3
10003f1e:	781b      	ldrb	r3, [r3, #0]
10003f20:	2b0f      	cmp	r3, #15
10003f22:	d80a      	bhi.n	10003f3a <UART001_GetFlagStatus+0x3a>
  {
    TempValue = UartRegs->PSR_ASCMode;
10003f24:	68fb      	ldr	r3, [r7, #12]
10003f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003f28:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
10003f2a:	1cfb      	adds	r3, r7, #3
10003f2c:	781b      	ldrb	r3, [r3, #0]
10003f2e:	2201      	movs	r2, #1
10003f30:	409a      	lsls	r2, r3
10003f32:	693b      	ldr	r3, [r7, #16]
10003f34:	4013      	ands	r3, r2
10003f36:	613b      	str	r3, [r7, #16]
10003f38:	e01e      	b.n	10003f78 <UART001_GetFlagStatus+0x78>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
10003f3a:	1cfb      	adds	r3, r7, #3
10003f3c:	781b      	ldrb	r3, [r3, #0]
10003f3e:	2b12      	cmp	r3, #18
10003f40:	d80d      	bhi.n	10003f5e <UART001_GetFlagStatus+0x5e>
  {
    TempValue = UartRegs->TRBSR;
10003f42:	68fa      	ldr	r2, [r7, #12]
10003f44:	238a      	movs	r3, #138	; 0x8a
10003f46:	005b      	lsls	r3, r3, #1
10003f48:	58d3      	ldr	r3, [r2, r3]
10003f4a:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
10003f4c:	1cfb      	adds	r3, r7, #3
10003f4e:	781b      	ldrb	r3, [r3, #0]
10003f50:	3b10      	subs	r3, #16
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
10003f52:	2201      	movs	r2, #1
10003f54:	409a      	lsls	r2, r3
10003f56:	693b      	ldr	r3, [r7, #16]
10003f58:	4013      	ands	r3, r2
10003f5a:	613b      	str	r3, [r7, #16]
10003f5c:	e00c      	b.n	10003f78 <UART001_GetFlagStatus+0x78>
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
10003f5e:	68fa      	ldr	r2, [r7, #12]
10003f60:	238a      	movs	r3, #138	; 0x8a
10003f62:	005b      	lsls	r3, r3, #1
10003f64:	58d3      	ldr	r3, [r2, r3]
10003f66:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
10003f68:	1cfb      	adds	r3, r7, #3
10003f6a:	781b      	ldrb	r3, [r3, #0]
10003f6c:	3b0b      	subs	r3, #11
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
10003f6e:	2201      	movs	r2, #1
10003f70:	409a      	lsls	r2, r3
10003f72:	693b      	ldr	r3, [r7, #16]
10003f74:	4013      	ands	r3, r2
10003f76:	613b      	str	r3, [r7, #16]
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
  } 

  if(TempValue)
10003f78:	693b      	ldr	r3, [r7, #16]
10003f7a:	2b00      	cmp	r3, #0
10003f7c:	d001      	beq.n	10003f82 <UART001_GetFlagStatus+0x82>
  {
    Status = (status_t)UART001_SET;
10003f7e:	2302      	movs	r3, #2
10003f80:	617b      	str	r3, [r7, #20]
  }
  return Status;
10003f82:	697b      	ldr	r3, [r7, #20]
}
10003f84:	1c18      	adds	r0, r3, #0
10003f86:	46bd      	mov	sp, r7
10003f88:	b006      	add	sp, #24
10003f8a:	bd80      	pop	{r7, pc}

10003f8c <UART001_ClearFlag>:
void UART001_ClearFlag
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
10003f8c:	b580      	push	{r7, lr}
10003f8e:	b084      	sub	sp, #16
10003f90:	af00      	add	r7, sp, #0
10003f92:	6078      	str	r0, [r7, #4]
10003f94:	1c0a      	adds	r2, r1, #0
10003f96:	1cfb      	adds	r3, r7, #3
10003f98:	701a      	strb	r2, [r3, #0]

  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10003f9a:	687b      	ldr	r3, [r7, #4]
10003f9c:	681b      	ldr	r3, [r3, #0]
10003f9e:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_8>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10003fa0:	1cfb      	adds	r3, r7, #3
10003fa2:	781b      	ldrb	r3, [r3, #0]
10003fa4:	2b0f      	cmp	r3, #15
10003fa6:	d80b      	bhi.n	10003fc0 <UART001_ClearFlag+0x34>
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
10003fa8:	68fb      	ldr	r3, [r7, #12]
10003faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10003fac:	1cfb      	adds	r3, r7, #3
10003fae:	781b      	ldrb	r3, [r3, #0]
10003fb0:	2101      	movs	r1, #1
10003fb2:	1c08      	adds	r0, r1, #0
10003fb4:	4098      	lsls	r0, r3
10003fb6:	1c03      	adds	r3, r0, #0
10003fb8:	431a      	orrs	r2, r3
10003fba:	68fb      	ldr	r3, [r7, #12]
10003fbc:	64da      	str	r2, [r3, #76]	; 0x4c
10003fbe:	e026      	b.n	1000400e <UART001_ClearFlag+0x82>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
10003fc0:	1cfb      	adds	r3, r7, #3
10003fc2:	781b      	ldrb	r3, [r3, #0]
10003fc4:	2b12      	cmp	r3, #18
10003fc6:	d811      	bhi.n	10003fec <UART001_ClearFlag+0x60>
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10003fc8:	68fa      	ldr	r2, [r7, #12]
10003fca:	238c      	movs	r3, #140	; 0x8c
10003fcc:	005b      	lsls	r3, r3, #1
10003fce:	58d2      	ldr	r2, [r2, r3]
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
10003fd0:	1cfb      	adds	r3, r7, #3
10003fd2:	781b      	ldrb	r3, [r3, #0]
10003fd4:	3b10      	subs	r3, #16
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10003fd6:	2101      	movs	r1, #1
10003fd8:	1c08      	adds	r0, r1, #0
10003fda:	4098      	lsls	r0, r3
10003fdc:	1c03      	adds	r3, r0, #0
10003fde:	1c11      	adds	r1, r2, #0
10003fe0:	4319      	orrs	r1, r3
10003fe2:	68fa      	ldr	r2, [r7, #12]
10003fe4:	238c      	movs	r3, #140	; 0x8c
10003fe6:	005b      	lsls	r3, r3, #1
10003fe8:	50d1      	str	r1, [r2, r3]
10003fea:	e010      	b.n	1000400e <UART001_ClearFlag+0x82>
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10003fec:	68fa      	ldr	r2, [r7, #12]
10003fee:	238c      	movs	r3, #140	; 0x8c
10003ff0:	005b      	lsls	r3, r3, #1
10003ff2:	58d2      	ldr	r2, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
10003ff4:	1cfb      	adds	r3, r7, #3
10003ff6:	781b      	ldrb	r3, [r3, #0]
10003ff8:	3b0b      	subs	r3, #11
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10003ffa:	2101      	movs	r1, #1
10003ffc:	1c08      	adds	r0, r1, #0
10003ffe:	4098      	lsls	r0, r3
10004000:	1c03      	adds	r3, r0, #0
10004002:	1c11      	adds	r1, r2, #0
10004004:	4319      	orrs	r1, r3
10004006:	68fa      	ldr	r2, [r7, #12]
10004008:	238c      	movs	r3, #140	; 0x8c
1000400a:	005b      	lsls	r3, r3, #1
1000400c:	50d1      	str	r1, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
                                                       UART001_FLAG_OFFSET ));
  }  
  
}
1000400e:	46bd      	mov	sp, r7
10004010:	b004      	add	sp, #16
10004012:	bd80      	pop	{r7, pc}

10004014 <PWMSP001_Init>:
 **                 Function definitions                                       **
 *******************************************************************************/
   
/* This function initializes the app */
void PWMSP001_Init(void)
{
10004014:	b580      	push	{r7, lr}
10004016:	b082      	sub	sp, #8
10004018:	af00      	add	r7, sp, #0
  status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1000401a:	2301      	movs	r3, #1
1000401c:	607b      	str	r3, [r7, #4]
  CCU4GLOBAL_Init();
1000401e:	f001 fef1 	bl	10005e04 <CCU4GLOBAL_Init>
  Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
10004022:	4b1e      	ldr	r3, [pc, #120]	; (1000409c <PWMSP001_Init+0x88>)
10004024:	1c18      	adds	r0, r3, #0
10004026:	f000 f841 	bl	100040ac <PWMSP001_lInit>
1000402a:	1c03      	adds	r3, r0, #0
1000402c:	607b      	str	r3, [r7, #4]
  /* Start the app if "Start after initialization" is checked */
  if(Error == (uint32_t)DAVEApp_SUCCESS)
1000402e:	687b      	ldr	r3, [r7, #4]
10004030:	2b00      	cmp	r3, #0
10004032:	d109      	bne.n	10004048 <PWMSP001_Init+0x34>
  {   
    if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
10004034:	4b19      	ldr	r3, [pc, #100]	; (1000409c <PWMSP001_Init+0x88>)
10004036:	785b      	ldrb	r3, [r3, #1]
10004038:	2b01      	cmp	r3, #1
1000403a:	d105      	bne.n	10004048 <PWMSP001_Init+0x34>
    {
      Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
1000403c:	4b17      	ldr	r3, [pc, #92]	; (1000409c <PWMSP001_Init+0x88>)
1000403e:	1c18      	adds	r0, r3, #0
10004040:	f000 fa52 	bl	100044e8 <PWMSP001_Start>
10004044:	1c03      	adds	r3, r0, #0
10004046:	607b      	str	r3, [r7, #4]
      DBG002_N(Error != DAVEApp_SUCCESS);
    }
  }
    
      PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
10004048:	4b15      	ldr	r3, [pc, #84]	; (100040a0 <PWMSP001_Init+0x8c>)
1000404a:	4a15      	ldr	r2, [pc, #84]	; (100040a0 <PWMSP001_Init+0x8c>)
1000404c:	6912      	ldr	r2, [r2, #16]
1000404e:	2140      	movs	r1, #64	; 0x40
10004050:	438a      	bics	r2, r1
10004052:	611a      	str	r2, [r3, #16]
      PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
10004054:	4b12      	ldr	r3, [pc, #72]	; (100040a0 <PWMSP001_Init+0x8c>)
10004056:	4a12      	ldr	r2, [pc, #72]	; (100040a0 <PWMSP001_Init+0x8c>)
10004058:	6912      	ldr	r2, [r2, #16]
1000405a:	611a      	str	r2, [r3, #16]
                                   (uint32_t)PORT_IOCR_PC0_PO_Msk);
  Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle1);
1000405c:	4b11      	ldr	r3, [pc, #68]	; (100040a4 <PWMSP001_Init+0x90>)
1000405e:	1c18      	adds	r0, r3, #0
10004060:	f000 f824 	bl	100040ac <PWMSP001_lInit>
10004064:	1c03      	adds	r3, r0, #0
10004066:	607b      	str	r3, [r7, #4]
  /* Start the app if "Start after initialization" is checked */
  if(Error == (uint32_t)DAVEApp_SUCCESS)
10004068:	687b      	ldr	r3, [r7, #4]
1000406a:	2b00      	cmp	r3, #0
1000406c:	d109      	bne.n	10004082 <PWMSP001_Init+0x6e>
  {   
    if (PWMSP001_Handle1.StartControl == (uint8_t)SET)
1000406e:	4b0d      	ldr	r3, [pc, #52]	; (100040a4 <PWMSP001_Init+0x90>)
10004070:	785b      	ldrb	r3, [r3, #1]
10004072:	2b01      	cmp	r3, #1
10004074:	d105      	bne.n	10004082 <PWMSP001_Init+0x6e>
    {
      Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle1);
10004076:	4b0b      	ldr	r3, [pc, #44]	; (100040a4 <PWMSP001_Init+0x90>)
10004078:	1c18      	adds	r0, r3, #0
1000407a:	f000 fa35 	bl	100044e8 <PWMSP001_Start>
1000407e:	1c03      	adds	r3, r0, #0
10004080:	607b      	str	r3, [r7, #4]
      DBG002_N(Error != DAVEApp_SUCCESS);
    }
  }
    
      PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
10004082:	4b07      	ldr	r3, [pc, #28]	; (100040a0 <PWMSP001_Init+0x8c>)
10004084:	4a06      	ldr	r2, [pc, #24]	; (100040a0 <PWMSP001_Init+0x8c>)
10004086:	6911      	ldr	r1, [r2, #16]
10004088:	4a07      	ldr	r2, [pc, #28]	; (100040a8 <PWMSP001_Init+0x94>)
1000408a:	400a      	ands	r2, r1
1000408c:	611a      	str	r2, [r3, #16]
      PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
1000408e:	4b04      	ldr	r3, [pc, #16]	; (100040a0 <PWMSP001_Init+0x8c>)
10004090:	4a03      	ldr	r2, [pc, #12]	; (100040a0 <PWMSP001_Init+0x8c>)
10004092:	6912      	ldr	r2, [r2, #16]
10004094:	611a      	str	r2, [r3, #16]
                                   (uint32_t)PORT_IOCR_PC1_PO_Msk);
}
10004096:	46bd      	mov	sp, r7
10004098:	b002      	add	sp, #8
1000409a:	bd80      	pop	{r7, pc}
1000409c:	1000ab88 	.word	0x1000ab88
100040a0:	40040100 	.word	0x40040100
100040a4:	1000abd0 	.word	0x1000abd0
100040a8:	ffffbfff 	.word	0xffffbfff

100040ac <PWMSP001_lInit>:

/*<<<DD_PWMSP001_API_1>>>*/
/* This function initializes an instance of the app */
status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
{
100040ac:	b5b0      	push	{r4, r5, r7, lr}
100040ae:	b084      	sub	sp, #16
100040b0:	af00      	add	r7, sp, #0
100040b2:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100040b4:	2301      	movs	r3, #1
100040b6:	60fb      	str	r3, [r7, #12]

  do
  {
    /*<<<DD_PWMSP001_API_1_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
100040b8:	687b      	ldr	r3, [r7, #4]
100040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100040bc:	781b      	ldrb	r3, [r3, #0]
100040be:	2b00      	cmp	r3, #0
100040c0:	d000      	beq.n	100040c4 <PWMSP001_lInit+0x18>
100040c2:	e156      	b.n	10004372 <PWMSP001_lInit+0x2c6>
    {
      break;
    }
    HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
100040c4:	687b      	ldr	r3, [r7, #4]
100040c6:	699b      	ldr	r3, [r3, #24]
100040c8:	2207      	movs	r2, #7
100040ca:	611a      	str	r2, [r3, #16]

    /*<<<DD_PWMSP001_API_1_3>>>*/
    /* If external stop trigger is setelected */
    if (HandlePtr->kExtStopTrig == (uint8_t)SET)
100040cc:	687b      	ldr	r3, [r7, #4]
100040ce:	7bdb      	ldrb	r3, [r3, #15]
100040d0:	2b01      	cmp	r3, #1
100040d2:	d125      	bne.n	10004120 <PWMSP001_lInit+0x74>
    {
      HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LPF1M_Msk);
100040d4:	687b      	ldr	r3, [r7, #4]
100040d6:	699b      	ldr	r3, [r3, #24]
100040d8:	687a      	ldr	r2, [r7, #4]
100040da:	6992      	ldr	r2, [r2, #24]
100040dc:	6811      	ldr	r1, [r2, #0]
100040de:	4aa8      	ldr	r2, [pc, #672]	; (10004380 <PWMSP001_lInit+0x2d4>)
100040e0:	400a      	ands	r2, r1
100040e2:	601a      	str	r2, [r3, #0]
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
100040e4:	687b      	ldr	r3, [r7, #4]
100040e6:	699b      	ldr	r3, [r3, #24]
100040e8:	687a      	ldr	r2, [r7, #4]
100040ea:	6992      	ldr	r2, [r2, #24]
100040ec:	6852      	ldr	r2, [r2, #4]
100040ee:	210c      	movs	r1, #12
100040f0:	438a      	bics	r2, r1
100040f2:	605a      	str	r2, [r3, #4]
      HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV1EM_Pos)\
100040f4:	687b      	ldr	r3, [r7, #4]
100040f6:	699b      	ldr	r3, [r3, #24]
100040f8:	687a      	ldr	r2, [r7, #4]
100040fa:	6992      	ldr	r2, [r2, #24]
100040fc:	6811      	ldr	r1, [r2, #0]
100040fe:	6878      	ldr	r0, [r7, #4]
10004100:	2224      	movs	r2, #36	; 0x24
10004102:	5c82      	ldrb	r2, [r0, r2]
10004104:	0490      	lsls	r0, r2, #18
	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)\
10004106:	22c0      	movs	r2, #192	; 0xc0
10004108:	0312      	lsls	r2, r2, #12
1000410a:	4002      	ands	r2, r0
    /* If external stop trigger is setelected */
    if (HandlePtr->kExtStopTrig == (uint8_t)SET)
    {
      HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LPF1M_Msk);
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
      HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV1EM_Pos)\
1000410c:	430a      	orrs	r2, r1
1000410e:	601a      	str	r2, [r3, #0]
	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)\
		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));

      HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
10004110:	687b      	ldr	r3, [r7, #4]
10004112:	699b      	ldr	r3, [r3, #24]
10004114:	687a      	ldr	r2, [r7, #4]
10004116:	6992      	ldr	r2, [r2, #24]
10004118:	6852      	ldr	r2, [r2, #4]
1000411a:	2108      	movs	r1, #8
1000411c:	430a      	orrs	r2, r1
1000411e:	605a      	str	r2, [r3, #4]
          (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
    }/*End of if (HandlePtr->kExtStopTrig == SET)*/

    /*<<<DD_PWMSP001_API_1_4>>>*/
    /* Trap configurations if trap is enabled */
    if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
10004120:	687b      	ldr	r3, [r7, #4]
10004122:	7c5b      	ldrb	r3, [r3, #17]
10004124:	2b01      	cmp	r3, #1
10004126:	d12a      	bne.n	1000417e <PWMSP001_lInit+0xd2>
        ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
10004128:	687a      	ldr	r2, [r7, #4]
1000412a:	2320      	movs	r3, #32
1000412c:	5cd3      	ldrb	r3, [r2, r3]
          (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
    }/*End of if (HandlePtr->kExtStopTrig == SET)*/

    /*<<<DD_PWMSP001_API_1_4>>>*/
    /* Trap configurations if trap is enabled */
    if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
1000412e:	2b01      	cmp	r3, #1
10004130:	d025      	beq.n	1000417e <PWMSP001_lInit+0xd2>
        ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
    )
    {
      HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
10004132:	687b      	ldr	r3, [r7, #4]
10004134:	699b      	ldr	r3, [r3, #24]
10004136:	687a      	ldr	r2, [r7, #4]
10004138:	6992      	ldr	r2, [r2, #24]
1000413a:	6811      	ldr	r1, [r2, #0]
1000413c:	4a91      	ldr	r2, [pc, #580]	; (10004384 <PWMSP001_lInit+0x2d8>)
1000413e:	400a      	ands	r2, r1
10004140:	601a      	str	r2, [r3, #0]
	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
10004142:	687b      	ldr	r3, [r7, #4]
10004144:	699b      	ldr	r3, [r3, #24]
10004146:	687a      	ldr	r2, [r7, #4]
10004148:	6992      	ldr	r2, [r2, #24]
1000414a:	6851      	ldr	r1, [r2, #4]
1000414c:	4a8e      	ldr	r2, [pc, #568]	; (10004388 <PWMSP001_lInit+0x2dc>)
1000414e:	400a      	ands	r2, r1
10004150:	605a      	str	r2, [r3, #4]
      HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
10004152:	687b      	ldr	r3, [r7, #4]
10004154:	699b      	ldr	r3, [r3, #24]
10004156:	687a      	ldr	r2, [r7, #4]
10004158:	6992      	ldr	r2, [r2, #24]
1000415a:	6811      	ldr	r1, [r2, #0]
	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
1000415c:	687a      	ldr	r2, [r7, #4]
1000415e:	7812      	ldrb	r2, [r2, #0]
10004160:	0610      	lsls	r0, r2, #24
		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
10004162:	2280      	movs	r2, #128	; 0x80
10004164:	0452      	lsls	r2, r2, #17
10004166:	4002      	ands	r2, r0
    )
    {
      HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
      HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
10004168:	430a      	orrs	r2, r1
1000416a:	601a      	str	r2, [r3, #0]
	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));

      HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
1000416c:	687b      	ldr	r3, [r7, #4]
1000416e:	699b      	ldr	r3, [r3, #24]
10004170:	687a      	ldr	r2, [r7, #4]
10004172:	6992      	ldr	r2, [r2, #24]
10004174:	6852      	ldr	r2, [r2, #4]
10004176:	2180      	movs	r1, #128	; 0x80
10004178:	0289      	lsls	r1, r1, #10
1000417a:	430a      	orrs	r2, r1
1000417c:	605a      	str	r2, [r3, #4]
    }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
    
    HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
1000417e:	687b      	ldr	r3, [r7, #4]
10004180:	699b      	ldr	r3, [r3, #24]
10004182:	687a      	ldr	r2, [r7, #4]
10004184:	6992      	ldr	r2, [r2, #24]
10004186:	6951      	ldr	r1, [r2, #20]
10004188:	4a80      	ldr	r2, [pc, #512]	; (1000438c <PWMSP001_lInit+0x2e0>)
1000418a:	400a      	ands	r2, r1
1000418c:	615a      	str	r2, [r3, #20]
	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
    
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
1000418e:	687b      	ldr	r3, [r7, #4]
10004190:	699b      	ldr	r3, [r3, #24]
10004192:	687a      	ldr	r2, [r7, #4]
10004194:	6992      	ldr	r2, [r2, #24]
10004196:	6951      	ldr	r1, [r2, #20]
10004198:	6878      	ldr	r0, [r7, #4]
1000419a:	2236      	movs	r2, #54	; 0x36
1000419c:	5c82      	ldrb	r2, [r0, r2]
1000419e:	1c10      	adds	r0, r2, #0
	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
100041a0:	2201      	movs	r2, #1
100041a2:	4010      	ands	r0, r2
		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
100041a4:	687c      	ldr	r4, [r7, #4]
100041a6:	2234      	movs	r2, #52	; 0x34
100041a8:	5ca2      	ldrb	r2, [r4, r2]
100041aa:	0294      	lsls	r4, r2, #10
			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
100041ac:	2280      	movs	r2, #128	; 0x80
100041ae:	00d2      	lsls	r2, r2, #3
100041b0:	4022      	ands	r2, r4
	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
    
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
100041b2:	4310      	orrs	r0, r2
			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
100041b4:	687c      	ldr	r4, [r7, #4]
100041b6:	2235      	movs	r2, #53	; 0x35
100041b8:	5ca2      	ldrb	r2, [r4, r2]
100041ba:	0214      	lsls	r4, r2, #8
				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
100041bc:	22c0      	movs	r2, #192	; 0xc0
100041be:	0092      	lsls	r2, r2, #2
100041c0:	4022      	ands	r2, r4
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
100041c2:	4302      	orrs	r2, r0
    
    HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
    
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
100041c4:	430a      	orrs	r2, r1
100041c6:	615a      	str	r2, [r3, #20]
				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
    /*
     * If timer concatenation is enabled during single shot mode lower timer 
     * should be free running
     */
	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
100041c8:	687a      	ldr	r2, [r7, #4]
100041ca:	2320      	movs	r3, #32
100041cc:	5cd3      	ldrb	r3, [r2, r3]
100041ce:	2b01      	cmp	r3, #1
100041d0:	d00d      	beq.n	100041ee <PWMSP001_lInit+0x142>
	{
		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
100041d2:	687b      	ldr	r3, [r7, #4]
100041d4:	699b      	ldr	r3, [r3, #24]
100041d6:	687a      	ldr	r2, [r7, #4]
100041d8:	7b12      	ldrb	r2, [r2, #12]
100041da:	0051      	lsls	r1, r2, #1
100041dc:	2202      	movs	r2, #2
100041de:	4011      	ands	r1, r2
100041e0:	687a      	ldr	r2, [r7, #4]
100041e2:	6992      	ldr	r2, [r2, #24]
100041e4:	6952      	ldr	r2, [r2, #20]
100041e6:	2002      	movs	r0, #2
100041e8:	4382      	bics	r2, r0
100041ea:	430a      	orrs	r2, r1
100041ec:	615a      	str	r2, [r3, #20]
			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
	} 
    
    /*Set the dither mode setting*/
    HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
100041ee:	687b      	ldr	r3, [r7, #4]
100041f0:	699b      	ldr	r3, [r3, #24]
100041f2:	687a      	ldr	r2, [r7, #4]
100041f4:	6992      	ldr	r2, [r2, #24]
100041f6:	6951      	ldr	r1, [r2, #20]
100041f8:	6878      	ldr	r0, [r7, #4]
100041fa:	2221      	movs	r2, #33	; 0x21
100041fc:	5c82      	ldrb	r2, [r0, r2]
100041fe:	0350      	lsls	r0, r2, #13
	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
10004200:	22c0      	movs	r2, #192	; 0xc0
10004202:	01d2      	lsls	r2, r2, #7
10004204:	4002      	ands	r2, r0
		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
	} 
    
    /*Set the dither mode setting*/
    HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
10004206:	430a      	orrs	r2, r1
10004208:	615a      	str	r2, [r3, #20]
	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
    
    WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
1000420a:	687b      	ldr	r3, [r7, #4]
1000420c:	699b      	ldr	r3, [r3, #24]
1000420e:	687a      	ldr	r2, [r7, #4]
10004210:	7b52      	ldrb	r2, [r2, #13]
10004212:	1c11      	adds	r1, r2, #0
10004214:	220f      	movs	r2, #15
10004216:	4011      	ands	r1, r2
10004218:	687a      	ldr	r2, [r7, #4]
1000421a:	6992      	ldr	r2, [r2, #24]
1000421c:	6a12      	ldr	r2, [r2, #32]
1000421e:	200f      	movs	r0, #15
10004220:	4382      	bics	r2, r0
10004222:	430a      	orrs	r2, r1
10004224:	621a      	str	r2, [r3, #32]
      (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);

    /*Configure Trap mode as per GUI*/
    if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
10004226:	687a      	ldr	r2, [r7, #4]
10004228:	2320      	movs	r3, #32
1000422a:	5cd3      	ldrb	r3, [r2, r3]
1000422c:	2b01      	cmp	r3, #1
1000422e:	d02c      	beq.n	1000428a <PWMSP001_lInit+0x1de>
    {
      /*<<<DD_PWMSP001_API_1_6>>>*/
      WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
10004230:	687b      	ldr	r3, [r7, #4]
10004232:	699b      	ldr	r3, [r3, #24]
10004234:	687a      	ldr	r2, [r7, #4]
10004236:	7c92      	ldrb	r2, [r2, #18]
10004238:	0551      	lsls	r1, r2, #21
1000423a:	2280      	movs	r2, #128	; 0x80
1000423c:	0392      	lsls	r2, r2, #14
1000423e:	4011      	ands	r1, r2
10004240:	687a      	ldr	r2, [r7, #4]
10004242:	6992      	ldr	r2, [r2, #24]
10004244:	6950      	ldr	r0, [r2, #20]
10004246:	4a52      	ldr	r2, [pc, #328]	; (10004390 <PWMSP001_lInit+0x2e4>)
10004248:	4002      	ands	r2, r0
1000424a:	430a      	orrs	r2, r1
1000424c:	615a      	str	r2, [r3, #20]
          (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);

      WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
1000424e:	687b      	ldr	r3, [r7, #4]
10004250:	699b      	ldr	r3, [r3, #24]
10004252:	687a      	ldr	r2, [r7, #4]
10004254:	7cd2      	ldrb	r2, [r2, #19]
10004256:	0591      	lsls	r1, r2, #22
10004258:	2280      	movs	r2, #128	; 0x80
1000425a:	03d2      	lsls	r2, r2, #15
1000425c:	4011      	ands	r1, r2
1000425e:	687a      	ldr	r2, [r7, #4]
10004260:	6992      	ldr	r2, [r2, #24]
10004262:	6950      	ldr	r0, [r2, #20]
10004264:	4a4b      	ldr	r2, [pc, #300]	; (10004394 <PWMSP001_lInit+0x2e8>)
10004266:	4002      	ands	r2, r0
10004268:	430a      	orrs	r2, r1
1000426a:	615a      	str	r2, [r3, #20]
          (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
      
	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
1000426c:	687b      	ldr	r3, [r7, #4]
1000426e:	699b      	ldr	r3, [r3, #24]
10004270:	687a      	ldr	r2, [r7, #4]
10004272:	7c52      	ldrb	r2, [r2, #17]
10004274:	0451      	lsls	r1, r2, #17
10004276:	2280      	movs	r2, #128	; 0x80
10004278:	0292      	lsls	r2, r2, #10
1000427a:	4011      	ands	r1, r2
1000427c:	687a      	ldr	r2, [r7, #4]
1000427e:	6992      	ldr	r2, [r2, #24]
10004280:	6950      	ldr	r0, [r2, #20]
10004282:	4a41      	ldr	r2, [pc, #260]	; (10004388 <PWMSP001_lInit+0x2dc>)
10004284:	4002      	ands	r2, r0
10004286:	430a      	orrs	r2, r1
10004288:	615a      	str	r2, [r3, #20]
		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
    }
    /*Set the prescalar divider and passive level of the o/p signal.*/
    WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
1000428a:	687b      	ldr	r3, [r7, #4]
1000428c:	699b      	ldr	r3, [r3, #24]
1000428e:	6879      	ldr	r1, [r7, #4]
10004290:	2222      	movs	r2, #34	; 0x22
10004292:	5c8a      	ldrb	r2, [r1, r2]
10004294:	1c11      	adds	r1, r2, #0
10004296:	220f      	movs	r2, #15
10004298:	4011      	ands	r1, r2
1000429a:	687a      	ldr	r2, [r7, #4]
1000429c:	6992      	ldr	r2, [r2, #24]
1000429e:	6a52      	ldr	r2, [r2, #36]	; 0x24
100042a0:	200f      	movs	r0, #15
100042a2:	4382      	bics	r2, r0
100042a4:	430a      	orrs	r2, r1
100042a6:	625a      	str	r2, [r3, #36]	; 0x24
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
    HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
100042a8:	687b      	ldr	r3, [r7, #4]
100042aa:	699b      	ldr	r3, [r3, #24]
100042ac:	687a      	ldr	r2, [r7, #4]
100042ae:	7c12      	ldrb	r2, [r2, #16]
100042b0:	619a      	str	r2, [r3, #24]

    /*<<<DD_PWMSP001_API_1_7>>>*/
    /*Setting period register's value*/
    HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
100042b2:	687b      	ldr	r3, [r7, #4]
100042b4:	699b      	ldr	r3, [r3, #24]
100042b6:	687a      	ldr	r2, [r7, #4]
100042b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
100042ba:	0412      	lsls	r2, r2, #16
100042bc:	0c12      	lsrs	r2, r2, #16
100042be:	635a      	str	r2, [r3, #52]	; 0x34
    /*Setting compare register's value*/
    HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
100042c0:	687b      	ldr	r3, [r7, #4]
100042c2:	699b      	ldr	r3, [r3, #24]
100042c4:	687a      	ldr	r2, [r7, #4]
100042c6:	6892      	ldr	r2, [r2, #8]
100042c8:	0412      	lsls	r2, r2, #16
100042ca:	0c12      	lsrs	r2, r2, #16
100042cc:	63da      	str	r2, [r3, #60]	; 0x3c
    HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
100042ce:	687b      	ldr	r3, [r7, #4]
100042d0:	699a      	ldr	r2, [r3, #24]
100042d2:	687b      	ldr	r3, [r7, #4]
100042d4:	6999      	ldr	r1, [r3, #24]
100042d6:	23b0      	movs	r3, #176	; 0xb0
100042d8:	58cb      	ldr	r3, [r1, r3]
100042da:	492f      	ldr	r1, [pc, #188]	; (10004398 <PWMSP001_lInit+0x2ec>)
100042dc:	4319      	orrs	r1, r3
100042de:	23b0      	movs	r3, #176	; 0xb0
100042e0:	50d1      	str	r1, [r2, r3]

    /*Applying register's settings for the second slice if timer concatenation
     * is set */
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100042e2:	687a      	ldr	r2, [r7, #4]
100042e4:	2320      	movs	r3, #32
100042e6:	5cd3      	ldrb	r3, [r2, r3]
100042e8:	2b01      	cmp	r3, #1
100042ea:	d10f      	bne.n	1000430c <PWMSP001_lInit+0x260>
    {
      PWMSP001_lConfigureSecondSlice(HandlePtr);
100042ec:	687b      	ldr	r3, [r7, #4]
100042ee:	1c18      	adds	r0, r3, #0
100042f0:	f000 ff98 	bl	10005224 <PWMSP001_lConfigureSecondSlice>
      HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
100042f4:	687b      	ldr	r3, [r7, #4]
100042f6:	69da      	ldr	r2, [r3, #28]
100042f8:	687b      	ldr	r3, [r7, #4]
100042fa:	69d9      	ldr	r1, [r3, #28]
100042fc:	23a4      	movs	r3, #164	; 0xa4
100042fe:	58c9      	ldr	r1, [r1, r3]
10004300:	687b      	ldr	r3, [r7, #4]
10004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004304:	4319      	orrs	r1, r3
10004306:	23a4      	movs	r3, #164	; 0xa4
10004308:	50d1      	str	r1, [r2, r3]
1000430a:	e00a      	b.n	10004322 <PWMSP001_lInit+0x276>

    } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
    else
    {
      HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
1000430c:	687b      	ldr	r3, [r7, #4]
1000430e:	699a      	ldr	r2, [r3, #24]
10004310:	687b      	ldr	r3, [r7, #4]
10004312:	6999      	ldr	r1, [r3, #24]
10004314:	23a4      	movs	r3, #164	; 0xa4
10004316:	58c9      	ldr	r1, [r1, r3]
10004318:	687b      	ldr	r3, [r7, #4]
1000431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000431c:	4319      	orrs	r1, r3
1000431e:	23a4      	movs	r3, #164	; 0xa4
10004320:	50d1      	str	r1, [r2, r3]
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
10004322:	687b      	ldr	r3, [r7, #4]
10004324:	695b      	ldr	r3, [r3, #20]
10004326:	687a      	ldr	r2, [r7, #4]
10004328:	6952      	ldr	r2, [r2, #20]
1000432a:	6911      	ldr	r1, [r2, #16]
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
1000432c:	6878      	ldr	r0, [r7, #4]
1000432e:	2237      	movs	r2, #55	; 0x37
10004330:	5c82      	ldrb	r2, [r0, r2]
      HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
10004332:	0092      	lsls	r2, r2, #2
10004334:	2001      	movs	r0, #1
10004336:	4090      	lsls	r0, r2
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
10004338:	687c      	ldr	r4, [r7, #4]
1000433a:	2237      	movs	r2, #55	; 0x37
1000433c:	5ca2      	ldrb	r2, [r4, r2]
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
1000433e:	0092      	lsls	r2, r2, #2
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
10004340:	3201      	adds	r2, #1
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
10004342:	2401      	movs	r4, #1
10004344:	1c25      	adds	r5, r4, #0
10004346:	4095      	lsls	r5, r2
10004348:	1c2a      	adds	r2, r5, #0
1000434a:	4310      	orrs	r0, r2
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
1000434c:	687c      	ldr	r4, [r7, #4]
1000434e:	2237      	movs	r2, #55	; 0x37
10004350:	5ca2      	ldrb	r2, [r4, r2]
10004352:	0092      	lsls	r2, r2, #2
10004354:	3202      	adds	r2, #2
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
10004356:	2401      	movs	r4, #1
10004358:	1c25      	adds	r5, r4, #0
1000435a:	4095      	lsls	r5, r2
1000435c:	1c2a      	adds	r2, r5, #0
1000435e:	4302      	orrs	r2, r0
      HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
10004360:	430a      	orrs	r2, r1
10004362:	611a      	str	r2, [r3, #16]
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));

    Status = (uint32_t)DAVEApp_SUCCESS;
10004364:	2300      	movs	r3, #0
10004366:	60fb      	str	r3, [r7, #12]
    HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
10004368:	687b      	ldr	r3, [r7, #4]
1000436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000436c:	2201      	movs	r2, #1
1000436e:	701a      	strb	r2, [r3, #0]
10004370:	e000      	b.n	10004374 <PWMSP001_lInit+0x2c8>
  do
  {
    /*<<<DD_PWMSP001_API_1_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
    {
      break;
10004372:	46c0      	nop			; (mov r8, r8)

  if (Status != (uint32_t)DAVEApp_SUCCESS)
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  return Status;
10004374:	68fb      	ldr	r3, [r7, #12]
}
10004376:	1c18      	adds	r0, r3, #0
10004378:	46bd      	mov	sp, r7
1000437a:	b004      	add	sp, #16
1000437c:	bdb0      	pop	{r4, r5, r7, pc}
1000437e:	46c0      	nop			; (mov r8, r8)
10004380:	e7f3ffff 	.word	0xe7f3ffff
10004384:	9ecfffff 	.word	0x9ecfffff
10004388:	fffdffff 	.word	0xfffdffff
1000438c:	ffff98f6 	.word	0xffff98f6
10004390:	ffdfffff 	.word	0xffdfffff
10004394:	ffbfffff 	.word	0xffbfffff
10004398:	00000f0f 	.word	0x00000f0f

1000439c <PWMSP001_Deinit>:

/*<<<DD_PWMSP001_API_2>>>*/
/* This function de-initializes the app */
status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
{
1000439c:	b590      	push	{r4, r7, lr}
1000439e:	b089      	sub	sp, #36	; 0x24
100043a0:	af00      	add	r7, sp, #0
100043a2:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100043a4:	2301      	movs	r3, #1
100043a6:	61fb      	str	r3, [r7, #28]
  uint32_t Temp2;
  uint32_t Temp3;
  uint32_t Temp4;

     /*<<<DD_PWMSP001_API_2_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
100043a8:	687b      	ldr	r3, [r7, #4]
100043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100043ac:	781b      	ldrb	r3, [r3, #0]
100043ae:	2b00      	cmp	r3, #0
100043b0:	d100      	bne.n	100043b4 <PWMSP001_Deinit+0x18>
100043b2:	e091      	b.n	100044d8 <PWMSP001_Deinit+0x13c>
    {
    /*<<<DD_PWMSP001_API_2_3>>>*/
    HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
100043b4:	687b      	ldr	r3, [r7, #4]
100043b6:	699b      	ldr	r3, [r3, #24]
100043b8:	2207      	movs	r2, #7
100043ba:	611a      	str	r2, [r3, #16]
    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
100043bc:	687b      	ldr	r3, [r7, #4]
100043be:	699a      	ldr	r2, [r3, #24]
100043c0:	23b0      	movs	r3, #176	; 0xb0
100043c2:	4948      	ldr	r1, [pc, #288]	; (100044e4 <PWMSP001_Deinit+0x148>)
100043c4:	50d1      	str	r1, [r2, r3]
    HandlePtr->CC4yRegsPtr->INTE = 0x00U;
100043c6:	687b      	ldr	r3, [r7, #4]
100043c8:	699a      	ldr	r2, [r3, #24]
100043ca:	23a4      	movs	r3, #164	; 0xa4
100043cc:	2100      	movs	r1, #0
100043ce:	50d1      	str	r1, [r2, r3]

    /*Set IDLE mode for selected slice*/
    HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
100043d0:	687b      	ldr	r3, [r7, #4]
100043d2:	695b      	ldr	r3, [r3, #20]
100043d4:	687a      	ldr	r2, [r7, #4]
100043d6:	6952      	ldr	r2, [r2, #20]
100043d8:	6891      	ldr	r1, [r2, #8]
	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
100043da:	6878      	ldr	r0, [r7, #4]
100043dc:	2237      	movs	r2, #55	; 0x37
100043de:	5c82      	ldrb	r2, [r0, r2]
    HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
    HandlePtr->CC4yRegsPtr->INTE = 0x00U;

    /*Set IDLE mode for selected slice*/
    HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
100043e0:	2001      	movs	r0, #1
100043e2:	1c04      	adds	r4, r0, #0
100043e4:	4094      	lsls	r4, r2
100043e6:	1c22      	adds	r2, r4, #0
100043e8:	430a      	orrs	r2, r1
100043ea:	21c0      	movs	r1, #192	; 0xc0
100043ec:	0089      	lsls	r1, r1, #2
100043ee:	430a      	orrs	r2, r1
100043f0:	609a      	str	r2, [r3, #8]
	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));

    /*Clear all the registers*/
    HandlePtr->CC4yRegsPtr->INS = 0x00U;
100043f2:	687b      	ldr	r3, [r7, #4]
100043f4:	699b      	ldr	r3, [r3, #24]
100043f6:	2200      	movs	r2, #0
100043f8:	601a      	str	r2, [r3, #0]
    HandlePtr->CC4yRegsPtr->CMC = 0x00U;
100043fa:	687b      	ldr	r3, [r7, #4]
100043fc:	699b      	ldr	r3, [r3, #24]
100043fe:	2200      	movs	r2, #0
10004400:	605a      	str	r2, [r3, #4]
    HandlePtr->CC4yRegsPtr->TC = 0x00U;
10004402:	687b      	ldr	r3, [r7, #4]
10004404:	699b      	ldr	r3, [r3, #24]
10004406:	2200      	movs	r2, #0
10004408:	615a      	str	r2, [r3, #20]
    HandlePtr->CC4yRegsPtr->PSC = 0x00U;
1000440a:	687b      	ldr	r3, [r7, #4]
1000440c:	699b      	ldr	r3, [r3, #24]
1000440e:	2200      	movs	r2, #0
10004410:	625a      	str	r2, [r3, #36]	; 0x24
    HandlePtr->CC4yRegsPtr->PSL = 0x00U;
10004412:	687b      	ldr	r3, [r7, #4]
10004414:	699b      	ldr	r3, [r3, #24]
10004416:	2200      	movs	r2, #0
10004418:	619a      	str	r2, [r3, #24]
    HandlePtr->CC4yRegsPtr->DITS = 0x00U;
1000441a:	687b      	ldr	r3, [r7, #4]
1000441c:	699b      	ldr	r3, [r3, #24]
1000441e:	2200      	movs	r2, #0
10004420:	621a      	str	r2, [r3, #32]
    HandlePtr->CC4yRegsPtr->CRS = 0x00U;
10004422:	687b      	ldr	r3, [r7, #4]
10004424:	699b      	ldr	r3, [r3, #24]
10004426:	2200      	movs	r2, #0
10004428:	63da      	str	r2, [r3, #60]	; 0x3c
    HandlePtr->CC4yRegsPtr->PRS = 0x00U;
1000442a:	687b      	ldr	r3, [r7, #4]
1000442c:	699b      	ldr	r3, [r3, #24]
1000442e:	2200      	movs	r2, #0
10004430:	635a      	str	r2, [r3, #52]	; 0x34

    /*<<<DD_PWMSP001_API_2_2>>>*/
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004432:	687a      	ldr	r2, [r7, #4]
10004434:	2320      	movs	r3, #32
10004436:	5cd3      	ldrb	r3, [r2, r3]
10004438:	2b01      	cmp	r3, #1
1000443a:	d147      	bne.n	100044cc <PWMSP001_Deinit+0x130>
    {
      /*<<<DD_PWMSP001_API_2_3>>>*/
      HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
1000443c:	687b      	ldr	r3, [r7, #4]
1000443e:	69db      	ldr	r3, [r3, #28]
10004440:	2207      	movs	r2, #7
10004442:	611a      	str	r2, [r3, #16]
      HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
10004444:	687b      	ldr	r3, [r7, #4]
10004446:	69da      	ldr	r2, [r3, #28]
10004448:	23b0      	movs	r3, #176	; 0xb0
1000444a:	4926      	ldr	r1, [pc, #152]	; (100044e4 <PWMSP001_Deinit+0x148>)
1000444c:	50d1      	str	r1, [r2, r3]
      HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
1000444e:	687b      	ldr	r3, [r7, #4]
10004450:	69da      	ldr	r2, [r3, #28]
10004452:	23a4      	movs	r3, #164	; 0xa4
10004454:	2100      	movs	r1, #0
10004456:	50d1      	str	r1, [r2, r3]

      /*Set IDLE mode for selected slice*/
      Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
10004458:	2380      	movs	r3, #128	; 0x80
1000445a:	009b      	lsls	r3, r3, #2
1000445c:	61bb      	str	r3, [r7, #24]
      Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
1000445e:	2380      	movs	r3, #128	; 0x80
10004460:	005b      	lsls	r3, r3, #1
10004462:	617b      	str	r3, [r7, #20]
      Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
10004464:	687a      	ldr	r2, [r7, #4]
10004466:	2338      	movs	r3, #56	; 0x38
10004468:	5cd3      	ldrb	r3, [r2, r3]
1000446a:	613b      	str	r3, [r7, #16]
      Temp1 = Temp3 | Temp4;
1000446c:	697a      	ldr	r2, [r7, #20]
1000446e:	69bb      	ldr	r3, [r7, #24]
10004470:	4313      	orrs	r3, r2
10004472:	60fb      	str	r3, [r7, #12]
      HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
10004474:	687b      	ldr	r3, [r7, #4]
10004476:	695b      	ldr	r3, [r3, #20]
10004478:	687a      	ldr	r2, [r7, #4]
1000447a:	6952      	ldr	r2, [r2, #20]
1000447c:	6891      	ldr	r1, [r2, #8]
1000447e:	693a      	ldr	r2, [r7, #16]
10004480:	2001      	movs	r0, #1
10004482:	4090      	lsls	r0, r2
10004484:	68fa      	ldr	r2, [r7, #12]
10004486:	4302      	orrs	r2, r0
10004488:	430a      	orrs	r2, r1
1000448a:	609a      	str	r2, [r3, #8]
      /*   Temp3 | Temp4 ); */

      /*Clear all the registers*/
      HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
1000448c:	687b      	ldr	r3, [r7, #4]
1000448e:	69db      	ldr	r3, [r3, #28]
10004490:	2200      	movs	r2, #0
10004492:	601a      	str	r2, [r3, #0]
      HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
10004494:	687b      	ldr	r3, [r7, #4]
10004496:	69db      	ldr	r3, [r3, #28]
10004498:	2200      	movs	r2, #0
1000449a:	605a      	str	r2, [r3, #4]
      HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
1000449c:	687b      	ldr	r3, [r7, #4]
1000449e:	69db      	ldr	r3, [r3, #28]
100044a0:	2200      	movs	r2, #0
100044a2:	615a      	str	r2, [r3, #20]
      HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
100044a4:	687b      	ldr	r3, [r7, #4]
100044a6:	69db      	ldr	r3, [r3, #28]
100044a8:	2200      	movs	r2, #0
100044aa:	625a      	str	r2, [r3, #36]	; 0x24
      HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
100044ac:	687b      	ldr	r3, [r7, #4]
100044ae:	69db      	ldr	r3, [r3, #28]
100044b0:	2200      	movs	r2, #0
100044b2:	619a      	str	r2, [r3, #24]
      HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
100044b4:	687b      	ldr	r3, [r7, #4]
100044b6:	69db      	ldr	r3, [r3, #28]
100044b8:	2200      	movs	r2, #0
100044ba:	621a      	str	r2, [r3, #32]
      HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
100044bc:	687b      	ldr	r3, [r7, #4]
100044be:	69db      	ldr	r3, [r3, #28]
100044c0:	2200      	movs	r2, #0
100044c2:	63da      	str	r2, [r3, #60]	; 0x3c
      HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
100044c4:	687b      	ldr	r3, [r7, #4]
100044c6:	69db      	ldr	r3, [r3, #28]
100044c8:	2200      	movs	r2, #0
100044ca:	635a      	str	r2, [r3, #52]	; 0x34
    }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/

    HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
100044cc:	687b      	ldr	r3, [r7, #4]
100044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100044d0:	2200      	movs	r2, #0
100044d2:	701a      	strb	r2, [r3, #0]

    Status = (uint32_t)DAVEApp_SUCCESS;
100044d4:	2300      	movs	r3, #0
100044d6:	61fb      	str	r3, [r7, #28]

  if (Status != (uint32_t)DAVEApp_SUCCESS)
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  return Status;
100044d8:	69fb      	ldr	r3, [r7, #28]
}
100044da:	1c18      	adds	r0, r3, #0
100044dc:	46bd      	mov	sp, r7
100044de:	b009      	add	sp, #36	; 0x24
100044e0:	bd90      	pop	{r4, r7, pc}
100044e2:	46c0      	nop			; (mov r8, r8)
100044e4:	00000f0f 	.word	0x00000f0f

100044e8 <PWMSP001_Start>:

/*<<<DD_PWMSP001_API_3>>>*/
/* This function starts the app. 
 * This needs to be called even if external start is configured.*/
status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
{
100044e8:	b590      	push	{r4, r7, lr}
100044ea:	b085      	sub	sp, #20
100044ec:	af00      	add	r7, sp, #0
100044ee:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100044f0:	2301      	movs	r3, #1
100044f2:	60fb      	str	r3, [r7, #12]

  do
  {
    /*<<<DD_PWMSP001_API_3_1>>>*/
    if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
100044f4:	687b      	ldr	r3, [r7, #4]
100044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100044f8:	781b      	ldrb	r3, [r3, #0]
100044fa:	2b01      	cmp	r3, #1
100044fc:	d005      	beq.n	1000450a <PWMSP001_Start+0x22>
        (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
100044fe:	687b      	ldr	r3, [r7, #4]
10004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004502:	781b      	ldrb	r3, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;

  do
  {
    /*<<<DD_PWMSP001_API_3_1>>>*/
    if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
10004504:	2b03      	cmp	r3, #3
10004506:	d000      	beq.n	1000450a <PWMSP001_Start+0x22>
10004508:	e09f      	b.n	1000464a <PWMSP001_Start+0x162>
    {
      DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
      break;
    }

    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
1000450a:	687b      	ldr	r3, [r7, #4]
1000450c:	699a      	ldr	r2, [r3, #24]
1000450e:	23b0      	movs	r3, #176	; 0xb0
10004510:	4951      	ldr	r1, [pc, #324]	; (10004658 <PWMSP001_Start+0x170>)
10004512:	50d1      	str	r1, [r2, r3]
    
    /*<<<DD_PWMSP001_API_3_2>>>*/
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
10004514:	687b      	ldr	r3, [r7, #4]
10004516:	695b      	ldr	r3, [r3, #20]
10004518:	687a      	ldr	r2, [r7, #4]
1000451a:	6952      	ldr	r2, [r2, #20]
1000451c:	68d1      	ldr	r1, [r2, #12]
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
1000451e:	6878      	ldr	r0, [r7, #4]
10004520:	2237      	movs	r2, #55	; 0x37
10004522:	5c82      	ldrb	r2, [r0, r2]

    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
    
    /*<<<DD_PWMSP001_API_3_2>>>*/
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
10004524:	2001      	movs	r0, #1
10004526:	1c04      	adds	r4, r0, #0
10004528:	4094      	lsls	r4, r2
1000452a:	1c22      	adds	r2, r4, #0
    }

    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
    
    /*<<<DD_PWMSP001_API_3_2>>>*/
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
1000452c:	430a      	orrs	r2, r1
1000452e:	60da      	str	r2, [r3, #12]
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004530:	687a      	ldr	r2, [r7, #4]
10004532:	2320      	movs	r3, #32
10004534:	5cd3      	ldrb	r3, [r2, r3]
10004536:	2b01      	cmp	r3, #1
10004538:	d10d      	bne.n	10004556 <PWMSP001_Start+0x6e>
	{
	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
1000453a:	687b      	ldr	r3, [r7, #4]
1000453c:	695b      	ldr	r3, [r3, #20]
1000453e:	687a      	ldr	r2, [r7, #4]
10004540:	6952      	ldr	r2, [r2, #20]
10004542:	68d1      	ldr	r1, [r2, #12]
		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->SecondSlice));
10004544:	6878      	ldr	r0, [r7, #4]
10004546:	2238      	movs	r2, #56	; 0x38
10004548:	5c82      	ldrb	r2, [r0, r2]
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
	{
	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
1000454a:	2001      	movs	r0, #1
1000454c:	1c04      	adds	r4, r0, #0
1000454e:	4094      	lsls	r4, r2
10004550:	1c22      	adds	r2, r4, #0
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
	{
	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
10004552:	430a      	orrs	r2, r1
10004554:	60da      	str	r2, [r3, #12]
		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->SecondSlice));
	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
	
    /*Set run bit of slices if external start is not configured*/
    if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
10004556:	687b      	ldr	r3, [r7, #4]
10004558:	7b9b      	ldrb	r3, [r3, #14]
1000455a:	2b00      	cmp	r3, #0
1000455c:	d115      	bne.n	1000458a <PWMSP001_Start+0xa2>
    {
      HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
1000455e:	687b      	ldr	r3, [r7, #4]
10004560:	699b      	ldr	r3, [r3, #24]
10004562:	687a      	ldr	r2, [r7, #4]
10004564:	6992      	ldr	r2, [r2, #24]
10004566:	68d2      	ldr	r2, [r2, #12]
10004568:	2101      	movs	r1, #1
1000456a:	430a      	orrs	r2, r1
1000456c:	60da      	str	r2, [r3, #12]
      if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
1000456e:	687a      	ldr	r2, [r7, #4]
10004570:	2320      	movs	r3, #32
10004572:	5cd3      	ldrb	r3, [r2, r3]
10004574:	2b01      	cmp	r3, #1
10004576:	d161      	bne.n	1000463c <PWMSP001_Start+0x154>
      {
        HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
10004578:	687b      	ldr	r3, [r7, #4]
1000457a:	69db      	ldr	r3, [r3, #28]
1000457c:	687a      	ldr	r2, [r7, #4]
1000457e:	69d2      	ldr	r2, [r2, #28]
10004580:	68d2      	ldr	r2, [r2, #12]
10004582:	2101      	movs	r1, #1
10004584:	430a      	orrs	r2, r1
10004586:	60da      	str	r2, [r3, #12]
10004588:	e058      	b.n	1000463c <PWMSP001_Start+0x154>
      }
    }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
    else
    {
      /*<<<DD_PWMSP001_API_1_2>>>*/
      if (HandlePtr->kExtStartTrig == (uint8_t)SET)
1000458a:	687b      	ldr	r3, [r7, #4]
1000458c:	7b9b      	ldrb	r3, [r3, #14]
1000458e:	2b01      	cmp	r3, #1
10004590:	d125      	bne.n	100045de <PWMSP001_Start+0xf6>
      {
        HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
10004592:	687b      	ldr	r3, [r7, #4]
10004594:	699b      	ldr	r3, [r3, #24]
10004596:	687a      	ldr	r2, [r7, #4]
10004598:	6992      	ldr	r2, [r2, #24]
1000459a:	6811      	ldr	r1, [r2, #0]
1000459c:	4a2f      	ldr	r2, [pc, #188]	; (1000465c <PWMSP001_Start+0x174>)
1000459e:	400a      	ands	r2, r1
100045a0:	601a      	str	r2, [r3, #0]
		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
        HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
100045a2:	687b      	ldr	r3, [r7, #4]
100045a4:	699b      	ldr	r3, [r3, #24]
100045a6:	687a      	ldr	r2, [r7, #4]
100045a8:	6992      	ldr	r2, [r2, #24]
100045aa:	6852      	ldr	r2, [r2, #4]
100045ac:	2103      	movs	r1, #3
100045ae:	438a      	bics	r2, r1
100045b0:	605a      	str	r2, [r3, #4]
        HandlePtr->CC4yRegsPtr->INS |=
100045b2:	687b      	ldr	r3, [r7, #4]
100045b4:	699b      	ldr	r3, [r3, #24]
100045b6:	687a      	ldr	r2, [r7, #4]
100045b8:	6992      	ldr	r2, [r2, #24]
100045ba:	6811      	ldr	r1, [r2, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
100045bc:	6878      	ldr	r0, [r7, #4]
100045be:	2223      	movs	r2, #35	; 0x23
100045c0:	5c82      	ldrb	r2, [r0, r2]
100045c2:	0410      	lsls	r0, r2, #16
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
100045c4:	22c0      	movs	r2, #192	; 0xc0
100045c6:	0292      	lsls	r2, r2, #10
100045c8:	4002      	ands	r2, r0
      if (HandlePtr->kExtStartTrig == (uint8_t)SET)
      {
        HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
        HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
        HandlePtr->CC4yRegsPtr->INS |=
100045ca:	430a      	orrs	r2, r1
100045cc:	601a      	str	r2, [r3, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
                (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
        HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
100045ce:	687b      	ldr	r3, [r7, #4]
100045d0:	699b      	ldr	r3, [r3, #24]
100045d2:	687a      	ldr	r2, [r7, #4]
100045d4:	6992      	ldr	r2, [r2, #24]
100045d6:	6852      	ldr	r2, [r2, #4]
100045d8:	2101      	movs	r1, #1
100045da:	430a      	orrs	r2, r1
100045dc:	605a      	str	r2, [r3, #4]
            (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
      }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
      /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
      if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
100045de:	687b      	ldr	r3, [r7, #4]
100045e0:	7b9b      	ldrb	r3, [r3, #14]
100045e2:	2b01      	cmp	r3, #1
100045e4:	d12a      	bne.n	1000463c <PWMSP001_Start+0x154>
          (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100045e6:	687a      	ldr	r2, [r7, #4]
100045e8:	2320      	movs	r3, #32
100045ea:	5cd3      	ldrb	r3, [r2, r3]
                (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
        HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
            (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
      }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
      /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
      if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
100045ec:	2b01      	cmp	r3, #1
100045ee:	d125      	bne.n	1000463c <PWMSP001_Start+0x154>
          (HandlePtr->kTimerConcatenation == (uint8_t)SET)
      )
      {
        HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk);
100045f0:	687b      	ldr	r3, [r7, #4]
100045f2:	69db      	ldr	r3, [r3, #28]
100045f4:	687a      	ldr	r2, [r7, #4]
100045f6:	69d2      	ldr	r2, [r2, #28]
100045f8:	6811      	ldr	r1, [r2, #0]
100045fa:	4a18      	ldr	r2, [pc, #96]	; (1000465c <PWMSP001_Start+0x174>)
100045fc:	400a      	ands	r2, r1
100045fe:	601a      	str	r2, [r3, #0]
        HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
10004600:	687b      	ldr	r3, [r7, #4]
10004602:	69db      	ldr	r3, [r3, #28]
10004604:	687a      	ldr	r2, [r7, #4]
10004606:	69d2      	ldr	r2, [r2, #28]
10004608:	6852      	ldr	r2, [r2, #4]
1000460a:	2103      	movs	r1, #3
1000460c:	438a      	bics	r2, r1
1000460e:	605a      	str	r2, [r3, #4]
        HandlePtr->CC4yRegs1Ptr->INS |=
10004610:	687b      	ldr	r3, [r7, #4]
10004612:	69db      	ldr	r3, [r3, #28]
10004614:	687a      	ldr	r2, [r7, #4]
10004616:	69d2      	ldr	r2, [r2, #28]
10004618:	6811      	ldr	r1, [r2, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
1000461a:	6878      	ldr	r0, [r7, #4]
1000461c:	2223      	movs	r2, #35	; 0x23
1000461e:	5c82      	ldrb	r2, [r0, r2]
10004620:	0410      	lsls	r0, r2, #16
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
10004622:	22c0      	movs	r2, #192	; 0xc0
10004624:	0292      	lsls	r2, r2, #10
10004626:	4002      	ands	r2, r0
          (HandlePtr->kTimerConcatenation == (uint8_t)SET)
      )
      {
        HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk);
        HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
        HandlePtr->CC4yRegs1Ptr->INS |=
10004628:	430a      	orrs	r2, r1
1000462a:	601a      	str	r2, [r3, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
                    (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
        HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
1000462c:	687b      	ldr	r3, [r7, #4]
1000462e:	69db      	ldr	r3, [r3, #28]
10004630:	687a      	ldr	r2, [r7, #4]
10004632:	69d2      	ldr	r2, [r2, #28]
10004634:	6852      	ldr	r2, [r2, #4]
10004636:	2101      	movs	r1, #1
10004638:	430a      	orrs	r2, r1
1000463a:	605a      	str	r2, [r3, #4]
		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
      }/*End of if (HandlePtr->kExtStartTrig == SET)*/
    }

    HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
1000463c:	687b      	ldr	r3, [r7, #4]
1000463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004640:	2202      	movs	r2, #2
10004642:	701a      	strb	r2, [r3, #0]
    Status = (uint32_t)DAVEApp_SUCCESS;
10004644:	2300      	movs	r3, #0
10004646:	60fb      	str	r3, [r7, #12]
10004648:	e000      	b.n	1000464c <PWMSP001_Start+0x164>
    /*<<<DD_PWMSP001_API_3_1>>>*/
    if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
        (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
    {
      DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
      break;
1000464a:	46c0      	nop			; (mov r8, r8)
    }

    HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
    Status = (uint32_t)DAVEApp_SUCCESS;
  } while (0);
  return Status;
1000464c:	68fb      	ldr	r3, [r7, #12]
}
1000464e:	1c18      	adds	r0, r3, #0
10004650:	46bd      	mov	sp, r7
10004652:	b005      	add	sp, #20
10004654:	bd90      	pop	{r4, r7, pc}
10004656:	46c0      	nop			; (mov r8, r8)
10004658:	00000f0f 	.word	0x00000f0f
1000465c:	f9fcffff 	.word	0xf9fcffff

10004660 <PWMSP001_Stop>:

/*<<<DD_PWMSP001_API_4>>>*/
/* This function stops the app */
status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
{
10004660:	b580      	push	{r7, lr}
10004662:	b086      	sub	sp, #24
10004664:	af00      	add	r7, sp, #0
10004666:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004668:	2301      	movs	r3, #1
1000466a:	617b      	str	r3, [r7, #20]
  uint32_t Temp2;
  
  do
  {
    /*<<<DD_PWMSP001_API_4_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
1000466c:	687b      	ldr	r3, [r7, #4]
1000466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004670:	781b      	ldrb	r3, [r3, #0]
10004672:	2b02      	cmp	r3, #2
10004674:	d139      	bne.n	100046ea <PWMSP001_Stop+0x8a>
    {
      break;
    }
    else
    {
      Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
10004676:	687a      	ldr	r2, [r7, #4]
10004678:	2337      	movs	r3, #55	; 0x37
1000467a:	5cd3      	ldrb	r3, [r2, r3]
1000467c:	613b      	str	r3, [r7, #16]
      Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
1000467e:	2380      	movs	r3, #128	; 0x80
10004680:	009b      	lsls	r3, r3, #2
10004682:	60fb      	str	r3, [r7, #12]
      HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
10004684:	687b      	ldr	r3, [r7, #4]
10004686:	699b      	ldr	r3, [r3, #24]
10004688:	2207      	movs	r2, #7
1000468a:	611a      	str	r2, [r3, #16]
      HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
1000468c:	687b      	ldr	r3, [r7, #4]
1000468e:	695b      	ldr	r3, [r3, #20]
10004690:	687a      	ldr	r2, [r7, #4]
10004692:	6952      	ldr	r2, [r2, #20]
10004694:	6891      	ldr	r1, [r2, #8]
10004696:	693a      	ldr	r2, [r7, #16]
10004698:	2001      	movs	r0, #1
1000469a:	4090      	lsls	r0, r2
1000469c:	68fa      	ldr	r2, [r7, #12]
1000469e:	4302      	orrs	r2, r0
100046a0:	430a      	orrs	r2, r1
100046a2:	609a      	str	r2, [r3, #8]

      if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100046a4:	687a      	ldr	r2, [r7, #4]
100046a6:	2320      	movs	r3, #32
100046a8:	5cd3      	ldrb	r3, [r2, r3]
100046aa:	2b01      	cmp	r3, #1
100046ac:	d116      	bne.n	100046dc <PWMSP001_Stop+0x7c>
      {
        HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
100046ae:	687b      	ldr	r3, [r7, #4]
100046b0:	69db      	ldr	r3, [r3, #28]
100046b2:	2207      	movs	r2, #7
100046b4:	611a      	str	r2, [r3, #16]
        Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
100046b6:	687a      	ldr	r2, [r7, #4]
100046b8:	2338      	movs	r3, #56	; 0x38
100046ba:	5cd3      	ldrb	r3, [r2, r3]
100046bc:	613b      	str	r3, [r7, #16]
        Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
100046be:	2380      	movs	r3, #128	; 0x80
100046c0:	009b      	lsls	r3, r3, #2
100046c2:	60fb      	str	r3, [r7, #12]
        HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
100046c4:	687b      	ldr	r3, [r7, #4]
100046c6:	695b      	ldr	r3, [r3, #20]
100046c8:	687a      	ldr	r2, [r7, #4]
100046ca:	6952      	ldr	r2, [r2, #20]
100046cc:	6891      	ldr	r1, [r2, #8]
100046ce:	693a      	ldr	r2, [r7, #16]
100046d0:	2001      	movs	r0, #1
100046d2:	4090      	lsls	r0, r2
100046d4:	68fa      	ldr	r2, [r7, #12]
100046d6:	4302      	orrs	r2, r0
100046d8:	430a      	orrs	r2, r1
100046da:	609a      	str	r2, [r3, #8]
      }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/

      HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
100046dc:	687b      	ldr	r3, [r7, #4]
100046de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100046e0:	2203      	movs	r2, #3
100046e2:	701a      	strb	r2, [r3, #0]
      Status = (uint32_t)DAVEApp_SUCCESS;
100046e4:	2300      	movs	r3, #0
100046e6:	617b      	str	r3, [r7, #20]
100046e8:	e000      	b.n	100046ec <PWMSP001_Stop+0x8c>
  do
  {
    /*<<<DD_PWMSP001_API_4_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
    {
      break;
100046ea:	46c0      	nop			; (mov r8, r8)

  if (Status != (uint32_t)DAVEApp_SUCCESS)
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  return Status;
100046ec:	697b      	ldr	r3, [r7, #20]
}
100046ee:	1c18      	adds	r0, r3, #0
100046f0:	46bd      	mov	sp, r7
100046f2:	b006      	add	sp, #24
100046f4:	bd80      	pop	{r7, pc}
100046f6:	46c0      	nop			; (mov r8, r8)

100046f8 <PWMSP001_SetCompare>:
status_t PWMSP001_SetCompare
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t Compare
)
{
100046f8:	b580      	push	{r7, lr}
100046fa:	b084      	sub	sp, #16
100046fc:	af00      	add	r7, sp, #0
100046fe:	6078      	str	r0, [r7, #4]
10004700:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004702:	2301      	movs	r3, #1
10004704:	60fb      	str	r3, [r7, #12]
  uint32_t period;

  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004706:	687a      	ldr	r2, [r7, #4]
10004708:	2320      	movs	r3, #32
1000470a:	5cd3      	ldrb	r3, [r2, r3]
1000470c:	2b01      	cmp	r3, #1
1000470e:	d109      	bne.n	10004724 <PWMSP001_SetCompare+0x2c>
	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr->PRS);
10004710:	687b      	ldr	r3, [r7, #4]
10004712:	69db      	ldr	r3, [r3, #28]
10004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004716:	041a      	lsls	r2, r3, #16
10004718:	687b      	ldr	r3, [r7, #4]
1000471a:	699b      	ldr	r3, [r3, #24]
1000471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000471e:	4313      	orrs	r3, r2
10004720:	60bb      	str	r3, [r7, #8]
10004722:	e003      	b.n	1000472c <PWMSP001_SetCompare+0x34>
  else
	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
10004724:	687b      	ldr	r3, [r7, #4]
10004726:	699b      	ldr	r3, [r3, #24]
10004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000472a:	60bb      	str	r3, [r7, #8]

  /*<<<DD_PWMSP001_API_5_1>>>*/
  if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
1000472c:	687b      	ldr	r3, [r7, #4]
1000472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004730:	781b      	ldrb	r3, [r3, #0]
10004732:	2b00      	cmp	r3, #0
10004734:	d01c      	beq.n	10004770 <PWMSP001_SetCompare+0x78>
  {
    if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
10004736:	687b      	ldr	r3, [r7, #4]
10004738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000473a:	683b      	ldr	r3, [r7, #0]
1000473c:	429a      	cmp	r2, r3
1000473e:	d207      	bcs.n	10004750 <PWMSP001_SetCompare+0x58>
        (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
10004740:	687a      	ldr	r2, [r7, #4]
10004742:	2320      	movs	r3, #32
10004744:	5cd3      	ldrb	r3, [r2, r3]
	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;

  /*<<<DD_PWMSP001_API_5_1>>>*/
  if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
  {
    if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
10004746:	2b00      	cmp	r3, #0
10004748:	d102      	bne.n	10004750 <PWMSP001_SetCompare+0x58>
        (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1000474a:	2302      	movs	r3, #2
1000474c:	60fb      	str	r3, [r7, #12]
1000474e:	e00f      	b.n	10004770 <PWMSP001_SetCompare+0x78>
    }
    else
    {
      /*if compare value is greater or equal to the period value, output should be with 0% dutycycle.
	  Since setting exact period value will create the spikes,we are adding 1 and setting to the register*/
	  if (Compare >= (uint32_t)period)
10004750:	683a      	ldr	r2, [r7, #0]
10004752:	68bb      	ldr	r3, [r7, #8]
10004754:	429a      	cmp	r2, r3
10004756:	d302      	bcc.n	1000475e <PWMSP001_SetCompare+0x66>
	  {
		  Compare = (uint32_t)period + 1U;
10004758:	68bb      	ldr	r3, [r7, #8]
1000475a:	3301      	adds	r3, #1
1000475c:	603b      	str	r3, [r7, #0]
	  }
      /* Call function as per the configured mode */
      HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
1000475e:	687b      	ldr	r3, [r7, #4]
10004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004762:	6879      	ldr	r1, [r7, #4]
10004764:	683a      	ldr	r2, [r7, #0]
10004766:	1c08      	adds	r0, r1, #0
10004768:	1c11      	adds	r1, r2, #0
1000476a:	4798      	blx	r3
      Status = (uint32_t)DAVEApp_SUCCESS;
1000476c:	2300      	movs	r3, #0
1000476e:	60fb      	str	r3, [r7, #12]
    }
  }
  return Status;
10004770:	68fb      	ldr	r3, [r7, #12]
}
10004772:	1c18      	adds	r0, r3, #0
10004774:	46bd      	mov	sp, r7
10004776:	b004      	add	sp, #16
10004778:	bd80      	pop	{r7, pc}
1000477a:	46c0      	nop			; (mov r8, r8)

1000477c <PWMSP001_lSetCompareEdgeAlign>:
void PWMSP001_lSetCompareEdgeAlign
(
    void* Handle,
    uint32_t Compare
)
{
1000477c:	b590      	push	{r4, r7, lr}
1000477e:	b087      	sub	sp, #28
10004780:	af00      	add	r7, sp, #0
10004782:	6078      	str	r0, [r7, #4]
10004784:	6039      	str	r1, [r7, #0]
  uint32_t Temp1;
  uint32_t Temp2;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10004786:	687b      	ldr	r3, [r7, #4]
10004788:	617b      	str	r3, [r7, #20]
  HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
1000478a:	697b      	ldr	r3, [r7, #20]
1000478c:	699b      	ldr	r3, [r3, #24]
1000478e:	683a      	ldr	r2, [r7, #0]
10004790:	0412      	lsls	r2, r2, #16
10004792:	0c12      	lsrs	r2, r2, #16
10004794:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Request shadow transfer */
  Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
10004796:	697a      	ldr	r2, [r7, #20]
10004798:	2337      	movs	r3, #55	; 0x37
1000479a:	5cd3      	ldrb	r3, [r2, r3]
1000479c:	009b      	lsls	r3, r3, #2
1000479e:	613b      	str	r3, [r7, #16]
  Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
100047a0:	693b      	ldr	r3, [r7, #16]
100047a2:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
100047a4:	697b      	ldr	r3, [r7, #20]
100047a6:	695b      	ldr	r3, [r3, #20]
100047a8:	697a      	ldr	r2, [r7, #20]
100047aa:	6952      	ldr	r2, [r2, #20]
100047ac:	6911      	ldr	r1, [r2, #16]
100047ae:	68fa      	ldr	r2, [r7, #12]
100047b0:	2001      	movs	r0, #1
100047b2:	1c04      	adds	r4, r0, #0
100047b4:	4094      	lsls	r4, r2
100047b6:	1c22      	adds	r2, r4, #0
100047b8:	430a      	orrs	r2, r1
100047ba:	611a      	str	r2, [r3, #16]
}
100047bc:	46bd      	mov	sp, r7
100047be:	b007      	add	sp, #28
100047c0:	bd90      	pop	{r4, r7, pc}
100047c2:	46c0      	nop			; (mov r8, r8)

100047c4 <PWMSP001_lSetCompareEdgeAlignTimerConcat>:
void PWMSP001_lSetCompareEdgeAlignTimerConcat
(
    void* Handle,
    uint32_t Compare
)
{
100047c4:	b5b0      	push	{r4, r5, r7, lr}
100047c6:	b088      	sub	sp, #32
100047c8:	af00      	add	r7, sp, #0
100047ca:	6078      	str	r0, [r7, #4]
100047cc:	6039      	str	r1, [r7, #0]
  uint32_t FirstSliceCompareVal = 0x00U;
100047ce:	2300      	movs	r3, #0
100047d0:	61fb      	str	r3, [r7, #28]
  uint32_t SecondSliceCompareVal = 0x00U;
100047d2:	2300      	movs	r3, #0
100047d4:	61bb      	str	r3, [r7, #24]
  uint32_t Temp1;
  uint32_t Temp2;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
100047d6:	687b      	ldr	r3, [r7, #4]
100047d8:	617b      	str	r3, [r7, #20]
   * register of second slice.
   * This is done to achieve compare register value of first slice
   * to be less than period register value.
   */
  FirstSliceCompareVal = (uint32_t)Compare % \
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
100047da:	697b      	ldr	r3, [r7, #20]
100047dc:	699b      	ldr	r3, [r3, #24]
100047de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100047e0:	b29b      	uxth	r3, r3
   * compare register of first slice and quotient is written in compare
   * register of second slice.
   * This is done to achieve compare register value of first slice
   * to be less than period register value.
   */
  FirstSliceCompareVal = (uint32_t)Compare % \
100047e2:	683a      	ldr	r2, [r7, #0]
100047e4:	1c10      	adds	r0, r2, #0
100047e6:	1c19      	adds	r1, r3, #0
100047e8:	f005 f866 	bl	100098b8 <__aeabi_uidivmod>
100047ec:	1c0b      	adds	r3, r1, #0
100047ee:	61fb      	str	r3, [r7, #28]
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
  SecondSliceCompareVal = (uint32_t)Compare /
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
100047f0:	697b      	ldr	r3, [r7, #20]
100047f2:	699b      	ldr	r3, [r3, #24]
100047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100047f6:	b29b      	uxth	r3, r3
   * This is done to achieve compare register value of first slice
   * to be less than period register value.
   */
  FirstSliceCompareVal = (uint32_t)Compare % \
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
  SecondSliceCompareVal = (uint32_t)Compare /
100047f8:	6838      	ldr	r0, [r7, #0]
100047fa:	1c19      	adds	r1, r3, #0
100047fc:	f005 f818 	bl	10009830 <__aeabi_uidiv>
10004800:	1c03      	adds	r3, r0, #0
10004802:	61bb      	str	r3, [r7, #24]
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
  
  HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
10004804:	697b      	ldr	r3, [r7, #20]
10004806:	699b      	ldr	r3, [r3, #24]
10004808:	69fa      	ldr	r2, [r7, #28]
1000480a:	0412      	lsls	r2, r2, #16
1000480c:	0c12      	lsrs	r2, r2, #16
1000480e:	63da      	str	r2, [r3, #60]	; 0x3c
  HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
10004810:	697b      	ldr	r3, [r7, #20]
10004812:	69db      	ldr	r3, [r3, #28]
10004814:	69ba      	ldr	r2, [r7, #24]
10004816:	0412      	lsls	r2, r2, #16
10004818:	0c12      	lsrs	r2, r2, #16
1000481a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Request shadow transfer */
  Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
1000481c:	697a      	ldr	r2, [r7, #20]
1000481e:	2338      	movs	r3, #56	; 0x38
10004820:	5cd3      	ldrb	r3, [r2, r3]
10004822:	009b      	lsls	r3, r3, #2
10004824:	613b      	str	r3, [r7, #16]
  Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
10004826:	697a      	ldr	r2, [r7, #20]
10004828:	2337      	movs	r3, #55	; 0x37
1000482a:	5cd3      	ldrb	r3, [r2, r3]
1000482c:	009b      	lsls	r3, r3, #2
1000482e:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Temp1));
10004830:	697b      	ldr	r3, [r7, #20]
10004832:	695b      	ldr	r3, [r3, #20]
10004834:	697a      	ldr	r2, [r7, #20]
10004836:	6952      	ldr	r2, [r2, #20]
10004838:	6911      	ldr	r1, [r2, #16]
1000483a:	68fa      	ldr	r2, [r7, #12]
1000483c:	2001      	movs	r0, #1
1000483e:	4090      	lsls	r0, r2
10004840:	693a      	ldr	r2, [r7, #16]
10004842:	2401      	movs	r4, #1
10004844:	1c25      	adds	r5, r4, #0
10004846:	4095      	lsls	r5, r2
10004848:	1c2a      	adds	r2, r5, #0
1000484a:	4302      	orrs	r2, r0
1000484c:	430a      	orrs	r2, r1
1000484e:	611a      	str	r2, [r3, #16]
}
10004850:	46bd      	mov	sp, r7
10004852:	b008      	add	sp, #32
10004854:	bdb0      	pop	{r4, r5, r7, pc}
10004856:	46c0      	nop			; (mov r8, r8)

10004858 <PWMSP001_lSetCompareCenterAlign>:
void PWMSP001_lSetCompareCenterAlign
(
    void* Handle,
    uint32_t Compare
)
{
10004858:	b590      	push	{r4, r7, lr}
1000485a:	b085      	sub	sp, #20
1000485c:	af00      	add	r7, sp, #0
1000485e:	6078      	str	r0, [r7, #4]
10004860:	6039      	str	r1, [r7, #0]
  uint32_t Temp1;
  /*<<<DD_PWMSP001_API_5_3>>>*/
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10004862:	687b      	ldr	r3, [r7, #4]
10004864:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
10004866:	68fb      	ldr	r3, [r7, #12]
10004868:	699b      	ldr	r3, [r3, #24]
1000486a:	683a      	ldr	r2, [r7, #0]
1000486c:	0412      	lsls	r2, r2, #16
1000486e:	0c12      	lsrs	r2, r2, #16
10004870:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Request shadow transfer */
  Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
10004872:	68fa      	ldr	r2, [r7, #12]
10004874:	2337      	movs	r3, #55	; 0x37
10004876:	5cd3      	ldrb	r3, [r2, r3]
10004878:	009b      	lsls	r3, r3, #2
1000487a:	60bb      	str	r3, [r7, #8]
  HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
1000487c:	68fb      	ldr	r3, [r7, #12]
1000487e:	695b      	ldr	r3, [r3, #20]
10004880:	68fa      	ldr	r2, [r7, #12]
10004882:	6952      	ldr	r2, [r2, #20]
10004884:	6911      	ldr	r1, [r2, #16]
10004886:	68ba      	ldr	r2, [r7, #8]
10004888:	2001      	movs	r0, #1
1000488a:	1c04      	adds	r4, r0, #0
1000488c:	4094      	lsls	r4, r2
1000488e:	1c22      	adds	r2, r4, #0
10004890:	430a      	orrs	r2, r1
10004892:	611a      	str	r2, [r3, #16]
}
10004894:	46bd      	mov	sp, r7
10004896:	b005      	add	sp, #20
10004898:	bd90      	pop	{r4, r7, pc}
1000489a:	46c0      	nop			; (mov r8, r8)

1000489c <PWMSP001_SetDutyCycle>:
status_t PWMSP001_SetDutyCycle
(
    const PWMSP001_HandleType* HandlePtr,
    float Duty
)
{
1000489c:	b580      	push	{r7, lr}
1000489e:	b084      	sub	sp, #16
100048a0:	af00      	add	r7, sp, #0
100048a2:	6078      	str	r0, [r7, #4]
100048a4:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100048a6:	2301      	movs	r3, #1
100048a8:	60fb      	str	r3, [r7, #12]

  if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
100048aa:	687b      	ldr	r3, [r7, #4]
100048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100048ae:	781b      	ldrb	r3, [r3, #0]
100048b0:	2b00      	cmp	r3, #0
100048b2:	d019      	beq.n	100048e8 <PWMSP001_SetDutyCycle+0x4c>
  {
  if((Duty > (float)100) || ((float)Duty < (float)0))
100048b4:	6838      	ldr	r0, [r7, #0]
100048b6:	490f      	ldr	r1, [pc, #60]	; (100048f4 <PWMSP001_SetDutyCycle+0x58>)
100048b8:	f005 f830 	bl	1000991c <__aeabi_fcmpgt>
100048bc:	1c03      	adds	r3, r0, #0
100048be:	2b00      	cmp	r3, #0
100048c0:	d106      	bne.n	100048d0 <PWMSP001_SetDutyCycle+0x34>
100048c2:	6838      	ldr	r0, [r7, #0]
100048c4:	2100      	movs	r1, #0
100048c6:	f005 f815 	bl	100098f4 <__aeabi_fcmplt>
100048ca:	1c03      	adds	r3, r0, #0
100048cc:	2b00      	cmp	r3, #0
100048ce:	d002      	beq.n	100048d6 <PWMSP001_SetDutyCycle+0x3a>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100048d0:	2302      	movs	r3, #2
100048d2:	60fb      	str	r3, [r7, #12]
100048d4:	e008      	b.n	100048e8 <PWMSP001_SetDutyCycle+0x4c>
  }
  else
  {
    /* Call the function as per configured mode */
    HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
100048d6:	687b      	ldr	r3, [r7, #4]
100048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100048da:	6879      	ldr	r1, [r7, #4]
100048dc:	683a      	ldr	r2, [r7, #0]
100048de:	1c08      	adds	r0, r1, #0
100048e0:	1c11      	adds	r1, r2, #0
100048e2:	4798      	blx	r3
    Status = (uint32_t)DAVEApp_SUCCESS;
100048e4:	2300      	movs	r3, #0
100048e6:	60fb      	str	r3, [r7, #12]
  }
  }
  return (Status);
100048e8:	68fb      	ldr	r3, [r7, #12]
}
100048ea:	1c18      	adds	r0, r3, #0
100048ec:	46bd      	mov	sp, r7
100048ee:	b004      	add	sp, #16
100048f0:	bd80      	pop	{r7, pc}
100048f2:	46c0      	nop			; (mov r8, r8)
100048f4:	42c80000 	.word	0x42c80000

100048f8 <PWMSP001_lSetDutyEdgeAlign>:
void PWMSP001_lSetDutyEdgeAlign
(
    void* Handle,
    float Duty
)
{
100048f8:	b590      	push	{r4, r7, lr}
100048fa:	b089      	sub	sp, #36	; 0x24
100048fc:	af00      	add	r7, sp, #0
100048fe:	6078      	str	r0, [r7, #4]
10004900:	6039      	str	r1, [r7, #0]
  uint32_t FirstSliceCompareVal = (uint32_t)0;
10004902:	2300      	movs	r3, #0
10004904:	61fb      	str	r3, [r7, #28]
  uint32_t Temp1;
  float fDuty, fPRS ;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10004906:	687b      	ldr	r3, [r7, #4]
10004908:	61bb      	str	r3, [r7, #24]
  fDuty = Duty;
1000490a:	683b      	ldr	r3, [r7, #0]
1000490c:	617b      	str	r3, [r7, #20]
  
  /*<<<DD_PWMSP001_API_15_3>>>*/
  
  fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
1000490e:	481c      	ldr	r0, [pc, #112]	; (10004980 <PWMSP001_lSetDutyEdgeAlign+0x88>)
10004910:	6979      	ldr	r1, [r7, #20]
10004912:	f005 fb51 	bl	10009fb8 <__aeabi_fsub>
10004916:	1c03      	adds	r3, r0, #0
10004918:	1c18      	adds	r0, r3, #0
1000491a:	4919      	ldr	r1, [pc, #100]	; (10004980 <PWMSP001_lSetDutyEdgeAlign+0x88>)
1000491c:	f005 f82a 	bl	10009974 <__aeabi_fdiv>
10004920:	1c03      	adds	r3, r0, #0
10004922:	617b      	str	r3, [r7, #20]
  fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
10004924:	69bb      	ldr	r3, [r7, #24]
10004926:	699b      	ldr	r3, [r3, #24]
10004928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000492a:	3301      	adds	r3, #1
1000492c:	1c18      	adds	r0, r3, #0
1000492e:	f005 fd3d 	bl	1000a3ac <__aeabi_ui2f>
10004932:	1c03      	adds	r3, r0, #0
10004934:	613b      	str	r3, [r7, #16]
  FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
10004936:	6938      	ldr	r0, [r7, #16]
10004938:	6979      	ldr	r1, [r7, #20]
1000493a:	f005 fa0d 	bl	10009d58 <__aeabi_fmul>
1000493e:	1c03      	adds	r3, r0, #0
10004940:	1c18      	adds	r0, r3, #0
10004942:	f004 ffff 	bl	10009944 <__aeabi_f2uiz>
10004946:	1c03      	adds	r3, r0, #0
10004948:	61fb      	str	r3, [r7, #28]
  HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
1000494a:	69bb      	ldr	r3, [r7, #24]
1000494c:	699b      	ldr	r3, [r3, #24]
1000494e:	69fa      	ldr	r2, [r7, #28]
10004950:	0412      	lsls	r2, r2, #16
10004952:	0c12      	lsrs	r2, r2, #16
10004954:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /*Shadow transfer */
  Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
10004956:	69ba      	ldr	r2, [r7, #24]
10004958:	2337      	movs	r3, #55	; 0x37
1000495a:	5cd3      	ldrb	r3, [r2, r3]
1000495c:	009b      	lsls	r3, r3, #2
1000495e:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
10004960:	69bb      	ldr	r3, [r7, #24]
10004962:	695b      	ldr	r3, [r3, #20]
10004964:	69ba      	ldr	r2, [r7, #24]
10004966:	6952      	ldr	r2, [r2, #20]
10004968:	6911      	ldr	r1, [r2, #16]
1000496a:	68fa      	ldr	r2, [r7, #12]
1000496c:	2001      	movs	r0, #1
1000496e:	1c04      	adds	r4, r0, #0
10004970:	4094      	lsls	r4, r2
10004972:	1c22      	adds	r2, r4, #0
10004974:	430a      	orrs	r2, r1
10004976:	611a      	str	r2, [r3, #16]
  /*Update dynamic handle */
}
10004978:	46bd      	mov	sp, r7
1000497a:	b009      	add	sp, #36	; 0x24
1000497c:	bd90      	pop	{r4, r7, pc}
1000497e:	46c0      	nop			; (mov r8, r8)
10004980:	42c80000 	.word	0x42c80000

10004984 <PWMSP001_lSetDutyEdgeAlignTimerConcat>:
void PWMSP001_lSetDutyEdgeAlignTimerConcat
(
    void* Handle,
    float Duty
)
{
10004984:	b5b0      	push	{r4, r5, r7, lr}
10004986:	b08a      	sub	sp, #40	; 0x28
10004988:	af00      	add	r7, sp, #0
1000498a:	6078      	str	r0, [r7, #4]
1000498c:	6039      	str	r1, [r7, #0]
  uint32_t Compare = (uint32_t)0;
1000498e:	2300      	movs	r3, #0
10004990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t FirstSliceCompareVal = (uint32_t)0;
10004992:	2300      	movs	r3, #0
10004994:	623b      	str	r3, [r7, #32]
  uint32_t SecondSliceCompareVal = (uint32_t)0;
10004996:	2300      	movs	r3, #0
10004998:	61fb      	str	r3, [r7, #28]
  uint32_t Temp2;
  uint32_t Temp3;
  float fDuty, fPRS ;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
1000499a:	687b      	ldr	r3, [r7, #4]
1000499c:	61bb      	str	r3, [r7, #24]
  
  fDuty = Duty;
1000499e:	683b      	ldr	r3, [r7, #0]
100049a0:	617b      	str	r3, [r7, #20]
  /*<<<DD_PWMSP001_API_15_4>>>*/
  /* Find the compare register value from the duty cycle and period register value */
  Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
100049a2:	69bb      	ldr	r3, [r7, #24]
100049a4:	69db      	ldr	r3, [r3, #28]
100049a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100049a8:	3301      	adds	r3, #1
100049aa:	627b      	str	r3, [r7, #36]	; 0x24
  Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
100049ac:	69bb      	ldr	r3, [r7, #24]
100049ae:	699b      	ldr	r3, [r3, #24]
100049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100049b2:	041b      	lsls	r3, r3, #16
100049b4:	0c1b      	lsrs	r3, r3, #16
100049b6:	1c5a      	adds	r2, r3, #1
100049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100049ba:	4353      	muls	r3, r2
100049bc:	627b      	str	r3, [r7, #36]	; 0x24
  Compare +=  (uint32_t)1;
100049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100049c0:	3301      	adds	r3, #1
100049c2:	627b      	str	r3, [r7, #36]	; 0x24
  
  fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
100049c4:	482c      	ldr	r0, [pc, #176]	; (10004a78 <PWMSP001_lSetDutyEdgeAlignTimerConcat+0xf4>)
100049c6:	6979      	ldr	r1, [r7, #20]
100049c8:	f005 faf6 	bl	10009fb8 <__aeabi_fsub>
100049cc:	1c03      	adds	r3, r0, #0
100049ce:	1c18      	adds	r0, r3, #0
100049d0:	4929      	ldr	r1, [pc, #164]	; (10004a78 <PWMSP001_lSetDutyEdgeAlignTimerConcat+0xf4>)
100049d2:	f004 ffcf 	bl	10009974 <__aeabi_fdiv>
100049d6:	1c03      	adds	r3, r0, #0
100049d8:	617b      	str	r3, [r7, #20]
  fPRS = (float)(Compare);
100049da:	6a78      	ldr	r0, [r7, #36]	; 0x24
100049dc:	f005 fce6 	bl	1000a3ac <__aeabi_ui2f>
100049e0:	1c03      	adds	r3, r0, #0
100049e2:	613b      	str	r3, [r7, #16]
  Compare = (uint32_t)( fPRS * fDuty);
100049e4:	6938      	ldr	r0, [r7, #16]
100049e6:	6979      	ldr	r1, [r7, #20]
100049e8:	f005 f9b6 	bl	10009d58 <__aeabi_fmul>
100049ec:	1c03      	adds	r3, r0, #0
100049ee:	1c18      	adds	r0, r3, #0
100049f0:	f004 ffa8 	bl	10009944 <__aeabi_f2uiz>
100049f4:	1c03      	adds	r3, r0, #0
100049f6:	627b      	str	r3, [r7, #36]	; 0x24

  FirstSliceCompareVal =(uint32_t)
                    ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
100049f8:	69bb      	ldr	r3, [r7, #24]
100049fa:	699b      	ldr	r3, [r3, #24]
100049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100049fe:	041b      	lsls	r3, r3, #16
10004a00:	0c1b      	lsrs	r3, r3, #16
  
  fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
  fPRS = (float)(Compare);
  Compare = (uint32_t)( fPRS * fDuty);

  FirstSliceCompareVal =(uint32_t)
10004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10004a04:	1c10      	adds	r0, r2, #0
10004a06:	1c19      	adds	r1, r3, #0
10004a08:	f004 ff56 	bl	100098b8 <__aeabi_uidivmod>
10004a0c:	1c0b      	adds	r3, r1, #0
10004a0e:	623b      	str	r3, [r7, #32]
                    ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
  HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
10004a10:	69bb      	ldr	r3, [r7, #24]
10004a12:	699b      	ldr	r3, [r3, #24]
10004a14:	6a3a      	ldr	r2, [r7, #32]
10004a16:	0412      	lsls	r2, r2, #16
10004a18:	0c12      	lsrs	r2, r2, #16
10004a1a:	63da      	str	r2, [r3, #60]	; 0x3c
  SecondSliceCompareVal = (uint32_t)
                    ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
10004a1c:	69bb      	ldr	r3, [r7, #24]
10004a1e:	699b      	ldr	r3, [r3, #24]
10004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004a22:	041b      	lsls	r3, r3, #16
10004a24:	0c1b      	lsrs	r3, r3, #16
  Compare = (uint32_t)( fPRS * fDuty);

  FirstSliceCompareVal =(uint32_t)
                    ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
  HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
  SecondSliceCompareVal = (uint32_t)
10004a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
10004a28:	1c19      	adds	r1, r3, #0
10004a2a:	f004 ff01 	bl	10009830 <__aeabi_uidiv>
10004a2e:	1c03      	adds	r3, r0, #0
10004a30:	61fb      	str	r3, [r7, #28]
                    ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
  HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
10004a32:	69bb      	ldr	r3, [r7, #24]
10004a34:	69db      	ldr	r3, [r3, #28]
10004a36:	69fa      	ldr	r2, [r7, #28]
10004a38:	0412      	lsls	r2, r2, #16
10004a3a:	0c12      	lsrs	r2, r2, #16
10004a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /** shadow transfer */
  Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
10004a3e:	69ba      	ldr	r2, [r7, #24]
10004a40:	2337      	movs	r3, #55	; 0x37
10004a42:	5cd3      	ldrb	r3, [r2, r3]
10004a44:	009b      	lsls	r3, r3, #2
10004a46:	60fb      	str	r3, [r7, #12]
  Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
10004a48:	69ba      	ldr	r2, [r7, #24]
10004a4a:	2338      	movs	r3, #56	; 0x38
10004a4c:	5cd3      	ldrb	r3, [r2, r3]
10004a4e:	009b      	lsls	r3, r3, #2
10004a50:	60bb      	str	r3, [r7, #8]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 << (uint32_t)Temp3));
10004a52:	69bb      	ldr	r3, [r7, #24]
10004a54:	695b      	ldr	r3, [r3, #20]
10004a56:	69ba      	ldr	r2, [r7, #24]
10004a58:	6952      	ldr	r2, [r2, #20]
10004a5a:	6911      	ldr	r1, [r2, #16]
10004a5c:	68fa      	ldr	r2, [r7, #12]
10004a5e:	2001      	movs	r0, #1
10004a60:	4090      	lsls	r0, r2
10004a62:	68ba      	ldr	r2, [r7, #8]
10004a64:	2401      	movs	r4, #1
10004a66:	1c25      	adds	r5, r4, #0
10004a68:	4095      	lsls	r5, r2
10004a6a:	1c2a      	adds	r2, r5, #0
10004a6c:	4302      	orrs	r2, r0
10004a6e:	430a      	orrs	r2, r1
10004a70:	611a      	str	r2, [r3, #16]
}
10004a72:	46bd      	mov	sp, r7
10004a74:	b00a      	add	sp, #40	; 0x28
10004a76:	bdb0      	pop	{r4, r5, r7, pc}
10004a78:	42c80000 	.word	0x42c80000

10004a7c <PWMSP001_lSetDutyCenterAlign>:
void PWMSP001_lSetDutyCenterAlign
(
    void* Handle,
    float Duty
)
{
10004a7c:	b590      	push	{r4, r7, lr}
10004a7e:	b089      	sub	sp, #36	; 0x24
10004a80:	af00      	add	r7, sp, #0
10004a82:	6078      	str	r0, [r7, #4]
10004a84:	6039      	str	r1, [r7, #0]
  /*<<<DD_PWMSP001_API_15_5>>>*/
  uint32_t FirstSliceCompareVal = (uint32_t)0x00;
10004a86:	2300      	movs	r3, #0
10004a88:	61fb      	str	r3, [r7, #28]
  uint32_t Temp1;
  float fDuty, fPRS ;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10004a8a:	687b      	ldr	r3, [r7, #4]
10004a8c:	61bb      	str	r3, [r7, #24]
  fDuty = Duty;
10004a8e:	683b      	ldr	r3, [r7, #0]
10004a90:	617b      	str	r3, [r7, #20]

  fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
10004a92:	481b      	ldr	r0, [pc, #108]	; (10004b00 <PWMSP001_lSetDutyCenterAlign+0x84>)
10004a94:	6979      	ldr	r1, [r7, #20]
10004a96:	f005 fa8f 	bl	10009fb8 <__aeabi_fsub>
10004a9a:	1c03      	adds	r3, r0, #0
10004a9c:	1c18      	adds	r0, r3, #0
10004a9e:	4918      	ldr	r1, [pc, #96]	; (10004b00 <PWMSP001_lSetDutyCenterAlign+0x84>)
10004aa0:	f004 ff68 	bl	10009974 <__aeabi_fdiv>
10004aa4:	1c03      	adds	r3, r0, #0
10004aa6:	617b      	str	r3, [r7, #20]
  fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
10004aa8:	69bb      	ldr	r3, [r7, #24]
10004aaa:	699b      	ldr	r3, [r3, #24]
10004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004aae:	1c18      	adds	r0, r3, #0
10004ab0:	f005 fc7c 	bl	1000a3ac <__aeabi_ui2f>
10004ab4:	1c03      	adds	r3, r0, #0
10004ab6:	613b      	str	r3, [r7, #16]
  FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
10004ab8:	6938      	ldr	r0, [r7, #16]
10004aba:	6979      	ldr	r1, [r7, #20]
10004abc:	f005 f94c 	bl	10009d58 <__aeabi_fmul>
10004ac0:	1c03      	adds	r3, r0, #0
10004ac2:	1c18      	adds	r0, r3, #0
10004ac4:	f004 ff3e 	bl	10009944 <__aeabi_f2uiz>
10004ac8:	1c03      	adds	r3, r0, #0
10004aca:	61fb      	str	r3, [r7, #28]
  HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
10004acc:	69bb      	ldr	r3, [r7, #24]
10004ace:	699b      	ldr	r3, [r3, #24]
10004ad0:	69fa      	ldr	r2, [r7, #28]
10004ad2:	0412      	lsls	r2, r2, #16
10004ad4:	0c12      	lsrs	r2, r2, #16
10004ad6:	63da      	str	r2, [r3, #60]	; 0x3c

  /*shadow transfer */
  Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
10004ad8:	69ba      	ldr	r2, [r7, #24]
10004ada:	2337      	movs	r3, #55	; 0x37
10004adc:	5cd3      	ldrb	r3, [r2, r3]
10004ade:	009b      	lsls	r3, r3, #2
10004ae0:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
10004ae2:	69bb      	ldr	r3, [r7, #24]
10004ae4:	695b      	ldr	r3, [r3, #20]
10004ae6:	69ba      	ldr	r2, [r7, #24]
10004ae8:	6952      	ldr	r2, [r2, #20]
10004aea:	6911      	ldr	r1, [r2, #16]
10004aec:	68fa      	ldr	r2, [r7, #12]
10004aee:	2001      	movs	r0, #1
10004af0:	1c04      	adds	r4, r0, #0
10004af2:	4094      	lsls	r4, r2
10004af4:	1c22      	adds	r2, r4, #0
10004af6:	430a      	orrs	r2, r1
10004af8:	611a      	str	r2, [r3, #16]
}
10004afa:	46bd      	mov	sp, r7
10004afc:	b009      	add	sp, #36	; 0x24
10004afe:	bd90      	pop	{r4, r7, pc}
10004b00:	42c80000 	.word	0x42c80000

10004b04 <PWMSP001_SetPeriodAndCompare>:
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t Period,
    uint32_t Compare
)
{
10004b04:	b580      	push	{r7, lr}
10004b06:	b086      	sub	sp, #24
10004b08:	af00      	add	r7, sp, #0
10004b0a:	60f8      	str	r0, [r7, #12]
10004b0c:	60b9      	str	r1, [r7, #8]
10004b0e:	607a      	str	r2, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004b10:	2301      	movs	r3, #1
10004b12:	617b      	str	r3, [r7, #20]
  uint32_t PeriodVal = 0UL;
10004b14:	2300      	movs	r3, #0
10004b16:	613b      	str	r3, [r7, #16]
  /*<<<DD_PWMSP001_API_6_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
10004b18:	68fb      	ldr	r3, [r7, #12]
10004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004b1c:	781b      	ldrb	r3, [r3, #0]
10004b1e:	2b00      	cmp	r3, #0
10004b20:	d037      	beq.n	10004b92 <PWMSP001_SetPeriodAndCompare+0x8e>
  {
   if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
10004b22:	68bb      	ldr	r3, [r7, #8]
10004b24:	2b00      	cmp	r3, #0
10004b26:	d009      	beq.n	10004b3c <PWMSP001_SetPeriodAndCompare+0x38>
10004b28:	68fb      	ldr	r3, [r7, #12]
10004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10004b2c:	687b      	ldr	r3, [r7, #4]
10004b2e:	429a      	cmp	r2, r3
10004b30:	d207      	bcs.n	10004b42 <PWMSP001_SetPeriodAndCompare+0x3e>
       (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
10004b32:	68fa      	ldr	r2, [r7, #12]
10004b34:	2320      	movs	r3, #32
10004b36:	5cd3      	ldrb	r3, [r2, r3]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  uint32_t PeriodVal = 0UL;
  /*<<<DD_PWMSP001_API_6_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
  {
   if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
10004b38:	2b00      	cmp	r3, #0
10004b3a:	d102      	bne.n	10004b42 <PWMSP001_SetPeriodAndCompare+0x3e>
       (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004b3c:	2302      	movs	r3, #2
10004b3e:	617b      	str	r3, [r7, #20]
10004b40:	e027      	b.n	10004b92 <PWMSP001_SetPeriodAndCompare+0x8e>
    }
    else
    {
      if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
10004b42:	68fb      	ldr	r3, [r7, #12]
10004b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10004b46:	68bb      	ldr	r3, [r7, #8]
10004b48:	429a      	cmp	r2, r3
10004b4a:	d207      	bcs.n	10004b5c <PWMSP001_SetPeriodAndCompare+0x58>
          ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
10004b4c:	68fa      	ldr	r2, [r7, #12]
10004b4e:	2320      	movs	r3, #32
10004b50:	5cd3      	ldrb	r3, [r2, r3]
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
    }
    else
    {
      if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
10004b52:	2b01      	cmp	r3, #1
10004b54:	d002      	beq.n	10004b5c <PWMSP001_SetPeriodAndCompare+0x58>
          ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
          )
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004b56:	2302      	movs	r3, #2
10004b58:	617b      	str	r3, [r7, #20]
10004b5a:	e01a      	b.n	10004b92 <PWMSP001_SetPeriodAndCompare+0x8e>
      }
      else
      {
        PeriodVal = Period;
10004b5c:	68bb      	ldr	r3, [r7, #8]
10004b5e:	613b      	str	r3, [r7, #16]
        if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004b60:	68fa      	ldr	r2, [r7, #12]
10004b62:	2320      	movs	r3, #32
10004b64:	5cd3      	ldrb	r3, [r2, r3]
10004b66:	2b01      	cmp	r3, #1
10004b68:	d104      	bne.n	10004b74 <PWMSP001_SetPeriodAndCompare+0x70>
        {
          HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
10004b6a:	68fb      	ldr	r3, [r7, #12]
10004b6c:	69db      	ldr	r3, [r3, #28]
10004b6e:	693a      	ldr	r2, [r7, #16]
10004b70:	0c12      	lsrs	r2, r2, #16
10004b72:	635a      	str	r2, [r3, #52]	; 0x34
        }
        /*<<<DD_PWMSP001_API_6_3>>>*/
        HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
10004b74:	68fb      	ldr	r3, [r7, #12]
10004b76:	699b      	ldr	r3, [r3, #24]
10004b78:	693a      	ldr	r2, [r7, #16]
10004b7a:	0412      	lsls	r2, r2, #16
10004b7c:	0c12      	lsrs	r2, r2, #16
10004b7e:	635a      	str	r2, [r3, #52]	; 0x34
        /* Call function as per the configured mode */
        HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
10004b80:	68fb      	ldr	r3, [r7, #12]
10004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004b84:	68f9      	ldr	r1, [r7, #12]
10004b86:	687a      	ldr	r2, [r7, #4]
10004b88:	1c08      	adds	r0, r1, #0
10004b8a:	1c11      	adds	r1, r2, #0
10004b8c:	4798      	blx	r3
        Status = (uint32_t)DAVEApp_SUCCESS;
10004b8e:	2300      	movs	r3, #0
10004b90:	617b      	str	r3, [r7, #20]
      }
    }
  }
  return Status;
10004b92:	697b      	ldr	r3, [r7, #20]
}
10004b94:	1c18      	adds	r0, r3, #0
10004b96:	46bd      	mov	sp, r7
10004b98:	b006      	add	sp, #24
10004b9a:	bd80      	pop	{r7, pc}

10004b9c <PWMSP001_SetPeriod>:
status_t PWMSP001_SetPeriod
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t Period
)
{
10004b9c:	b590      	push	{r4, r7, lr}
10004b9e:	b087      	sub	sp, #28
10004ba0:	af00      	add	r7, sp, #0
10004ba2:	6078      	str	r0, [r7, #4]
10004ba4:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004ba6:	2301      	movs	r3, #1
10004ba8:	617b      	str	r3, [r7, #20]
  uint32_t PeriodVal = 0X00U;
10004baa:	2300      	movs	r3, #0
10004bac:	613b      	str	r3, [r7, #16]
  uint32_t Temp1;
  
  /*<<<DD_PWMSP001_API_6_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
10004bae:	687b      	ldr	r3, [r7, #4]
10004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004bb2:	781b      	ldrb	r3, [r3, #0]
10004bb4:	2b00      	cmp	r3, #0
10004bb6:	d04d      	beq.n	10004c54 <PWMSP001_SetPeriod+0xb8>
  {
    if(Period == (uint32_t)0)
10004bb8:	683b      	ldr	r3, [r7, #0]
10004bba:	2b00      	cmp	r3, #0
10004bbc:	d102      	bne.n	10004bc4 <PWMSP001_SetPeriod+0x28>
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004bbe:	2302      	movs	r3, #2
10004bc0:	617b      	str	r3, [r7, #20]
10004bc2:	e047      	b.n	10004c54 <PWMSP001_SetPeriod+0xb8>
    }
    else
    {
      if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
10004bc4:	687b      	ldr	r3, [r7, #4]
10004bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10004bc8:	683b      	ldr	r3, [r7, #0]
10004bca:	429a      	cmp	r2, r3
10004bcc:	d207      	bcs.n	10004bde <PWMSP001_SetPeriod+0x42>
         (HandlePtr->kTimerConcatenation != (uint8_t)SET))
10004bce:	687a      	ldr	r2, [r7, #4]
10004bd0:	2320      	movs	r3, #32
10004bd2:	5cd3      	ldrb	r3, [r2, r3]
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
    }
    else
    {
      if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
10004bd4:	2b01      	cmp	r3, #1
10004bd6:	d002      	beq.n	10004bde <PWMSP001_SetPeriod+0x42>
         (HandlePtr->kTimerConcatenation != (uint8_t)SET))
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004bd8:	2302      	movs	r3, #2
10004bda:	617b      	str	r3, [r7, #20]
10004bdc:	e03a      	b.n	10004c54 <PWMSP001_SetPeriod+0xb8>
      }
      else
      {
        PeriodVal = Period;
10004bde:	683b      	ldr	r3, [r7, #0]
10004be0:	613b      	str	r3, [r7, #16]
        if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004be2:	687a      	ldr	r2, [r7, #4]
10004be4:	2320      	movs	r3, #32
10004be6:	5cd3      	ldrb	r3, [r2, r3]
10004be8:	2b01      	cmp	r3, #1
10004bea:	d104      	bne.n	10004bf6 <PWMSP001_SetPeriod+0x5a>
        {
          HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
10004bec:	687b      	ldr	r3, [r7, #4]
10004bee:	69db      	ldr	r3, [r3, #28]
10004bf0:	693a      	ldr	r2, [r7, #16]
10004bf2:	0c12      	lsrs	r2, r2, #16
10004bf4:	635a      	str	r2, [r3, #52]	; 0x34
        }
        HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
10004bf6:	687b      	ldr	r3, [r7, #4]
10004bf8:	699b      	ldr	r3, [r3, #24]
10004bfa:	693a      	ldr	r2, [r7, #16]
10004bfc:	0412      	lsls	r2, r2, #16
10004bfe:	0c12      	lsrs	r2, r2, #16
10004c00:	635a      	str	r2, [r3, #52]	; 0x34
        /*Request shadow transfer for the First slice*/
        Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
10004c02:	687a      	ldr	r2, [r7, #4]
10004c04:	2337      	movs	r3, #55	; 0x37
10004c06:	5cd3      	ldrb	r3, [r2, r3]
10004c08:	009b      	lsls	r3, r3, #2
10004c0a:	60fb      	str	r3, [r7, #12]
        HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
10004c0c:	687b      	ldr	r3, [r7, #4]
10004c0e:	695b      	ldr	r3, [r3, #20]
10004c10:	687a      	ldr	r2, [r7, #4]
10004c12:	6952      	ldr	r2, [r2, #20]
10004c14:	6911      	ldr	r1, [r2, #16]
10004c16:	68fa      	ldr	r2, [r7, #12]
10004c18:	2001      	movs	r0, #1
10004c1a:	1c04      	adds	r4, r0, #0
10004c1c:	4094      	lsls	r4, r2
10004c1e:	1c22      	adds	r2, r4, #0
10004c20:	430a      	orrs	r2, r1
10004c22:	611a      	str	r2, [r3, #16]
        if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004c24:	687a      	ldr	r2, [r7, #4]
10004c26:	2320      	movs	r3, #32
10004c28:	5cd3      	ldrb	r3, [r2, r3]
10004c2a:	2b01      	cmp	r3, #1
10004c2c:	d110      	bne.n	10004c50 <PWMSP001_SetPeriod+0xb4>
        {
          /*Request shadow transfer for the First slice*/
          Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
10004c2e:	687a      	ldr	r2, [r7, #4]
10004c30:	2338      	movs	r3, #56	; 0x38
10004c32:	5cd3      	ldrb	r3, [r2, r3]
10004c34:	009b      	lsls	r3, r3, #2
10004c36:	60fb      	str	r3, [r7, #12]
          HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
10004c38:	687b      	ldr	r3, [r7, #4]
10004c3a:	695b      	ldr	r3, [r3, #20]
10004c3c:	687a      	ldr	r2, [r7, #4]
10004c3e:	6952      	ldr	r2, [r2, #20]
10004c40:	6911      	ldr	r1, [r2, #16]
10004c42:	68fa      	ldr	r2, [r7, #12]
10004c44:	2001      	movs	r0, #1
10004c46:	1c04      	adds	r4, r0, #0
10004c48:	4094      	lsls	r4, r2
10004c4a:	1c22      	adds	r2, r4, #0
10004c4c:	430a      	orrs	r2, r1
10004c4e:	611a      	str	r2, [r3, #16]
        }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
        Status = (uint32_t)DAVEApp_SUCCESS;
10004c50:	2300      	movs	r3, #0
10004c52:	617b      	str	r3, [r7, #20]
      }
    }
  }
  return Status;
10004c54:	697b      	ldr	r3, [r7, #20]
}
10004c56:	1c18      	adds	r0, r3, #0
10004c58:	46bd      	mov	sp, r7
10004c5a:	b007      	add	sp, #28
10004c5c:	bd90      	pop	{r4, r7, pc}
10004c5e:	46c0      	nop			; (mov r8, r8)

10004c60 <PWMSP001_SetPwmFreqAndDutyCycle>:
(
    const PWMSP001_HandleType* HandlePtr,
    float PwmFreq,
    float Duty
)
{
10004c60:	b580      	push	{r7, lr}
10004c62:	b088      	sub	sp, #32
10004c64:	af00      	add	r7, sp, #0
10004c66:	60f8      	str	r0, [r7, #12]
10004c68:	60b9      	str	r1, [r7, #8]
10004c6a:	607a      	str	r2, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004c6c:	2301      	movs	r3, #1
10004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PwmTime = 0UL;
10004c70:	2300      	movs	r3, #0
10004c72:	61bb      	str	r3, [r7, #24]
  float fPwmFreq ;
  /*<<<DD_PWMSP001_API_16_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
10004c74:	68fb      	ldr	r3, [r7, #12]
10004c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004c78:	781b      	ldrb	r3, [r3, #0]
10004c7a:	2b00      	cmp	r3, #0
10004c7c:	d068      	beq.n	10004d50 <PWMSP001_SetPwmFreqAndDutyCycle+0xf0>
  {
  if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
10004c7e:	68b8      	ldr	r0, [r7, #8]
10004c80:	2100      	movs	r1, #0
10004c82:	f004 fe31 	bl	100098e8 <__aeabi_fcmpeq>
10004c86:	1c03      	adds	r3, r0, #0
10004c88:	2b00      	cmp	r3, #0
10004c8a:	d10d      	bne.n	10004ca8 <PWMSP001_SetPwmFreqAndDutyCycle+0x48>
10004c8c:	6878      	ldr	r0, [r7, #4]
10004c8e:	4933      	ldr	r1, [pc, #204]	; (10004d5c <PWMSP001_SetPwmFreqAndDutyCycle+0xfc>)
10004c90:	f004 fe44 	bl	1000991c <__aeabi_fcmpgt>
10004c94:	1c03      	adds	r3, r0, #0
10004c96:	2b00      	cmp	r3, #0
10004c98:	d106      	bne.n	10004ca8 <PWMSP001_SetPwmFreqAndDutyCycle+0x48>
10004c9a:	6878      	ldr	r0, [r7, #4]
10004c9c:	2100      	movs	r1, #0
10004c9e:	f004 fe29 	bl	100098f4 <__aeabi_fcmplt>
10004ca2:	1c03      	adds	r3, r0, #0
10004ca4:	2b00      	cmp	r3, #0
10004ca6:	d002      	beq.n	10004cae <PWMSP001_SetPwmFreqAndDutyCycle+0x4e>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004ca8:	2302      	movs	r3, #2
10004caa:	61fb      	str	r3, [r7, #28]
10004cac:	e050      	b.n	10004d50 <PWMSP001_SetPwmFreqAndDutyCycle+0xf0>
  }
  else
  {
      fPwmFreq=(float)HandlePtr->kResolution;
10004cae:	68fb      	ldr	r3, [r7, #12]
10004cb0:	685b      	ldr	r3, [r3, #4]
10004cb2:	617b      	str	r3, [r7, #20]
	  fPwmFreq=(float)fPwmFreq*PwmFreq;
10004cb4:	6978      	ldr	r0, [r7, #20]
10004cb6:	68b9      	ldr	r1, [r7, #8]
10004cb8:	f005 f84e 	bl	10009d58 <__aeabi_fmul>
10004cbc:	1c03      	adds	r3, r0, #0
10004cbe:	617b      	str	r3, [r7, #20]
	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
10004cc0:	4827      	ldr	r0, [pc, #156]	; (10004d60 <PWMSP001_SetPwmFreqAndDutyCycle+0x100>)
10004cc2:	6979      	ldr	r1, [r7, #20]
10004cc4:	f004 fe56 	bl	10009974 <__aeabi_fdiv>
10004cc8:	1c03      	adds	r3, r0, #0
10004cca:	1c18      	adds	r0, r3, #0
10004ccc:	f004 fe3a 	bl	10009944 <__aeabi_f2uiz>
10004cd0:	1c03      	adds	r3, r0, #0
10004cd2:	61bb      	str	r3, [r7, #24]
    /*<<<DD_PWMSP001_API_16_2>>>*/
    if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
10004cd4:	68fa      	ldr	r2, [r7, #12]
10004cd6:	2320      	movs	r3, #32
10004cd8:	5cd3      	ldrb	r3, [r2, r3]
10004cda:	2b00      	cmp	r3, #0
10004cdc:	d11a      	bne.n	10004d14 <PWMSP001_SetPwmFreqAndDutyCycle+0xb4>
    {
      if(PwmTime > PWMSP001_MAX_VALUE)
10004cde:	69ba      	ldr	r2, [r7, #24]
10004ce0:	4b20      	ldr	r3, [pc, #128]	; (10004d64 <PWMSP001_SetPwmFreqAndDutyCycle+0x104>)
10004ce2:	429a      	cmp	r2, r3
10004ce4:	d902      	bls.n	10004cec <PWMSP001_SetPwmFreqAndDutyCycle+0x8c>
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004ce6:	2302      	movs	r3, #2
10004ce8:	61fb      	str	r3, [r7, #28]
10004cea:	e027      	b.n	10004d3c <PWMSP001_SetPwmFreqAndDutyCycle+0xdc>
      }
      else
      {
        if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
10004cec:	68fa      	ldr	r2, [r7, #12]
10004cee:	2336      	movs	r3, #54	; 0x36
10004cf0:	5cd3      	ldrb	r3, [r2, r3]
10004cf2:	2b00      	cmp	r3, #0
10004cf4:	d105      	bne.n	10004d02 <PWMSP001_SetPwmFreqAndDutyCycle+0xa2>
        {
          HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
10004cf6:	68fb      	ldr	r3, [r7, #12]
10004cf8:	699b      	ldr	r3, [r3, #24]
10004cfa:	69ba      	ldr	r2, [r7, #24]
10004cfc:	3a01      	subs	r2, #1
10004cfe:	635a      	str	r2, [r3, #52]	; 0x34
10004d00:	e005      	b.n	10004d0e <PWMSP001_SetPwmFreqAndDutyCycle+0xae>
        }
        else
        {
          HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
10004d02:	68fb      	ldr	r3, [r7, #12]
10004d04:	699b      	ldr	r3, [r3, #24]
10004d06:	69ba      	ldr	r2, [r7, #24]
10004d08:	3a01      	subs	r2, #1
10004d0a:	0852      	lsrs	r2, r2, #1
10004d0c:	635a      	str	r2, [r3, #52]	; 0x34
        }
        Status = (uint32_t)DAVEApp_SUCCESS;
10004d0e:	2300      	movs	r3, #0
10004d10:	61fb      	str	r3, [r7, #28]
10004d12:	e013      	b.n	10004d3c <PWMSP001_SetPwmFreqAndDutyCycle+0xdc>
      }
    }
    else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
10004d14:	68fa      	ldr	r2, [r7, #12]
10004d16:	2320      	movs	r3, #32
10004d18:	5cd3      	ldrb	r3, [r2, r3]
10004d1a:	2b01      	cmp	r3, #1
10004d1c:	d106      	bne.n	10004d2c <PWMSP001_SetPwmFreqAndDutyCycle+0xcc>
10004d1e:	69ba      	ldr	r2, [r7, #24]
10004d20:	4b10      	ldr	r3, [pc, #64]	; (10004d64 <PWMSP001_SetPwmFreqAndDutyCycle+0x104>)
10004d22:	429a      	cmp	r2, r3
10004d24:	d802      	bhi.n	10004d2c <PWMSP001_SetPwmFreqAndDutyCycle+0xcc>
    		                                   (PwmTime <= PWMSP001_MAX_VALUE))
    {
    	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004d26:	2302      	movs	r3, #2
10004d28:	61fb      	str	r3, [r7, #28]
10004d2a:	e007      	b.n	10004d3c <PWMSP001_SetPwmFreqAndDutyCycle+0xdc>
    }
    /*<<<DD_PWMSP001_API_16_3>>>*/
    else
    {
      Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
10004d2c:	68fa      	ldr	r2, [r7, #12]
10004d2e:	69bb      	ldr	r3, [r7, #24]
10004d30:	1c10      	adds	r0, r2, #0
10004d32:	1c19      	adds	r1, r3, #0
10004d34:	f000 f8a4 	bl	10004e80 <PWMSP001_lSetPwmFreqTimerConcat>
10004d38:	1c03      	adds	r3, r0, #0
10004d3a:	61fb      	str	r3, [r7, #28]
    }
    if(Status == (uint32_t)DAVEApp_SUCCESS)
10004d3c:	69fb      	ldr	r3, [r7, #28]
10004d3e:	2b00      	cmp	r3, #0
10004d40:	d106      	bne.n	10004d50 <PWMSP001_SetPwmFreqAndDutyCycle+0xf0>
    {
     /* Call the function as per configured mode */
     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
10004d42:	68fb      	ldr	r3, [r7, #12]
10004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10004d46:	68f9      	ldr	r1, [r7, #12]
10004d48:	687a      	ldr	r2, [r7, #4]
10004d4a:	1c08      	adds	r0, r1, #0
10004d4c:	1c11      	adds	r1, r2, #0
10004d4e:	4798      	blx	r3
    }
   }
  }
  return (Status);
10004d50:	69fb      	ldr	r3, [r7, #28]
}
10004d52:	1c18      	adds	r0, r3, #0
10004d54:	46bd      	mov	sp, r7
10004d56:	b008      	add	sp, #32
10004d58:	bd80      	pop	{r7, pc}
10004d5a:	46c0      	nop			; (mov r8, r8)
10004d5c:	42c80000 	.word	0x42c80000
10004d60:	4e6e6b28 	.word	0x4e6e6b28
10004d64:	0000ffff 	.word	0x0000ffff

10004d68 <PWMSP001_SetPwmFreq>:
status_t PWMSP001_SetPwmFreq
(
    const PWMSP001_HandleType* HandlePtr,
    float PwmFreq
)
{
10004d68:	b5b0      	push	{r4, r5, r7, lr}
10004d6a:	b088      	sub	sp, #32
10004d6c:	af00      	add	r7, sp, #0
10004d6e:	6078      	str	r0, [r7, #4]
10004d70:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004d72:	2301      	movs	r3, #1
10004d74:	61fb      	str	r3, [r7, #28]
  uint32_t PwmTime = 0x00U;
10004d76:	2300      	movs	r3, #0
10004d78:	61bb      	str	r3, [r7, #24]
  uint32_t Temp1;
  uint32_t Temp2;
  uint32_t Temp3;
  float fPwmFreq ;
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
10004d7a:	687b      	ldr	r3, [r7, #4]
10004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004d7e:	781b      	ldrb	r3, [r3, #0]
10004d80:	2b00      	cmp	r3, #0
10004d82:	d100      	bne.n	10004d86 <PWMSP001_SetPwmFreq+0x1e>
10004d84:	e072      	b.n	10004e6c <PWMSP001_SetPwmFreq+0x104>
  {
  if(PwmFreq == (float)0)
10004d86:	6838      	ldr	r0, [r7, #0]
10004d88:	2100      	movs	r1, #0
10004d8a:	f004 fdad 	bl	100098e8 <__aeabi_fcmpeq>
10004d8e:	1c03      	adds	r3, r0, #0
10004d90:	2b00      	cmp	r3, #0
10004d92:	d002      	beq.n	10004d9a <PWMSP001_SetPwmFreq+0x32>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004d94:	2302      	movs	r3, #2
10004d96:	61fb      	str	r3, [r7, #28]
10004d98:	e068      	b.n	10004e6c <PWMSP001_SetPwmFreq+0x104>
  }
  else
  {
	  fPwmFreq=(float)HandlePtr->kResolution;
10004d9a:	687b      	ldr	r3, [r7, #4]
10004d9c:	685b      	ldr	r3, [r3, #4]
10004d9e:	617b      	str	r3, [r7, #20]
	  fPwmFreq=(float)fPwmFreq*PwmFreq;
10004da0:	6978      	ldr	r0, [r7, #20]
10004da2:	6839      	ldr	r1, [r7, #0]
10004da4:	f004 ffd8 	bl	10009d58 <__aeabi_fmul>
10004da8:	1c03      	adds	r3, r0, #0
10004daa:	617b      	str	r3, [r7, #20]
	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
10004dac:	4832      	ldr	r0, [pc, #200]	; (10004e78 <PWMSP001_SetPwmFreq+0x110>)
10004dae:	6979      	ldr	r1, [r7, #20]
10004db0:	f004 fde0 	bl	10009974 <__aeabi_fdiv>
10004db4:	1c03      	adds	r3, r0, #0
10004db6:	1c18      	adds	r0, r3, #0
10004db8:	f004 fdc4 	bl	10009944 <__aeabi_f2uiz>
10004dbc:	1c03      	adds	r3, r0, #0
10004dbe:	61bb      	str	r3, [r7, #24]
    /*<<<DD_PWMSP001_API_16_2>>>*/
    if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
10004dc0:	687a      	ldr	r2, [r7, #4]
10004dc2:	2320      	movs	r3, #32
10004dc4:	5cd3      	ldrb	r3, [r2, r3]
10004dc6:	2b00      	cmp	r3, #0
10004dc8:	d12b      	bne.n	10004e22 <PWMSP001_SetPwmFreq+0xba>
    {
      if(PwmTime > PWMSP001_MAX_VALUE)
10004dca:	69ba      	ldr	r2, [r7, #24]
10004dcc:	4b2b      	ldr	r3, [pc, #172]	; (10004e7c <PWMSP001_SetPwmFreq+0x114>)
10004dce:	429a      	cmp	r2, r3
10004dd0:	d902      	bls.n	10004dd8 <PWMSP001_SetPwmFreq+0x70>
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004dd2:	2302      	movs	r3, #2
10004dd4:	61fb      	str	r3, [r7, #28]
10004dd6:	e049      	b.n	10004e6c <PWMSP001_SetPwmFreq+0x104>
      }
      else
      {
        if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
10004dd8:	687a      	ldr	r2, [r7, #4]
10004dda:	2336      	movs	r3, #54	; 0x36
10004ddc:	5cd3      	ldrb	r3, [r2, r3]
10004dde:	2b00      	cmp	r3, #0
10004de0:	d105      	bne.n	10004dee <PWMSP001_SetPwmFreq+0x86>
        {
          HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
10004de2:	687b      	ldr	r3, [r7, #4]
10004de4:	699b      	ldr	r3, [r3, #24]
10004de6:	69ba      	ldr	r2, [r7, #24]
10004de8:	3a01      	subs	r2, #1
10004dea:	635a      	str	r2, [r3, #52]	; 0x34
10004dec:	e005      	b.n	10004dfa <PWMSP001_SetPwmFreq+0x92>
        }
        else
        {
          HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
10004dee:	687b      	ldr	r3, [r7, #4]
10004df0:	699b      	ldr	r3, [r3, #24]
10004df2:	69ba      	ldr	r2, [r7, #24]
10004df4:	3a01      	subs	r2, #1
10004df6:	0852      	lsrs	r2, r2, #1
10004df8:	635a      	str	r2, [r3, #52]	; 0x34
        }
        /** Update dynamic handle*/
        Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
10004dfa:	687a      	ldr	r2, [r7, #4]
10004dfc:	2337      	movs	r3, #55	; 0x37
10004dfe:	5cd3      	ldrb	r3, [r2, r3]
10004e00:	009b      	lsls	r3, r3, #2
10004e02:	613b      	str	r3, [r7, #16]
        HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
10004e04:	687b      	ldr	r3, [r7, #4]
10004e06:	695b      	ldr	r3, [r3, #20]
10004e08:	687a      	ldr	r2, [r7, #4]
10004e0a:	6952      	ldr	r2, [r2, #20]
10004e0c:	6911      	ldr	r1, [r2, #16]
10004e0e:	693a      	ldr	r2, [r7, #16]
10004e10:	2001      	movs	r0, #1
10004e12:	1c04      	adds	r4, r0, #0
10004e14:	4094      	lsls	r4, r2
10004e16:	1c22      	adds	r2, r4, #0
10004e18:	430a      	orrs	r2, r1
10004e1a:	611a      	str	r2, [r3, #16]
        Status = (uint32_t)DAVEApp_SUCCESS;
10004e1c:	2300      	movs	r3, #0
10004e1e:	61fb      	str	r3, [r7, #28]
10004e20:	e024      	b.n	10004e6c <PWMSP001_SetPwmFreq+0x104>
      }
    }
    /*<<<DD_PWMSP001_API_16_3>>>*/
    else
    {
      Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
10004e22:	687a      	ldr	r2, [r7, #4]
10004e24:	69bb      	ldr	r3, [r7, #24]
10004e26:	1c10      	adds	r0, r2, #0
10004e28:	1c19      	adds	r1, r3, #0
10004e2a:	f000 f829 	bl	10004e80 <PWMSP001_lSetPwmFreqTimerConcat>
10004e2e:	1c03      	adds	r3, r0, #0
10004e30:	61fb      	str	r3, [r7, #28]
      if(Status == (uint32_t)DAVEApp_SUCCESS)
10004e32:	69fb      	ldr	r3, [r7, #28]
10004e34:	2b00      	cmp	r3, #0
10004e36:	d119      	bne.n	10004e6c <PWMSP001_SetPwmFreq+0x104>
      {
        Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
10004e38:	687a      	ldr	r2, [r7, #4]
10004e3a:	2337      	movs	r3, #55	; 0x37
10004e3c:	5cd3      	ldrb	r3, [r2, r3]
10004e3e:	009b      	lsls	r3, r3, #2
10004e40:	60fb      	str	r3, [r7, #12]
        Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
10004e42:	687a      	ldr	r2, [r7, #4]
10004e44:	2338      	movs	r3, #56	; 0x38
10004e46:	5cd3      	ldrb	r3, [r2, r3]
10004e48:	009b      	lsls	r3, r3, #2
10004e4a:	60bb      	str	r3, [r7, #8]
        HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
10004e4c:	687b      	ldr	r3, [r7, #4]
10004e4e:	695b      	ldr	r3, [r3, #20]
10004e50:	687a      	ldr	r2, [r7, #4]
10004e52:	6952      	ldr	r2, [r2, #20]
10004e54:	6911      	ldr	r1, [r2, #16]
10004e56:	68fa      	ldr	r2, [r7, #12]
10004e58:	2001      	movs	r0, #1
10004e5a:	4090      	lsls	r0, r2
            ((uint32_t)0x01 << Temp3));
10004e5c:	68ba      	ldr	r2, [r7, #8]
10004e5e:	2401      	movs	r4, #1
10004e60:	1c25      	adds	r5, r4, #0
10004e62:	4095      	lsls	r5, r2
10004e64:	1c2a      	adds	r2, r5, #0
      Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
      if(Status == (uint32_t)DAVEApp_SUCCESS)
      {
        Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
        Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
        HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
10004e66:	4302      	orrs	r2, r0
10004e68:	430a      	orrs	r2, r1
10004e6a:	611a      	str	r2, [r3, #16]
            ((uint32_t)0x01 << Temp3));
      }
    }
  }
 }
  return (Status);
10004e6c:	69fb      	ldr	r3, [r7, #28]
}
10004e6e:	1c18      	adds	r0, r3, #0
10004e70:	46bd      	mov	sp, r7
10004e72:	b008      	add	sp, #32
10004e74:	bdb0      	pop	{r4, r5, r7, pc}
10004e76:	46c0      	nop			; (mov r8, r8)
10004e78:	4e6e6b28 	.word	0x4e6e6b28
10004e7c:	0000ffff 	.word	0x0000ffff

10004e80 <PWMSP001_lSetPwmFreqTimerConcat>:
status_t PWMSP001_lSetPwmFreqTimerConcat
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t PwmTime
)
{
10004e80:	b580      	push	{r7, lr}
10004e82:	b088      	sub	sp, #32
10004e84:	af00      	add	r7, sp, #0
10004e86:	6078      	str	r0, [r7, #4]
10004e88:	6039      	str	r1, [r7, #0]
  uint32_t PeriodVal = PwmTime;
10004e8a:	683b      	ldr	r3, [r7, #0]
10004e8c:	61fb      	str	r3, [r7, #28]
  uint32_t MsbPeriodVal, LsbPeriodVal;
  uint8_t Count = 0x00U;
10004e8e:	1c3b      	adds	r3, r7, #0
10004e90:	3313      	adds	r3, #19
10004e92:	2200      	movs	r2, #0
10004e94:	701a      	strb	r2, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004e96:	2301      	movs	r3, #1
10004e98:	60fb      	str	r3, [r7, #12]

  if(PwmTime >= PWMSP001_TC_MAX_VALUE)
10004e9a:	683b      	ldr	r3, [r7, #0]
10004e9c:	3301      	adds	r3, #1
10004e9e:	d102      	bne.n	10004ea6 <PWMSP001_lSetPwmFreqTimerConcat+0x26>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10004ea0:	2302      	movs	r3, #2
10004ea2:	60fb      	str	r3, [r7, #12]
10004ea4:	e03a      	b.n	10004f1c <PWMSP001_lSetPwmFreqTimerConcat+0x9c>
  }

  else
  {

    if(PwmTime > PWMSP001_MAX_VALUE)
10004ea6:	683a      	ldr	r2, [r7, #0]
10004ea8:	4b1f      	ldr	r3, [pc, #124]	; (10004f28 <PWMSP001_lSetPwmFreqTimerConcat+0xa8>)
10004eaa:	429a      	cmp	r2, r3
10004eac:	d919      	bls.n	10004ee2 <PWMSP001_lSetPwmFreqTimerConcat+0x62>
    {
      do
      {
        PeriodVal = PeriodVal >> 1;
10004eae:	69fb      	ldr	r3, [r7, #28]
10004eb0:	085b      	lsrs	r3, r3, #1
10004eb2:	61fb      	str	r3, [r7, #28]
        Count++;
10004eb4:	1c3b      	adds	r3, r7, #0
10004eb6:	3313      	adds	r3, #19
10004eb8:	1c3a      	adds	r2, r7, #0
10004eba:	3213      	adds	r2, #19
10004ebc:	7812      	ldrb	r2, [r2, #0]
10004ebe:	3201      	adds	r2, #1
10004ec0:	701a      	strb	r2, [r3, #0]
      }while(PeriodVal >= PWMSP001_MAX_VALUE);
10004ec2:	69fa      	ldr	r2, [r7, #28]
10004ec4:	4b19      	ldr	r3, [pc, #100]	; (10004f2c <PWMSP001_lSetPwmFreqTimerConcat+0xac>)
10004ec6:	429a      	cmp	r2, r3
10004ec8:	d8f1      	bhi.n	10004eae <PWMSP001_lSetPwmFreqTimerConcat+0x2e>

      MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
10004eca:	1c3b      	adds	r3, r7, #0
10004ecc:	3313      	adds	r3, #19
10004ece:	781b      	ldrb	r3, [r3, #0]
10004ed0:	2201      	movs	r2, #1
10004ed2:	1c11      	adds	r1, r2, #0
10004ed4:	4099      	lsls	r1, r3
10004ed6:	1c0b      	adds	r3, r1, #0
10004ed8:	3b01      	subs	r3, #1
10004eda:	61bb      	str	r3, [r7, #24]
      LsbPeriodVal = PeriodVal;
10004edc:	69fb      	ldr	r3, [r7, #28]
10004ede:	617b      	str	r3, [r7, #20]
10004ee0:	e003      	b.n	10004eea <PWMSP001_lSetPwmFreqTimerConcat+0x6a>
    }
    else
    {
      LsbPeriodVal = PwmTime;
10004ee2:	683b      	ldr	r3, [r7, #0]
10004ee4:	617b      	str	r3, [r7, #20]
      MsbPeriodVal = (uint32_t)0x00;
10004ee6:	2300      	movs	r3, #0
10004ee8:	61bb      	str	r3, [r7, #24]
    }

    /*<<<DD_PWMSP001_API_16_4>>>*/
    if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
10004eea:	687a      	ldr	r2, [r7, #4]
10004eec:	2336      	movs	r3, #54	; 0x36
10004eee:	5cd3      	ldrb	r3, [r2, r3]
10004ef0:	2b01      	cmp	r3, #1
10004ef2:	d105      	bne.n	10004f00 <PWMSP001_lSetPwmFreqTimerConcat+0x80>
    {
      MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
10004ef4:	69bb      	ldr	r3, [r7, #24]
10004ef6:	085b      	lsrs	r3, r3, #1
10004ef8:	61bb      	str	r3, [r7, #24]
      LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
10004efa:	697b      	ldr	r3, [r7, #20]
10004efc:	085b      	lsrs	r3, r3, #1
10004efe:	617b      	str	r3, [r7, #20]
    }

    HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
10004f00:	687b      	ldr	r3, [r7, #4]
10004f02:	699b      	ldr	r3, [r3, #24]
10004f04:	697a      	ldr	r2, [r7, #20]
10004f06:	0412      	lsls	r2, r2, #16
10004f08:	0c12      	lsrs	r2, r2, #16
10004f0a:	635a      	str	r2, [r3, #52]	; 0x34
    HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
10004f0c:	687b      	ldr	r3, [r7, #4]
10004f0e:	69db      	ldr	r3, [r3, #28]
10004f10:	69ba      	ldr	r2, [r7, #24]
10004f12:	0412      	lsls	r2, r2, #16
10004f14:	0c12      	lsrs	r2, r2, #16
10004f16:	635a      	str	r2, [r3, #52]	; 0x34

    /*<<<DD_PWMSP001_API_16_5>>>*/
    Status = (uint32_t)DAVEApp_SUCCESS;
10004f18:	2300      	movs	r3, #0
10004f1a:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10004f1c:	68fb      	ldr	r3, [r7, #12]
}
10004f1e:	1c18      	adds	r0, r3, #0
10004f20:	46bd      	mov	sp, r7
10004f22:	b008      	add	sp, #32
10004f24:	bd80      	pop	{r7, pc}
10004f26:	46c0      	nop			; (mov r8, r8)
10004f28:	0000ffff 	.word	0x0000ffff
10004f2c:	0000fffe 	.word	0x0000fffe

10004f30 <PWMSP001_SetTimerVal>:
status_t PWMSP001_SetTimerVal
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t TimerVal
)
{
10004f30:	b580      	push	{r7, lr}
10004f32:	b084      	sub	sp, #16
10004f34:	af00      	add	r7, sp, #0
10004f36:	6078      	str	r0, [r7, #4]
10004f38:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004f3a:	2301      	movs	r3, #1
10004f3c:	60fb      	str	r3, [r7, #12]
  /*<<<DD_PWMSP001_API_7_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
10004f3e:	687b      	ldr	r3, [r7, #4]
10004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004f42:	781b      	ldrb	r3, [r3, #0]
10004f44:	2b01      	cmp	r3, #1
10004f46:	d004      	beq.n	10004f52 <PWMSP001_SetTimerVal+0x22>
      (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
10004f48:	687b      	ldr	r3, [r7, #4]
10004f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004f4c:	781b      	ldrb	r3, [r3, #0]
    uint32_t TimerVal
)
{
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  /*<<<DD_PWMSP001_API_7_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
10004f4e:	2b03      	cmp	r3, #3
10004f50:	d111      	bne.n	10004f76 <PWMSP001_SetTimerVal+0x46>
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  /*<<<DD_PWMSP001_API_7_1>>>*/
  else
  {
    HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
10004f52:	687b      	ldr	r3, [r7, #4]
10004f54:	699b      	ldr	r3, [r3, #24]
10004f56:	683a      	ldr	r2, [r7, #0]
10004f58:	0412      	lsls	r2, r2, #16
10004f5a:	0c12      	lsrs	r2, r2, #16
10004f5c:	671a      	str	r2, [r3, #112]	; 0x70
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004f5e:	687a      	ldr	r2, [r7, #4]
10004f60:	2320      	movs	r3, #32
10004f62:	5cd3      	ldrb	r3, [r2, r3]
10004f64:	2b01      	cmp	r3, #1
10004f66:	d104      	bne.n	10004f72 <PWMSP001_SetTimerVal+0x42>
    {
      HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
10004f68:	687b      	ldr	r3, [r7, #4]
10004f6a:	69db      	ldr	r3, [r3, #28]
10004f6c:	683a      	ldr	r2, [r7, #0]
10004f6e:	0c12      	lsrs	r2, r2, #16
10004f70:	671a      	str	r2, [r3, #112]	; 0x70
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10004f72:	2300      	movs	r3, #0
10004f74:	60fb      	str	r3, [r7, #12]
  }
  return Status;
10004f76:	68fb      	ldr	r3, [r7, #12]
}
10004f78:	1c18      	adds	r0, r3, #0
10004f7a:	46bd      	mov	sp, r7
10004f7c:	b004      	add	sp, #16
10004f7e:	bd80      	pop	{r7, pc}

10004f80 <PWMSP001_GetTimerStatus>:
status_t PWMSP001_GetTimerStatus
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t* TimerStatus
)
{
10004f80:	b580      	push	{r7, lr}
10004f82:	b084      	sub	sp, #16
10004f84:	af00      	add	r7, sp, #0
10004f86:	6078      	str	r0, [r7, #4]
10004f88:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004f8a:	2301      	movs	r3, #1
10004f8c:	60fb      	str	r3, [r7, #12]
  uint32_t SecondTimerStatus = (uint32_t)0;
10004f8e:	2300      	movs	r3, #0
10004f90:	60bb      	str	r3, [r7, #8]
  /*<<<DD_PWMSP001_API_8_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10004f92:	687b      	ldr	r3, [r7, #4]
10004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004f96:	781b      	ldrb	r3, [r3, #0]
10004f98:	2b00      	cmp	r3, #0
10004f9a:	d01d      	beq.n	10004fd8 <PWMSP001_GetTimerStatus+0x58>
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  /*<<<DD_PWMSP001_API_8_2>>>*/
  else
  {
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10004f9c:	687a      	ldr	r2, [r7, #4]
10004f9e:	2320      	movs	r3, #32
10004fa0:	5cd3      	ldrb	r3, [r2, r3]
10004fa2:	2b01      	cmp	r3, #1
10004fa4:	d10f      	bne.n	10004fc6 <PWMSP001_GetTimerStatus+0x46>
    {
      SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
10004fa6:	687b      	ldr	r3, [r7, #4]
10004fa8:	69db      	ldr	r3, [r3, #28]
10004faa:	689a      	ldr	r2, [r3, #8]
10004fac:	2301      	movs	r3, #1
10004fae:	4013      	ands	r3, r2
10004fb0:	60bb      	str	r3, [r7, #8]
          CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
      *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
10004fb2:	687b      	ldr	r3, [r7, #4]
10004fb4:	699b      	ldr	r3, [r3, #24]
10004fb6:	689b      	ldr	r3, [r3, #8]
10004fb8:	68ba      	ldr	r2, [r7, #8]
10004fba:	401a      	ands	r2, r3
10004fbc:	2301      	movs	r3, #1
10004fbe:	401a      	ands	r2, r3
10004fc0:	683b      	ldr	r3, [r7, #0]
10004fc2:	601a      	str	r2, [r3, #0]
10004fc4:	e006      	b.n	10004fd4 <PWMSP001_GetTimerStatus+0x54>
          SecondTimerStatus
      );
    }
    else
    {
      *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
10004fc6:	687b      	ldr	r3, [r7, #4]
10004fc8:	699b      	ldr	r3, [r3, #24]
10004fca:	689a      	ldr	r2, [r3, #8]
10004fcc:	2301      	movs	r3, #1
10004fce:	401a      	ands	r2, r3
10004fd0:	683b      	ldr	r3, [r7, #0]
10004fd2:	601a      	str	r2, [r3, #0]
          CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10004fd4:	2300      	movs	r3, #0
10004fd6:	60fb      	str	r3, [r7, #12]
  }
  return Status; 
10004fd8:	68fb      	ldr	r3, [r7, #12]
}
10004fda:	1c18      	adds	r0, r3, #0
10004fdc:	46bd      	mov	sp, r7
10004fde:	b004      	add	sp, #16
10004fe0:	bd80      	pop	{r7, pc}
10004fe2:	46c0      	nop			; (mov r8, r8)

10004fe4 <PWMSP001_GetTimerRegsVal>:
status_t PWMSP001_GetTimerRegsVal
(
    const PWMSP001_HandleType* HandlePtr,
    PWMSP001_TimerRegsType* TimerRegs
)
{
10004fe4:	b580      	push	{r7, lr}
10004fe6:	b084      	sub	sp, #16
10004fe8:	af00      	add	r7, sp, #0
10004fea:	6078      	str	r0, [r7, #4]
10004fec:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10004fee:	2301      	movs	r3, #1
10004ff0:	60fb      	str	r3, [r7, #12]
  uint32_t ScndSlTMRVal = 0UL;
10004ff2:	2300      	movs	r3, #0
10004ff4:	60bb      	str	r3, [r7, #8]

  /*<<<DD_PWMSP001_API_9_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10004ff6:	687b      	ldr	r3, [r7, #4]
10004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004ffa:	781b      	ldrb	r3, [r3, #0]
10004ffc:	2b00      	cmp	r3, #0
10004ffe:	d051      	beq.n	100050a4 <PWMSP001_GetTimerRegsVal+0xc0>
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  /*<<<DD_PWMSP001_API_9_2>>>*/
  else
  {
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005000:	687a      	ldr	r2, [r7, #4]
10005002:	2320      	movs	r3, #32
10005004:	5cd3      	ldrb	r3, [r2, r3]
10005006:	2b01      	cmp	r3, #1
10005008:	d139      	bne.n	1000507e <PWMSP001_GetTimerRegsVal+0x9a>
    {
      ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
1000500a:	687b      	ldr	r3, [r7, #4]
1000500c:	69db      	ldr	r3, [r3, #28]
1000500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10005010:	041b      	lsls	r3, r3, #16
10005012:	60bb      	str	r3, [r7, #8]
          CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);

      TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
          (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
10005014:	687b      	ldr	r3, [r7, #4]
10005016:	699b      	ldr	r3, [r3, #24]
10005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1000501a:	041b      	lsls	r3, r3, #16
1000501c:	0c1a      	lsrs	r2, r3, #16
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
    {
      ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
          CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);

      TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1000501e:	68bb      	ldr	r3, [r7, #8]
10005020:	431a      	orrs	r2, r3
10005022:	683b      	ldr	r3, [r7, #0]
10005024:	609a      	str	r2, [r3, #8]
          (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
              CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));

      TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
10005026:	687b      	ldr	r3, [r7, #4]
10005028:	69db      	ldr	r3, [r3, #28]
1000502a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000502c:	683b      	ldr	r3, [r7, #0]
1000502e:	601a      	str	r2, [r3, #0]
      TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
10005030:	683b      	ldr	r3, [r7, #0]
10005032:	681a      	ldr	r2, [r3, #0]
10005034:	687b      	ldr	r3, [r7, #4]
10005036:	699b      	ldr	r3, [r3, #24]
10005038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000503a:	435a      	muls	r2, r3
1000503c:	683b      	ldr	r3, [r7, #0]
1000503e:	601a      	str	r2, [r3, #0]
      TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
10005040:	683b      	ldr	r3, [r7, #0]
10005042:	681a      	ldr	r2, [r3, #0]
10005044:	687b      	ldr	r3, [r7, #4]
10005046:	699b      	ldr	r3, [r3, #24]
10005048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000504a:	18d2      	adds	r2, r2, r3
1000504c:	683b      	ldr	r3, [r7, #0]
1000504e:	601a      	str	r2, [r3, #0]
      TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
10005050:	687b      	ldr	r3, [r7, #4]
10005052:	69db      	ldr	r3, [r3, #28]
10005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005056:	1c5a      	adds	r2, r3, #1
10005058:	683b      	ldr	r3, [r7, #0]
1000505a:	605a      	str	r2, [r3, #4]
      TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
1000505c:	683b      	ldr	r3, [r7, #0]
1000505e:	685a      	ldr	r2, [r3, #4]
10005060:	687b      	ldr	r3, [r7, #4]
10005062:	699b      	ldr	r3, [r3, #24]
10005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005066:	041b      	lsls	r3, r3, #16
10005068:	0c1b      	lsrs	r3, r3, #16
1000506a:	3301      	adds	r3, #1
1000506c:	435a      	muls	r2, r3
1000506e:	683b      	ldr	r3, [r7, #0]
10005070:	605a      	str	r2, [r3, #4]
      TimerRegs->PeriodReg += 1U ;
10005072:	683b      	ldr	r3, [r7, #0]
10005074:	685b      	ldr	r3, [r3, #4]
10005076:	1c5a      	adds	r2, r3, #1
10005078:	683b      	ldr	r3, [r7, #0]
1000507a:	605a      	str	r2, [r3, #4]
1000507c:	e010      	b.n	100050a0 <PWMSP001_GetTimerRegsVal+0xbc>
    }

    else
    {
      TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
1000507e:	687b      	ldr	r3, [r7, #4]
10005080:	699b      	ldr	r3, [r3, #24]
10005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10005084:	041b      	lsls	r3, r3, #16
10005086:	0c1a      	lsrs	r2, r3, #16
10005088:	683b      	ldr	r3, [r7, #0]
1000508a:	609a      	str	r2, [r3, #8]
          CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);

      TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
1000508c:	687b      	ldr	r3, [r7, #4]
1000508e:	699b      	ldr	r3, [r3, #24]
10005090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005092:	683b      	ldr	r3, [r7, #0]
10005094:	601a      	str	r2, [r3, #0]
      TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
10005096:	687b      	ldr	r3, [r7, #4]
10005098:	699b      	ldr	r3, [r3, #24]
1000509a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000509c:	683b      	ldr	r3, [r7, #0]
1000509e:	605a      	str	r2, [r3, #4]

    }
    Status = (uint32_t)DAVEApp_SUCCESS;
100050a0:	2300      	movs	r3, #0
100050a2:	60fb      	str	r3, [r7, #12]
  }
  return Status;
100050a4:	68fb      	ldr	r3, [r7, #12]
}
100050a6:	1c18      	adds	r0, r3, #0
100050a8:	46bd      	mov	sp, r7
100050aa:	b004      	add	sp, #16
100050ac:	bd80      	pop	{r7, pc}
100050ae:	46c0      	nop			; (mov r8, r8)

100050b0 <PWMSP001_GetPeriodReg>:
status_t PWMSP001_GetPeriodReg
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t* PeriodReg
)
{
100050b0:	b580      	push	{r7, lr}
100050b2:	b084      	sub	sp, #16
100050b4:	af00      	add	r7, sp, #0
100050b6:	6078      	str	r0, [r7, #4]
100050b8:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100050ba:	2301      	movs	r3, #1
100050bc:	60fb      	str	r3, [r7, #12]

  /*<<<DD_PWMSP001_API_15_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
100050be:	687b      	ldr	r3, [r7, #4]
100050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100050c2:	781b      	ldrb	r3, [r3, #0]
100050c4:	2b00      	cmp	r3, #0
100050c6:	d022      	beq.n	1000510e <PWMSP001_GetPeriodReg+0x5e>
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100050c8:	687a      	ldr	r2, [r7, #4]
100050ca:	2320      	movs	r3, #32
100050cc:	5cd3      	ldrb	r3, [r2, r3]
100050ce:	2b01      	cmp	r3, #1
100050d0:	d116      	bne.n	10005100 <PWMSP001_GetPeriodReg+0x50>
    {
      *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
100050d2:	687b      	ldr	r3, [r7, #4]
100050d4:	69db      	ldr	r3, [r3, #28]
100050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100050d8:	1c5a      	adds	r2, r3, #1
100050da:	683b      	ldr	r3, [r7, #0]
100050dc:	601a      	str	r2, [r3, #0]
      *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
100050de:	683b      	ldr	r3, [r7, #0]
100050e0:	681a      	ldr	r2, [r3, #0]
100050e2:	687b      	ldr	r3, [r7, #4]
100050e4:	699b      	ldr	r3, [r3, #24]
100050e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100050e8:	041b      	lsls	r3, r3, #16
100050ea:	0c1b      	lsrs	r3, r3, #16
100050ec:	3301      	adds	r3, #1
100050ee:	435a      	muls	r2, r3
100050f0:	683b      	ldr	r3, [r7, #0]
100050f2:	601a      	str	r2, [r3, #0]
      *PeriodReg  += 1U;
100050f4:	683b      	ldr	r3, [r7, #0]
100050f6:	681b      	ldr	r3, [r3, #0]
100050f8:	1c5a      	adds	r2, r3, #1
100050fa:	683b      	ldr	r3, [r7, #0]
100050fc:	601a      	str	r2, [r3, #0]
100050fe:	e004      	b.n	1000510a <PWMSP001_GetPeriodReg+0x5a>
    }
    else
    {
      *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
10005100:	687b      	ldr	r3, [r7, #4]
10005102:	699b      	ldr	r3, [r3, #24]
10005104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005106:	683b      	ldr	r3, [r7, #0]
10005108:	601a      	str	r2, [r3, #0]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
1000510a:	2300      	movs	r3, #0
1000510c:	60fb      	str	r3, [r7, #12]
  }
  return Status;
1000510e:	68fb      	ldr	r3, [r7, #12]
}
10005110:	1c18      	adds	r0, r3, #0
10005112:	46bd      	mov	sp, r7
10005114:	b004      	add	sp, #16
10005116:	bd80      	pop	{r7, pc}

10005118 <PWMSP001_SWRequestShadowTransfer>:
 */
status_t PWMSP001_SWRequestShadowTransfer
(
    const PWMSP001_HandleType* HandlePtr
)
{
10005118:	b5b0      	push	{r4, r5, r7, lr}
1000511a:	b086      	sub	sp, #24
1000511c:	af00      	add	r7, sp, #0
1000511e:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005120:	2301      	movs	r3, #1
10005122:	617b      	str	r3, [r7, #20]
  uint32_t Temp1;
  uint32_t Temp2;
  uint32_t Temp3;

  /*<<<DD_PWMSP001_API_10_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10005124:	687b      	ldr	r3, [r7, #4]
10005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005128:	781b      	ldrb	r3, [r3, #0]
1000512a:	2b00      	cmp	r3, #0
1000512c:	d032      	beq.n	10005194 <PWMSP001_SWRequestShadowTransfer+0x7c>
  }
  /*<<<DD_PWMSP001_API_10_2>>>*/
  else
  {
    /*Request shadow transfer for the First Slice*/
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
1000512e:	687a      	ldr	r2, [r7, #4]
10005130:	2320      	movs	r3, #32
10005132:	5cd3      	ldrb	r3, [r2, r3]
10005134:	2b01      	cmp	r3, #1
10005136:	d11a      	bne.n	1000516e <PWMSP001_SWRequestShadowTransfer+0x56>
    {
      /*Request shadow transfer for the Second Slice*/
      Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
10005138:	687a      	ldr	r2, [r7, #4]
1000513a:	2337      	movs	r3, #55	; 0x37
1000513c:	5cd3      	ldrb	r3, [r2, r3]
1000513e:	009b      	lsls	r3, r3, #2
10005140:	613b      	str	r3, [r7, #16]
      Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
10005142:	687a      	ldr	r2, [r7, #4]
10005144:	2338      	movs	r3, #56	; 0x38
10005146:	5cd3      	ldrb	r3, [r2, r3]
10005148:	009b      	lsls	r3, r3, #2
1000514a:	60fb      	str	r3, [r7, #12]
      HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
1000514c:	687b      	ldr	r3, [r7, #4]
1000514e:	695b      	ldr	r3, [r3, #20]
10005150:	687a      	ldr	r2, [r7, #4]
10005152:	6952      	ldr	r2, [r2, #20]
10005154:	6911      	ldr	r1, [r2, #16]
10005156:	693a      	ldr	r2, [r7, #16]
10005158:	2001      	movs	r0, #1
1000515a:	4090      	lsls	r0, r2
1000515c:	68fa      	ldr	r2, [r7, #12]
1000515e:	2401      	movs	r4, #1
10005160:	1c25      	adds	r5, r4, #0
10005162:	4095      	lsls	r5, r2
10005164:	1c2a      	adds	r2, r5, #0
10005166:	4302      	orrs	r2, r0
10005168:	430a      	orrs	r2, r1
1000516a:	611a      	str	r2, [r3, #16]
1000516c:	e010      	b.n	10005190 <PWMSP001_SWRequestShadowTransfer+0x78>
    }
    else
    {
      Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
1000516e:	687a      	ldr	r2, [r7, #4]
10005170:	2337      	movs	r3, #55	; 0x37
10005172:	5cd3      	ldrb	r3, [r2, r3]
10005174:	009b      	lsls	r3, r3, #2
10005176:	60bb      	str	r3, [r7, #8]
      HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
10005178:	687b      	ldr	r3, [r7, #4]
1000517a:	695b      	ldr	r3, [r3, #20]
1000517c:	687a      	ldr	r2, [r7, #4]
1000517e:	6952      	ldr	r2, [r2, #20]
10005180:	6911      	ldr	r1, [r2, #16]
10005182:	68ba      	ldr	r2, [r7, #8]
10005184:	2001      	movs	r0, #1
10005186:	1c04      	adds	r4, r0, #0
10005188:	4094      	lsls	r4, r2
1000518a:	1c22      	adds	r2, r4, #0
1000518c:	430a      	orrs	r2, r1
1000518e:	611a      	str	r2, [r3, #16]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10005190:	2300      	movs	r3, #0
10005192:	617b      	str	r3, [r7, #20]
  }
  return Status;
10005194:	697b      	ldr	r3, [r7, #20]
}
10005196:	1c18      	adds	r0, r3, #0
10005198:	46bd      	mov	sp, r7
1000519a:	b006      	add	sp, #24
1000519c:	bdb0      	pop	{r4, r5, r7, pc}
1000519e:	46c0      	nop			; (mov r8, r8)

100051a0 <PWMSP001_ResetTrapFlag>:
/*<<<DD_PWMSP001_API_13>>>*/
/*
 * This function resets the trap flag if trap condition is inactive
 */
void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
{
100051a0:	b580      	push	{r7, lr}
100051a2:	b082      	sub	sp, #8
100051a4:	af00      	add	r7, sp, #0
100051a6:	6078      	str	r0, [r7, #4]
   if (HandlePtr->kTrapExitControl == (uint8_t)SET)
100051a8:	687b      	ldr	r3, [r7, #4]
100051aa:	7cdb      	ldrb	r3, [r3, #19]
100051ac:	2b01      	cmp	r3, #1
100051ae:	d11a      	bne.n	100051e6 <PWMSP001_ResetTrapFlag+0x46>
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
100051b0:	687b      	ldr	r3, [r7, #4]
100051b2:	699a      	ldr	r2, [r3, #24]
100051b4:	687b      	ldr	r3, [r7, #4]
100051b6:	6999      	ldr	r1, [r3, #24]
100051b8:	23b0      	movs	r3, #176	; 0xb0
100051ba:	58cb      	ldr	r3, [r1, r3]
100051bc:	2180      	movs	r1, #128	; 0x80
100051be:	00c9      	lsls	r1, r1, #3
100051c0:	4319      	orrs	r1, r3
100051c2:	23b0      	movs	r3, #176	; 0xb0
100051c4:	50d1      	str	r1, [r2, r3]
      if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100051c6:	687a      	ldr	r2, [r7, #4]
100051c8:	2320      	movs	r3, #32
100051ca:	5cd3      	ldrb	r3, [r2, r3]
100051cc:	2b01      	cmp	r3, #1
100051ce:	d10a      	bne.n	100051e6 <PWMSP001_ResetTrapFlag+0x46>
      {
        SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
100051d0:	687b      	ldr	r3, [r7, #4]
100051d2:	69da      	ldr	r2, [r3, #28]
100051d4:	687b      	ldr	r3, [r7, #4]
100051d6:	69d9      	ldr	r1, [r3, #28]
100051d8:	23b0      	movs	r3, #176	; 0xb0
100051da:	58cb      	ldr	r3, [r1, r3]
100051dc:	2180      	movs	r1, #128	; 0x80
100051de:	00c9      	lsls	r1, r1, #3
100051e0:	4319      	orrs	r1, r3
100051e2:	23b0      	movs	r3, #176	; 0xb0
100051e4:	50d1      	str	r1, [r2, r3]
      }
    }
    SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
100051e6:	687b      	ldr	r3, [r7, #4]
100051e8:	699a      	ldr	r2, [r3, #24]
100051ea:	687b      	ldr	r3, [r7, #4]
100051ec:	6999      	ldr	r1, [r3, #24]
100051ee:	23b0      	movs	r3, #176	; 0xb0
100051f0:	58cb      	ldr	r3, [r1, r3]
100051f2:	2180      	movs	r1, #128	; 0x80
100051f4:	0109      	lsls	r1, r1, #4
100051f6:	4319      	orrs	r1, r3
100051f8:	23b0      	movs	r3, #176	; 0xb0
100051fa:	50d1      	str	r1, [r2, r3]
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100051fc:	687a      	ldr	r2, [r7, #4]
100051fe:	2320      	movs	r3, #32
10005200:	5cd3      	ldrb	r3, [r2, r3]
10005202:	2b01      	cmp	r3, #1
10005204:	d10a      	bne.n	1000521c <PWMSP001_ResetTrapFlag+0x7c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
10005206:	687b      	ldr	r3, [r7, #4]
10005208:	69da      	ldr	r2, [r3, #28]
1000520a:	687b      	ldr	r3, [r7, #4]
1000520c:	69d9      	ldr	r1, [r3, #28]
1000520e:	23b0      	movs	r3, #176	; 0xb0
10005210:	58cb      	ldr	r3, [r1, r3]
10005212:	2180      	movs	r1, #128	; 0x80
10005214:	0109      	lsls	r1, r1, #4
10005216:	4319      	orrs	r1, r3
10005218:	23b0      	movs	r3, #176	; 0xb0
1000521a:	50d1      	str	r1, [r2, r3]
    }
}
1000521c:	46bd      	mov	sp, r7
1000521e:	b002      	add	sp, #8
10005220:	bd80      	pop	{r7, pc}
10005222:	46c0      	nop			; (mov r8, r8)

10005224 <PWMSP001_lConfigureSecondSlice>:
/*
 * This function configures second slice.
 */

void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
{
10005224:	b5b0      	push	{r4, r5, r7, lr}
10005226:	b082      	sub	sp, #8
10005228:	af00      	add	r7, sp, #0
1000522a:	6078      	str	r0, [r7, #4]
  HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
1000522c:	687b      	ldr	r3, [r7, #4]
1000522e:	69db      	ldr	r3, [r3, #28]
10005230:	2207      	movs	r2, #7
10005232:	611a      	str	r2, [r3, #16]

  /*Set period and compare values for second slice*/
  HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
10005234:	687b      	ldr	r3, [r7, #4]
10005236:	69db      	ldr	r3, [r3, #28]
10005238:	687a      	ldr	r2, [r7, #4]
1000523a:	6a92      	ldr	r2, [r2, #40]	; 0x28
1000523c:	0c12      	lsrs	r2, r2, #16
1000523e:	635a      	str	r2, [r3, #52]	; 0x34
      >> 16U);
  HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
10005240:	687b      	ldr	r3, [r7, #4]
10005242:	69db      	ldr	r3, [r3, #28]
10005244:	687a      	ldr	r2, [r7, #4]
10005246:	6892      	ldr	r2, [r2, #8]
10005248:	0c12      	lsrs	r2, r2, #16
1000524a:	63da      	str	r2, [r3, #60]	; 0x3c
      >> 16U);

  HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
1000524c:	687b      	ldr	r3, [r7, #4]
1000524e:	69db      	ldr	r3, [r3, #28]
10005250:	687a      	ldr	r2, [r7, #4]
10005252:	69d2      	ldr	r2, [r2, #28]
10005254:	6852      	ldr	r2, [r2, #4]
10005256:	2180      	movs	r1, #128	; 0x80
10005258:	0349      	lsls	r1, r1, #13
1000525a:	430a      	orrs	r2, r1
1000525c:	605a      	str	r2, [r3, #4]

  /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
  if (HandlePtr->kExtStopTrig == (uint8_t)SET)
1000525e:	687b      	ldr	r3, [r7, #4]
10005260:	7bdb      	ldrb	r3, [r3, #15]
10005262:	2b01      	cmp	r3, #1
10005264:	d125      	bne.n	100052b2 <PWMSP001_lConfigureSecondSlice+0x8e>
  {
    HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF1M_Msk);
10005266:	687b      	ldr	r3, [r7, #4]
10005268:	69db      	ldr	r3, [r3, #28]
1000526a:	687a      	ldr	r2, [r7, #4]
1000526c:	69d2      	ldr	r2, [r2, #28]
1000526e:	6811      	ldr	r1, [r2, #0]
10005270:	4a79      	ldr	r2, [pc, #484]	; (10005458 <PWMSP001_lConfigureSecondSlice+0x234>)
10005272:	400a      	ands	r2, r1
10005274:	601a      	str	r2, [r3, #0]
    HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
10005276:	687b      	ldr	r3, [r7, #4]
10005278:	69db      	ldr	r3, [r3, #28]
1000527a:	687a      	ldr	r2, [r7, #4]
1000527c:	69d2      	ldr	r2, [r2, #28]
1000527e:	6852      	ldr	r2, [r2, #4]
10005280:	210c      	movs	r1, #12
10005282:	438a      	bics	r2, r1
10005284:	605a      	str	r2, [r3, #4]
    HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
10005286:	687b      	ldr	r3, [r7, #4]
10005288:	69db      	ldr	r3, [r3, #28]
1000528a:	687a      	ldr	r2, [r7, #4]
1000528c:	69d2      	ldr	r2, [r2, #28]
1000528e:	6811      	ldr	r1, [r2, #0]
10005290:	6878      	ldr	r0, [r7, #4]
10005292:	2224      	movs	r2, #36	; 0x24
10005294:	5c82      	ldrb	r2, [r0, r2]
10005296:	0490      	lsls	r0, r2, #18
10005298:	22c0      	movs	r2, #192	; 0xc0
1000529a:	0312      	lsls	r2, r2, #12
1000529c:	4002      	ands	r2, r0
1000529e:	430a      	orrs	r2, r1
100052a0:	601a      	str	r2, [r3, #0]
      (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
    HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
100052a2:	687b      	ldr	r3, [r7, #4]
100052a4:	69db      	ldr	r3, [r3, #28]
100052a6:	687a      	ldr	r2, [r7, #4]
100052a8:	69d2      	ldr	r2, [r2, #28]
100052aa:	6852      	ldr	r2, [r2, #4]
100052ac:	2108      	movs	r1, #8
100052ae:	430a      	orrs	r2, r1
100052b0:	605a      	str	r2, [r3, #4]
      (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
  }/*End of if (HandlePtr->kExtStopTrig == SET)*/

  /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
  if (HandlePtr->kTrapEnable == (uint8_t)SET)
100052b2:	687b      	ldr	r3, [r7, #4]
100052b4:	7c5b      	ldrb	r3, [r3, #17]
100052b6:	2b01      	cmp	r3, #1
100052b8:	d125      	bne.n	10005306 <PWMSP001_lConfigureSecondSlice+0xe2>
  {
    HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
100052ba:	687b      	ldr	r3, [r7, #4]
100052bc:	69db      	ldr	r3, [r3, #28]
100052be:	687a      	ldr	r2, [r7, #4]
100052c0:	69d2      	ldr	r2, [r2, #28]
100052c2:	6811      	ldr	r1, [r2, #0]
100052c4:	4a65      	ldr	r2, [pc, #404]	; (1000545c <PWMSP001_lConfigureSecondSlice+0x238>)
100052c6:	400a      	ands	r2, r1
100052c8:	601a      	str	r2, [r3, #0]
        | CCU4_CC4_INS_LPF2M_Msk);
    HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
100052ca:	687b      	ldr	r3, [r7, #4]
100052cc:	69db      	ldr	r3, [r3, #28]
100052ce:	687a      	ldr	r2, [r7, #4]
100052d0:	69d2      	ldr	r2, [r2, #28]
100052d2:	6851      	ldr	r1, [r2, #4]
100052d4:	4a62      	ldr	r2, [pc, #392]	; (10005460 <PWMSP001_lConfigureSecondSlice+0x23c>)
100052d6:	400a      	ands	r2, r1
100052d8:	605a      	str	r2, [r3, #4]
    HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
100052da:	687b      	ldr	r3, [r7, #4]
100052dc:	69db      	ldr	r3, [r3, #28]
100052de:	687a      	ldr	r2, [r7, #4]
100052e0:	69d2      	ldr	r2, [r2, #28]
100052e2:	6811      	ldr	r1, [r2, #0]
        ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
            ((((uint32_t)HandlePtr->kTrapLevel  <<	\
100052e4:	687a      	ldr	r2, [r7, #4]
100052e6:	7812      	ldrb	r2, [r2, #0]
100052e8:	0610      	lsls	r0, r2, #24
  if (HandlePtr->kTrapEnable == (uint8_t)SET)
  {
    HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
        | CCU4_CC4_INS_LPF2M_Msk);
    HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
    HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
100052ea:	2280      	movs	r2, #128	; 0x80
100052ec:	0452      	lsls	r2, r2, #17
100052ee:	4002      	ands	r2, r0
100052f0:	430a      	orrs	r2, r1
100052f2:	601a      	str	r2, [r3, #0]
        ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
            ((((uint32_t)HandlePtr->kTrapLevel  <<	\
                CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
                    CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
    HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
100052f4:	687b      	ldr	r3, [r7, #4]
100052f6:	69db      	ldr	r3, [r3, #28]
100052f8:	687a      	ldr	r2, [r7, #4]
100052fa:	69d2      	ldr	r2, [r2, #28]
100052fc:	6852      	ldr	r2, [r2, #4]
100052fe:	2180      	movs	r1, #128	; 0x80
10005300:	0289      	lsls	r1, r1, #10
10005302:	430a      	orrs	r2, r1
10005304:	605a      	str	r2, [r3, #4]
  }/*End of if (HandlePtr->kTrapEnable == SET)*/

  HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
10005306:	687b      	ldr	r3, [r7, #4]
10005308:	69db      	ldr	r3, [r3, #28]
1000530a:	687a      	ldr	r2, [r7, #4]
1000530c:	69d2      	ldr	r2, [r2, #28]
1000530e:	6951      	ldr	r1, [r2, #20]
10005310:	4a54      	ldr	r2, [pc, #336]	; (10005464 <PWMSP001_lConfigureSecondSlice+0x240>)
10005312:	400a      	ands	r2, r1
10005314:	615a      	str	r2, [r3, #20]
      | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
      | CCU4_CC4_TC_DITHE_Msk);
  HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
10005316:	687b      	ldr	r3, [r7, #4]
10005318:	69db      	ldr	r3, [r3, #28]
1000531a:	6879      	ldr	r1, [r7, #4]
1000531c:	2236      	movs	r2, #54	; 0x36
1000531e:	5c8a      	ldrb	r2, [r1, r2]
10005320:	1c11      	adds	r1, r2, #0
    (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
10005322:	2201      	movs	r2, #1
10005324:	4011      	ands	r1, r2
      (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
10005326:	687a      	ldr	r2, [r7, #4]
10005328:	7b12      	ldrb	r2, [r2, #12]
1000532a:	0050      	lsls	r0, r2, #1
1000532c:	2202      	movs	r2, #2
1000532e:	4002      	ands	r2, r0
	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
10005330:	4311      	orrs	r1, r2
		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
10005332:	6878      	ldr	r0, [r7, #4]
10005334:	2234      	movs	r2, #52	; 0x34
10005336:	5c82      	ldrb	r2, [r0, r2]
10005338:	0290      	lsls	r0, r2, #10
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
1000533a:	2280      	movs	r2, #128	; 0x80
1000533c:	00d2      	lsls	r2, r2, #3
1000533e:	4002      	ands	r2, r0
      | CCU4_CC4_TC_DITHE_Msk);
  HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
    (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
      (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
10005340:	4311      	orrs	r1, r2
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
10005342:	6878      	ldr	r0, [r7, #4]
10005344:	2235      	movs	r2, #53	; 0x35
10005346:	5c82      	ldrb	r2, [r0, r2]
10005348:	0210      	lsls	r0, r2, #8
                (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
1000534a:	22c0      	movs	r2, #192	; 0xc0
1000534c:	0092      	lsls	r2, r2, #2
1000534e:	4002      	ands	r2, r0
    (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
      (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
10005350:	430a      	orrs	r2, r1
  }/*End of if (HandlePtr->kTrapEnable == SET)*/

  HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
      | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
      | CCU4_CC4_TC_DITHE_Msk);
  HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
10005352:	615a      	str	r2, [r3, #20]
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
                (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);

  /*<<<DD_PWMSP001_API_non1_5>>>*/
  HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITHE_Pos)\
10005354:	687b      	ldr	r3, [r7, #4]
10005356:	69db      	ldr	r3, [r3, #28]
10005358:	687a      	ldr	r2, [r7, #4]
1000535a:	69d2      	ldr	r2, [r2, #28]
1000535c:	6951      	ldr	r1, [r2, #20]
1000535e:	6878      	ldr	r0, [r7, #4]
10005360:	2221      	movs	r2, #33	; 0x21
10005362:	5c82      	ldrb	r2, [r0, r2]
10005364:	0350      	lsls	r0, r2, #13
    &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
10005366:	22c0      	movs	r2, #192	; 0xc0
10005368:	01d2      	lsls	r2, r2, #7
1000536a:	4002      	ands	r2, r0
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
                (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);

  /*<<<DD_PWMSP001_API_non1_5>>>*/
  HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITHE_Pos)\
1000536c:	430a      	orrs	r2, r1
1000536e:	615a      	str	r2, [r3, #20]
    &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
  WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
10005370:	687b      	ldr	r3, [r7, #4]
10005372:	69db      	ldr	r3, [r3, #28]
10005374:	687a      	ldr	r2, [r7, #4]
10005376:	7b52      	ldrb	r2, [r2, #13]
10005378:	1c11      	adds	r1, r2, #0
1000537a:	220f      	movs	r2, #15
1000537c:	4011      	ands	r1, r2
1000537e:	687a      	ldr	r2, [r7, #4]
10005380:	69d2      	ldr	r2, [r2, #28]
10005382:	6a12      	ldr	r2, [r2, #32]
10005384:	200f      	movs	r0, #15
10005386:	4382      	bics	r2, r0
10005388:	430a      	orrs	r2, r1
1000538a:	621a      	str	r2, [r3, #32]
    (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);

  /*<<<DD_PWMSP001_API_non1_6>>>*/
  WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
1000538c:	687b      	ldr	r3, [r7, #4]
1000538e:	69db      	ldr	r3, [r3, #28]
10005390:	687a      	ldr	r2, [r7, #4]
10005392:	7c92      	ldrb	r2, [r2, #18]
10005394:	0551      	lsls	r1, r2, #21
10005396:	2280      	movs	r2, #128	; 0x80
10005398:	0392      	lsls	r2, r2, #14
1000539a:	4011      	ands	r1, r2
1000539c:	687a      	ldr	r2, [r7, #4]
1000539e:	69d2      	ldr	r2, [r2, #28]
100053a0:	6950      	ldr	r0, [r2, #20]
100053a2:	4a31      	ldr	r2, [pc, #196]	; (10005468 <PWMSP001_lConfigureSecondSlice+0x244>)
100053a4:	4002      	ands	r2, r0
100053a6:	430a      	orrs	r2, r1
100053a8:	615a      	str	r2, [r3, #20]
      (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);

  WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
100053aa:	687b      	ldr	r3, [r7, #4]
100053ac:	69db      	ldr	r3, [r3, #28]
100053ae:	687a      	ldr	r2, [r7, #4]
100053b0:	7cd2      	ldrb	r2, [r2, #19]
100053b2:	0591      	lsls	r1, r2, #22
100053b4:	2280      	movs	r2, #128	; 0x80
100053b6:	03d2      	lsls	r2, r2, #15
100053b8:	4011      	ands	r1, r2
100053ba:	687a      	ldr	r2, [r7, #4]
100053bc:	69d2      	ldr	r2, [r2, #28]
100053be:	6950      	ldr	r0, [r2, #20]
100053c0:	4a2a      	ldr	r2, [pc, #168]	; (1000546c <PWMSP001_lConfigureSecondSlice+0x248>)
100053c2:	4002      	ands	r2, r0
100053c4:	430a      	orrs	r2, r1
100053c6:	615a      	str	r2, [r3, #20]
      (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);

  WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
100053c8:	687b      	ldr	r3, [r7, #4]
100053ca:	69db      	ldr	r3, [r3, #28]
100053cc:	687a      	ldr	r2, [r7, #4]
100053ce:	7c52      	ldrb	r2, [r2, #17]
100053d0:	0451      	lsls	r1, r2, #17
100053d2:	2280      	movs	r2, #128	; 0x80
100053d4:	0292      	lsls	r2, r2, #10
100053d6:	4011      	ands	r1, r2
100053d8:	687a      	ldr	r2, [r7, #4]
100053da:	69d2      	ldr	r2, [r2, #28]
100053dc:	6950      	ldr	r0, [r2, #20]
100053de:	4a20      	ldr	r2, [pc, #128]	; (10005460 <PWMSP001_lConfigureSecondSlice+0x23c>)
100053e0:	4002      	ands	r2, r0
100053e2:	430a      	orrs	r2, r1
100053e4:	615a      	str	r2, [r3, #20]
	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
  
  WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
100053e6:	687b      	ldr	r3, [r7, #4]
100053e8:	69db      	ldr	r3, [r3, #28]
100053ea:	6879      	ldr	r1, [r7, #4]
100053ec:	2222      	movs	r2, #34	; 0x22
100053ee:	5c8a      	ldrb	r2, [r1, r2]
100053f0:	1c11      	adds	r1, r2, #0
100053f2:	220f      	movs	r2, #15
100053f4:	4011      	ands	r1, r2
100053f6:	687a      	ldr	r2, [r7, #4]
100053f8:	69d2      	ldr	r2, [r2, #28]
100053fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
100053fc:	200f      	movs	r0, #15
100053fe:	4382      	bics	r2, r0
10005400:	430a      	orrs	r2, r1
10005402:	625a      	str	r2, [r3, #36]	; 0x24
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
10005404:	687b      	ldr	r3, [r7, #4]
10005406:	69db      	ldr	r3, [r3, #28]
10005408:	687a      	ldr	r2, [r7, #4]
1000540a:	7c12      	ldrb	r2, [r2, #16]
1000540c:	619a      	str	r2, [r3, #24]

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
1000540e:	687b      	ldr	r3, [r7, #4]
10005410:	695b      	ldr	r3, [r3, #20]
10005412:	687a      	ldr	r2, [r7, #4]
10005414:	6952      	ldr	r2, [r2, #20]
10005416:	6911      	ldr	r1, [r2, #16]
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
10005418:	6878      	ldr	r0, [r7, #4]
1000541a:	2238      	movs	r2, #56	; 0x38
1000541c:	5c82      	ldrb	r2, [r0, r2]
1000541e:	0092      	lsls	r2, r2, #2
  WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
10005420:	2001      	movs	r0, #1
10005422:	4090      	lsls	r0, r2
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
10005424:	687c      	ldr	r4, [r7, #4]
10005426:	2238      	movs	r2, #56	; 0x38
10005428:	5ca2      	ldrb	r2, [r4, r2]

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
1000542a:	0092      	lsls	r2, r2, #2
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
1000542c:	3201      	adds	r2, #1

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
1000542e:	2401      	movs	r4, #1
10005430:	1c25      	adds	r5, r4, #0
10005432:	4095      	lsls	r5, r2
10005434:	1c2a      	adds	r2, r5, #0
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
10005436:	4310      	orrs	r0, r2
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
10005438:	687c      	ldr	r4, [r7, #4]
1000543a:	2238      	movs	r2, #56	; 0x38
1000543c:	5ca2      	ldrb	r2, [r4, r2]

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1000543e:	0092      	lsls	r2, r2, #2
		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
10005440:	3202      	adds	r2, #2

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
10005442:	2401      	movs	r4, #1
10005444:	1c25      	adds	r5, r4, #0
10005446:	4095      	lsls	r5, r2
10005448:	1c2a      	adds	r2, r5, #0
  WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
1000544a:	4302      	orrs	r2, r0
1000544c:	430a      	orrs	r2, r1
1000544e:	611a      	str	r2, [r3, #16]
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
}
10005450:	46bd      	mov	sp, r7
10005452:	b002      	add	sp, #8
10005454:	bdb0      	pop	{r4, r5, r7, pc}
10005456:	46c0      	nop			; (mov r8, r8)
10005458:	e7f3ffff 	.word	0xe7f3ffff
1000545c:	9ecfffff 	.word	0x9ecfffff
10005460:	fffdffff 	.word	0xfffdffff
10005464:	ffff98f4 	.word	0xffff98f4
10005468:	ffdfffff 	.word	0xffdfffff
1000546c:	ffbfffff 	.word	0xffbfffff

10005470 <PWMSP001_EnableEvent>:
status_t PWMSP001_EnableEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10005470:	b590      	push	{r4, r7, lr}
10005472:	b085      	sub	sp, #20
10005474:	af00      	add	r7, sp, #0
10005476:	6078      	str	r0, [r7, #4]
10005478:	1c0a      	adds	r2, r1, #0
1000547a:	1cfb      	adds	r3, r7, #3
1000547c:	701a      	strb	r2, [r3, #0]
  status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
1000547e:	2301      	movs	r3, #1
10005480:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10005482:	687b      	ldr	r3, [r7, #4]
10005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005486:	781b      	ldrb	r3, [r3, #0]
10005488:	2b00      	cmp	r3, #0
1000548a:	d102      	bne.n	10005492 <PWMSP001_EnableEvent+0x22>
  {
    Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
1000548c:	2301      	movs	r3, #1
1000548e:	60fb      	str	r3, [r7, #12]
10005490:	e025      	b.n	100054de <PWMSP001_EnableEvent+0x6e>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005492:	687a      	ldr	r2, [r7, #4]
10005494:	2320      	movs	r3, #32
10005496:	5cd3      	ldrb	r3, [r2, r3]
10005498:	2b01      	cmp	r3, #1
1000549a:	d10f      	bne.n	100054bc <PWMSP001_EnableEvent+0x4c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
1000549c:	687b      	ldr	r3, [r7, #4]
1000549e:	69da      	ldr	r2, [r3, #28]
100054a0:	687b      	ldr	r3, [r7, #4]
100054a2:	69d9      	ldr	r1, [r3, #28]
100054a4:	23a4      	movs	r3, #164	; 0xa4
100054a6:	58c9      	ldr	r1, [r1, r3]
100054a8:	1cfb      	adds	r3, r7, #3
100054aa:	781b      	ldrb	r3, [r3, #0]
100054ac:	2001      	movs	r0, #1
100054ae:	1c04      	adds	r4, r0, #0
100054b0:	409c      	lsls	r4, r3
100054b2:	1c23      	adds	r3, r4, #0
100054b4:	4319      	orrs	r1, r3
100054b6:	23a4      	movs	r3, #164	; 0xa4
100054b8:	50d1      	str	r1, [r2, r3]
100054ba:	e00e      	b.n	100054da <PWMSP001_EnableEvent+0x6a>
    }
    else
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
100054bc:	687b      	ldr	r3, [r7, #4]
100054be:	699a      	ldr	r2, [r3, #24]
100054c0:	687b      	ldr	r3, [r7, #4]
100054c2:	6999      	ldr	r1, [r3, #24]
100054c4:	23a4      	movs	r3, #164	; 0xa4
100054c6:	58c9      	ldr	r1, [r1, r3]
100054c8:	1cfb      	adds	r3, r7, #3
100054ca:	781b      	ldrb	r3, [r3, #0]
100054cc:	2001      	movs	r0, #1
100054ce:	1c04      	adds	r4, r0, #0
100054d0:	409c      	lsls	r4, r3
100054d2:	1c23      	adds	r3, r4, #0
100054d4:	4319      	orrs	r1, r3
100054d6:	23a4      	movs	r3, #164	; 0xa4
100054d8:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
100054da:	2300      	movs	r3, #0
100054dc:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
100054de:	68fb      	ldr	r3, [r7, #12]
}
100054e0:	1c18      	adds	r0, r3, #0
100054e2:	46bd      	mov	sp, r7
100054e4:	b005      	add	sp, #20
100054e6:	bd90      	pop	{r4, r7, pc}

100054e8 <PWMSP001_DisableEvent>:
status_t PWMSP001_DisableEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
100054e8:	b590      	push	{r4, r7, lr}
100054ea:	b085      	sub	sp, #20
100054ec:	af00      	add	r7, sp, #0
100054ee:	6078      	str	r0, [r7, #4]
100054f0:	1c0a      	adds	r2, r1, #0
100054f2:	1cfb      	adds	r3, r7, #3
100054f4:	701a      	strb	r2, [r3, #0]
  status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
100054f6:	2301      	movs	r3, #1
100054f8:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
100054fa:	687b      	ldr	r3, [r7, #4]
100054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100054fe:	781b      	ldrb	r3, [r3, #0]
10005500:	2b00      	cmp	r3, #0
10005502:	d102      	bne.n	1000550a <PWMSP001_DisableEvent+0x22>
  {
    Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005504:	2301      	movs	r3, #1
10005506:	60fb      	str	r3, [r7, #12]
10005508:	e027      	b.n	1000555a <PWMSP001_DisableEvent+0x72>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
1000550a:	687a      	ldr	r2, [r7, #4]
1000550c:	2320      	movs	r3, #32
1000550e:	5cd3      	ldrb	r3, [r2, r3]
10005510:	2b01      	cmp	r3, #1
10005512:	d110      	bne.n	10005536 <PWMSP001_DisableEvent+0x4e>
    {
      CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
10005514:	687b      	ldr	r3, [r7, #4]
10005516:	69da      	ldr	r2, [r3, #28]
10005518:	687b      	ldr	r3, [r7, #4]
1000551a:	69d9      	ldr	r1, [r3, #28]
1000551c:	23a4      	movs	r3, #164	; 0xa4
1000551e:	58cb      	ldr	r3, [r1, r3]
10005520:	1cf9      	adds	r1, r7, #3
10005522:	7809      	ldrb	r1, [r1, #0]
10005524:	2001      	movs	r0, #1
10005526:	1c04      	adds	r4, r0, #0
10005528:	408c      	lsls	r4, r1
1000552a:	1c21      	adds	r1, r4, #0
1000552c:	43c9      	mvns	r1, r1
1000552e:	4019      	ands	r1, r3
10005530:	23a4      	movs	r3, #164	; 0xa4
10005532:	50d1      	str	r1, [r2, r3]
10005534:	e00f      	b.n	10005556 <PWMSP001_DisableEvent+0x6e>
    }
    else
    {
      CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
10005536:	687b      	ldr	r3, [r7, #4]
10005538:	699a      	ldr	r2, [r3, #24]
1000553a:	687b      	ldr	r3, [r7, #4]
1000553c:	6999      	ldr	r1, [r3, #24]
1000553e:	23a4      	movs	r3, #164	; 0xa4
10005540:	58cb      	ldr	r3, [r1, r3]
10005542:	1cf9      	adds	r1, r7, #3
10005544:	7809      	ldrb	r1, [r1, #0]
10005546:	2001      	movs	r0, #1
10005548:	1c04      	adds	r4, r0, #0
1000554a:	408c      	lsls	r4, r1
1000554c:	1c21      	adds	r1, r4, #0
1000554e:	43c9      	mvns	r1, r1
10005550:	4019      	ands	r1, r3
10005552:	23a4      	movs	r3, #164	; 0xa4
10005554:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10005556:	2300      	movs	r3, #0
10005558:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
1000555a:	68fb      	ldr	r3, [r7, #12]
}
1000555c:	1c18      	adds	r0, r3, #0
1000555e:	46bd      	mov	sp, r7
10005560:	b005      	add	sp, #20
10005562:	bd90      	pop	{r4, r7, pc}

10005564 <PWMSP001_ClearPendingEvent>:
status_t PWMSP001_ClearPendingEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10005564:	b590      	push	{r4, r7, lr}
10005566:	b085      	sub	sp, #20
10005568:	af00      	add	r7, sp, #0
1000556a:	6078      	str	r0, [r7, #4]
1000556c:	1c0a      	adds	r2, r1, #0
1000556e:	1cfb      	adds	r3, r7, #3
10005570:	701a      	strb	r2, [r3, #0]
  status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005572:	2301      	movs	r3, #1
10005574:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10005576:	687b      	ldr	r3, [r7, #4]
10005578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000557a:	781b      	ldrb	r3, [r3, #0]
1000557c:	2b00      	cmp	r3, #0
1000557e:	d102      	bne.n	10005586 <PWMSP001_ClearPendingEvent+0x22>
  {
    Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005580:	2301      	movs	r3, #1
10005582:	60fb      	str	r3, [r7, #12]
10005584:	e025      	b.n	100055d2 <PWMSP001_ClearPendingEvent+0x6e>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10005586:	687a      	ldr	r2, [r7, #4]
10005588:	2320      	movs	r3, #32
1000558a:	5cd3      	ldrb	r3, [r2, r3]
1000558c:	2b01      	cmp	r3, #1
1000558e:	d10f      	bne.n	100055b0 <PWMSP001_ClearPendingEvent+0x4c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
10005590:	687b      	ldr	r3, [r7, #4]
10005592:	69da      	ldr	r2, [r3, #28]
10005594:	687b      	ldr	r3, [r7, #4]
10005596:	69d9      	ldr	r1, [r3, #28]
10005598:	23b0      	movs	r3, #176	; 0xb0
1000559a:	58c9      	ldr	r1, [r1, r3]
1000559c:	1cfb      	adds	r3, r7, #3
1000559e:	781b      	ldrb	r3, [r3, #0]
100055a0:	2001      	movs	r0, #1
100055a2:	1c04      	adds	r4, r0, #0
100055a4:	409c      	lsls	r4, r3
100055a6:	1c23      	adds	r3, r4, #0
100055a8:	4319      	orrs	r1, r3
100055aa:	23b0      	movs	r3, #176	; 0xb0
100055ac:	50d1      	str	r1, [r2, r3]
100055ae:	e00e      	b.n	100055ce <PWMSP001_ClearPendingEvent+0x6a>
    }
    else
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
100055b0:	687b      	ldr	r3, [r7, #4]
100055b2:	699a      	ldr	r2, [r3, #24]
100055b4:	687b      	ldr	r3, [r7, #4]
100055b6:	6999      	ldr	r1, [r3, #24]
100055b8:	23b0      	movs	r3, #176	; 0xb0
100055ba:	58c9      	ldr	r1, [r1, r3]
100055bc:	1cfb      	adds	r3, r7, #3
100055be:	781b      	ldrb	r3, [r3, #0]
100055c0:	2001      	movs	r0, #1
100055c2:	1c04      	adds	r4, r0, #0
100055c4:	409c      	lsls	r4, r3
100055c6:	1c23      	adds	r3, r4, #0
100055c8:	4319      	orrs	r1, r3
100055ca:	23b0      	movs	r3, #176	; 0xb0
100055cc:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
100055ce:	2300      	movs	r3, #0
100055d0:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
100055d2:	68fb      	ldr	r3, [r7, #12]
}
100055d4:	1c18      	adds	r0, r3, #0
100055d6:	46bd      	mov	sp, r7
100055d8:	b005      	add	sp, #20
100055da:	bd90      	pop	{r4, r7, pc}

100055dc <PWMSP001_SetPendingEvent>:
status_t PWMSP001_SetPendingEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
100055dc:	b590      	push	{r4, r7, lr}
100055de:	b085      	sub	sp, #20
100055e0:	af00      	add	r7, sp, #0
100055e2:	6078      	str	r0, [r7, #4]
100055e4:	1c0a      	adds	r2, r1, #0
100055e6:	1cfb      	adds	r3, r7, #3
100055e8:	701a      	strb	r2, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100055ea:	2301      	movs	r3, #1
100055ec:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
100055ee:	687b      	ldr	r3, [r7, #4]
100055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100055f2:	781b      	ldrb	r3, [r3, #0]
100055f4:	2b00      	cmp	r3, #0
100055f6:	d102      	bne.n	100055fe <PWMSP001_SetPendingEvent+0x22>
  {
    Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100055f8:	2301      	movs	r3, #1
100055fa:	60fb      	str	r3, [r7, #12]
100055fc:	e025      	b.n	1000564a <PWMSP001_SetPendingEvent+0x6e>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
100055fe:	687a      	ldr	r2, [r7, #4]
10005600:	2320      	movs	r3, #32
10005602:	5cd3      	ldrb	r3, [r2, r3]
10005604:	2b01      	cmp	r3, #1
10005606:	d10f      	bne.n	10005628 <PWMSP001_SetPendingEvent+0x4c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
10005608:	687b      	ldr	r3, [r7, #4]
1000560a:	69da      	ldr	r2, [r3, #28]
1000560c:	687b      	ldr	r3, [r7, #4]
1000560e:	69d9      	ldr	r1, [r3, #28]
10005610:	23ac      	movs	r3, #172	; 0xac
10005612:	58c9      	ldr	r1, [r1, r3]
10005614:	1cfb      	adds	r3, r7, #3
10005616:	781b      	ldrb	r3, [r3, #0]
10005618:	2001      	movs	r0, #1
1000561a:	1c04      	adds	r4, r0, #0
1000561c:	409c      	lsls	r4, r3
1000561e:	1c23      	adds	r3, r4, #0
10005620:	4319      	orrs	r1, r3
10005622:	23ac      	movs	r3, #172	; 0xac
10005624:	50d1      	str	r1, [r2, r3]
10005626:	e00e      	b.n	10005646 <PWMSP001_SetPendingEvent+0x6a>
    }
    else
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
10005628:	687b      	ldr	r3, [r7, #4]
1000562a:	699a      	ldr	r2, [r3, #24]
1000562c:	687b      	ldr	r3, [r7, #4]
1000562e:	6999      	ldr	r1, [r3, #24]
10005630:	23ac      	movs	r3, #172	; 0xac
10005632:	58c9      	ldr	r1, [r1, r3]
10005634:	1cfb      	adds	r3, r7, #3
10005636:	781b      	ldrb	r3, [r3, #0]
10005638:	2001      	movs	r0, #1
1000563a:	1c04      	adds	r4, r0, #0
1000563c:	409c      	lsls	r4, r3
1000563e:	1c23      	adds	r3, r4, #0
10005640:	4319      	orrs	r1, r3
10005642:	23ac      	movs	r3, #172	; 0xac
10005644:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10005646:	2300      	movs	r3, #0
10005648:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
1000564a:	68fb      	ldr	r3, [r7, #12]
}
1000564c:	1c18      	adds	r0, r3, #0
1000564e:	46bd      	mov	sp, r7
10005650:	b005      	add	sp, #20
10005652:	bd90      	pop	{r4, r7, pc}

10005654 <PWMSP001_GetPendingEvent>:
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event,
    uint8_t*EvtStatus
)
{
10005654:	b580      	push	{r7, lr}
10005656:	b086      	sub	sp, #24
10005658:	af00      	add	r7, sp, #0
1000565a:	60f8      	str	r0, [r7, #12]
1000565c:	607a      	str	r2, [r7, #4]
1000565e:	1c3b      	adds	r3, r7, #0
10005660:	330b      	adds	r3, #11
10005662:	1c0a      	adds	r2, r1, #0
10005664:	701a      	strb	r2, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005666:	2301      	movs	r3, #1
10005668:	617b      	str	r3, [r7, #20]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
1000566a:	68fb      	ldr	r3, [r7, #12]
1000566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000566e:	781b      	ldrb	r3, [r3, #0]
10005670:	2b00      	cmp	r3, #0
10005672:	d102      	bne.n	1000567a <PWMSP001_GetPendingEvent+0x26>
  {
    Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10005674:	2301      	movs	r3, #1
10005676:	617b      	str	r3, [r7, #20]
10005678:	e03d      	b.n	100056f6 <PWMSP001_GetPendingEvent+0xa2>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
1000567a:	68fa      	ldr	r2, [r7, #12]
1000567c:	2320      	movs	r3, #32
1000567e:	5cd3      	ldrb	r3, [r2, r3]
10005680:	2b01      	cmp	r3, #1
10005682:	d11b      	bne.n	100056bc <PWMSP001_GetPendingEvent+0x68>
    {

      if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event))
10005684:	68fb      	ldr	r3, [r7, #12]
10005686:	69da      	ldr	r2, [r3, #28]
10005688:	23a0      	movs	r3, #160	; 0xa0
1000568a:	58d3      	ldr	r3, [r2, r3]
1000568c:	1c3a      	adds	r2, r7, #0
1000568e:	320b      	adds	r2, #11
10005690:	7812      	ldrb	r2, [r2, #0]
10005692:	2101      	movs	r1, #1
10005694:	1c08      	adds	r0, r1, #0
10005696:	4090      	lsls	r0, r2
10005698:	1c02      	adds	r2, r0, #0
1000569a:	401a      	ands	r2, r3
1000569c:	1c3b      	adds	r3, r7, #0
1000569e:	330b      	adds	r3, #11
100056a0:	781b      	ldrb	r3, [r3, #0]
100056a2:	1c11      	adds	r1, r2, #0
100056a4:	40d9      	lsrs	r1, r3
100056a6:	1c0b      	adds	r3, r1, #0
100056a8:	2b00      	cmp	r3, #0
100056aa:	d003      	beq.n	100056b4 <PWMSP001_GetPendingEvent+0x60>
	  {
	      *EvtStatus = (uint8_t)SET;
100056ac:	687b      	ldr	r3, [r7, #4]
100056ae:	2201      	movs	r2, #1
100056b0:	701a      	strb	r2, [r3, #0]
100056b2:	e01e      	b.n	100056f2 <PWMSP001_GetPendingEvent+0x9e>
	  }
	  else
	  {
	      *EvtStatus = (uint8_t)RESET;
100056b4:	687b      	ldr	r3, [r7, #4]
100056b6:	2200      	movs	r2, #0
100056b8:	701a      	strb	r2, [r3, #0]
100056ba:	e01a      	b.n	100056f2 <PWMSP001_GetPendingEvent+0x9e>
	  }
    }
    else
    {
      if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
100056bc:	68fb      	ldr	r3, [r7, #12]
100056be:	699a      	ldr	r2, [r3, #24]
100056c0:	23a0      	movs	r3, #160	; 0xa0
100056c2:	58d3      	ldr	r3, [r2, r3]
100056c4:	1c3a      	adds	r2, r7, #0
100056c6:	320b      	adds	r2, #11
100056c8:	7812      	ldrb	r2, [r2, #0]
100056ca:	2101      	movs	r1, #1
100056cc:	1c08      	adds	r0, r1, #0
100056ce:	4090      	lsls	r0, r2
100056d0:	1c02      	adds	r2, r0, #0
100056d2:	401a      	ands	r2, r3
100056d4:	1c3b      	adds	r3, r7, #0
100056d6:	330b      	adds	r3, #11
100056d8:	781b      	ldrb	r3, [r3, #0]
100056da:	1c11      	adds	r1, r2, #0
100056dc:	40d9      	lsrs	r1, r3
100056de:	1c0b      	adds	r3, r1, #0
100056e0:	2b00      	cmp	r3, #0
100056e2:	d003      	beq.n	100056ec <PWMSP001_GetPendingEvent+0x98>
      {
        *EvtStatus = (uint8_t)SET;
100056e4:	687b      	ldr	r3, [r7, #4]
100056e6:	2201      	movs	r2, #1
100056e8:	701a      	strb	r2, [r3, #0]
100056ea:	e002      	b.n	100056f2 <PWMSP001_GetPendingEvent+0x9e>
      }
      else
      {
        *EvtStatus = (uint8_t)RESET;
100056ec:	687b      	ldr	r3, [r7, #4]
100056ee:	2200      	movs	r2, #0
100056f0:	701a      	strb	r2, [r3, #0]
      }
      /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event)\
	   ? (uint8_t)SET : (uint8_t)RESET;	*/
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
100056f2:	2300      	movs	r3, #0
100056f4:	617b      	str	r3, [r7, #20]
  }
  return (Status);
100056f6:	697b      	ldr	r3, [r7, #20]
}
100056f8:	1c18      	adds	r0, r3, #0
100056fa:	46bd      	mov	sp, r7
100056fc:	b006      	add	sp, #24
100056fe:	bd80      	pop	{r7, pc}

10005700 <IO004_Init>:
/** @ingroup IO004_Func
 * @{
 */

void IO004_Init(void)
{
10005700:	b580      	push	{r7, lr}
10005702:	af00      	add	r7, sp, #0
   /* <<<DD_IO004_API_1>>> */

	   

  /* Configuration of 1 Port 2 based on User configuration */
  IO004_Handle0.PortRegs->OMR = 0U<< 2;
10005704:	4b0a      	ldr	r3, [pc, #40]	; (10005730 <IO004_Init+0x30>)
10005706:	685b      	ldr	r3, [r3, #4]
10005708:	2200      	movs	r2, #0
1000570a:	605a      	str	r2, [r3, #4]
  
  IO004_Handle0.PortRegs->IOCR0 |= (0U << 19);   
1000570c:	4b08      	ldr	r3, [pc, #32]	; (10005730 <IO004_Init+0x30>)
1000570e:	685b      	ldr	r3, [r3, #4]
10005710:	4a07      	ldr	r2, [pc, #28]	; (10005730 <IO004_Init+0x30>)
10005712:	6852      	ldr	r2, [r2, #4]
10005714:	6912      	ldr	r2, [r2, #16]
10005716:	611a      	str	r2, [r3, #16]

  /* Configuration of 1 Port 3 based on User configuration */
  IO004_Handle1.PortRegs->OMR = 0U<< 3;
10005718:	4b06      	ldr	r3, [pc, #24]	; (10005734 <IO004_Init+0x34>)
1000571a:	685b      	ldr	r3, [r3, #4]
1000571c:	2200      	movs	r2, #0
1000571e:	605a      	str	r2, [r3, #4]
  
  IO004_Handle1.PortRegs->IOCR0 |= (0U << 27);
10005720:	4b04      	ldr	r3, [pc, #16]	; (10005734 <IO004_Init+0x34>)
10005722:	685b      	ldr	r3, [r3, #4]
10005724:	4a03      	ldr	r2, [pc, #12]	; (10005734 <IO004_Init+0x34>)
10005726:	6852      	ldr	r2, [r2, #4]
10005728:	6912      	ldr	r2, [r2, #16]
1000572a:	611a      	str	r2, [r3, #16]
}
1000572c:	46bd      	mov	sp, r7
1000572e:	bd80      	pop	{r7, pc}
10005730:	1000ac18 	.word	0x1000ac18
10005734:	1000ac20 	.word	0x1000ac20

10005738 <IO004_DisableOutputDriver>:

void IO004_DisableOutputDriver(const IO004_HandleType* Handle,IO004_InputModeType Mode)
{
10005738:	b590      	push	{r4, r7, lr}
1000573a:	b085      	sub	sp, #20
1000573c:	af00      	add	r7, sp, #0
1000573e:	6078      	str	r0, [r7, #4]
10005740:	1c0a      	adds	r2, r1, #0
10005742:	1cfb      	adds	r3, r7, #3
10005744:	701a      	strb	r2, [r3, #0]
  uint8_t Pin = Handle->PortPin;
10005746:	1c3b      	adds	r3, r7, #0
10005748:	330f      	adds	r3, #15
1000574a:	687a      	ldr	r2, [r7, #4]
1000574c:	7852      	ldrb	r2, [r2, #1]
1000574e:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10005750:	1c3b      	adds	r3, r7, #0
10005752:	330f      	adds	r3, #15
10005754:	781b      	ldrb	r3, [r3, #0]
10005756:	2b03      	cmp	r3, #3
10005758:	d824      	bhi.n	100057a4 <IO004_DisableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
1000575a:	687b      	ldr	r3, [r7, #4]
1000575c:	685b      	ldr	r3, [r3, #4]
1000575e:	687a      	ldr	r2, [r7, #4]
10005760:	6852      	ldr	r2, [r2, #4]
10005762:	6912      	ldr	r2, [r2, #16]
10005764:	1c39      	adds	r1, r7, #0
10005766:	310f      	adds	r1, #15
10005768:	7809      	ldrb	r1, [r1, #0]
1000576a:	00c9      	lsls	r1, r1, #3
1000576c:	3103      	adds	r1, #3
1000576e:	201f      	movs	r0, #31
10005770:	1c04      	adds	r4, r0, #0
10005772:	408c      	lsls	r4, r1
10005774:	1c21      	adds	r1, r4, #0
10005776:	43c9      	mvns	r1, r1
10005778:	400a      	ands	r2, r1
1000577a:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |= (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
1000577c:	687b      	ldr	r3, [r7, #4]
1000577e:	685b      	ldr	r3, [r3, #4]
10005780:	687a      	ldr	r2, [r7, #4]
10005782:	6852      	ldr	r2, [r2, #4]
10005784:	6911      	ldr	r1, [r2, #16]
10005786:	1cfa      	adds	r2, r7, #3
10005788:	7810      	ldrb	r0, [r2, #0]
1000578a:	221f      	movs	r2, #31
1000578c:	4010      	ands	r0, r2
1000578e:	1c3a      	adds	r2, r7, #0
10005790:	320f      	adds	r2, #15
10005792:	7812      	ldrb	r2, [r2, #0]
10005794:	00d2      	lsls	r2, r2, #3
10005796:	3203      	adds	r2, #3
10005798:	1c04      	adds	r4, r0, #0
1000579a:	4094      	lsls	r4, r2
1000579c:	1c22      	adds	r2, r4, #0
1000579e:	430a      	orrs	r2, r1
100057a0:	611a      	str	r2, [r3, #16]
100057a2:	e0a0      	b.n	100058e6 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
100057a4:	1c3b      	adds	r3, r7, #0
100057a6:	330f      	adds	r3, #15
100057a8:	781b      	ldrb	r3, [r3, #0]
100057aa:	2b03      	cmp	r3, #3
100057ac:	d930      	bls.n	10005810 <IO004_DisableOutputDriver+0xd8>
100057ae:	1c3b      	adds	r3, r7, #0
100057b0:	330f      	adds	r3, #15
100057b2:	781b      	ldrb	r3, [r3, #0]
100057b4:	2b07      	cmp	r3, #7
100057b6:	d82b      	bhi.n	10005810 <IO004_DisableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
100057b8:	1c3b      	adds	r3, r7, #0
100057ba:	330f      	adds	r3, #15
100057bc:	1c3a      	adds	r2, r7, #0
100057be:	320f      	adds	r2, #15
100057c0:	7812      	ldrb	r2, [r2, #0]
100057c2:	3a04      	subs	r2, #4
100057c4:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
100057c6:	687b      	ldr	r3, [r7, #4]
100057c8:	685b      	ldr	r3, [r3, #4]
100057ca:	687a      	ldr	r2, [r7, #4]
100057cc:	6852      	ldr	r2, [r2, #4]
100057ce:	6952      	ldr	r2, [r2, #20]
100057d0:	1c39      	adds	r1, r7, #0
100057d2:	310f      	adds	r1, #15
100057d4:	7809      	ldrb	r1, [r1, #0]
100057d6:	00c9      	lsls	r1, r1, #3
100057d8:	3103      	adds	r1, #3
100057da:	201f      	movs	r0, #31
100057dc:	1c04      	adds	r4, r0, #0
100057de:	408c      	lsls	r4, r1
100057e0:	1c21      	adds	r1, r4, #0
100057e2:	43c9      	mvns	r1, r1
100057e4:	400a      	ands	r2, r1
100057e6:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100057e8:	687b      	ldr	r3, [r7, #4]
100057ea:	685b      	ldr	r3, [r3, #4]
100057ec:	687a      	ldr	r2, [r7, #4]
100057ee:	6852      	ldr	r2, [r2, #4]
100057f0:	6951      	ldr	r1, [r2, #20]
100057f2:	1cfa      	adds	r2, r7, #3
100057f4:	7810      	ldrb	r0, [r2, #0]
100057f6:	221f      	movs	r2, #31
100057f8:	4010      	ands	r0, r2
100057fa:	1c3a      	adds	r2, r7, #0
100057fc:	320f      	adds	r2, #15
100057fe:	7812      	ldrb	r2, [r2, #0]
10005800:	00d2      	lsls	r2, r2, #3
10005802:	3203      	adds	r2, #3
10005804:	1c04      	adds	r4, r0, #0
10005806:	4094      	lsls	r4, r2
10005808:	1c22      	adds	r2, r4, #0
1000580a:	430a      	orrs	r2, r1
1000580c:	615a      	str	r2, [r3, #20]
1000580e:	e06a      	b.n	100058e6 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10005810:	1c3b      	adds	r3, r7, #0
10005812:	330f      	adds	r3, #15
10005814:	781b      	ldrb	r3, [r3, #0]
10005816:	2b07      	cmp	r3, #7
10005818:	d930      	bls.n	1000587c <IO004_DisableOutputDriver+0x144>
1000581a:	1c3b      	adds	r3, r7, #0
1000581c:	330f      	adds	r3, #15
1000581e:	781b      	ldrb	r3, [r3, #0]
10005820:	2b0b      	cmp	r3, #11
10005822:	d82b      	bhi.n	1000587c <IO004_DisableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10005824:	1c3b      	adds	r3, r7, #0
10005826:	330f      	adds	r3, #15
10005828:	1c3a      	adds	r2, r7, #0
1000582a:	320f      	adds	r2, #15
1000582c:	7812      	ldrb	r2, [r2, #0]
1000582e:	3a08      	subs	r2, #8
10005830:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10005832:	687b      	ldr	r3, [r7, #4]
10005834:	685b      	ldr	r3, [r3, #4]
10005836:	687a      	ldr	r2, [r7, #4]
10005838:	6852      	ldr	r2, [r2, #4]
1000583a:	6992      	ldr	r2, [r2, #24]
1000583c:	1c39      	adds	r1, r7, #0
1000583e:	310f      	adds	r1, #15
10005840:	7809      	ldrb	r1, [r1, #0]
10005842:	00c9      	lsls	r1, r1, #3
10005844:	3103      	adds	r1, #3
10005846:	201f      	movs	r0, #31
10005848:	1c04      	adds	r4, r0, #0
1000584a:	408c      	lsls	r4, r1
1000584c:	1c21      	adds	r1, r4, #0
1000584e:	43c9      	mvns	r1, r1
10005850:	400a      	ands	r2, r1
10005852:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10005854:	687b      	ldr	r3, [r7, #4]
10005856:	685b      	ldr	r3, [r3, #4]
10005858:	687a      	ldr	r2, [r7, #4]
1000585a:	6852      	ldr	r2, [r2, #4]
1000585c:	6991      	ldr	r1, [r2, #24]
1000585e:	1cfa      	adds	r2, r7, #3
10005860:	7810      	ldrb	r0, [r2, #0]
10005862:	221f      	movs	r2, #31
10005864:	4010      	ands	r0, r2
10005866:	1c3a      	adds	r2, r7, #0
10005868:	320f      	adds	r2, #15
1000586a:	7812      	ldrb	r2, [r2, #0]
1000586c:	00d2      	lsls	r2, r2, #3
1000586e:	3203      	adds	r2, #3
10005870:	1c04      	adds	r4, r0, #0
10005872:	4094      	lsls	r4, r2
10005874:	1c22      	adds	r2, r4, #0
10005876:	430a      	orrs	r2, r1
10005878:	619a      	str	r2, [r3, #24]
1000587a:	e034      	b.n	100058e6 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
1000587c:	1c3b      	adds	r3, r7, #0
1000587e:	330f      	adds	r3, #15
10005880:	781b      	ldrb	r3, [r3, #0]
10005882:	2b0b      	cmp	r3, #11
10005884:	d92f      	bls.n	100058e6 <IO004_DisableOutputDriver+0x1ae>
10005886:	1c3b      	adds	r3, r7, #0
10005888:	330f      	adds	r3, #15
1000588a:	781b      	ldrb	r3, [r3, #0]
1000588c:	2b0f      	cmp	r3, #15
1000588e:	d82a      	bhi.n	100058e6 <IO004_DisableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10005890:	1c3b      	adds	r3, r7, #0
10005892:	330f      	adds	r3, #15
10005894:	1c3a      	adds	r2, r7, #0
10005896:	320f      	adds	r2, #15
10005898:	7812      	ldrb	r2, [r2, #0]
1000589a:	3a0c      	subs	r2, #12
1000589c:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
1000589e:	687b      	ldr	r3, [r7, #4]
100058a0:	685b      	ldr	r3, [r3, #4]
100058a2:	687a      	ldr	r2, [r7, #4]
100058a4:	6852      	ldr	r2, [r2, #4]
100058a6:	69d2      	ldr	r2, [r2, #28]
100058a8:	1c39      	adds	r1, r7, #0
100058aa:	310f      	adds	r1, #15
100058ac:	7809      	ldrb	r1, [r1, #0]
100058ae:	00c9      	lsls	r1, r1, #3
100058b0:	3103      	adds	r1, #3
100058b2:	201f      	movs	r0, #31
100058b4:	1c04      	adds	r4, r0, #0
100058b6:	408c      	lsls	r4, r1
100058b8:	1c21      	adds	r1, r4, #0
100058ba:	43c9      	mvns	r1, r1
100058bc:	400a      	ands	r2, r1
100058be:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100058c0:	687b      	ldr	r3, [r7, #4]
100058c2:	685b      	ldr	r3, [r3, #4]
100058c4:	687a      	ldr	r2, [r7, #4]
100058c6:	6852      	ldr	r2, [r2, #4]
100058c8:	69d1      	ldr	r1, [r2, #28]
100058ca:	1cfa      	adds	r2, r7, #3
100058cc:	7810      	ldrb	r0, [r2, #0]
100058ce:	221f      	movs	r2, #31
100058d0:	4010      	ands	r0, r2
100058d2:	1c3a      	adds	r2, r7, #0
100058d4:	320f      	adds	r2, #15
100058d6:	7812      	ldrb	r2, [r2, #0]
100058d8:	00d2      	lsls	r2, r2, #3
100058da:	3203      	adds	r2, #3
100058dc:	1c04      	adds	r4, r0, #0
100058de:	4094      	lsls	r4, r2
100058e0:	1c22      	adds	r2, r4, #0
100058e2:	430a      	orrs	r2, r1
100058e4:	61da      	str	r2, [r3, #28]
  else
  {
	  /*Not supposed to be here */
  }

}
100058e6:	46bd      	mov	sp, r7
100058e8:	b005      	add	sp, #20
100058ea:	bd90      	pop	{r4, r7, pc}

100058ec <IO004_EnableOutputDriver>:

void IO004_EnableOutputDriver(const IO004_HandleType* Handle,IO004_OutputModeType Mode)
{
100058ec:	b590      	push	{r4, r7, lr}
100058ee:	b085      	sub	sp, #20
100058f0:	af00      	add	r7, sp, #0
100058f2:	6078      	str	r0, [r7, #4]
100058f4:	1c0a      	adds	r2, r1, #0
100058f6:	1cfb      	adds	r3, r7, #3
100058f8:	701a      	strb	r2, [r3, #0]

  uint8_t Pin = Handle->PortPin;
100058fa:	1c3b      	adds	r3, r7, #0
100058fc:	330f      	adds	r3, #15
100058fe:	687a      	ldr	r2, [r7, #4]
10005900:	7852      	ldrb	r2, [r2, #1]
10005902:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10005904:	1c3b      	adds	r3, r7, #0
10005906:	330f      	adds	r3, #15
10005908:	781b      	ldrb	r3, [r3, #0]
1000590a:	2b03      	cmp	r3, #3
1000590c:	d824      	bhi.n	10005958 <IO004_EnableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
1000590e:	687b      	ldr	r3, [r7, #4]
10005910:	685b      	ldr	r3, [r3, #4]
10005912:	687a      	ldr	r2, [r7, #4]
10005914:	6852      	ldr	r2, [r2, #4]
10005916:	6912      	ldr	r2, [r2, #16]
10005918:	1c39      	adds	r1, r7, #0
1000591a:	310f      	adds	r1, #15
1000591c:	7809      	ldrb	r1, [r1, #0]
1000591e:	00c9      	lsls	r1, r1, #3
10005920:	3103      	adds	r1, #3
10005922:	201f      	movs	r0, #31
10005924:	1c04      	adds	r4, r0, #0
10005926:	408c      	lsls	r4, r1
10005928:	1c21      	adds	r1, r4, #0
1000592a:	43c9      	mvns	r1, r1
1000592c:	400a      	ands	r2, r1
1000592e:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10005930:	687b      	ldr	r3, [r7, #4]
10005932:	685b      	ldr	r3, [r3, #4]
10005934:	687a      	ldr	r2, [r7, #4]
10005936:	6852      	ldr	r2, [r2, #4]
10005938:	6911      	ldr	r1, [r2, #16]
1000593a:	1cfa      	adds	r2, r7, #3
1000593c:	7810      	ldrb	r0, [r2, #0]
1000593e:	221f      	movs	r2, #31
10005940:	4010      	ands	r0, r2
10005942:	1c3a      	adds	r2, r7, #0
10005944:	320f      	adds	r2, #15
10005946:	7812      	ldrb	r2, [r2, #0]
10005948:	00d2      	lsls	r2, r2, #3
1000594a:	3203      	adds	r2, #3
1000594c:	1c04      	adds	r4, r0, #0
1000594e:	4094      	lsls	r4, r2
10005950:	1c22      	adds	r2, r4, #0
10005952:	430a      	orrs	r2, r1
10005954:	611a      	str	r2, [r3, #16]
10005956:	e0a0      	b.n	10005a9a <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10005958:	1c3b      	adds	r3, r7, #0
1000595a:	330f      	adds	r3, #15
1000595c:	781b      	ldrb	r3, [r3, #0]
1000595e:	2b03      	cmp	r3, #3
10005960:	d930      	bls.n	100059c4 <IO004_EnableOutputDriver+0xd8>
10005962:	1c3b      	adds	r3, r7, #0
10005964:	330f      	adds	r3, #15
10005966:	781b      	ldrb	r3, [r3, #0]
10005968:	2b07      	cmp	r3, #7
1000596a:	d82b      	bhi.n	100059c4 <IO004_EnableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
1000596c:	1c3b      	adds	r3, r7, #0
1000596e:	330f      	adds	r3, #15
10005970:	1c3a      	adds	r2, r7, #0
10005972:	320f      	adds	r2, #15
10005974:	7812      	ldrb	r2, [r2, #0]
10005976:	3a04      	subs	r2, #4
10005978:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
1000597a:	687b      	ldr	r3, [r7, #4]
1000597c:	685b      	ldr	r3, [r3, #4]
1000597e:	687a      	ldr	r2, [r7, #4]
10005980:	6852      	ldr	r2, [r2, #4]
10005982:	6952      	ldr	r2, [r2, #20]
10005984:	1c39      	adds	r1, r7, #0
10005986:	310f      	adds	r1, #15
10005988:	7809      	ldrb	r1, [r1, #0]
1000598a:	00c9      	lsls	r1, r1, #3
1000598c:	3103      	adds	r1, #3
1000598e:	201f      	movs	r0, #31
10005990:	1c04      	adds	r4, r0, #0
10005992:	408c      	lsls	r4, r1
10005994:	1c21      	adds	r1, r4, #0
10005996:	43c9      	mvns	r1, r1
10005998:	400a      	ands	r2, r1
1000599a:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
1000599c:	687b      	ldr	r3, [r7, #4]
1000599e:	685b      	ldr	r3, [r3, #4]
100059a0:	687a      	ldr	r2, [r7, #4]
100059a2:	6852      	ldr	r2, [r2, #4]
100059a4:	6951      	ldr	r1, [r2, #20]
100059a6:	1cfa      	adds	r2, r7, #3
100059a8:	7810      	ldrb	r0, [r2, #0]
100059aa:	221f      	movs	r2, #31
100059ac:	4010      	ands	r0, r2
100059ae:	1c3a      	adds	r2, r7, #0
100059b0:	320f      	adds	r2, #15
100059b2:	7812      	ldrb	r2, [r2, #0]
100059b4:	00d2      	lsls	r2, r2, #3
100059b6:	3203      	adds	r2, #3
100059b8:	1c04      	adds	r4, r0, #0
100059ba:	4094      	lsls	r4, r2
100059bc:	1c22      	adds	r2, r4, #0
100059be:	430a      	orrs	r2, r1
100059c0:	615a      	str	r2, [r3, #20]
100059c2:	e06a      	b.n	10005a9a <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
100059c4:	1c3b      	adds	r3, r7, #0
100059c6:	330f      	adds	r3, #15
100059c8:	781b      	ldrb	r3, [r3, #0]
100059ca:	2b07      	cmp	r3, #7
100059cc:	d930      	bls.n	10005a30 <IO004_EnableOutputDriver+0x144>
100059ce:	1c3b      	adds	r3, r7, #0
100059d0:	330f      	adds	r3, #15
100059d2:	781b      	ldrb	r3, [r3, #0]
100059d4:	2b0b      	cmp	r3, #11
100059d6:	d82b      	bhi.n	10005a30 <IO004_EnableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
100059d8:	1c3b      	adds	r3, r7, #0
100059da:	330f      	adds	r3, #15
100059dc:	1c3a      	adds	r2, r7, #0
100059de:	320f      	adds	r2, #15
100059e0:	7812      	ldrb	r2, [r2, #0]
100059e2:	3a08      	subs	r2, #8
100059e4:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
100059e6:	687b      	ldr	r3, [r7, #4]
100059e8:	685b      	ldr	r3, [r3, #4]
100059ea:	687a      	ldr	r2, [r7, #4]
100059ec:	6852      	ldr	r2, [r2, #4]
100059ee:	6992      	ldr	r2, [r2, #24]
100059f0:	1c39      	adds	r1, r7, #0
100059f2:	310f      	adds	r1, #15
100059f4:	7809      	ldrb	r1, [r1, #0]
100059f6:	00c9      	lsls	r1, r1, #3
100059f8:	3103      	adds	r1, #3
100059fa:	201f      	movs	r0, #31
100059fc:	1c04      	adds	r4, r0, #0
100059fe:	408c      	lsls	r4, r1
10005a00:	1c21      	adds	r1, r4, #0
10005a02:	43c9      	mvns	r1, r1
10005a04:	400a      	ands	r2, r1
10005a06:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10005a08:	687b      	ldr	r3, [r7, #4]
10005a0a:	685b      	ldr	r3, [r3, #4]
10005a0c:	687a      	ldr	r2, [r7, #4]
10005a0e:	6852      	ldr	r2, [r2, #4]
10005a10:	6991      	ldr	r1, [r2, #24]
10005a12:	1cfa      	adds	r2, r7, #3
10005a14:	7810      	ldrb	r0, [r2, #0]
10005a16:	221f      	movs	r2, #31
10005a18:	4010      	ands	r0, r2
10005a1a:	1c3a      	adds	r2, r7, #0
10005a1c:	320f      	adds	r2, #15
10005a1e:	7812      	ldrb	r2, [r2, #0]
10005a20:	00d2      	lsls	r2, r2, #3
10005a22:	3203      	adds	r2, #3
10005a24:	1c04      	adds	r4, r0, #0
10005a26:	4094      	lsls	r4, r2
10005a28:	1c22      	adds	r2, r4, #0
10005a2a:	430a      	orrs	r2, r1
10005a2c:	619a      	str	r2, [r3, #24]
10005a2e:	e034      	b.n	10005a9a <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
10005a30:	1c3b      	adds	r3, r7, #0
10005a32:	330f      	adds	r3, #15
10005a34:	781b      	ldrb	r3, [r3, #0]
10005a36:	2b0b      	cmp	r3, #11
10005a38:	d92f      	bls.n	10005a9a <IO004_EnableOutputDriver+0x1ae>
10005a3a:	1c3b      	adds	r3, r7, #0
10005a3c:	330f      	adds	r3, #15
10005a3e:	781b      	ldrb	r3, [r3, #0]
10005a40:	2b0f      	cmp	r3, #15
10005a42:	d82a      	bhi.n	10005a9a <IO004_EnableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10005a44:	1c3b      	adds	r3, r7, #0
10005a46:	330f      	adds	r3, #15
10005a48:	1c3a      	adds	r2, r7, #0
10005a4a:	320f      	adds	r2, #15
10005a4c:	7812      	ldrb	r2, [r2, #0]
10005a4e:	3a0c      	subs	r2, #12
10005a50:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
10005a52:	687b      	ldr	r3, [r7, #4]
10005a54:	685b      	ldr	r3, [r3, #4]
10005a56:	687a      	ldr	r2, [r7, #4]
10005a58:	6852      	ldr	r2, [r2, #4]
10005a5a:	69d2      	ldr	r2, [r2, #28]
10005a5c:	1c39      	adds	r1, r7, #0
10005a5e:	310f      	adds	r1, #15
10005a60:	7809      	ldrb	r1, [r1, #0]
10005a62:	00c9      	lsls	r1, r1, #3
10005a64:	3103      	adds	r1, #3
10005a66:	201f      	movs	r0, #31
10005a68:	1c04      	adds	r4, r0, #0
10005a6a:	408c      	lsls	r4, r1
10005a6c:	1c21      	adds	r1, r4, #0
10005a6e:	43c9      	mvns	r1, r1
10005a70:	400a      	ands	r2, r1
10005a72:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10005a74:	687b      	ldr	r3, [r7, #4]
10005a76:	685b      	ldr	r3, [r3, #4]
10005a78:	687a      	ldr	r2, [r7, #4]
10005a7a:	6852      	ldr	r2, [r2, #4]
10005a7c:	69d1      	ldr	r1, [r2, #28]
10005a7e:	1cfa      	adds	r2, r7, #3
10005a80:	7810      	ldrb	r0, [r2, #0]
10005a82:	221f      	movs	r2, #31
10005a84:	4010      	ands	r0, r2
10005a86:	1c3a      	adds	r2, r7, #0
10005a88:	320f      	adds	r2, #15
10005a8a:	7812      	ldrb	r2, [r2, #0]
10005a8c:	00d2      	lsls	r2, r2, #3
10005a8e:	3203      	adds	r2, #3
10005a90:	1c04      	adds	r4, r0, #0
10005a92:	4094      	lsls	r4, r2
10005a94:	1c22      	adds	r2, r4, #0
10005a96:	430a      	orrs	r2, r1
10005a98:	61da      	str	r2, [r3, #28]
  }
  else
  {
	  /*Not supposed to be here */
  }
}
10005a9a:	46bd      	mov	sp, r7
10005a9c:	b005      	add	sp, #20
10005a9e:	bd90      	pop	{r4, r7, pc}

10005aa0 <DAVE_Init>:
// @Parameters    None
//
//****************************************************************************

void DAVE_Init(void)
{
10005aa0:	b580      	push	{r7, lr}
10005aa2:	af00      	add	r7, sp, #0

//****************************************************************************
// @Initialization of APPs Init Functions
//****************************************************************************
	//  MUX configurations
	DAVE_MUX_PreInit(); 
10005aa4:	f000 f88e 	bl	10005bc4 <DAVE_MUX_PreInit>
	//  Initialization of app 'CLK002'		     
	CLK002_Init();
10005aa8:	f000 f898 	bl	10005bdc <CLK002_Init>
	 
	//  Initialization of app 'UART001'		     
	UART001_Init();
10005aac:	f7fe f85e 	bl	10003b6c <UART001_Init>
	 
	//  Initialization of app 'IO004'		     
	IO004_Init();
10005ab0:	f7ff fe26 	bl	10005700 <IO004_Init>
	 
	//  Initialization of app 'CCU4GLOBAL'		     
	CCU4GLOBAL_Init();
10005ab4:	f000 f9a6 	bl	10005e04 <CCU4GLOBAL_Init>
	 
	//  Initialization of app 'PWMSP001'		     
	PWMSP001_Init();
10005ab8:	f7fe faac 	bl	10004014 <PWMSP001_Init>
	
      
	//  MUX configurations
	DAVE_MUX_Init();	
10005abc:	f000 f802 	bl	10005ac4 <DAVE_MUX_Init>
} //  End of function DAVE_Init
10005ac0:	46bd      	mov	sp, r7
10005ac2:	bd80      	pop	{r7, pc}

10005ac4 <DAVE_MUX_Init>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
           
void DAVE_MUX_Init(void)
{  
10005ac4:	b580      	push	{r7, lr}
10005ac6:	b086      	sub	sp, #24
10005ac8:	af00      	add	r7, sp, #0
//********* MODULE USIC CONFIGURATIONS *************************	        
        
           
   /* Disable mode before configuring all USIC registers to avoid unintended edges */   
      /* Variable to store the CCR_MODE values for various USIC channels */ 
      uint32_t UsicCcrMode[6] = {0};
10005aca:	1c3b      	adds	r3, r7, #0
10005acc:	2200      	movs	r2, #0
10005ace:	601a      	str	r2, [r3, #0]
10005ad0:	3304      	adds	r3, #4
10005ad2:	2200      	movs	r2, #0
10005ad4:	601a      	str	r2, [r3, #0]
10005ad6:	3304      	adds	r3, #4
10005ad8:	2200      	movs	r2, #0
10005ada:	601a      	str	r2, [r3, #0]
10005adc:	3304      	adds	r3, #4
10005ade:	2200      	movs	r2, #0
10005ae0:	601a      	str	r2, [r3, #0]
10005ae2:	3304      	adds	r3, #4
10005ae4:	2200      	movs	r2, #0
10005ae6:	601a      	str	r2, [r3, #0]
10005ae8:	3304      	adds	r3, #4
10005aea:	2200      	movs	r2, #0
10005aec:	601a      	str	r2, [r3, #0]
10005aee:	3304      	adds	r3, #4
                
    UsicCcrMode[1] |= (uint32_t) RD_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos); 
10005af0:	1c3b      	adds	r3, r7, #0
10005af2:	685a      	ldr	r2, [r3, #4]
10005af4:	4b2c      	ldr	r3, [pc, #176]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005af6:	6c19      	ldr	r1, [r3, #64]	; 0x40
10005af8:	230f      	movs	r3, #15
10005afa:	400b      	ands	r3, r1
10005afc:	431a      	orrs	r2, r3
10005afe:	1c3b      	adds	r3, r7, #0
10005b00:	605a      	str	r2, [r3, #4]
    WR_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,0);   
10005b02:	4b29      	ldr	r3, [pc, #164]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b04:	4a28      	ldr	r2, [pc, #160]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b06:	6c12      	ldr	r2, [r2, #64]	; 0x40
10005b08:	210f      	movs	r1, #15
10005b0a:	438a      	bics	r2, r1
10005b0c:	641a      	str	r2, [r3, #64]	; 0x40
      
    						
   /*USIC 0 Channel 0 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
       						
   /*USIC 0 Channel 1 Mux Related SFR/Bitfields Configurations*/ 						         
 WR_REG(USIC0_CH1->DX0CR, USIC_CH_DX0CR_DSEL_Msk, USIC_CH_DX0CR_DSEL_Pos,6); 
10005b0e:	4b26      	ldr	r3, [pc, #152]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b10:	4a25      	ldr	r2, [pc, #148]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b12:	69d2      	ldr	r2, [r2, #28]
10005b14:	2107      	movs	r1, #7
10005b16:	438a      	bics	r2, r1
10005b18:	2106      	movs	r1, #6
10005b1a:	430a      	orrs	r2, r1
10005b1c:	61da      	str	r2, [r3, #28]
  			  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
                 
   // Data Pointer & Buffer Size for Transmitter Buffer Control  
 WR_REG(USIC0_CH1->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk, USIC_CH_TBCTR_DPTRSIZE_Pos,0x04000010);		/*    DPTR = 16,  SIZE = 4 */ 
10005b1e:	4a22      	ldr	r2, [pc, #136]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b20:	4921      	ldr	r1, [pc, #132]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b22:	2384      	movs	r3, #132	; 0x84
10005b24:	005b      	lsls	r3, r3, #1
10005b26:	58c9      	ldr	r1, [r1, r3]
10005b28:	4b20      	ldr	r3, [pc, #128]	; (10005bac <DAVE_MUX_Init+0xe8>)
10005b2a:	400b      	ands	r3, r1
10005b2c:	4920      	ldr	r1, [pc, #128]	; (10005bb0 <DAVE_MUX_Init+0xec>)
10005b2e:	4319      	orrs	r1, r3
10005b30:	2384      	movs	r3, #132	; 0x84
10005b32:	005b      	lsls	r3, r3, #1
10005b34:	50d1      	str	r1, [r2, r3]
         
  // Data Pointer & Buffer Size for Receiver Buffer Control  
 WR_REG(USIC0_CH1->RBCTR, USIC_CH_RBCTR_DPTRSIZE_Msk, USIC_CH_RBCTR_DPTRSIZE_Pos,0x04000000);		/*    DPTR = 0,  SIZE = 4 */ 
10005b36:	4a1c      	ldr	r2, [pc, #112]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b38:	491b      	ldr	r1, [pc, #108]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b3a:	2386      	movs	r3, #134	; 0x86
10005b3c:	005b      	lsls	r3, r3, #1
10005b3e:	58c9      	ldr	r1, [r1, r3]
10005b40:	4b1a      	ldr	r3, [pc, #104]	; (10005bac <DAVE_MUX_Init+0xe8>)
10005b42:	400b      	ands	r3, r1
10005b44:	2180      	movs	r1, #128	; 0x80
10005b46:	04c9      	lsls	r1, r1, #19
10005b48:	4319      	orrs	r1, r3
10005b4a:	2386      	movs	r3, #134	; 0x86
10005b4c:	005b      	lsls	r3, r3, #1
10005b4e:	50d1      	str	r1, [r2, r3]
   /*USIC 2 Channel 1 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
         
  
  /* Enable mode after configuring all USIC registers to avoid unintended edges */  
             
   WR_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,UsicCcrMode[1]);   
10005b50:	4b15      	ldr	r3, [pc, #84]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b52:	1c3a      	adds	r2, r7, #0
10005b54:	6851      	ldr	r1, [r2, #4]
10005b56:	220f      	movs	r2, #15
10005b58:	4011      	ands	r1, r2
10005b5a:	4a13      	ldr	r2, [pc, #76]	; (10005ba8 <DAVE_MUX_Init+0xe4>)
10005b5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
10005b5e:	200f      	movs	r0, #15
10005b60:	4382      	bics	r2, r0
10005b62:	430a      	orrs	r2, r1
10005b64:	641a      	str	r2, [r3, #64]	; 0x40
   	 
            	         
                                                 

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                                      
  WR_REG(PORT1->IOCR0, 0xb8U, PORT_IOCR_PC0_PCR_Pos, 0x12U);                /*P1.0 : PORT1_IOCR0_PC0_PCR and PORT1_IOCR0_PC0_OE */					   
10005b66:	4b13      	ldr	r3, [pc, #76]	; (10005bb4 <DAVE_MUX_Init+0xf0>)
10005b68:	4a12      	ldr	r2, [pc, #72]	; (10005bb4 <DAVE_MUX_Init+0xf0>)
10005b6a:	6912      	ldr	r2, [r2, #16]
10005b6c:	21b8      	movs	r1, #184	; 0xb8
10005b6e:	438a      	bics	r2, r1
10005b70:	2190      	movs	r1, #144	; 0x90
10005b72:	430a      	orrs	r2, r1
10005b74:	611a      	str	r2, [r3, #16]
					                         
  WR_REG(PORT1->IOCR0, 0xb800U, PORT_IOCR_PC1_PCR_Pos, 0x12U);                /*P1.1 : PORT1_IOCR0_PC1_PCR and PORT1_IOCR0_PC1_OE */					   
10005b76:	4b0f      	ldr	r3, [pc, #60]	; (10005bb4 <DAVE_MUX_Init+0xf0>)
10005b78:	4a0e      	ldr	r2, [pc, #56]	; (10005bb4 <DAVE_MUX_Init+0xf0>)
10005b7a:	6911      	ldr	r1, [r2, #16]
10005b7c:	4a0e      	ldr	r2, [pc, #56]	; (10005bb8 <DAVE_MUX_Init+0xf4>)
10005b7e:	400a      	ands	r2, r1
10005b80:	2190      	movs	r1, #144	; 0x90
10005b82:	0209      	lsls	r1, r1, #8
10005b84:	430a      	orrs	r2, r1
10005b86:	611a      	str	r2, [r3, #16]
					  
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS10_Msk, PORT2_PDISC_PDIS10_Pos, PORT_PDISC_PDIS0);            /*    P2.10 : PORT2_PDISC_PDIS10 */                       
10005b88:	4b0c      	ldr	r3, [pc, #48]	; (10005bbc <DAVE_MUX_Init+0xf8>)
10005b8a:	4a0c      	ldr	r2, [pc, #48]	; (10005bbc <DAVE_MUX_Init+0xf8>)
10005b8c:	6e11      	ldr	r1, [r2, #96]	; 0x60
10005b8e:	4a0c      	ldr	r2, [pc, #48]	; (10005bc0 <DAVE_MUX_Init+0xfc>)
10005b90:	400a      	ands	r2, r1
10005b92:	661a      	str	r2, [r3, #96]	; 0x60
  WR_REG(PORT2->IOCR8, 0xb80000U, PORT_IOCR_PC2_PCR_Pos, 0x17U);                /*P2.10 : PORT2_IOCR8_PC10_PCR and PORT2_IOCR8_PC10_OE */					   
10005b94:	4b09      	ldr	r3, [pc, #36]	; (10005bbc <DAVE_MUX_Init+0xf8>)
10005b96:	4a09      	ldr	r2, [pc, #36]	; (10005bbc <DAVE_MUX_Init+0xf8>)
10005b98:	6992      	ldr	r2, [r2, #24]
10005b9a:	21b8      	movs	r1, #184	; 0xb8
10005b9c:	0409      	lsls	r1, r1, #16
10005b9e:	430a      	orrs	r2, r1
10005ba0:	619a      	str	r2, [r3, #24]
					      
}
10005ba2:	46bd      	mov	sp, r7
10005ba4:	b006      	add	sp, #24
10005ba6:	bd80      	pop	{r7, pc}
10005ba8:	48000200 	.word	0x48000200
10005bac:	f8ffffc0 	.word	0xf8ffffc0
10005bb0:	04000010 	.word	0x04000010
10005bb4:	40040100 	.word	0x40040100
10005bb8:	ffff47ff 	.word	0xffff47ff
10005bbc:	40040200 	.word	0x40040200
10005bc0:	fffffbff 	.word	0xfffffbff

10005bc4 <DAVE_MUX_PreInit>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
 
void DAVE_MUX_PreInit(void)
{            
10005bc4:	b580      	push	{r7, lr}
10005bc6:	af00      	add	r7, sp, #0

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */               
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS1_Msk, PORT2_PDISC_PDIS1_Pos, PORT_PDISC_PDIS0);            /*    P2.1 : PORT2_PDISC_PDIS1 */    
10005bc8:	4b03      	ldr	r3, [pc, #12]	; (10005bd8 <DAVE_MUX_PreInit+0x14>)
10005bca:	4a03      	ldr	r2, [pc, #12]	; (10005bd8 <DAVE_MUX_PreInit+0x14>)
10005bcc:	6e12      	ldr	r2, [r2, #96]	; 0x60
10005bce:	2102      	movs	r1, #2
10005bd0:	438a      	bics	r2, r1
10005bd2:	661a      	str	r2, [r3, #96]	; 0x60
}
10005bd4:	46bd      	mov	sp, r7
10005bd6:	bd80      	pop	{r7, pc}
10005bd8:	40040200 	.word	0x40040200

10005bdc <CLK002_Init>:
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
10005bdc:	b580      	push	{r7, lr}
10005bde:	af00      	add	r7, sp, #0
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
10005be0:	4b0a      	ldr	r3, [pc, #40]	; (10005c0c <CLK002_Init+0x30>)
10005be2:	22c0      	movs	r2, #192	; 0xc0
10005be4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
10005be6:	46c0      	nop			; (mov r8, r8)
10005be8:	4b08      	ldr	r3, [pc, #32]	; (10005c0c <CLK002_Init+0x30>)
10005bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10005bec:	2304      	movs	r3, #4
10005bee:	4013      	ands	r3, r2
10005bf0:	d1fa      	bne.n	10005be8 <CLK002_Init+0xc>
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
10005bf2:	4b07      	ldr	r3, [pc, #28]	; (10005c10 <CLK002_Init+0x34>)
10005bf4:	4a06      	ldr	r2, [pc, #24]	; (10005c10 <CLK002_Init+0x34>)
10005bf6:	6812      	ldr	r2, [r2, #0]
10005bf8:	601a      	str	r2, [r3, #0]
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();
10005bfa:	f000 f811 	bl	10005c20 <CLK002_lDivUpdate>

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
10005bfe:	4b03      	ldr	r3, [pc, #12]	; (10005c0c <CLK002_Init+0x30>)
10005c00:	22c3      	movs	r2, #195	; 0xc3
10005c02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update the clock variable */
    SystemCoreClockUpdate();
10005c04:	f7fd fab4 	bl	10003170 <SystemCoreClockUpdate>
}
10005c08:	46bd      	mov	sp, r7
10005c0a:	bd80      	pop	{r7, pc}
10005c0c:	40010000 	.word	0x40010000
10005c10:	40010300 	.word	0x40010300

10005c14 <AllowClkInitByStartup>:
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
10005c14:	b580      	push	{r7, lr}
10005c16:	af00      	add	r7, sp, #0
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
10005c18:	2300      	movs	r3, #0
}
10005c1a:	1c18      	adds	r0, r3, #0
10005c1c:	46bd      	mov	sp, r7
10005c1e:	bd80      	pop	{r7, pc}

10005c20 <CLK002_lDivUpdate>:
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
10005c20:	b580      	push	{r7, lr}
10005c22:	b084      	sub	sp, #16
10005c24:	af00      	add	r7, sp, #0
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
10005c26:	2300      	movs	r3, #0
10005c28:	60fb      	str	r3, [r7, #12]
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
10005c2a:	2300      	movs	r3, #0
10005c2c:	60bb      	str	r3, [r7, #8]
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10005c2e:	4b18      	ldr	r3, [pc, #96]	; (10005c90 <CLK002_lDivUpdate+0x70>)
10005c30:	681a      	ldr	r2, [r3, #0]
10005c32:	23ff      	movs	r3, #255	; 0xff
10005c34:	021b      	lsls	r3, r3, #8
10005c36:	4013      	ands	r3, r2
10005c38:	0a1b      	lsrs	r3, r3, #8
10005c3a:	60fb      	str	r3, [r7, #12]
 lTargetidiv = CLK002_CLKCR_IDIV;
10005c3c:	2301      	movs	r3, #1
10005c3e:	60bb      	str	r3, [r7, #8]

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
10005c40:	4b13      	ldr	r3, [pc, #76]	; (10005c90 <CLK002_lDivUpdate+0x70>)
10005c42:	681b      	ldr	r3, [r3, #0]
10005c44:	607b      	str	r3, [r7, #4]
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
10005c46:	687b      	ldr	r3, [r7, #4]
10005c48:	22ff      	movs	r2, #255	; 0xff
10005c4a:	4393      	bics	r3, r2
10005c4c:	607b      	str	r3, [r7, #4]
  SCU_CLK->CLKCR = lCLKCR;
10005c4e:	4b10      	ldr	r3, [pc, #64]	; (10005c90 <CLK002_lDivUpdate+0x70>)
10005c50:	687a      	ldr	r2, [r7, #4]
10005c52:	601a      	str	r2, [r3, #0]

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10005c54:	4b0e      	ldr	r3, [pc, #56]	; (10005c90 <CLK002_lDivUpdate+0x70>)
10005c56:	4a0e      	ldr	r2, [pc, #56]	; (10005c90 <CLK002_lDivUpdate+0x70>)
10005c58:	6812      	ldr	r2, [r2, #0]
10005c5a:	490e      	ldr	r1, [pc, #56]	; (10005c94 <CLK002_lDivUpdate+0x74>)
10005c5c:	430a      	orrs	r2, r1
10005c5e:	601a      	str	r2, [r3, #0]
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10005c60:	46c0      	nop			; (mov r8, r8)
10005c62:	4b0b      	ldr	r3, [pc, #44]	; (10005c90 <CLK002_lDivUpdate+0x70>)
10005c64:	681a      	ldr	r2, [r3, #0]
10005c66:	2380      	movs	r3, #128	; 0x80
10005c68:	05db      	lsls	r3, r3, #23
10005c6a:	4013      	ands	r3, r2
10005c6c:	d1f9      	bne.n	10005c62 <CLK002_lDivUpdate+0x42>
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
10005c6e:	68fa      	ldr	r2, [r7, #12]
10005c70:	68bb      	ldr	r3, [r7, #8]
10005c72:	429a      	cmp	r2, r3
10005c74:	d008      	beq.n	10005c88 <CLK002_lDivUpdate+0x68>
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
10005c76:	68fa      	ldr	r2, [r7, #12]
10005c78:	68bb      	ldr	r3, [r7, #8]
10005c7a:	429a      	cmp	r2, r3
10005c7c:	d202      	bcs.n	10005c84 <CLK002_lDivUpdate+0x64>
  {
    CLK002_lFrequencyDownScaling();
10005c7e:	f000 f869 	bl	10005d54 <CLK002_lFrequencyDownScaling>
10005c82:	e001      	b.n	10005c88 <CLK002_lDivUpdate+0x68>
  }
  else
   {
     CLK002_lFrequencyUpScaling();
10005c84:	f000 f808 	bl	10005c98 <CLK002_lFrequencyUpScaling>
   }

}
10005c88:	46bd      	mov	sp, r7
10005c8a:	b004      	add	sp, #16
10005c8c:	bd80      	pop	{r7, pc}
10005c8e:	46c0      	nop			; (mov r8, r8)
10005c90:	40010300 	.word	0x40010300
10005c94:	3ff00000 	.word	0x3ff00000

10005c98 <CLK002_lFrequencyUpScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
10005c98:	b580      	push	{r7, lr}
10005c9a:	b084      	sub	sp, #16
10005c9c:	af00      	add	r7, sp, #0
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10005c9e:	4b2a      	ldr	r3, [pc, #168]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005ca0:	681a      	ldr	r2, [r3, #0]
10005ca2:	23ff      	movs	r3, #255	; 0xff
10005ca4:	021b      	lsls	r3, r3, #8
10005ca6:	4013      	ands	r3, r2
10005ca8:	0a1b      	lsrs	r3, r3, #8
10005caa:	60fb      	str	r3, [r7, #12]
  TargetIdiv = CLK002_CLKCR_IDIV;
10005cac:	2301      	movs	r3, #1
10005cae:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
10005cb0:	68bb      	ldr	r3, [r7, #8]
10005cb2:	009a      	lsls	r2, r3, #2
10005cb4:	68fb      	ldr	r3, [r7, #12]
10005cb6:	429a      	cmp	r2, r3
10005cb8:	d224      	bcs.n	10005d04 <CLK002_lFrequencyUpScaling+0x6c>
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
10005cba:	68fb      	ldr	r3, [r7, #12]
10005cbc:	2203      	movs	r2, #3
10005cbe:	4393      	bics	r3, r2
10005cc0:	3304      	adds	r3, #4
10005cc2:	60fb      	str	r3, [r7, #12]
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
10005cc4:	68fb      	ldr	r3, [r7, #12]
10005cc6:	089b      	lsrs	r3, r3, #2
10005cc8:	60fb      	str	r3, [r7, #12]
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
10005cca:	4b1f      	ldr	r3, [pc, #124]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005ccc:	681b      	ldr	r3, [r3, #0]
10005cce:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10005cd0:	68fb      	ldr	r3, [r7, #12]
10005cd2:	021b      	lsls	r3, r3, #8
10005cd4:	041b      	lsls	r3, r3, #16
10005cd6:	0c1a      	lsrs	r2, r3, #16
10005cd8:	6879      	ldr	r1, [r7, #4]
10005cda:	4b1c      	ldr	r3, [pc, #112]	; (10005d4c <CLK002_lFrequencyUpScaling+0xb4>)
10005cdc:	400b      	ands	r3, r1
10005cde:	4313      	orrs	r3, r2
10005ce0:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10005ce2:	4b19      	ldr	r3, [pc, #100]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005ce4:	687a      	ldr	r2, [r7, #4]
10005ce6:	601a      	str	r2, [r3, #0]

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10005ce8:	4b17      	ldr	r3, [pc, #92]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005cea:	4a17      	ldr	r2, [pc, #92]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005cec:	6812      	ldr	r2, [r2, #0]
10005cee:	4918      	ldr	r1, [pc, #96]	; (10005d50 <CLK002_lFrequencyUpScaling+0xb8>)
10005cf0:	430a      	orrs	r2, r1
10005cf2:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10005cf4:	46c0      	nop			; (mov r8, r8)
10005cf6:	4b14      	ldr	r3, [pc, #80]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005cf8:	681a      	ldr	r2, [r3, #0]
10005cfa:	2380      	movs	r3, #128	; 0x80
10005cfc:	05db      	lsls	r3, r3, #23
10005cfe:	4013      	ands	r3, r2
10005d00:	d1f9      	bne.n	10005cf6 <CLK002_lFrequencyUpScaling+0x5e>
10005d02:	e01c      	b.n	10005d3e <CLK002_lFrequencyUpScaling+0xa6>
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
10005d04:	4b10      	ldr	r3, [pc, #64]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005d06:	681b      	ldr	r3, [r3, #0]
10005d08:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10005d0a:	68bb      	ldr	r3, [r7, #8]
10005d0c:	021b      	lsls	r3, r3, #8
10005d0e:	041b      	lsls	r3, r3, #16
10005d10:	0c1a      	lsrs	r2, r3, #16
10005d12:	6879      	ldr	r1, [r7, #4]
10005d14:	4b0d      	ldr	r3, [pc, #52]	; (10005d4c <CLK002_lFrequencyUpScaling+0xb4>)
10005d16:	400b      	ands	r3, r1
10005d18:	4313      	orrs	r3, r2
10005d1a:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10005d1c:	4b0a      	ldr	r3, [pc, #40]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005d1e:	687a      	ldr	r2, [r7, #4]
10005d20:	601a      	str	r2, [r3, #0]
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10005d22:	4b09      	ldr	r3, [pc, #36]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005d24:	4a08      	ldr	r2, [pc, #32]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005d26:	6812      	ldr	r2, [r2, #0]
10005d28:	4909      	ldr	r1, [pc, #36]	; (10005d50 <CLK002_lFrequencyUpScaling+0xb8>)
10005d2a:	430a      	orrs	r2, r1
10005d2c:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10005d2e:	46c0      	nop			; (mov r8, r8)
10005d30:	4b05      	ldr	r3, [pc, #20]	; (10005d48 <CLK002_lFrequencyUpScaling+0xb0>)
10005d32:	681a      	ldr	r2, [r3, #0]
10005d34:	2380      	movs	r3, #128	; 0x80
10005d36:	05db      	lsls	r3, r3, #23
10005d38:	4013      	ands	r3, r2
10005d3a:	d1f9      	bne.n	10005d30 <CLK002_lFrequencyUpScaling+0x98>
        {
            ;
        }
        break;
10005d3c:	e000      	b.n	10005d40 <CLK002_lFrequencyUpScaling+0xa8>
    }

  }
10005d3e:	e7b7      	b.n	10005cb0 <CLK002_lFrequencyUpScaling+0x18>

}
10005d40:	46bd      	mov	sp, r7
10005d42:	b004      	add	sp, #16
10005d44:	bd80      	pop	{r7, pc}
10005d46:	46c0      	nop			; (mov r8, r8)
10005d48:	40010300 	.word	0x40010300
10005d4c:	ffff00ff 	.word	0xffff00ff
10005d50:	3ff00000 	.word	0x3ff00000

10005d54 <CLK002_lFrequencyDownScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
10005d54:	b580      	push	{r7, lr}
10005d56:	b084      	sub	sp, #16
10005d58:	af00      	add	r7, sp, #0
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10005d5a:	4b27      	ldr	r3, [pc, #156]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005d5c:	681a      	ldr	r2, [r3, #0]
10005d5e:	23ff      	movs	r3, #255	; 0xff
10005d60:	021b      	lsls	r3, r3, #8
10005d62:	4013      	ands	r3, r2
10005d64:	0a1b      	lsrs	r3, r3, #8
10005d66:	60fb      	str	r3, [r7, #12]
    TargetIdiv = CLK002_CLKCR_IDIV;
10005d68:	2301      	movs	r3, #1
10005d6a:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
10005d6c:	68fb      	ldr	r3, [r7, #12]
10005d6e:	009a      	lsls	r2, r3, #2
10005d70:	68bb      	ldr	r3, [r7, #8]
10005d72:	429a      	cmp	r2, r3
10005d74:	d21f      	bcs.n	10005db6 <CLK002_lFrequencyDownScaling+0x62>
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
10005d76:	68fb      	ldr	r3, [r7, #12]
10005d78:	009b      	lsls	r3, r3, #2
10005d7a:	60fb      	str	r3, [r7, #12]
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
10005d7c:	4b1e      	ldr	r3, [pc, #120]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005d7e:	681b      	ldr	r3, [r3, #0]
10005d80:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10005d82:	68fb      	ldr	r3, [r7, #12]
10005d84:	021b      	lsls	r3, r3, #8
10005d86:	041b      	lsls	r3, r3, #16
10005d88:	0c1a      	lsrs	r2, r3, #16
10005d8a:	6879      	ldr	r1, [r7, #4]
10005d8c:	4b1b      	ldr	r3, [pc, #108]	; (10005dfc <CLK002_lFrequencyDownScaling+0xa8>)
10005d8e:	400b      	ands	r3, r1
10005d90:	4313      	orrs	r3, r2
10005d92:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10005d94:	4b18      	ldr	r3, [pc, #96]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005d96:	687a      	ldr	r2, [r7, #4]
10005d98:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10005d9a:	4b17      	ldr	r3, [pc, #92]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005d9c:	4a16      	ldr	r2, [pc, #88]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005d9e:	6812      	ldr	r2, [r2, #0]
10005da0:	4917      	ldr	r1, [pc, #92]	; (10005e00 <CLK002_lFrequencyDownScaling+0xac>)
10005da2:	430a      	orrs	r2, r1
10005da4:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10005da6:	46c0      	nop			; (mov r8, r8)
10005da8:	4b13      	ldr	r3, [pc, #76]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005daa:	681a      	ldr	r2, [r3, #0]
10005dac:	2380      	movs	r3, #128	; 0x80
10005dae:	05db      	lsls	r3, r3, #23
10005db0:	4013      	ands	r3, r2
10005db2:	d1f9      	bne.n	10005da8 <CLK002_lFrequencyDownScaling+0x54>
10005db4:	e01c      	b.n	10005df0 <CLK002_lFrequencyDownScaling+0x9c>
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
10005db6:	4b10      	ldr	r3, [pc, #64]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005db8:	681b      	ldr	r3, [r3, #0]
10005dba:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10005dbc:	68bb      	ldr	r3, [r7, #8]
10005dbe:	021b      	lsls	r3, r3, #8
10005dc0:	041b      	lsls	r3, r3, #16
10005dc2:	0c1a      	lsrs	r2, r3, #16
10005dc4:	6879      	ldr	r1, [r7, #4]
10005dc6:	4b0d      	ldr	r3, [pc, #52]	; (10005dfc <CLK002_lFrequencyDownScaling+0xa8>)
10005dc8:	400b      	ands	r3, r1
10005dca:	4313      	orrs	r3, r2
10005dcc:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10005dce:	4b0a      	ldr	r3, [pc, #40]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005dd0:	687a      	ldr	r2, [r7, #4]
10005dd2:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10005dd4:	4b08      	ldr	r3, [pc, #32]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005dd6:	4a08      	ldr	r2, [pc, #32]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005dd8:	6812      	ldr	r2, [r2, #0]
10005dda:	4909      	ldr	r1, [pc, #36]	; (10005e00 <CLK002_lFrequencyDownScaling+0xac>)
10005ddc:	430a      	orrs	r2, r1
10005dde:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10005de0:	46c0      	nop			; (mov r8, r8)
10005de2:	4b05      	ldr	r3, [pc, #20]	; (10005df8 <CLK002_lFrequencyDownScaling+0xa4>)
10005de4:	681a      	ldr	r2, [r3, #0]
10005de6:	2380      	movs	r3, #128	; 0x80
10005de8:	05db      	lsls	r3, r3, #23
10005dea:	4013      	ands	r3, r2
10005dec:	d1f9      	bne.n	10005de2 <CLK002_lFrequencyDownScaling+0x8e>
            {
                ;
            }
             break;
10005dee:	e000      	b.n	10005df2 <CLK002_lFrequencyDownScaling+0x9e>
        }

	  }
10005df0:	e7bc      	b.n	10005d6c <CLK002_lFrequencyDownScaling+0x18>
}
10005df2:	46bd      	mov	sp, r7
10005df4:	b004      	add	sp, #16
10005df6:	bd80      	pop	{r7, pc}
10005df8:	40010300 	.word	0x40010300
10005dfc:	ffff00ff 	.word	0xffff00ff
10005e00:	3ff00000 	.word	0x3ff00000

10005e04 <CCU4GLOBAL_Init>:
/**
 * @cond INTERNAL_DOCS
 */

void CCU4GLOBAL_Init(void)
{
10005e04:	b580      	push	{r7, lr}
10005e06:	b082      	sub	sp, #8
10005e08:	af00      	add	r7, sp, #0
  static uint32_t CCU4InitCalled = (uint32_t)0U;
  uint32_t Count = 0U;
10005e0a:	2300      	movs	r3, #0
10005e0c:	607b      	str	r3, [r7, #4]
  
  if(CCU4InitCalled == (uint32_t)0U)
10005e0e:	4b0d      	ldr	r3, [pc, #52]	; (10005e44 <CCU4GLOBAL_Init+0x40>)
10005e10:	681b      	ldr	r3, [r3, #0]
10005e12:	2b00      	cmp	r3, #0
10005e14:	d112      	bne.n	10005e3c <CCU4GLOBAL_Init+0x38>
  {
    /*
     * Each instance of the App brings the module out of reset and enable 
     * the prescalar clock
     */
    for (Count = 0U; Count<(uint32_t)CCU4GLOBAL_NUM_INSTANCES; Count++)
10005e16:	2300      	movs	r3, #0
10005e18:	607b      	str	r3, [r7, #4]
10005e1a:	e009      	b.n	10005e30 <CCU4GLOBAL_Init+0x2c>
    {
  	  CCU4Global_lInit(CCU4Global_HandleArray[Count]);
10005e1c:	4b0a      	ldr	r3, [pc, #40]	; (10005e48 <CCU4GLOBAL_Init+0x44>)
10005e1e:	687a      	ldr	r2, [r7, #4]
10005e20:	0092      	lsls	r2, r2, #2
10005e22:	58d3      	ldr	r3, [r2, r3]
10005e24:	1c18      	adds	r0, r3, #0
10005e26:	f000 f811 	bl	10005e4c <CCU4Global_lInit>
  {
    /*
     * Each instance of the App brings the module out of reset and enable 
     * the prescalar clock
     */
    for (Count = 0U; Count<(uint32_t)CCU4GLOBAL_NUM_INSTANCES; Count++)
10005e2a:	687b      	ldr	r3, [r7, #4]
10005e2c:	3301      	adds	r3, #1
10005e2e:	607b      	str	r3, [r7, #4]
10005e30:	687b      	ldr	r3, [r7, #4]
10005e32:	2b00      	cmp	r3, #0
10005e34:	d0f2      	beq.n	10005e1c <CCU4GLOBAL_Init+0x18>
    {
  	  CCU4Global_lInit(CCU4Global_HandleArray[Count]);
    }

    CCU4InitCalled = (uint32_t)1;
10005e36:	4b03      	ldr	r3, [pc, #12]	; (10005e44 <CCU4GLOBAL_Init+0x40>)
10005e38:	2201      	movs	r2, #1
10005e3a:	601a      	str	r2, [r3, #0]
  }
}
10005e3c:	46bd      	mov	sp, r7
10005e3e:	b002      	add	sp, #8
10005e40:	bd80      	pop	{r7, pc}
10005e42:	46c0      	nop			; (mov r8, r8)
10005e44:	20000cb8 	.word	0x20000cb8
10005e48:	200020a4 	.word	0x200020a4

10005e4c <CCU4Global_lInit>:

static void CCU4Global_lInit(const CCU4Global_HandleType * Handle)
{
10005e4c:	b590      	push	{r4, r7, lr}
10005e4e:	b083      	sub	sp, #12
10005e50:	af00      	add	r7, sp, #0
10005e52:	6078      	str	r0, [r7, #4]
    if( Handle->KernelNumber <= 2 )
10005e54:	687b      	ldr	r3, [r7, #4]
10005e56:	685b      	ldr	r3, [r3, #4]
10005e58:	2b02      	cmp	r3, #2
10005e5a:	d823      	bhi.n	10005ea4 <CCU4Global_lInit+0x58>
	{
		/* Disables the gating for CCU4 kernel */      
		/*This is applicable for XMC4400,XMC4200 and XMC1xxx Devices*/
		#if (UC_FAMILY == XMC1 )
			if (!((uint32_t)SCU_CLK->CGATCLR0 & Handle->ClockGating))
10005e5c:	4b17      	ldr	r3, [pc, #92]	; (10005ebc <CCU4Global_lInit+0x70>)
10005e5e:	691a      	ldr	r2, [r3, #16]
10005e60:	687b      	ldr	r3, [r7, #4]
10005e62:	689b      	ldr	r3, [r3, #8]
10005e64:	4013      	ands	r3, r2
10005e66:	d11d      	bne.n	10005ea4 <CCU4Global_lInit+0x58>
			{ 
				SCU_GENERAL->PASSWD = 0x000000C0UL;
10005e68:	4b15      	ldr	r3, [pc, #84]	; (10005ec0 <CCU4Global_lInit+0x74>)
10005e6a:	22c0      	movs	r2, #192	; 0xc0
10005e6c:	625a      	str	r2, [r3, #36]	; 0x24
				WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, 
10005e6e:	4b13      	ldr	r3, [pc, #76]	; (10005ebc <CCU4Global_lInit+0x70>)
10005e70:	4a12      	ldr	r2, [pc, #72]	; (10005ebc <CCU4Global_lInit+0x70>)
10005e72:	6812      	ldr	r2, [r2, #0]
10005e74:	4913      	ldr	r1, [pc, #76]	; (10005ec4 <CCU4Global_lInit+0x78>)
10005e76:	430a      	orrs	r2, r1
10005e78:	601a      	str	r2, [r3, #0]
					   SCU_CLK_CLKCR_CNTADJ_Pos,CCU4GLOBAL_DELAYCNT);
				
				SET_BIT(SCU_CLK->CGATCLR0, Handle->ClockGating);
10005e7a:	4b10      	ldr	r3, [pc, #64]	; (10005ebc <CCU4Global_lInit+0x70>)
10005e7c:	4a0f      	ldr	r2, [pc, #60]	; (10005ebc <CCU4Global_lInit+0x70>)
10005e7e:	6911      	ldr	r1, [r2, #16]
10005e80:	687a      	ldr	r2, [r7, #4]
10005e82:	6892      	ldr	r2, [r2, #8]
10005e84:	2001      	movs	r0, #1
10005e86:	1c04      	adds	r4, r0, #0
10005e88:	4094      	lsls	r4, r2
10005e8a:	1c22      	adds	r2, r4, #0
10005e8c:	430a      	orrs	r2, r1
10005e8e:	611a      	str	r2, [r3, #16]
				while ((uint32_t)SCU_CLK->CLKCR & 
10005e90:	46c0      	nop			; (mov r8, r8)
10005e92:	4b0a      	ldr	r3, [pc, #40]	; (10005ebc <CCU4Global_lInit+0x70>)
10005e94:	681a      	ldr	r2, [r3, #0]
10005e96:	2380      	movs	r3, #128	; 0x80
10005e98:	05db      	lsls	r3, r3, #23
10005e9a:	4013      	ands	r3, r2
10005e9c:	d1f9      	bne.n	10005e92 <CCU4Global_lInit+0x46>
					   (uint32_t)SCU_CLK_CLKCR_VDDC2LOW_Msk)
				{
					;
				}
				SCU_GENERAL->PASSWD = 0x000000C3UL;
10005e9e:	4b08      	ldr	r3, [pc, #32]	; (10005ec0 <CCU4Global_lInit+0x74>)
10005ea0:	22c3      	movs	r2, #195	; 0xc3
10005ea2:	625a      	str	r2, [r3, #36]	; 0x24
		RESET001_DeassertReset(Handle->PeripheralReset);
	#endif    

		
    /* Sets Run bit of the Prescalar */
    SET_BIT(Handle->CC4yKernRegsPtr->GIDLC,CCU4_GIDLC_SPRB_Pos);
10005ea4:	687b      	ldr	r3, [r7, #4]
10005ea6:	681b      	ldr	r3, [r3, #0]
10005ea8:	687a      	ldr	r2, [r7, #4]
10005eaa:	6812      	ldr	r2, [r2, #0]
10005eac:	68d2      	ldr	r2, [r2, #12]
10005eae:	2180      	movs	r1, #128	; 0x80
10005eb0:	0049      	lsls	r1, r1, #1
10005eb2:	430a      	orrs	r2, r1
10005eb4:	60da      	str	r2, [r3, #12]

}
10005eb6:	46bd      	mov	sp, r7
10005eb8:	b003      	add	sp, #12
10005eba:	bd90      	pop	{r4, r7, pc}
10005ebc:	40010300 	.word	0x40010300
10005ec0:	40010000 	.word	0x40010000
10005ec4:	3ff00000 	.word	0x3ff00000

10005ec8 <etLogger_logError>:
#include "debugging/etLogger.h"

#include <stdarg.h>


void etLogger_logError(const char* message){
10005ec8:	b580      	push	{r7, lr}
10005eca:	b082      	sub	sp, #8
10005ecc:	af00      	add	r7, sp, #0
10005ece:	6078      	str	r0, [r7, #4]
#ifdef ET_LOGGER_ACTIVATE
	printf("ERROR:   %s\n", message);
#endif
}
10005ed0:	46bd      	mov	sp, r7
10005ed2:	b002      	add	sp, #8
10005ed4:	bd80      	pop	{r7, pc}
10005ed6:	46c0      	nop			; (mov r8, r8)

10005ed8 <etLogger_logWarning>:

void etLogger_logWarning(const char* message){
10005ed8:	b580      	push	{r7, lr}
10005eda:	b082      	sub	sp, #8
10005edc:	af00      	add	r7, sp, #0
10005ede:	6078      	str	r0, [r7, #4]
#ifdef ET_LOGGER_ACTIVATE
	printf("WARNING: %s\n", message);
#endif
}
10005ee0:	46bd      	mov	sp, r7
10005ee2:	b002      	add	sp, #8
10005ee4:	bd80      	pop	{r7, pc}
10005ee6:	46c0      	nop			; (mov r8, r8)

10005ee8 <etLogger_logInfo>:

void etLogger_logInfo(const char* message){
10005ee8:	b580      	push	{r7, lr}
10005eea:	b082      	sub	sp, #8
10005eec:	af00      	add	r7, sp, #0
10005eee:	6078      	str	r0, [r7, #4]
#ifdef ET_LOGGER_ACTIVATE
	printf("INFO:    %s\n", message);
#endif
}
10005ef0:	46bd      	mov	sp, r7
10005ef2:	b002      	add	sp, #8
10005ef4:	bd80      	pop	{r7, pc}
10005ef6:	46c0      	nop			; (mov r8, r8)

10005ef8 <etLogger_logErrorF>:

void etLogger_logErrorF(const char* format, ... ){
10005ef8:	b40f      	push	{r0, r1, r2, r3}
10005efa:	b580      	push	{r7, lr}
10005efc:	af00      	add	r7, sp, #0
	va_start( arglist, format );
	vprintf( format, arglist );
	va_end( arglist );
	printf("\n");
#endif
}
10005efe:	46bd      	mov	sp, r7
10005f00:	bc80      	pop	{r7}
10005f02:	bc08      	pop	{r3}
10005f04:	b004      	add	sp, #16
10005f06:	4718      	bx	r3

10005f08 <etLogger_logWarningF>:

void etLogger_logWarningF(const char* format, ... ){
10005f08:	b40f      	push	{r0, r1, r2, r3}
10005f0a:	b580      	push	{r7, lr}
10005f0c:	af00      	add	r7, sp, #0
	va_start( arglist, format );
	vprintf( format, arglist );
	va_end( arglist );
	printf("\n");
#endif
}
10005f0e:	46bd      	mov	sp, r7
10005f10:	bc80      	pop	{r7}
10005f12:	bc08      	pop	{r3}
10005f14:	b004      	add	sp, #16
10005f16:	4718      	bx	r3

10005f18 <etLogger_logInfoF>:

void etLogger_logInfoF(const char* format, ... ){
10005f18:	b40f      	push	{r0, r1, r2, r3}
10005f1a:	b580      	push	{r7, lr}
10005f1c:	af00      	add	r7, sp, #0
	va_start( arglist, format );
	vprintf( format, arglist );
	va_end( arglist );
	printf("\n");
#endif
}
10005f1e:	46bd      	mov	sp, r7
10005f20:	bc80      	pop	{r7}
10005f22:	bc08      	pop	{r3}
10005f24:	b004      	add	sp, #16
10005f26:	4718      	bx	r3

10005f28 <etLogger_fopen>:

etFileHandle etLogger_fopen(const char* filename, const char* mode){
10005f28:	b580      	push	{r7, lr}
10005f2a:	b082      	sub	sp, #8
10005f2c:	af00      	add	r7, sp, #0
10005f2e:	6078      	str	r0, [r7, #4]
10005f30:	6039      	str	r1, [r7, #0]
#ifdef ET_LOGGER_ACTIVATE
	return( fopen(filename, mode) );
#else
	return (0);
10005f32:	2300      	movs	r3, #0
#endif
}
10005f34:	1c18      	adds	r0, r3, #0
10005f36:	46bd      	mov	sp, r7
10005f38:	b002      	add	sp, #8
10005f3a:	bd80      	pop	{r7, pc}

10005f3c <etLogger_fclose>:

int etLogger_fclose(etFileHandle file){
10005f3c:	b580      	push	{r7, lr}
10005f3e:	b082      	sub	sp, #8
10005f40:	af00      	add	r7, sp, #0
10005f42:	6078      	str	r0, [r7, #4]
#ifdef ET_LOGGER_ACTIVATE
	return( fclose(file) );
#else
	return(0);
10005f44:	2300      	movs	r3, #0
#endif
}
10005f46:	1c18      	adds	r0, r3, #0
10005f48:	46bd      	mov	sp, r7
10005f4a:	b002      	add	sp, #8
10005f4c:	bd80      	pop	{r7, pc}
10005f4e:	46c0      	nop			; (mov r8, r8)

10005f50 <etLogger_fprintf>:

void etLogger_fprintf(etFileHandle file, const char* format, ... ){
10005f50:	b40e      	push	{r1, r2, r3}
10005f52:	b580      	push	{r7, lr}
10005f54:	b083      	sub	sp, #12
10005f56:	af00      	add	r7, sp, #0
10005f58:	6078      	str	r0, [r7, #4]
	va_list arglist;
	va_start( arglist, format );
	vfprintf(file, format, arglist );
	va_end( arglist );
#endif
}
10005f5a:	46bd      	mov	sp, r7
10005f5c:	b003      	add	sp, #12
10005f5e:	bc80      	pop	{r7}
10005f60:	bc08      	pop	{r3}
10005f62:	b003      	add	sp, #12
10005f64:	4718      	bx	r3
10005f66:	46c0      	nop			; (mov r8, r8)

10005f68 <etUserEntry>:


/* implemenatation for eTrice interfaces*/


void etUserEntry(void){
10005f68:	b580      	push	{r7, lr}
10005f6a:	af00      	add	r7, sp, #0
	initHw();
10005f6c:	f002 fb54 	bl	10008618 <initHw>
}
10005f70:	46bd      	mov	sp, r7
10005f72:	bd80      	pop	{r7, pc}

10005f74 <etUserPreRun>:

void etUserPreRun(void){
10005f74:	b580      	push	{r7, lr}
10005f76:	af00      	add	r7, sp, #0

	/* Start the scheduler. */
	vTaskStartScheduler();
10005f78:	f000 fedc 	bl	10006d34 <vTaskStartScheduler>
}
10005f7c:	46bd      	mov	sp, r7
10005f7e:	bd80      	pop	{r7, pc}

10005f80 <etUserPostRun>:

void etUserPostRun(void){ }
10005f80:	b580      	push	{r7, lr}
10005f82:	af00      	add	r7, sp, #0
10005f84:	46bd      	mov	sp, r7
10005f86:	bd80      	pop	{r7, pc}

10005f88 <etUserExit>:
void etUserExit(void){ }
10005f88:	b580      	push	{r7, lr}
10005f8a:	af00      	add	r7, sp, #0
10005f8c:	46bd      	mov	sp, r7
10005f8e:	bd80      	pop	{r7, pc}

10005f90 <etTime_init>:

#include "osal/etTime.h"

etTime targetTime;

void etTime_init(void){
10005f90:	b580      	push	{r7, lr}
10005f92:	af00      	add	r7, sp, #0
	targetTime.nSec=0;
10005f94:	4b03      	ldr	r3, [pc, #12]	; (10005fa4 <etTime_init+0x14>)
10005f96:	2200      	movs	r2, #0
10005f98:	605a      	str	r2, [r3, #4]
	targetTime.sec=0;
10005f9a:	4b02      	ldr	r3, [pc, #8]	; (10005fa4 <etTime_init+0x14>)
10005f9c:	2200      	movs	r2, #0
10005f9e:	601a      	str	r2, [r3, #0]
}
10005fa0:	46bd      	mov	sp, r7
10005fa2:	bd80      	pop	{r7, pc}
10005fa4:	20001fe4 	.word	0x20001fe4

10005fa8 <getTimeFromTarget>:


void getTimeFromTarget(etTime *t) {
10005fa8:	b580      	push	{r7, lr}
10005faa:	b082      	sub	sp, #8
10005fac:	af00      	add	r7, sp, #0
10005fae:	6078      	str	r0, [r7, #4]
	portENTER_CRITICAL();
10005fb0:	f002 fa6e 	bl	10008490 <vPortEnterCritical>
	*t = targetTime;
10005fb4:	687b      	ldr	r3, [r7, #4]
10005fb6:	4a04      	ldr	r2, [pc, #16]	; (10005fc8 <getTimeFromTarget+0x20>)
10005fb8:	ca03      	ldmia	r2!, {r0, r1}
10005fba:	c303      	stmia	r3!, {r0, r1}
	portEXIT_CRITICAL();
10005fbc:	f002 fa78 	bl	100084b0 <vPortExitCritical>
}
10005fc0:	46bd      	mov	sp, r7
10005fc2:	b002      	add	sp, #8
10005fc4:	bd80      	pop	{r7, pc}
10005fc6:	46c0      	nop			; (mov r8, r8)
10005fc8:	20001fe4 	.word	0x20001fe4

10005fcc <vApplicationTickHook>:

void vApplicationTickHook(void){
10005fcc:	b580      	push	{r7, lr}
10005fce:	af00      	add	r7, sp, #0
	/* Tick from FreeRTOS is 10ms */
	targetTime.nSec += (1000000000UL / configTICK_RATE_HZ);
10005fd0:	4b0d      	ldr	r3, [pc, #52]	; (10006008 <vApplicationTickHook+0x3c>)
10005fd2:	685b      	ldr	r3, [r3, #4]
10005fd4:	4a0d      	ldr	r2, [pc, #52]	; (1000600c <vApplicationTickHook+0x40>)
10005fd6:	189b      	adds	r3, r3, r2
10005fd8:	1c1a      	adds	r2, r3, #0
10005fda:	4b0b      	ldr	r3, [pc, #44]	; (10006008 <vApplicationTickHook+0x3c>)
10005fdc:	605a      	str	r2, [r3, #4]
	if (targetTime.nSec >= 1000000000UL) {
10005fde:	4b0a      	ldr	r3, [pc, #40]	; (10006008 <vApplicationTickHook+0x3c>)
10005fe0:	685b      	ldr	r3, [r3, #4]
10005fe2:	1c1a      	adds	r2, r3, #0
10005fe4:	4b0a      	ldr	r3, [pc, #40]	; (10006010 <vApplicationTickHook+0x44>)
10005fe6:	429a      	cmp	r2, r3
10005fe8:	d90b      	bls.n	10006002 <vApplicationTickHook+0x36>
		targetTime.nSec -= 1000000000UL;
10005fea:	4b07      	ldr	r3, [pc, #28]	; (10006008 <vApplicationTickHook+0x3c>)
10005fec:	685b      	ldr	r3, [r3, #4]
10005fee:	4a09      	ldr	r2, [pc, #36]	; (10006014 <vApplicationTickHook+0x48>)
10005ff0:	189b      	adds	r3, r3, r2
10005ff2:	1c1a      	adds	r2, r3, #0
10005ff4:	4b04      	ldr	r3, [pc, #16]	; (10006008 <vApplicationTickHook+0x3c>)
10005ff6:	605a      	str	r2, [r3, #4]
		targetTime.sec++;
10005ff8:	4b03      	ldr	r3, [pc, #12]	; (10006008 <vApplicationTickHook+0x3c>)
10005ffa:	681b      	ldr	r3, [r3, #0]
10005ffc:	1c5a      	adds	r2, r3, #1
10005ffe:	4b02      	ldr	r3, [pc, #8]	; (10006008 <vApplicationTickHook+0x3c>)
10006000:	601a      	str	r2, [r3, #0]
		}
}
10006002:	46bd      	mov	sp, r7
10006004:	bd80      	pop	{r7, pc}
10006006:	46c0      	nop			; (mov r8, r8)
10006008:	20001fe4 	.word	0x20001fe4
1000600c:	000f4240 	.word	0x000f4240
10006010:	3b9ac9ff 	.word	0x3b9ac9ff
10006014:	c4653600 	.word	0xc4653600

10006018 <handleSystemEvent>:
 *
 *******************************************************************************/

#include "modelbase/etActor.h"

etBool handleSystemEvent(InterfaceItemBase* ifitem, int evt, void* generic_data) {
10006018:	b580      	push	{r7, lr}
1000601a:	b084      	sub	sp, #16
1000601c:	af00      	add	r7, sp, #0
1000601e:	60f8      	str	r0, [r7, #12]
10006020:	60b9      	str	r1, [r7, #8]
10006022:	607a      	str	r2, [r7, #4]
	/* TODO */
	return ET_FALSE;
10006024:	2300      	movs	r3, #0
}
10006026:	1c18      	adds	r0, r3, #0
10006028:	46bd      	mov	sp, r7
1000602a:	b004      	add	sp, #16
1000602c:	bd80      	pop	{r7, pc}
1000602e:	46c0      	nop			; (mov r8, r8)

10006030 <etPort_sendMessage>:
		(self->receiveMessageFunc)(self->myActor, (void*)self, msg);
	ET_MSC_LOGGER_SYNC_EXIT
}
*/

void etPort_sendMessage(const etPort* self, etInt16 evtId, int size, void* data) {
10006030:	b580      	push	{r7, lr}
10006032:	b088      	sub	sp, #32
10006034:	af00      	add	r7, sp, #0
10006036:	60f8      	str	r0, [r7, #12]
10006038:	607a      	str	r2, [r7, #4]
1000603a:	603b      	str	r3, [r7, #0]
1000603c:	1c3b      	adds	r3, r7, #0
1000603e:	330a      	adds	r3, #10
10006040:	1c0a      	adds	r2, r1, #0
10006042:	801a      	strh	r2, [r3, #0]
	int offset = MEM_CEIL(sizeof(etMessage));
10006044:	2308      	movs	r3, #8
10006046:	61fb      	str	r3, [r7, #28]
	int totalSize = offset+size;
10006048:	69fa      	ldr	r2, [r7, #28]
1000604a:	687b      	ldr	r3, [r7, #4]
1000604c:	18d3      	adds	r3, r2, r3
1000604e:	61bb      	str	r3, [r7, #24]
	etMessage* msg = NULL;
10006050:	2300      	movs	r3, #0
10006052:	617b      	str	r3, [r7, #20]
	ET_MSC_LOGGER_SYNC_ENTRY("etPort", "sendMessage")
	msg = etMessageService_getMessageBuffer(self->msgService, totalSize);
10006054:	68fb      	ldr	r3, [r7, #12]
10006056:	685a      	ldr	r2, [r3, #4]
10006058:	69bb      	ldr	r3, [r7, #24]
1000605a:	b29b      	uxth	r3, r3
1000605c:	1c10      	adds	r0, r2, #0
1000605e:	1c19      	adds	r1, r3, #0
10006060:	f000 f954 	bl	1000630c <etMessageService_getMessageBuffer>
10006064:	1c03      	adds	r3, r0, #0
10006066:	617b      	str	r3, [r7, #20]
	if (msg!=NULL) {
10006068:	697b      	ldr	r3, [r7, #20]
1000606a:	2b00      	cmp	r3, #0
1000606c:	d020      	beq.n	100060b0 <etPort_sendMessage+0x80>
		msg->address = self->peerAddress;
1000606e:	68fb      	ldr	r3, [r7, #12]
10006070:	7a1b      	ldrb	r3, [r3, #8]
10006072:	1c1a      	adds	r2, r3, #0
10006074:	697b      	ldr	r3, [r7, #20]
10006076:	809a      	strh	r2, [r3, #4]
		msg->evtID = evtId;
10006078:	697b      	ldr	r3, [r7, #20]
1000607a:	1c3a      	adds	r2, r7, #0
1000607c:	320a      	adds	r2, #10
1000607e:	8812      	ldrh	r2, [r2, #0]
10006080:	80da      	strh	r2, [r3, #6]

		if (size>0 && data!=NULL) {
10006082:	687b      	ldr	r3, [r7, #4]
10006084:	2b00      	cmp	r3, #0
10006086:	dd0c      	ble.n	100060a2 <etPort_sendMessage+0x72>
10006088:	683b      	ldr	r3, [r7, #0]
1000608a:	2b00      	cmp	r3, #0
1000608c:	d009      	beq.n	100060a2 <etPort_sendMessage+0x72>
			memcpy(((char*)msg)+offset, data, size);
1000608e:	69fb      	ldr	r3, [r7, #28]
10006090:	697a      	ldr	r2, [r7, #20]
10006092:	18d1      	adds	r1, r2, r3
10006094:	687b      	ldr	r3, [r7, #4]
10006096:	683a      	ldr	r2, [r7, #0]
10006098:	1c08      	adds	r0, r1, #0
1000609a:	1c11      	adds	r1, r2, #0
1000609c:	1c1a      	adds	r2, r3, #0
1000609e:	f004 fa51 	bl	1000a544 <memcpy>
		}

		etMessageService_pushMessage(self->msgService, msg);
100060a2:	68fb      	ldr	r3, [r7, #12]
100060a4:	685a      	ldr	r2, [r3, #4]
100060a6:	697b      	ldr	r3, [r7, #20]
100060a8:	1c10      	adds	r0, r2, #0
100060aa:	1c19      	adds	r1, r3, #0
100060ac:	f000 f8f6 	bl	1000629c <etMessageService_pushMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
100060b0:	46bd      	mov	sp, r7
100060b2:	b008      	add	sp, #32
100060b4:	bd80      	pop	{r7, pc}
100060b6:	46c0      	nop			; (mov r8, r8)

100060b8 <etMessageService_init>:
		etUInt16 blockSize,
		etStacksize stacksize,
		etPriority priority,
		etTime interval,
		etDispatcherReceiveMessage msgDispatcher,
		etMessageService_execmode execmode){
100060b8:	b590      	push	{r4, r7, lr}
100060ba:	b087      	sub	sp, #28
100060bc:	af02      	add	r7, sp, #8
100060be:	60f8      	str	r0, [r7, #12]
100060c0:	60b9      	str	r1, [r7, #8]
100060c2:	1c11      	adds	r1, r2, #0
100060c4:	1c1a      	adds	r2, r3, #0
100060c6:	1dbb      	adds	r3, r7, #6
100060c8:	8019      	strh	r1, [r3, #0]
100060ca:	1d3b      	adds	r3, r7, #4
100060cc:	801a      	strh	r2, [r3, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "init")

	/* copy init data to self */
	self->messageBuffer.buffer = buffer;
100060ce:	68fb      	ldr	r3, [r7, #12]
100060d0:	68ba      	ldr	r2, [r7, #8]
100060d2:	621a      	str	r2, [r3, #32]
	self->messageBuffer.maxBlocks = maxBlocks;
100060d4:	68fb      	ldr	r3, [r7, #12]
100060d6:	1dba      	adds	r2, r7, #6
100060d8:	8812      	ldrh	r2, [r2, #0]
100060da:	849a      	strh	r2, [r3, #36]	; 0x24
	self->messageBuffer.blockSize = blockSize;
100060dc:	68fb      	ldr	r3, [r7, #12]
100060de:	1d3a      	adds	r2, r7, #4
100060e0:	8812      	ldrh	r2, [r2, #0]
100060e2:	84da      	strh	r2, [r3, #38]	; 0x26
	self->msgDispatcher = msgDispatcher;
100060e4:	68fb      	ldr	r3, [r7, #12]
100060e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100060e8:	629a      	str	r2, [r3, #40]	; 0x28
	self->execmode = execmode;
100060ea:	68fa      	ldr	r2, [r7, #12]
100060ec:	1c39      	adds	r1, r7, #0
100060ee:	3134      	adds	r1, #52	; 0x34
100060f0:	2368      	movs	r3, #104	; 0x68
100060f2:	7809      	ldrb	r1, [r1, #0]
100060f4:	54d1      	strb	r1, [r2, r3]

	/* init queue and pool */
	etMessageQueue_init( &(self->messagePool) ); 	/* the pool is also a queue*/
100060f6:	68fb      	ldr	r3, [r7, #12]
100060f8:	3310      	adds	r3, #16
100060fa:	1c18      	adds	r0, r3, #0
100060fc:	f002 fbda 	bl	100088b4 <etMessageQueue_init>
	etMessageQueue_init( &(self->messageQueue) );
10006100:	68fb      	ldr	r3, [r7, #12]
10006102:	1c18      	adds	r0, r3, #0
10006104:	f002 fbd6 	bl	100088b4 <etMessageQueue_init>
	etMessageService_initMessagePool(self);
10006108:	68fb      	ldr	r3, [r7, #12]
1000610a:	1c18      	adds	r0, r3, #0
1000610c:	f000 f892 	bl	10006234 <etMessageService_initMessagePool>

	/* init mutexes and semaphores */
	etMutex_construct( &(self->poolMutex) );
10006110:	68fb      	ldr	r3, [r7, #12]
10006112:	3348      	adds	r3, #72	; 0x48
10006114:	1c18      	adds	r0, r3, #0
10006116:	f002 fa3f 	bl	10008598 <etMutex_construct>
	etMutex_construct( &(self->queueMutex) );
1000611a:	68fb      	ldr	r3, [r7, #12]
1000611c:	334c      	adds	r3, #76	; 0x4c
1000611e:	1c18      	adds	r0, r3, #0
10006120:	f002 fa3a 	bl	10008598 <etMutex_construct>
	etSema_construct( &(self->executionSemaphore) );
10006124:	68fb      	ldr	r3, [r7, #12]
10006126:	3350      	adds	r3, #80	; 0x50
10006128:	1c18      	adds	r0, r3, #0
1000612a:	f002 fa93 	bl	10008654 <etSema_construct>

	/* init thread */
	etThread_construct(&self->thread, stacksize, priority, "MessageService", (etThreadFunction) etMessageService_deliverAllMessages, self);
1000612e:	68fb      	ldr	r3, [r7, #12]
10006130:	1c18      	adds	r0, r3, #0
10006132:	302c      	adds	r0, #44	; 0x2c
10006134:	6a39      	ldr	r1, [r7, #32]
10006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10006138:	4b0e      	ldr	r3, [pc, #56]	; (10006174 <etMessageService_init+0xbc>)
1000613a:	4c0f      	ldr	r4, [pc, #60]	; (10006178 <etMessageService_init+0xc0>)
1000613c:	9400      	str	r4, [sp, #0]
1000613e:	68fc      	ldr	r4, [r7, #12]
10006140:	9401      	str	r4, [sp, #4]
10006142:	f002 fac9 	bl	100086d8 <etThread_construct>

	if (execmode==EXECMODE_POLLED || execmode==EXECMODE_MIXED) {
10006146:	1c3b      	adds	r3, r7, #0
10006148:	3334      	adds	r3, #52	; 0x34
1000614a:	781b      	ldrb	r3, [r3, #0]
1000614c:	2b00      	cmp	r3, #0
1000614e:	d004      	beq.n	1000615a <etMessageService_init+0xa2>
10006150:	1c3b      	adds	r3, r7, #0
10006152:	3334      	adds	r3, #52	; 0x34
10006154:	781b      	ldrb	r3, [r3, #0]
10006156:	2b02      	cmp	r3, #2
10006158:	d108      	bne.n	1000616c <etMessageService_init+0xb4>
		/* init timer */
		etTimer_construct(&self->timer, &interval, etMessageService_timerCallback, self);
1000615a:	68fb      	ldr	r3, [r7, #12]
1000615c:	1c18      	adds	r0, r3, #0
1000615e:	3054      	adds	r0, #84	; 0x54
10006160:	1c39      	adds	r1, r7, #0
10006162:	3128      	adds	r1, #40	; 0x28
10006164:	4a05      	ldr	r2, [pc, #20]	; (1000617c <etMessageService_init+0xc4>)
10006166:	68fb      	ldr	r3, [r7, #12]
10006168:	f002 fb0e 	bl	10008788 <etTimer_construct>
	}

	ET_MSC_LOGGER_SYNC_EXIT
}
1000616c:	46bd      	mov	sp, r7
1000616e:	b005      	add	sp, #20
10006170:	bd90      	pop	{r4, r7, pc}
10006172:	46c0      	nop			; (mov r8, r8)
10006174:	1000ac34 	.word	0x1000ac34
10006178:	100063d1 	.word	0x100063d1
1000617c:	10006481 	.word	0x10006481

10006180 <etMessageService_start>:

void etMessageService_start(etMessageService* self){
10006180:	b580      	push	{r7, lr}
10006182:	b082      	sub	sp, #8
10006184:	af00      	add	r7, sp, #0
10006186:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "start")
	etThread_start( &(self->thread) );
10006188:	687b      	ldr	r3, [r7, #4]
1000618a:	332c      	adds	r3, #44	; 0x2c
1000618c:	1c18      	adds	r0, r3, #0
1000618e:	f002 fad1 	bl	10008734 <etThread_start>
	if (self->execmode==EXECMODE_POLLED || self->execmode==EXECMODE_MIXED) {
10006192:	687a      	ldr	r2, [r7, #4]
10006194:	2368      	movs	r3, #104	; 0x68
10006196:	5cd3      	ldrb	r3, [r2, r3]
10006198:	2b00      	cmp	r3, #0
1000619a:	d004      	beq.n	100061a6 <etMessageService_start+0x26>
1000619c:	687a      	ldr	r2, [r7, #4]
1000619e:	2368      	movs	r3, #104	; 0x68
100061a0:	5cd3      	ldrb	r3, [r2, r3]
100061a2:	2b02      	cmp	r3, #2
100061a4:	d104      	bne.n	100061b0 <etMessageService_start+0x30>
		etTimer_start(&self->timer);
100061a6:	687b      	ldr	r3, [r7, #4]
100061a8:	3354      	adds	r3, #84	; 0x54
100061aa:	1c18      	adds	r0, r3, #0
100061ac:	f002 fb2a 	bl	10008804 <etTimer_start>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
100061b0:	46bd      	mov	sp, r7
100061b2:	b002      	add	sp, #8
100061b4:	bd80      	pop	{r7, pc}
100061b6:	46c0      	nop			; (mov r8, r8)

100061b8 <etMessageService_stop>:

void etMessageService_stop(etMessageService* self){
100061b8:	b580      	push	{r7, lr}
100061ba:	b086      	sub	sp, #24
100061bc:	af00      	add	r7, sp, #0
100061be:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "stop")

	if (self->execmode==EXECMODE_POLLED || self->execmode==EXECMODE_MIXED) {
100061c0:	687a      	ldr	r2, [r7, #4]
100061c2:	2368      	movs	r3, #104	; 0x68
100061c4:	5cd3      	ldrb	r3, [r2, r3]
100061c6:	2b00      	cmp	r3, #0
100061c8:	d004      	beq.n	100061d4 <etMessageService_stop+0x1c>
100061ca:	687a      	ldr	r2, [r7, #4]
100061cc:	2368      	movs	r3, #104	; 0x68
100061ce:	5cd3      	ldrb	r3, [r2, r3]
100061d0:	2b02      	cmp	r3, #2
100061d2:	d104      	bne.n	100061de <etMessageService_stop+0x26>
		etTimer_stop(&self->timer);
100061d4:	687b      	ldr	r3, [r7, #4]
100061d6:	3354      	adds	r3, #84	; 0x54
100061d8:	1c18      	adds	r0, r3, #0
100061da:	f002 fb2b 	bl	10008834 <etTimer_stop>
	}

	/* create a temporary port struct and send the terminate message */
	etSystemProtocolConjPort port;
	port.localId = 0;
100061de:	1c3b      	adds	r3, r7, #0
100061e0:	330c      	adds	r3, #12
100061e2:	2200      	movs	r2, #0
100061e4:	725a      	strb	r2, [r3, #9]
	port.msgService = self;
100061e6:	1c3b      	adds	r3, r7, #0
100061e8:	330c      	adds	r3, #12
100061ea:	687a      	ldr	r2, [r7, #4]
100061ec:	605a      	str	r2, [r3, #4]
	port.peerAddress = MESSAGESERVICE_ADDRESS;
100061ee:	1c3b      	adds	r3, r7, #0
100061f0:	330c      	adds	r3, #12
100061f2:	2201      	movs	r2, #1
100061f4:	721a      	strb	r2, [r3, #8]
	etSystemProtocolConjPort_terminate(&port);
100061f6:	1c3b      	adds	r3, r7, #0
100061f8:	330c      	adds	r3, #12
100061fa:	1c18      	adds	r0, r3, #0
100061fc:	f000 f9ae 	bl	1000655c <etSystemProtocolConjPort_terminate>

	ET_MSC_LOGGER_SYNC_EXIT
}
10006200:	46bd      	mov	sp, r7
10006202:	b006      	add	sp, #24
10006204:	bd80      	pop	{r7, pc}
10006206:	46c0      	nop			; (mov r8, r8)

10006208 <etMessageService_destroy>:

void etMessageService_destroy(etMessageService* self){
10006208:	b580      	push	{r7, lr}
1000620a:	b082      	sub	sp, #8
1000620c:	af00      	add	r7, sp, #0
1000620e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "destroy")
	etMutex_destruct( &(self->poolMutex) );
10006210:	687b      	ldr	r3, [r7, #4]
10006212:	3348      	adds	r3, #72	; 0x48
10006214:	1c18      	adds	r0, r3, #0
10006216:	f002 f9d1 	bl	100085bc <etMutex_destruct>
	etMutex_destruct( &(self->queueMutex) );
1000621a:	687b      	ldr	r3, [r7, #4]
1000621c:	334c      	adds	r3, #76	; 0x4c
1000621e:	1c18      	adds	r0, r3, #0
10006220:	f002 f9cc 	bl	100085bc <etMutex_destruct>
	etSema_destruct( &(self->executionSemaphore) );
10006224:	687b      	ldr	r3, [r7, #4]
10006226:	3350      	adds	r3, #80	; 0x50
10006228:	1c18      	adds	r0, r3, #0
1000622a:	f002 fa27 	bl	1000867c <etSema_destruct>
	ET_MSC_LOGGER_SYNC_EXIT
}
1000622e:	46bd      	mov	sp, r7
10006230:	b002      	add	sp, #8
10006232:	bd80      	pop	{r7, pc}

10006234 <etMessageService_initMessagePool>:

/*
 * initialize message pool with block buffer
 * all blocks are added to pool
 */
void etMessageService_initMessagePool(etMessageService* self){
10006234:	b580      	push	{r7, lr}
10006236:	b084      	sub	sp, #16
10006238:	af00      	add	r7, sp, #0
1000623a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "initMessagePool")
	etInt16 i;

	for (i=0; i<self->messageBuffer.maxBlocks; i++){
1000623c:	1c3b      	adds	r3, r7, #0
1000623e:	330e      	adds	r3, #14
10006240:	2200      	movs	r2, #0
10006242:	801a      	strh	r2, [r3, #0]
10006244:	e019      	b.n	1000627a <etMessageService_initMessagePool+0x46>
		etMessage* block = (etMessage*) &self->messageBuffer.buffer[i*self->messageBuffer.blockSize];
10006246:	687b      	ldr	r3, [r7, #4]
10006248:	6a1a      	ldr	r2, [r3, #32]
1000624a:	1c3b      	adds	r3, r7, #0
1000624c:	330e      	adds	r3, #14
1000624e:	2100      	movs	r1, #0
10006250:	5e5b      	ldrsh	r3, [r3, r1]
10006252:	6879      	ldr	r1, [r7, #4]
10006254:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
10006256:	434b      	muls	r3, r1
10006258:	18d3      	adds	r3, r2, r3
1000625a:	60bb      	str	r3, [r7, #8]
		etMessageQueue_push(&self->messagePool, block);
1000625c:	687b      	ldr	r3, [r7, #4]
1000625e:	1c1a      	adds	r2, r3, #0
10006260:	3210      	adds	r2, #16
10006262:	68bb      	ldr	r3, [r7, #8]
10006264:	1c10      	adds	r0, r2, #0
10006266:	1c19      	adds	r1, r3, #0
10006268:	f002 fb3a 	bl	100088e0 <etMessageQueue_push>
 */
void etMessageService_initMessagePool(etMessageService* self){
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "initMessagePool")
	etInt16 i;

	for (i=0; i<self->messageBuffer.maxBlocks; i++){
1000626c:	1c3b      	adds	r3, r7, #0
1000626e:	330e      	adds	r3, #14
10006270:	1c3a      	adds	r2, r7, #0
10006272:	320e      	adds	r2, #14
10006274:	8812      	ldrh	r2, [r2, #0]
10006276:	3201      	adds	r2, #1
10006278:	801a      	strh	r2, [r3, #0]
1000627a:	1c3b      	adds	r3, r7, #0
1000627c:	330e      	adds	r3, #14
1000627e:	2100      	movs	r1, #0
10006280:	5e5a      	ldrsh	r2, [r3, r1]
10006282:	687b      	ldr	r3, [r7, #4]
10006284:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
10006286:	429a      	cmp	r2, r3
10006288:	dbdd      	blt.n	10006246 <etMessageService_initMessagePool+0x12>
		etMessage* block = (etMessage*) &self->messageBuffer.buffer[i*self->messageBuffer.blockSize];
		etMessageQueue_push(&self->messagePool, block);
	}
	etMessageQueue_resetLowWaterMark(&self->messagePool);
1000628a:	687b      	ldr	r3, [r7, #4]
1000628c:	3310      	adds	r3, #16
1000628e:	1c18      	adds	r0, r3, #0
10006290:	f002 fbda 	bl	10008a48 <etMessageQueue_resetLowWaterMark>
	ET_MSC_LOGGER_SYNC_EXIT
}
10006294:	46bd      	mov	sp, r7
10006296:	b004      	add	sp, #16
10006298:	bd80      	pop	{r7, pc}
1000629a:	46c0      	nop			; (mov r8, r8)

1000629c <etMessageService_pushMessage>:

void etMessageService_pushMessage(etMessageService* self, etMessage* msg){
1000629c:	b580      	push	{r7, lr}
1000629e:	b082      	sub	sp, #8
100062a0:	af00      	add	r7, sp, #0
100062a2:	6078      	str	r0, [r7, #4]
100062a4:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "pushMessage")
	etMutex_enter(&self->queueMutex);
100062a6:	687b      	ldr	r3, [r7, #4]
100062a8:	334c      	adds	r3, #76	; 0x4c
100062aa:	1c18      	adds	r0, r3, #0
100062ac:	f002 f992 	bl	100085d4 <etMutex_enter>
	etMessageQueue_push(&self->messageQueue, msg);
100062b0:	687a      	ldr	r2, [r7, #4]
100062b2:	683b      	ldr	r3, [r7, #0]
100062b4:	1c10      	adds	r0, r2, #0
100062b6:	1c19      	adds	r1, r3, #0
100062b8:	f002 fb12 	bl	100088e0 <etMessageQueue_push>
	etSema_wakeup(&self->executionSemaphore);
100062bc:	687b      	ldr	r3, [r7, #4]
100062be:	3350      	adds	r3, #80	; 0x50
100062c0:	1c18      	adds	r0, r3, #0
100062c2:	f002 f9e7 	bl	10008694 <etSema_wakeup>
	etMutex_leave(&self->queueMutex);
100062c6:	687b      	ldr	r3, [r7, #4]
100062c8:	334c      	adds	r3, #76	; 0x4c
100062ca:	1c18      	adds	r0, r3, #0
100062cc:	f002 f994 	bl	100085f8 <etMutex_leave>
	ET_MSC_LOGGER_SYNC_EXIT
}
100062d0:	46bd      	mov	sp, r7
100062d2:	b002      	add	sp, #8
100062d4:	bd80      	pop	{r7, pc}
100062d6:	46c0      	nop			; (mov r8, r8)

100062d8 <etMessageService_popMessage>:

etMessage* etMessageService_popMessage(etMessageService* self){
100062d8:	b580      	push	{r7, lr}
100062da:	b084      	sub	sp, #16
100062dc:	af00      	add	r7, sp, #0
100062de:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "popMessage")
	etMutex_enter(&self->queueMutex);
100062e0:	687b      	ldr	r3, [r7, #4]
100062e2:	334c      	adds	r3, #76	; 0x4c
100062e4:	1c18      	adds	r0, r3, #0
100062e6:	f002 f975 	bl	100085d4 <etMutex_enter>
	etMessage* msg = etMessageQueue_pop(&self->messageQueue);
100062ea:	687b      	ldr	r3, [r7, #4]
100062ec:	1c18      	adds	r0, r3, #0
100062ee:	f002 fb29 	bl	10008944 <etMessageQueue_pop>
100062f2:	1c03      	adds	r3, r0, #0
100062f4:	60fb      	str	r3, [r7, #12]
	etMutex_leave(&self->queueMutex);
100062f6:	687b      	ldr	r3, [r7, #4]
100062f8:	334c      	adds	r3, #76	; 0x4c
100062fa:	1c18      	adds	r0, r3, #0
100062fc:	f002 f97c 	bl	100085f8 <etMutex_leave>
	ET_MSC_LOGGER_SYNC_EXIT
	return msg;
10006300:	68fb      	ldr	r3, [r7, #12]
}
10006302:	1c18      	adds	r0, r3, #0
10006304:	46bd      	mov	sp, r7
10006306:	b004      	add	sp, #16
10006308:	bd80      	pop	{r7, pc}
1000630a:	46c0      	nop			; (mov r8, r8)

1000630c <etMessageService_getMessageBuffer>:


etMessage* etMessageService_getMessageBuffer(etMessageService* self, etUInt16 size){
1000630c:	b580      	push	{r7, lr}
1000630e:	b084      	sub	sp, #16
10006310:	af00      	add	r7, sp, #0
10006312:	6078      	str	r0, [r7, #4]
10006314:	1c0a      	adds	r2, r1, #0
10006316:	1cbb      	adds	r3, r7, #2
10006318:	801a      	strh	r2, [r3, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "getMessageBuffer")
	etMutex_enter(&self->poolMutex);
1000631a:	687b      	ldr	r3, [r7, #4]
1000631c:	3348      	adds	r3, #72	; 0x48
1000631e:	1c18      	adds	r0, r3, #0
10006320:	f002 f958 	bl	100085d4 <etMutex_enter>
	if (size<=self->messageBuffer.blockSize){
10006324:	687b      	ldr	r3, [r7, #4]
10006326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
10006328:	1cba      	adds	r2, r7, #2
1000632a:	8812      	ldrh	r2, [r2, #0]
1000632c:	429a      	cmp	r2, r3
1000632e:	d81d      	bhi.n	1000636c <etMessageService_getMessageBuffer+0x60>
		if (self->messagePool.size>0){
10006330:	687b      	ldr	r3, [r7, #4]
10006332:	8b9b      	ldrh	r3, [r3, #28]
10006334:	b21b      	sxth	r3, r3
10006336:	2b00      	cmp	r3, #0
10006338:	dd0d      	ble.n	10006356 <etMessageService_getMessageBuffer+0x4a>
			etMessage* msg = etMessageQueue_pop(&self->messagePool);
1000633a:	687b      	ldr	r3, [r7, #4]
1000633c:	3310      	adds	r3, #16
1000633e:	1c18      	adds	r0, r3, #0
10006340:	f002 fb00 	bl	10008944 <etMessageQueue_pop>
10006344:	1c03      	adds	r3, r0, #0
10006346:	60fb      	str	r3, [r7, #12]
			etMutex_leave(&self->poolMutex);
10006348:	687b      	ldr	r3, [r7, #4]
1000634a:	3348      	adds	r3, #72	; 0x48
1000634c:	1c18      	adds	r0, r3, #0
1000634e:	f002 f953 	bl	100085f8 <etMutex_leave>
			ET_MSC_LOGGER_SYNC_EXIT
			return msg;
10006352:	68fb      	ldr	r3, [r7, #12]
10006354:	e01a      	b.n	1000638c <etMessageService_getMessageBuffer+0x80>
		}
		else {
			etLogger_logErrorF("etMessageService_getMessageBuffer: message pool empty: %d", etMessageService_getMessagePoolLowWaterMark(self));
10006356:	687b      	ldr	r3, [r7, #4]
10006358:	1c18      	adds	r0, r3, #0
1000635a:	f000 f87b 	bl	10006454 <etMessageService_getMessagePoolLowWaterMark>
1000635e:	1c03      	adds	r3, r0, #0
10006360:	4a0c      	ldr	r2, [pc, #48]	; (10006394 <etMessageService_getMessageBuffer+0x88>)
10006362:	1c10      	adds	r0, r2, #0
10006364:	1c19      	adds	r1, r3, #0
10006366:	f7ff fdc7 	bl	10005ef8 <etLogger_logErrorF>
1000636a:	e009      	b.n	10006380 <etMessageService_getMessageBuffer+0x74>
		}
	}
	else {
		etLogger_logErrorF("etMessageService_getMessageBuffer: message too big: %d, blockSize: %d", size, self->messageBuffer.blockSize);
1000636c:	1cbb      	adds	r3, r7, #2
1000636e:	881a      	ldrh	r2, [r3, #0]
10006370:	687b      	ldr	r3, [r7, #4]
10006372:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
10006374:	4908      	ldr	r1, [pc, #32]	; (10006398 <etMessageService_getMessageBuffer+0x8c>)
10006376:	1c08      	adds	r0, r1, #0
10006378:	1c11      	adds	r1, r2, #0
1000637a:	1c1a      	adds	r2, r3, #0
1000637c:	f7ff fdbc 	bl	10005ef8 <etLogger_logErrorF>
	}
	etMutex_leave(&self->poolMutex);
10006380:	687b      	ldr	r3, [r7, #4]
10006382:	3348      	adds	r3, #72	; 0x48
10006384:	1c18      	adds	r0, r3, #0
10006386:	f002 f937 	bl	100085f8 <etMutex_leave>
	ET_MSC_LOGGER_SYNC_EXIT
	return NULL;
1000638a:	2300      	movs	r3, #0
}
1000638c:	1c18      	adds	r0, r3, #0
1000638e:	46bd      	mov	sp, r7
10006390:	b004      	add	sp, #16
10006392:	bd80      	pop	{r7, pc}
10006394:	1000ac44 	.word	0x1000ac44
10006398:	1000ac80 	.word	0x1000ac80

1000639c <etMessageService_returnMessageBuffer>:

void etMessageService_returnMessageBuffer(etMessageService* self, etMessage* buffer){
1000639c:	b580      	push	{r7, lr}
1000639e:	b082      	sub	sp, #8
100063a0:	af00      	add	r7, sp, #0
100063a2:	6078      	str	r0, [r7, #4]
100063a4:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "returnMessageBuffer")
	etMutex_enter(&self->poolMutex);
100063a6:	687b      	ldr	r3, [r7, #4]
100063a8:	3348      	adds	r3, #72	; 0x48
100063aa:	1c18      	adds	r0, r3, #0
100063ac:	f002 f912 	bl	100085d4 <etMutex_enter>
	etMessageQueue_push(&self->messagePool, buffer);
100063b0:	687b      	ldr	r3, [r7, #4]
100063b2:	1c1a      	adds	r2, r3, #0
100063b4:	3210      	adds	r2, #16
100063b6:	683b      	ldr	r3, [r7, #0]
100063b8:	1c10      	adds	r0, r2, #0
100063ba:	1c19      	adds	r1, r3, #0
100063bc:	f002 fa90 	bl	100088e0 <etMessageQueue_push>
	etMutex_leave(&self->poolMutex);
100063c0:	687b      	ldr	r3, [r7, #4]
100063c2:	3348      	adds	r3, #72	; 0x48
100063c4:	1c18      	adds	r0, r3, #0
100063c6:	f002 f917 	bl	100085f8 <etMutex_leave>
	ET_MSC_LOGGER_SYNC_EXIT
}
100063ca:	46bd      	mov	sp, r7
100063cc:	b002      	add	sp, #8
100063ce:	bd80      	pop	{r7, pc}

100063d0 <etMessageService_deliverAllMessages>:

static void etMessageService_deliverAllMessages(etMessageService* self){
100063d0:	b580      	push	{r7, lr}
100063d2:	b084      	sub	sp, #16
100063d4:	af00      	add	r7, sp, #0
100063d6:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "deliverAllMessages")
	{
		etBool cont = ET_TRUE;
100063d8:	1c3b      	adds	r3, r7, #0
100063da:	330f      	adds	r3, #15
100063dc:	2201      	movs	r2, #1
100063de:	701a      	strb	r2, [r3, #0]
		while (cont){
100063e0:	e02f      	b.n	10006442 <etMessageService_deliverAllMessages+0x72>
			while (etMessageQueue_isNotEmpty(&self->messageQueue) && cont){
				etMessage* msg = etMessageService_popMessage(self);
100063e2:	687b      	ldr	r3, [r7, #4]
100063e4:	1c18      	adds	r0, r3, #0
100063e6:	f7ff ff77 	bl	100062d8 <etMessageService_popMessage>
100063ea:	1c03      	adds	r3, r0, #0
100063ec:	60bb      	str	r3, [r7, #8]
				if (!self->msgDispatcher(msg))
100063ee:	687b      	ldr	r3, [r7, #4]
100063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100063f2:	68ba      	ldr	r2, [r7, #8]
100063f4:	1c10      	adds	r0, r2, #0
100063f6:	4798      	blx	r3
100063f8:	1c03      	adds	r3, r0, #0
100063fa:	2b00      	cmp	r3, #0
100063fc:	d103      	bne.n	10006406 <etMessageService_deliverAllMessages+0x36>
					cont = ET_FALSE;
100063fe:	1c3b      	adds	r3, r7, #0
10006400:	330f      	adds	r3, #15
10006402:	2200      	movs	r2, #0
10006404:	701a      	strb	r2, [r3, #0]
				etMessageService_returnMessageBuffer(self, msg);
10006406:	687a      	ldr	r2, [r7, #4]
10006408:	68bb      	ldr	r3, [r7, #8]
1000640a:	1c10      	adds	r0, r2, #0
1000640c:	1c19      	adds	r1, r3, #0
1000640e:	f7ff ffc5 	bl	1000639c <etMessageService_returnMessageBuffer>
10006412:	e000      	b.n	10006416 <etMessageService_deliverAllMessages+0x46>
static void etMessageService_deliverAllMessages(etMessageService* self){
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "deliverAllMessages")
	{
		etBool cont = ET_TRUE;
		while (cont){
			while (etMessageQueue_isNotEmpty(&self->messageQueue) && cont){
10006414:	46c0      	nop			; (mov r8, r8)
10006416:	687b      	ldr	r3, [r7, #4]
10006418:	1c18      	adds	r0, r3, #0
1000641a:	f002 faef 	bl	100089fc <etMessageQueue_isNotEmpty>
1000641e:	1c03      	adds	r3, r0, #0
10006420:	2b00      	cmp	r3, #0
10006422:	d004      	beq.n	1000642e <etMessageService_deliverAllMessages+0x5e>
10006424:	1c3b      	adds	r3, r7, #0
10006426:	330f      	adds	r3, #15
10006428:	781b      	ldrb	r3, [r3, #0]
1000642a:	2b00      	cmp	r3, #0
1000642c:	d1d9      	bne.n	100063e2 <etMessageService_deliverAllMessages+0x12>
				etMessage* msg = etMessageService_popMessage(self);
				if (!self->msgDispatcher(msg))
					cont = ET_FALSE;
				etMessageService_returnMessageBuffer(self, msg);
			}
			if (cont)
1000642e:	1c3b      	adds	r3, r7, #0
10006430:	330f      	adds	r3, #15
10006432:	781b      	ldrb	r3, [r3, #0]
10006434:	2b00      	cmp	r3, #0
10006436:	d004      	beq.n	10006442 <etMessageService_deliverAllMessages+0x72>
				etSema_waitForWakeup(&self->executionSemaphore);
10006438:	687b      	ldr	r3, [r7, #4]
1000643a:	3350      	adds	r3, #80	; 0x50
1000643c:	1c18      	adds	r0, r3, #0
1000643e:	f002 f939 	bl	100086b4 <etSema_waitForWakeup>

static void etMessageService_deliverAllMessages(etMessageService* self){
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "deliverAllMessages")
	{
		etBool cont = ET_TRUE;
		while (cont){
10006442:	1c3b      	adds	r3, r7, #0
10006444:	330f      	adds	r3, #15
10006446:	781b      	ldrb	r3, [r3, #0]
10006448:	2b00      	cmp	r3, #0
1000644a:	d1e3      	bne.n	10006414 <etMessageService_deliverAllMessages+0x44>
			if (cont)
				etSema_waitForWakeup(&self->executionSemaphore);
		}
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000644c:	46bd      	mov	sp, r7
1000644e:	b004      	add	sp, #16
10006450:	bd80      	pop	{r7, pc}
10006452:	46c0      	nop			; (mov r8, r8)

10006454 <etMessageService_getMessagePoolLowWaterMark>:

etInt16 etMessageService_getMessagePoolLowWaterMark(etMessageService* self){
10006454:	b590      	push	{r4, r7, lr}
10006456:	b085      	sub	sp, #20
10006458:	af00      	add	r7, sp, #0
1000645a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "getMessagePoolLowWaterMark")
	etInt16 lowWaterMark = etMessageQueue_getLowWaterMark(&self->messagePool);
1000645c:	687b      	ldr	r3, [r7, #4]
1000645e:	3310      	adds	r3, #16
10006460:	1c3c      	adds	r4, r7, #0
10006462:	340e      	adds	r4, #14
10006464:	1c18      	adds	r0, r3, #0
10006466:	f002 fae3 	bl	10008a30 <etMessageQueue_getLowWaterMark>
1000646a:	1c03      	adds	r3, r0, #0
1000646c:	8023      	strh	r3, [r4, #0]
	ET_MSC_LOGGER_SYNC_EXIT
	return lowWaterMark;
1000646e:	1c3b      	adds	r3, r7, #0
10006470:	330e      	adds	r3, #14
10006472:	881b      	ldrh	r3, [r3, #0]
10006474:	b21b      	sxth	r3, r3
}
10006476:	1c18      	adds	r0, r3, #0
10006478:	46bd      	mov	sp, r7
1000647a:	b005      	add	sp, #20
1000647c:	bd90      	pop	{r4, r7, pc}
1000647e:	46c0      	nop			; (mov r8, r8)

10006480 <etMessageService_timerCallback>:

static void etMessageService_timerCallback(void* data) {
10006480:	b580      	push	{r7, lr}
10006482:	b086      	sub	sp, #24
10006484:	af00      	add	r7, sp, #0
10006486:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageService", "timerCallback")
	{
		etMessageService* self = (etMessageService*) data;
10006488:	687b      	ldr	r3, [r7, #4]
1000648a:	617b      	str	r3, [r7, #20]

		/* create a temporary port struct and send the poll message */
		etSystemProtocolConjPort port;
		port.localId = 0;
1000648c:	1c3b      	adds	r3, r7, #0
1000648e:	3308      	adds	r3, #8
10006490:	2200      	movs	r2, #0
10006492:	725a      	strb	r2, [r3, #9]
		port.msgService = self;
10006494:	1c3b      	adds	r3, r7, #0
10006496:	3308      	adds	r3, #8
10006498:	697a      	ldr	r2, [r7, #20]
1000649a:	605a      	str	r2, [r3, #4]
		port.peerAddress = MESSAGESERVICE_ADDRESS;
1000649c:	1c3b      	adds	r3, r7, #0
1000649e:	3308      	adds	r3, #8
100064a0:	2201      	movs	r2, #1
100064a2:	721a      	strb	r2, [r3, #8]
		etSystemProtocolConjPort_poll(&port);
100064a4:	1c3b      	adds	r3, r7, #0
100064a6:	3308      	adds	r3, #8
100064a8:	1c18      	adds	r0, r3, #0
100064aa:	f000 f80f 	bl	100064cc <etSystemProtocolConjPort_poll>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
100064ae:	46bd      	mov	sp, r7
100064b0:	b006      	add	sp, #24
100064b2:	bd80      	pop	{r7, pc}

100064b4 <etSystemProtocolReplPort_getReplication>:

/*--------------------- port methods */


/* getReplication */
etInt32 etSystemProtocolReplPort_getReplication(const etSystemProtocolReplPort* self) {
100064b4:	b580      	push	{r7, lr}
100064b6:	b082      	sub	sp, #8
100064b8:	af00      	add	r7, sp, #0
100064ba:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
100064bc:	687b      	ldr	r3, [r7, #4]
100064be:	881b      	ldrh	r3, [r3, #0]
100064c0:	b21b      	sxth	r3, r3
}
100064c2:	1c18      	adds	r0, r3, #0
100064c4:	46bd      	mov	sp, r7
100064c6:	b002      	add	sp, #8
100064c8:	bd80      	pop	{r7, pc}
100064ca:	46c0      	nop			; (mov r8, r8)

100064cc <etSystemProtocolConjPort_poll>:



void etSystemProtocolConjPort_poll(const etSystemProtocolConjPort* self) {
100064cc:	b580      	push	{r7, lr}
100064ce:	b082      	sub	sp, #8
100064d0:	af00      	add	r7, sp, #0
100064d2:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjPort", "poll")
		etPort_sendMessage(self, etSystemProtocol_IN_poll, 0, NULL);
100064d4:	687b      	ldr	r3, [r7, #4]
100064d6:	1c18      	adds	r0, r3, #0
100064d8:	2101      	movs	r1, #1
100064da:	2200      	movs	r2, #0
100064dc:	2300      	movs	r3, #0
100064de:	f7ff fda7 	bl	10006030 <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
100064e2:	46bd      	mov	sp, r7
100064e4:	b002      	add	sp, #8
100064e6:	bd80      	pop	{r7, pc}

100064e8 <etSystemProtocolConjReplPort_poll_broadcast>:

void etSystemProtocolConjReplPort_poll_broadcast(const etSystemProtocolConjReplPort* self) {
100064e8:	b580      	push	{r7, lr}
100064ea:	b084      	sub	sp, #16
100064ec:	af00      	add	r7, sp, #0
100064ee:	6078      	str	r0, [r7, #4]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "poll")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
100064f0:	2300      	movs	r3, #0
100064f2:	60fb      	str	r3, [r7, #12]
100064f4:	e00d      	b.n	10006512 <etSystemProtocolConjReplPort_poll_broadcast+0x2a>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[i]), etSystemProtocol_IN_poll, 0, NULL);
100064f6:	687b      	ldr	r3, [r7, #4]
100064f8:	685a      	ldr	r2, [r3, #4]
100064fa:	68fb      	ldr	r3, [r7, #12]
100064fc:	011b      	lsls	r3, r3, #4
100064fe:	18d3      	adds	r3, r2, r3
10006500:	1c18      	adds	r0, r3, #0
10006502:	2101      	movs	r1, #1
10006504:	2200      	movs	r2, #0
10006506:	2300      	movs	r3, #0
10006508:	f7ff fd92 	bl	10006030 <etPort_sendMessage>
}

void etSystemProtocolConjReplPort_poll_broadcast(const etSystemProtocolConjReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "poll")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
1000650c:	68fb      	ldr	r3, [r7, #12]
1000650e:	3301      	adds	r3, #1
10006510:	60fb      	str	r3, [r7, #12]
10006512:	687b      	ldr	r3, [r7, #4]
10006514:	881b      	ldrh	r3, [r3, #0]
10006516:	b21a      	sxth	r2, r3
10006518:	68fb      	ldr	r3, [r7, #12]
1000651a:	429a      	cmp	r2, r3
1000651c:	dceb      	bgt.n	100064f6 <etSystemProtocolConjReplPort_poll_broadcast+0xe>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[i]), etSystemProtocol_IN_poll, 0, NULL);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000651e:	46bd      	mov	sp, r7
10006520:	b004      	add	sp, #16
10006522:	bd80      	pop	{r7, pc}

10006524 <etSystemProtocolConjReplPort_poll>:

void etSystemProtocolConjReplPort_poll(const etSystemProtocolConjReplPort* self, int idx) {
10006524:	b580      	push	{r7, lr}
10006526:	b082      	sub	sp, #8
10006528:	af00      	add	r7, sp, #0
1000652a:	6078      	str	r0, [r7, #4]
1000652c:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "poll")
	if (0<=idx && idx<((etReplPort*)self)->size) {
1000652e:	683b      	ldr	r3, [r7, #0]
10006530:	2b00      	cmp	r3, #0
10006532:	db10      	blt.n	10006556 <etSystemProtocolConjReplPort_poll+0x32>
10006534:	687b      	ldr	r3, [r7, #4]
10006536:	881b      	ldrh	r3, [r3, #0]
10006538:	b21a      	sxth	r2, r3
1000653a:	683b      	ldr	r3, [r7, #0]
1000653c:	429a      	cmp	r2, r3
1000653e:	dd0a      	ble.n	10006556 <etSystemProtocolConjReplPort_poll+0x32>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[idx]), etSystemProtocol_IN_poll, 0, NULL);
10006540:	687b      	ldr	r3, [r7, #4]
10006542:	685a      	ldr	r2, [r3, #4]
10006544:	683b      	ldr	r3, [r7, #0]
10006546:	011b      	lsls	r3, r3, #4
10006548:	18d3      	adds	r3, r2, r3
1000654a:	1c18      	adds	r0, r3, #0
1000654c:	2101      	movs	r1, #1
1000654e:	2200      	movs	r2, #0
10006550:	2300      	movs	r3, #0
10006552:	f7ff fd6d 	bl	10006030 <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
10006556:	46bd      	mov	sp, r7
10006558:	b002      	add	sp, #8
1000655a:	bd80      	pop	{r7, pc}

1000655c <etSystemProtocolConjPort_terminate>:

void etSystemProtocolConjPort_terminate(const etSystemProtocolConjPort* self) {
1000655c:	b580      	push	{r7, lr}
1000655e:	b082      	sub	sp, #8
10006560:	af00      	add	r7, sp, #0
10006562:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjPort", "terminate")
		etPort_sendMessage(self, etSystemProtocol_IN_terminate, 0, NULL);
10006564:	687b      	ldr	r3, [r7, #4]
10006566:	1c18      	adds	r0, r3, #0
10006568:	2102      	movs	r1, #2
1000656a:	2200      	movs	r2, #0
1000656c:	2300      	movs	r3, #0
1000656e:	f7ff fd5f 	bl	10006030 <etPort_sendMessage>
	ET_MSC_LOGGER_SYNC_EXIT
}
10006572:	46bd      	mov	sp, r7
10006574:	b002      	add	sp, #8
10006576:	bd80      	pop	{r7, pc}

10006578 <etSystemProtocolConjReplPort_terminate_broadcast>:

void etSystemProtocolConjReplPort_terminate_broadcast(const etSystemProtocolConjReplPort* self) {
10006578:	b580      	push	{r7, lr}
1000657a:	b084      	sub	sp, #16
1000657c:	af00      	add	r7, sp, #0
1000657e:	6078      	str	r0, [r7, #4]
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "terminate")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
10006580:	2300      	movs	r3, #0
10006582:	60fb      	str	r3, [r7, #12]
10006584:	e00d      	b.n	100065a2 <etSystemProtocolConjReplPort_terminate_broadcast+0x2a>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[i]), etSystemProtocol_IN_terminate, 0, NULL);
10006586:	687b      	ldr	r3, [r7, #4]
10006588:	685a      	ldr	r2, [r3, #4]
1000658a:	68fb      	ldr	r3, [r7, #12]
1000658c:	011b      	lsls	r3, r3, #4
1000658e:	18d3      	adds	r3, r2, r3
10006590:	1c18      	adds	r0, r3, #0
10006592:	2102      	movs	r1, #2
10006594:	2200      	movs	r2, #0
10006596:	2300      	movs	r3, #0
10006598:	f7ff fd4a 	bl	10006030 <etPort_sendMessage>
}

void etSystemProtocolConjReplPort_terminate_broadcast(const etSystemProtocolConjReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "terminate")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
1000659c:	68fb      	ldr	r3, [r7, #12]
1000659e:	3301      	adds	r3, #1
100065a0:	60fb      	str	r3, [r7, #12]
100065a2:	687b      	ldr	r3, [r7, #4]
100065a4:	881b      	ldrh	r3, [r3, #0]
100065a6:	b21a      	sxth	r2, r3
100065a8:	68fb      	ldr	r3, [r7, #12]
100065aa:	429a      	cmp	r2, r3
100065ac:	dceb      	bgt.n	10006586 <etSystemProtocolConjReplPort_terminate_broadcast+0xe>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[i]), etSystemProtocol_IN_terminate, 0, NULL);
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
100065ae:	46bd      	mov	sp, r7
100065b0:	b004      	add	sp, #16
100065b2:	bd80      	pop	{r7, pc}

100065b4 <etSystemProtocolConjReplPort_terminate>:

void etSystemProtocolConjReplPort_terminate(const etSystemProtocolConjReplPort* self, int idx) {
100065b4:	b580      	push	{r7, lr}
100065b6:	b082      	sub	sp, #8
100065b8:	af00      	add	r7, sp, #0
100065ba:	6078      	str	r0, [r7, #4]
100065bc:	6039      	str	r1, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etSystemProtocolConjReplPort", "terminate")
	if (0<=idx && idx<((etReplPort*)self)->size) {
100065be:	683b      	ldr	r3, [r7, #0]
100065c0:	2b00      	cmp	r3, #0
100065c2:	db10      	blt.n	100065e6 <etSystemProtocolConjReplPort_terminate+0x32>
100065c4:	687b      	ldr	r3, [r7, #4]
100065c6:	881b      	ldrh	r3, [r3, #0]
100065c8:	b21a      	sxth	r2, r3
100065ca:	683b      	ldr	r3, [r7, #0]
100065cc:	429a      	cmp	r2, r3
100065ce:	dd0a      	ble.n	100065e6 <etSystemProtocolConjReplPort_terminate+0x32>
		etPort_sendMessage(((etPort*)&((etReplPort*)self)->ports[idx]), etSystemProtocol_IN_terminate, 0, NULL);
100065d0:	687b      	ldr	r3, [r7, #4]
100065d2:	685a      	ldr	r2, [r3, #4]
100065d4:	683b      	ldr	r3, [r7, #0]
100065d6:	011b      	lsls	r3, r3, #4
100065d8:	18d3      	adds	r3, r2, r3
100065da:	1c18      	adds	r0, r3, #0
100065dc:	2102      	movs	r1, #2
100065de:	2200      	movs	r2, #0
100065e0:	2300      	movs	r3, #0
100065e2:	f7ff fd25 	bl	10006030 <etPort_sendMessage>
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
100065e6:	46bd      	mov	sp, r7
100065e8:	b002      	add	sp, #8
100065ea:	bd80      	pop	{r7, pc}

100065ec <etSystemProtocolConjReplPort_getReplication>:


/* getReplication */
etInt32 etSystemProtocolConjReplPort_getReplication(const etSystemProtocolConjReplPort* self) {
100065ec:	b580      	push	{r7, lr}
100065ee:	b082      	sub	sp, #8
100065f0:	af00      	add	r7, sp, #0
100065f2:	6078      	str	r0, [r7, #4]
	return ((etReplPort*)self)->size;
100065f4:	687b      	ldr	r3, [r7, #4]
100065f6:	881b      	ldrh	r3, [r3, #0]
100065f8:	b21b      	sxth	r3, r3
}
100065fa:	1c18      	adds	r0, r3, #0
100065fc:	46bd      	mov	sp, r7
100065fe:	b002      	add	sp, #8
10006600:	bd80      	pop	{r7, pc}
10006602:	46c0      	nop			; (mov r8, r8)

10006604 <etSystemProtocol_getMessageString>:
/*--------------------- debug helpers */

/* message names as strings for debugging (generate MSC) */
static const char* const etSystemProtocol_messageStrings[] = {"MIN", "poll", "terminate", "MAX"};

const char* etSystemProtocol_getMessageString(int msg_id) {
10006604:	b580      	push	{r7, lr}
10006606:	b082      	sub	sp, #8
10006608:	af00      	add	r7, sp, #0
1000660a:	6078      	str	r0, [r7, #4]
	if (msg_id<etSystemProtocol_MSG_MIN || msg_id>etSystemProtocol_MSG_MAX+1){
1000660c:	687b      	ldr	r3, [r7, #4]
1000660e:	2b00      	cmp	r3, #0
10006610:	db02      	blt.n	10006618 <etSystemProtocol_getMessageString+0x14>
10006612:	687b      	ldr	r3, [r7, #4]
10006614:	2b04      	cmp	r3, #4
10006616:	dd01      	ble.n	1000661c <etSystemProtocol_getMessageString+0x18>
		/* id out of range */
		return "Message ID out of range";
10006618:	4b04      	ldr	r3, [pc, #16]	; (1000662c <etSystemProtocol_getMessageString+0x28>)
1000661a:	e003      	b.n	10006624 <etSystemProtocol_getMessageString+0x20>
	}
	else{
		return etSystemProtocol_messageStrings[msg_id];
1000661c:	4b04      	ldr	r3, [pc, #16]	; (10006630 <etSystemProtocol_getMessageString+0x2c>)
1000661e:	687a      	ldr	r2, [r7, #4]
10006620:	0092      	lsls	r2, r2, #2
10006622:	58d3      	ldr	r3, [r2, r3]
	}
}
10006624:	1c18      	adds	r0, r3, #0
10006626:	46bd      	mov	sp, r7
10006628:	b002      	add	sp, #8
1000662a:	bd80      	pop	{r7, pc}
1000662c:	1000acf4 	.word	0x1000acf4
10006630:	1000ace4 	.word	0x1000ace4

10006634 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
10006634:	b590      	push	{r4, r7, lr}
10006636:	b08b      	sub	sp, #44	; 0x2c
10006638:	af02      	add	r7, sp, #8
1000663a:	60f8      	str	r0, [r7, #12]
1000663c:	60b9      	str	r1, [r7, #8]
1000663e:	603b      	str	r3, [r7, #0]
10006640:	1dbb      	adds	r3, r7, #6
10006642:	801a      	strh	r2, [r3, #0]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
10006644:	68fb      	ldr	r3, [r7, #12]
10006646:	2b00      	cmp	r3, #0
10006648:	d101      	bne.n	1000664e <xTaskGenericCreate+0x1a>
1000664a:	b672      	cpsid	i
1000664c:	e7fe      	b.n	1000664c <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
1000664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006650:	2b04      	cmp	r3, #4
10006652:	d901      	bls.n	10006658 <xTaskGenericCreate+0x24>
10006654:	b672      	cpsid	i
10006656:	e7fe      	b.n	10006656 <xTaskGenericCreate+0x22>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
10006658:	1dbb      	adds	r3, r7, #6
1000665a:	881a      	ldrh	r2, [r3, #0]
1000665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000665e:	1c10      	adds	r0, r2, #0
10006660:	1c19      	adds	r1, r3, #0
10006662:	f001 f919 	bl	10007898 <prvAllocateTCBAndStack>
10006666:	1c03      	adds	r3, r0, #0
10006668:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
1000666a:	69bb      	ldr	r3, [r7, #24]
1000666c:	2b00      	cmp	r3, #0
1000666e:	d100      	bne.n	10006672 <xTaskGenericCreate+0x3e>
10006670:	e073      	b.n	1000675a <xTaskGenericCreate+0x126>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
10006672:	69bb      	ldr	r3, [r7, #24]
10006674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10006676:	1dbb      	adds	r3, r7, #6
10006678:	881b      	ldrh	r3, [r3, #0]
1000667a:	3b01      	subs	r3, #1
1000667c:	009b      	lsls	r3, r3, #2
1000667e:	18d3      	adds	r3, r2, r3
10006680:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
10006682:	697b      	ldr	r3, [r7, #20]
10006684:	2207      	movs	r2, #7
10006686:	4393      	bics	r3, r2
10006688:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( uint32_t ) pxTopOfStack & ( uint32_t ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
1000668a:	697a      	ldr	r2, [r7, #20]
1000668c:	2307      	movs	r3, #7
1000668e:	4013      	ands	r3, r2
10006690:	d001      	beq.n	10006696 <xTaskGenericCreate+0x62>
10006692:	b672      	cpsid	i
10006694:	e7fe      	b.n	10006694 <xTaskGenericCreate+0x60>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
10006696:	69b8      	ldr	r0, [r7, #24]
10006698:	68b9      	ldr	r1, [r7, #8]
1000669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000669c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000669e:	1dbc      	adds	r4, r7, #6
100066a0:	8824      	ldrh	r4, [r4, #0]
100066a2:	9400      	str	r4, [sp, #0]
100066a4:	f000 fffa 	bl	1000769c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
100066a8:	6979      	ldr	r1, [r7, #20]
100066aa:	68fa      	ldr	r2, [r7, #12]
100066ac:	683b      	ldr	r3, [r7, #0]
100066ae:	1c08      	adds	r0, r1, #0
100066b0:	1c11      	adds	r1, r2, #0
100066b2:	1c1a      	adds	r2, r3, #0
100066b4:	f001 fe64 	bl	10008380 <pxPortInitialiseStack>
100066b8:	1c02      	adds	r2, r0, #0
100066ba:	69bb      	ldr	r3, [r7, #24]
100066bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
100066be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100066c0:	2b00      	cmp	r3, #0
100066c2:	d002      	beq.n	100066ca <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
100066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100066c6:	69ba      	ldr	r2, [r7, #24]
100066c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
100066ca:	f001 fee1 	bl	10008490 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
100066ce:	4b2e      	ldr	r3, [pc, #184]	; (10006788 <xTaskGenericCreate+0x154>)
100066d0:	681b      	ldr	r3, [r3, #0]
100066d2:	1c5a      	adds	r2, r3, #1
100066d4:	4b2c      	ldr	r3, [pc, #176]	; (10006788 <xTaskGenericCreate+0x154>)
100066d6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
100066d8:	4b2c      	ldr	r3, [pc, #176]	; (1000678c <xTaskGenericCreate+0x158>)
100066da:	681b      	ldr	r3, [r3, #0]
100066dc:	2b00      	cmp	r3, #0
100066de:	d109      	bne.n	100066f4 <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
100066e0:	4b2a      	ldr	r3, [pc, #168]	; (1000678c <xTaskGenericCreate+0x158>)
100066e2:	69ba      	ldr	r2, [r7, #24]
100066e4:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
100066e6:	4b28      	ldr	r3, [pc, #160]	; (10006788 <xTaskGenericCreate+0x154>)
100066e8:	681b      	ldr	r3, [r3, #0]
100066ea:	2b01      	cmp	r3, #1
100066ec:	d10f      	bne.n	1000670e <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
100066ee:	f001 f81f 	bl	10007730 <prvInitialiseTaskLists>
100066f2:	e00c      	b.n	1000670e <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
100066f4:	4b26      	ldr	r3, [pc, #152]	; (10006790 <xTaskGenericCreate+0x15c>)
100066f6:	681b      	ldr	r3, [r3, #0]
100066f8:	2b00      	cmp	r3, #0
100066fa:	d108      	bne.n	1000670e <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
100066fc:	4b23      	ldr	r3, [pc, #140]	; (1000678c <xTaskGenericCreate+0x158>)
100066fe:	681b      	ldr	r3, [r3, #0]
10006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006704:	429a      	cmp	r2, r3
10006706:	d802      	bhi.n	1000670e <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
10006708:	4b20      	ldr	r3, [pc, #128]	; (1000678c <xTaskGenericCreate+0x158>)
1000670a:	69ba      	ldr	r2, [r7, #24]
1000670c:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
1000670e:	4b21      	ldr	r3, [pc, #132]	; (10006794 <xTaskGenericCreate+0x160>)
10006710:	681b      	ldr	r3, [r3, #0]
10006712:	1c5a      	adds	r2, r3, #1
10006714:	4b1f      	ldr	r3, [pc, #124]	; (10006794 <xTaskGenericCreate+0x160>)
10006716:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
10006718:	4b1e      	ldr	r3, [pc, #120]	; (10006794 <xTaskGenericCreate+0x160>)
1000671a:	681a      	ldr	r2, [r3, #0]
1000671c:	69bb      	ldr	r3, [r7, #24]
1000671e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
10006720:	69bb      	ldr	r3, [r7, #24]
10006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006724:	4b1c      	ldr	r3, [pc, #112]	; (10006798 <xTaskGenericCreate+0x164>)
10006726:	681b      	ldr	r3, [r3, #0]
10006728:	429a      	cmp	r2, r3
1000672a:	d903      	bls.n	10006734 <xTaskGenericCreate+0x100>
1000672c:	69bb      	ldr	r3, [r7, #24]
1000672e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006730:	4b19      	ldr	r3, [pc, #100]	; (10006798 <xTaskGenericCreate+0x164>)
10006732:	601a      	str	r2, [r3, #0]
10006734:	69bb      	ldr	r3, [r7, #24]
10006736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006738:	1c13      	adds	r3, r2, #0
1000673a:	009b      	lsls	r3, r3, #2
1000673c:	189b      	adds	r3, r3, r2
1000673e:	009b      	lsls	r3, r3, #2
10006740:	4a16      	ldr	r2, [pc, #88]	; (1000679c <xTaskGenericCreate+0x168>)
10006742:	189a      	adds	r2, r3, r2
10006744:	69bb      	ldr	r3, [r7, #24]
10006746:	3304      	adds	r3, #4
10006748:	1c10      	adds	r0, r2, #0
1000674a:	1c19      	adds	r1, r3, #0
1000674c:	f002 f9b0 	bl	10008ab0 <vListInsertEnd>

			xReturn = pdPASS;
10006750:	2301      	movs	r3, #1
10006752:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
10006754:	f001 feac 	bl	100084b0 <vPortExitCritical>
10006758:	e002      	b.n	10006760 <xTaskGenericCreate+0x12c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1000675a:	2301      	movs	r3, #1
1000675c:	425b      	negs	r3, r3
1000675e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
10006760:	69fb      	ldr	r3, [r7, #28]
10006762:	2b01      	cmp	r3, #1
10006764:	d10b      	bne.n	1000677e <xTaskGenericCreate+0x14a>
	{
		if( xSchedulerRunning != pdFALSE )
10006766:	4b0a      	ldr	r3, [pc, #40]	; (10006790 <xTaskGenericCreate+0x15c>)
10006768:	681b      	ldr	r3, [r3, #0]
1000676a:	2b00      	cmp	r3, #0
1000676c:	d007      	beq.n	1000677e <xTaskGenericCreate+0x14a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
1000676e:	4b07      	ldr	r3, [pc, #28]	; (1000678c <xTaskGenericCreate+0x158>)
10006770:	681b      	ldr	r3, [r3, #0]
10006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006776:	429a      	cmp	r2, r3
10006778:	d201      	bcs.n	1000677e <xTaskGenericCreate+0x14a>
			{
				taskYIELD_IF_USING_PREEMPTION();
1000677a:	f001 fe7b 	bl	10008474 <vPortYield>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
1000677e:	69fb      	ldr	r3, [r7, #28]
}
10006780:	1c18      	adds	r0, r3, #0
10006782:	46bd      	mov	sp, r7
10006784:	b009      	add	sp, #36	; 0x24
10006786:	bd90      	pop	{r4, r7, pc}
10006788:	20000d94 	.word	0x20000d94
1000678c:	20000cbc 	.word	0x20000cbc
10006790:	20000da0 	.word	0x20000da0
10006794:	20000db0 	.word	0x20000db0
10006798:	20000d9c 	.word	0x20000d9c
1000679c:	20000cc0 	.word	0x20000cc0

100067a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
100067a0:	b580      	push	{r7, lr}
100067a2:	b084      	sub	sp, #16
100067a4:	af00      	add	r7, sp, #0
100067a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
100067a8:	f001 fe72 	bl	10008490 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
100067ac:	687b      	ldr	r3, [r7, #4]
100067ae:	2b00      	cmp	r3, #0
100067b0:	d102      	bne.n	100067b8 <vTaskDelete+0x18>
100067b2:	4b20      	ldr	r3, [pc, #128]	; (10006834 <vTaskDelete+0x94>)
100067b4:	681b      	ldr	r3, [r3, #0]
100067b6:	e000      	b.n	100067ba <vTaskDelete+0x1a>
100067b8:	687b      	ldr	r3, [r7, #4]
100067ba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
100067bc:	68fb      	ldr	r3, [r7, #12]
100067be:	3304      	adds	r3, #4
100067c0:	1c18      	adds	r0, r3, #0
100067c2:	f002 f9cd 	bl	10008b60 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
100067c6:	68fb      	ldr	r3, [r7, #12]
100067c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100067ca:	2b00      	cmp	r3, #0
100067cc:	d004      	beq.n	100067d8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
100067ce:	68fb      	ldr	r3, [r7, #12]
100067d0:	3318      	adds	r3, #24
100067d2:	1c18      	adds	r0, r3, #0
100067d4:	f002 f9c4 	bl	10008b60 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
100067d8:	68fb      	ldr	r3, [r7, #12]
100067da:	3304      	adds	r3, #4
100067dc:	4a16      	ldr	r2, [pc, #88]	; (10006838 <vTaskDelete+0x98>)
100067de:	1c10      	adds	r0, r2, #0
100067e0:	1c19      	adds	r1, r3, #0
100067e2:	f002 f965 	bl	10008ab0 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
100067e6:	4b15      	ldr	r3, [pc, #84]	; (1000683c <vTaskDelete+0x9c>)
100067e8:	681b      	ldr	r3, [r3, #0]
100067ea:	1c5a      	adds	r2, r3, #1
100067ec:	4b13      	ldr	r3, [pc, #76]	; (1000683c <vTaskDelete+0x9c>)
100067ee:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
100067f0:	4b13      	ldr	r3, [pc, #76]	; (10006840 <vTaskDelete+0xa0>)
100067f2:	681b      	ldr	r3, [r3, #0]
100067f4:	1c5a      	adds	r2, r3, #1
100067f6:	4b12      	ldr	r3, [pc, #72]	; (10006840 <vTaskDelete+0xa0>)
100067f8:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
100067fa:	f001 fe59 	bl	100084b0 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
100067fe:	4b11      	ldr	r3, [pc, #68]	; (10006844 <vTaskDelete+0xa4>)
10006800:	681b      	ldr	r3, [r3, #0]
10006802:	2b00      	cmp	r3, #0
10006804:	d013      	beq.n	1000682e <vTaskDelete+0x8e>
		{
			if( pxTCB == pxCurrentTCB )
10006806:	4b0b      	ldr	r3, [pc, #44]	; (10006834 <vTaskDelete+0x94>)
10006808:	681b      	ldr	r3, [r3, #0]
1000680a:	68fa      	ldr	r2, [r7, #12]
1000680c:	429a      	cmp	r2, r3
1000680e:	d108      	bne.n	10006822 <vTaskDelete+0x82>
			{
				configASSERT( uxSchedulerSuspended == 0 );
10006810:	4b0d      	ldr	r3, [pc, #52]	; (10006848 <vTaskDelete+0xa8>)
10006812:	681b      	ldr	r3, [r3, #0]
10006814:	2b00      	cmp	r3, #0
10006816:	d001      	beq.n	1000681c <vTaskDelete+0x7c>
10006818:	b672      	cpsid	i
1000681a:	e7fe      	b.n	1000681a <vTaskDelete+0x7a>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
1000681c:	f001 fe2a 	bl	10008474 <vPortYield>
10006820:	e005      	b.n	1000682e <vTaskDelete+0x8e>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
10006822:	f001 fe35 	bl	10008490 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
10006826:	f001 f927 	bl	10007a78 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
1000682a:	f001 fe41 	bl	100084b0 <vPortExitCritical>
			}
		}
	}
1000682e:	46bd      	mov	sp, r7
10006830:	b004      	add	sp, #16
10006832:	bd80      	pop	{r7, pc}
10006834:	20000cbc 	.word	0x20000cbc
10006838:	20000d68 	.word	0x20000d68
1000683c:	20000d7c 	.word	0x20000d7c
10006840:	20000db0 	.word	0x20000db0
10006844:	20000da0 	.word	0x20000da0
10006848:	20000db4 	.word	0x20000db4

1000684c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
1000684c:	b580      	push	{r7, lr}
1000684e:	b086      	sub	sp, #24
10006850:	af00      	add	r7, sp, #0
10006852:	6078      	str	r0, [r7, #4]
10006854:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
10006856:	2300      	movs	r3, #0
10006858:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
1000685a:	687b      	ldr	r3, [r7, #4]
1000685c:	2b00      	cmp	r3, #0
1000685e:	d101      	bne.n	10006864 <vTaskDelayUntil+0x18>
10006860:	b672      	cpsid	i
10006862:	e7fe      	b.n	10006862 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
10006864:	683b      	ldr	r3, [r7, #0]
10006866:	2b00      	cmp	r3, #0
10006868:	d101      	bne.n	1000686e <vTaskDelayUntil+0x22>
1000686a:	b672      	cpsid	i
1000686c:	e7fe      	b.n	1000686c <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
1000686e:	4b24      	ldr	r3, [pc, #144]	; (10006900 <vTaskDelayUntil+0xb4>)
10006870:	681b      	ldr	r3, [r3, #0]
10006872:	2b00      	cmp	r3, #0
10006874:	d001      	beq.n	1000687a <vTaskDelayUntil+0x2e>
10006876:	b672      	cpsid	i
10006878:	e7fe      	b.n	10006878 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
1000687a:	f000 faa1 	bl	10006dc0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
1000687e:	4b21      	ldr	r3, [pc, #132]	; (10006904 <vTaskDelayUntil+0xb8>)
10006880:	681b      	ldr	r3, [r3, #0]
10006882:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
10006884:	687b      	ldr	r3, [r7, #4]
10006886:	681a      	ldr	r2, [r3, #0]
10006888:	683b      	ldr	r3, [r7, #0]
1000688a:	18d3      	adds	r3, r2, r3
1000688c:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
1000688e:	687b      	ldr	r3, [r7, #4]
10006890:	681a      	ldr	r2, [r3, #0]
10006892:	693b      	ldr	r3, [r7, #16]
10006894:	429a      	cmp	r2, r3
10006896:	d90b      	bls.n	100068b0 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
10006898:	687b      	ldr	r3, [r7, #4]
1000689a:	681a      	ldr	r2, [r3, #0]
1000689c:	68fb      	ldr	r3, [r7, #12]
1000689e:	429a      	cmp	r2, r3
100068a0:	d911      	bls.n	100068c6 <vTaskDelayUntil+0x7a>
100068a2:	68fa      	ldr	r2, [r7, #12]
100068a4:	693b      	ldr	r3, [r7, #16]
100068a6:	429a      	cmp	r2, r3
100068a8:	d90d      	bls.n	100068c6 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
100068aa:	2301      	movs	r3, #1
100068ac:	617b      	str	r3, [r7, #20]
100068ae:	e00a      	b.n	100068c6 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
100068b0:	687b      	ldr	r3, [r7, #4]
100068b2:	681a      	ldr	r2, [r3, #0]
100068b4:	68fb      	ldr	r3, [r7, #12]
100068b6:	429a      	cmp	r2, r3
100068b8:	d803      	bhi.n	100068c2 <vTaskDelayUntil+0x76>
100068ba:	68fa      	ldr	r2, [r7, #12]
100068bc:	693b      	ldr	r3, [r7, #16]
100068be:	429a      	cmp	r2, r3
100068c0:	d901      	bls.n	100068c6 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
100068c2:	2301      	movs	r3, #1
100068c4:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
100068c6:	687b      	ldr	r3, [r7, #4]
100068c8:	68fa      	ldr	r2, [r7, #12]
100068ca:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
100068cc:	697b      	ldr	r3, [r7, #20]
100068ce:	2b00      	cmp	r3, #0
100068d0:	d009      	beq.n	100068e6 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
100068d2:	4b0d      	ldr	r3, [pc, #52]	; (10006908 <vTaskDelayUntil+0xbc>)
100068d4:	681b      	ldr	r3, [r3, #0]
100068d6:	3304      	adds	r3, #4
100068d8:	1c18      	adds	r0, r3, #0
100068da:	f002 f941 	bl	10008b60 <uxListRemove>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
100068de:	68fb      	ldr	r3, [r7, #12]
100068e0:	1c18      	adds	r0, r3, #0
100068e2:	f000 ffa3 	bl	1000782c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
100068e6:	f000 fa77 	bl	10006dd8 <xTaskResumeAll>
100068ea:	1c03      	adds	r3, r0, #0
100068ec:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
100068ee:	68bb      	ldr	r3, [r7, #8]
100068f0:	2b00      	cmp	r3, #0
100068f2:	d101      	bne.n	100068f8 <vTaskDelayUntil+0xac>
		{
			portYIELD_WITHIN_API();
100068f4:	f001 fdbe 	bl	10008474 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
100068f8:	46bd      	mov	sp, r7
100068fa:	b006      	add	sp, #24
100068fc:	bd80      	pop	{r7, pc}
100068fe:	46c0      	nop			; (mov r8, r8)
10006900:	20000db4 	.word	0x20000db4
10006904:	20000d98 	.word	0x20000d98
10006908:	20000cbc 	.word	0x20000cbc

1000690c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
1000690c:	b580      	push	{r7, lr}
1000690e:	b084      	sub	sp, #16
10006910:	af00      	add	r7, sp, #0
10006912:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
10006914:	2300      	movs	r3, #0
10006916:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
10006918:	687b      	ldr	r3, [r7, #4]
1000691a:	2b00      	cmp	r3, #0
1000691c:	d01a      	beq.n	10006954 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
1000691e:	4b11      	ldr	r3, [pc, #68]	; (10006964 <vTaskDelay+0x58>)
10006920:	681b      	ldr	r3, [r3, #0]
10006922:	2b00      	cmp	r3, #0
10006924:	d001      	beq.n	1000692a <vTaskDelay+0x1e>
10006926:	b672      	cpsid	i
10006928:	e7fe      	b.n	10006928 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1000692a:	f000 fa49 	bl	10006dc0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
1000692e:	4b0e      	ldr	r3, [pc, #56]	; (10006968 <vTaskDelay+0x5c>)
10006930:	681a      	ldr	r2, [r3, #0]
10006932:	687b      	ldr	r3, [r7, #4]
10006934:	18d3      	adds	r3, r2, r3
10006936:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
10006938:	4b0c      	ldr	r3, [pc, #48]	; (1000696c <vTaskDelay+0x60>)
1000693a:	681b      	ldr	r3, [r3, #0]
1000693c:	3304      	adds	r3, #4
1000693e:	1c18      	adds	r0, r3, #0
10006940:	f002 f90e 	bl	10008b60 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
10006944:	68bb      	ldr	r3, [r7, #8]
10006946:	1c18      	adds	r0, r3, #0
10006948:	f000 ff70 	bl	1000782c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
1000694c:	f000 fa44 	bl	10006dd8 <xTaskResumeAll>
10006950:	1c03      	adds	r3, r0, #0
10006952:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
10006954:	68fb      	ldr	r3, [r7, #12]
10006956:	2b00      	cmp	r3, #0
10006958:	d101      	bne.n	1000695e <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
1000695a:	f001 fd8b 	bl	10008474 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1000695e:	46bd      	mov	sp, r7
10006960:	b004      	add	sp, #16
10006962:	bd80      	pop	{r7, pc}
10006964:	20000db4 	.word	0x20000db4
10006968:	20000d98 	.word	0x20000d98
1000696c:	20000cbc 	.word	0x20000cbc

10006970 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
10006970:	b580      	push	{r7, lr}
10006972:	b084      	sub	sp, #16
10006974:	af00      	add	r7, sp, #0
10006976:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
10006978:	f001 fd8a 	bl	10008490 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
1000697c:	687b      	ldr	r3, [r7, #4]
1000697e:	2b00      	cmp	r3, #0
10006980:	d102      	bne.n	10006988 <uxTaskPriorityGet+0x18>
10006982:	4b07      	ldr	r3, [pc, #28]	; (100069a0 <uxTaskPriorityGet+0x30>)
10006984:	681b      	ldr	r3, [r3, #0]
10006986:	e000      	b.n	1000698a <uxTaskPriorityGet+0x1a>
10006988:	687b      	ldr	r3, [r7, #4]
1000698a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
1000698c:	68fb      	ldr	r3, [r7, #12]
1000698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10006990:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
10006992:	f001 fd8d 	bl	100084b0 <vPortExitCritical>

		return uxReturn;
10006996:	68bb      	ldr	r3, [r7, #8]
	}
10006998:	1c18      	adds	r0, r3, #0
1000699a:	46bd      	mov	sp, r7
1000699c:	b004      	add	sp, #16
1000699e:	bd80      	pop	{r7, pc}
100069a0:	20000cbc 	.word	0x20000cbc

100069a4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
100069a4:	b580      	push	{r7, lr}
100069a6:	b086      	sub	sp, #24
100069a8:	af00      	add	r7, sp, #0
100069aa:	6078      	str	r0, [r7, #4]
100069ac:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
100069ae:	2300      	movs	r3, #0
100069b0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
100069b2:	683b      	ldr	r3, [r7, #0]
100069b4:	2b04      	cmp	r3, #4
100069b6:	d901      	bls.n	100069bc <vTaskPrioritySet+0x18>
100069b8:	b672      	cpsid	i
100069ba:	e7fe      	b.n	100069ba <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
100069bc:	683b      	ldr	r3, [r7, #0]
100069be:	2b04      	cmp	r3, #4
100069c0:	d901      	bls.n	100069c6 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
100069c2:	2304      	movs	r3, #4
100069c4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
100069c6:	f001 fd63 	bl	10008490 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
100069ca:	687b      	ldr	r3, [r7, #4]
100069cc:	2b00      	cmp	r3, #0
100069ce:	d102      	bne.n	100069d6 <vTaskPrioritySet+0x32>
100069d0:	4b39      	ldr	r3, [pc, #228]	; (10006ab8 <vTaskPrioritySet+0x114>)
100069d2:	681b      	ldr	r3, [r3, #0]
100069d4:	e000      	b.n	100069d8 <vTaskPrioritySet+0x34>
100069d6:	687b      	ldr	r3, [r7, #4]
100069d8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
100069da:	693b      	ldr	r3, [r7, #16]
100069dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100069de:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
100069e0:	68fa      	ldr	r2, [r7, #12]
100069e2:	683b      	ldr	r3, [r7, #0]
100069e4:	429a      	cmp	r2, r3
100069e6:	d062      	beq.n	10006aae <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
100069e8:	683a      	ldr	r2, [r7, #0]
100069ea:	68fb      	ldr	r3, [r7, #12]
100069ec:	429a      	cmp	r2, r3
100069ee:	d90d      	bls.n	10006a0c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
100069f0:	4b31      	ldr	r3, [pc, #196]	; (10006ab8 <vTaskPrioritySet+0x114>)
100069f2:	681b      	ldr	r3, [r3, #0]
100069f4:	693a      	ldr	r2, [r7, #16]
100069f6:	429a      	cmp	r2, r3
100069f8:	d00f      	beq.n	10006a1a <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
100069fa:	4b2f      	ldr	r3, [pc, #188]	; (10006ab8 <vTaskPrioritySet+0x114>)
100069fc:	681b      	ldr	r3, [r3, #0]
100069fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006a00:	683b      	ldr	r3, [r7, #0]
10006a02:	429a      	cmp	r2, r3
10006a04:	d809      	bhi.n	10006a1a <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
10006a06:	2301      	movs	r3, #1
10006a08:	617b      	str	r3, [r7, #20]
10006a0a:	e006      	b.n	10006a1a <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
10006a0c:	4b2a      	ldr	r3, [pc, #168]	; (10006ab8 <vTaskPrioritySet+0x114>)
10006a0e:	681b      	ldr	r3, [r3, #0]
10006a10:	693a      	ldr	r2, [r7, #16]
10006a12:	429a      	cmp	r2, r3
10006a14:	d101      	bne.n	10006a1a <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
10006a16:	2301      	movs	r3, #1
10006a18:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
10006a1a:	693b      	ldr	r3, [r7, #16]
10006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10006a1e:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
10006a20:	693b      	ldr	r3, [r7, #16]
10006a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10006a24:	693b      	ldr	r3, [r7, #16]
10006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10006a28:	429a      	cmp	r2, r3
10006a2a:	d102      	bne.n	10006a32 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
10006a2c:	693b      	ldr	r3, [r7, #16]
10006a2e:	683a      	ldr	r2, [r7, #0]
10006a30:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
10006a32:	693b      	ldr	r3, [r7, #16]
10006a34:	683a      	ldr	r2, [r7, #0]
10006a36:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
10006a38:	693b      	ldr	r3, [r7, #16]
10006a3a:	699b      	ldr	r3, [r3, #24]
10006a3c:	2b00      	cmp	r3, #0
10006a3e:	db04      	blt.n	10006a4a <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10006a40:	683b      	ldr	r3, [r7, #0]
10006a42:	2205      	movs	r2, #5
10006a44:	1ad2      	subs	r2, r2, r3
10006a46:	693b      	ldr	r3, [r7, #16]
10006a48:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
10006a4a:	693b      	ldr	r3, [r7, #16]
10006a4c:	6959      	ldr	r1, [r3, #20]
10006a4e:	68ba      	ldr	r2, [r7, #8]
10006a50:	1c13      	adds	r3, r2, #0
10006a52:	009b      	lsls	r3, r3, #2
10006a54:	189b      	adds	r3, r3, r2
10006a56:	009b      	lsls	r3, r3, #2
10006a58:	4a18      	ldr	r2, [pc, #96]	; (10006abc <vTaskPrioritySet+0x118>)
10006a5a:	189b      	adds	r3, r3, r2
10006a5c:	4299      	cmp	r1, r3
10006a5e:	d101      	bne.n	10006a64 <vTaskPrioritySet+0xc0>
10006a60:	2301      	movs	r3, #1
10006a62:	e000      	b.n	10006a66 <vTaskPrioritySet+0xc2>
10006a64:	2300      	movs	r3, #0
10006a66:	2b00      	cmp	r3, #0
10006a68:	d01c      	beq.n	10006aa4 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
10006a6a:	693b      	ldr	r3, [r7, #16]
10006a6c:	3304      	adds	r3, #4
10006a6e:	1c18      	adds	r0, r3, #0
10006a70:	f002 f876 	bl	10008b60 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
10006a74:	693b      	ldr	r3, [r7, #16]
10006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006a78:	4b11      	ldr	r3, [pc, #68]	; (10006ac0 <vTaskPrioritySet+0x11c>)
10006a7a:	681b      	ldr	r3, [r3, #0]
10006a7c:	429a      	cmp	r2, r3
10006a7e:	d903      	bls.n	10006a88 <vTaskPrioritySet+0xe4>
10006a80:	693b      	ldr	r3, [r7, #16]
10006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006a84:	4b0e      	ldr	r3, [pc, #56]	; (10006ac0 <vTaskPrioritySet+0x11c>)
10006a86:	601a      	str	r2, [r3, #0]
10006a88:	693b      	ldr	r3, [r7, #16]
10006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006a8c:	1c13      	adds	r3, r2, #0
10006a8e:	009b      	lsls	r3, r3, #2
10006a90:	189b      	adds	r3, r3, r2
10006a92:	009b      	lsls	r3, r3, #2
10006a94:	4a09      	ldr	r2, [pc, #36]	; (10006abc <vTaskPrioritySet+0x118>)
10006a96:	189a      	adds	r2, r3, r2
10006a98:	693b      	ldr	r3, [r7, #16]
10006a9a:	3304      	adds	r3, #4
10006a9c:	1c10      	adds	r0, r2, #0
10006a9e:	1c19      	adds	r1, r3, #0
10006aa0:	f002 f806 	bl	10008ab0 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
10006aa4:	697b      	ldr	r3, [r7, #20]
10006aa6:	2b01      	cmp	r3, #1
10006aa8:	d101      	bne.n	10006aae <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
10006aaa:	f001 fce3 	bl	10008474 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
10006aae:	f001 fcff 	bl	100084b0 <vPortExitCritical>
	}
10006ab2:	46bd      	mov	sp, r7
10006ab4:	b006      	add	sp, #24
10006ab6:	bd80      	pop	{r7, pc}
10006ab8:	20000cbc 	.word	0x20000cbc
10006abc:	20000cc0 	.word	0x20000cc0
10006ac0:	20000d9c 	.word	0x20000d9c

10006ac4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
10006ac4:	b580      	push	{r7, lr}
10006ac6:	b084      	sub	sp, #16
10006ac8:	af00      	add	r7, sp, #0
10006aca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
10006acc:	f001 fce0 	bl	10008490 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
10006ad0:	687b      	ldr	r3, [r7, #4]
10006ad2:	2b00      	cmp	r3, #0
10006ad4:	d102      	bne.n	10006adc <vTaskSuspend+0x18>
10006ad6:	4b24      	ldr	r3, [pc, #144]	; (10006b68 <vTaskSuspend+0xa4>)
10006ad8:	681b      	ldr	r3, [r3, #0]
10006ada:	e000      	b.n	10006ade <vTaskSuspend+0x1a>
10006adc:	687b      	ldr	r3, [r7, #4]
10006ade:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
10006ae0:	68fb      	ldr	r3, [r7, #12]
10006ae2:	3304      	adds	r3, #4
10006ae4:	1c18      	adds	r0, r3, #0
10006ae6:	f002 f83b 	bl	10008b60 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
10006aea:	68fb      	ldr	r3, [r7, #12]
10006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006aee:	2b00      	cmp	r3, #0
10006af0:	d004      	beq.n	10006afc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
10006af2:	68fb      	ldr	r3, [r7, #12]
10006af4:	3318      	adds	r3, #24
10006af6:	1c18      	adds	r0, r3, #0
10006af8:	f002 f832 	bl	10008b60 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
10006afc:	68fb      	ldr	r3, [r7, #12]
10006afe:	3304      	adds	r3, #4
10006b00:	4a1a      	ldr	r2, [pc, #104]	; (10006b6c <vTaskSuspend+0xa8>)
10006b02:	1c10      	adds	r0, r2, #0
10006b04:	1c19      	adds	r1, r3, #0
10006b06:	f001 ffd3 	bl	10008ab0 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
10006b0a:	f001 fcd1 	bl	100084b0 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
10006b0e:	4b16      	ldr	r3, [pc, #88]	; (10006b68 <vTaskSuspend+0xa4>)
10006b10:	681b      	ldr	r3, [r3, #0]
10006b12:	68fa      	ldr	r2, [r7, #12]
10006b14:	429a      	cmp	r2, r3
10006b16:	d119      	bne.n	10006b4c <vTaskSuspend+0x88>
		{
			if( xSchedulerRunning != pdFALSE )
10006b18:	4b15      	ldr	r3, [pc, #84]	; (10006b70 <vTaskSuspend+0xac>)
10006b1a:	681b      	ldr	r3, [r3, #0]
10006b1c:	2b00      	cmp	r3, #0
10006b1e:	d008      	beq.n	10006b32 <vTaskSuspend+0x6e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
10006b20:	4b14      	ldr	r3, [pc, #80]	; (10006b74 <vTaskSuspend+0xb0>)
10006b22:	681b      	ldr	r3, [r3, #0]
10006b24:	2b00      	cmp	r3, #0
10006b26:	d001      	beq.n	10006b2c <vTaskSuspend+0x68>
10006b28:	b672      	cpsid	i
10006b2a:	e7fe      	b.n	10006b2a <vTaskSuspend+0x66>
				portYIELD_WITHIN_API();
10006b2c:	f001 fca2 	bl	10008474 <vPortYield>
10006b30:	e016      	b.n	10006b60 <vTaskSuspend+0x9c>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
10006b32:	4b0e      	ldr	r3, [pc, #56]	; (10006b6c <vTaskSuspend+0xa8>)
10006b34:	681a      	ldr	r2, [r3, #0]
10006b36:	4b10      	ldr	r3, [pc, #64]	; (10006b78 <vTaskSuspend+0xb4>)
10006b38:	681b      	ldr	r3, [r3, #0]
10006b3a:	429a      	cmp	r2, r3
10006b3c:	d103      	bne.n	10006b46 <vTaskSuspend+0x82>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
10006b3e:	4b0a      	ldr	r3, [pc, #40]	; (10006b68 <vTaskSuspend+0xa4>)
10006b40:	2200      	movs	r2, #0
10006b42:	601a      	str	r2, [r3, #0]
10006b44:	e00c      	b.n	10006b60 <vTaskSuspend+0x9c>
				}
				else
				{
					vTaskSwitchContext();
10006b46:	f000 fb3b 	bl	100071c0 <vTaskSwitchContext>
10006b4a:	e009      	b.n	10006b60 <vTaskSuspend+0x9c>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
10006b4c:	4b08      	ldr	r3, [pc, #32]	; (10006b70 <vTaskSuspend+0xac>)
10006b4e:	681b      	ldr	r3, [r3, #0]
10006b50:	2b00      	cmp	r3, #0
10006b52:	d005      	beq.n	10006b60 <vTaskSuspend+0x9c>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
10006b54:	f001 fc9c 	bl	10008490 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
10006b58:	f000 ff8e 	bl	10007a78 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
10006b5c:	f001 fca8 	bl	100084b0 <vPortExitCritical>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
10006b60:	46bd      	mov	sp, r7
10006b62:	b004      	add	sp, #16
10006b64:	bd80      	pop	{r7, pc}
10006b66:	46c0      	nop			; (mov r8, r8)
10006b68:	20000cbc 	.word	0x20000cbc
10006b6c:	20000d80 	.word	0x20000d80
10006b70:	20000da0 	.word	0x20000da0
10006b74:	20000db4 	.word	0x20000db4
10006b78:	20000d94 	.word	0x20000d94

10006b7c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
10006b7c:	b580      	push	{r7, lr}
10006b7e:	b084      	sub	sp, #16
10006b80:	af00      	add	r7, sp, #0
10006b82:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
10006b84:	2300      	movs	r3, #0
10006b86:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
10006b88:	687b      	ldr	r3, [r7, #4]
10006b8a:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
10006b8c:	687b      	ldr	r3, [r7, #4]
10006b8e:	2b00      	cmp	r3, #0
10006b90:	d101      	bne.n	10006b96 <prvTaskIsTaskSuspended+0x1a>
10006b92:	b672      	cpsid	i
10006b94:	e7fe      	b.n	10006b94 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
10006b96:	68bb      	ldr	r3, [r7, #8]
10006b98:	695a      	ldr	r2, [r3, #20]
10006b9a:	4b0e      	ldr	r3, [pc, #56]	; (10006bd4 <prvTaskIsTaskSuspended+0x58>)
10006b9c:	429a      	cmp	r2, r3
10006b9e:	d101      	bne.n	10006ba4 <prvTaskIsTaskSuspended+0x28>
10006ba0:	2301      	movs	r3, #1
10006ba2:	e000      	b.n	10006ba6 <prvTaskIsTaskSuspended+0x2a>
10006ba4:	2300      	movs	r3, #0
10006ba6:	2b00      	cmp	r3, #0
10006ba8:	d00f      	beq.n	10006bca <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
10006baa:	68bb      	ldr	r3, [r7, #8]
10006bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10006bae:	4b0a      	ldr	r3, [pc, #40]	; (10006bd8 <prvTaskIsTaskSuspended+0x5c>)
10006bb0:	429a      	cmp	r2, r3
10006bb2:	d00a      	beq.n	10006bca <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
10006bb4:	68bb      	ldr	r3, [r7, #8]
10006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006bb8:	2b00      	cmp	r3, #0
10006bba:	d101      	bne.n	10006bc0 <prvTaskIsTaskSuspended+0x44>
10006bbc:	2301      	movs	r3, #1
10006bbe:	e000      	b.n	10006bc2 <prvTaskIsTaskSuspended+0x46>
10006bc0:	2300      	movs	r3, #0
10006bc2:	2b00      	cmp	r3, #0
10006bc4:	d001      	beq.n	10006bca <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
10006bc6:	2301      	movs	r3, #1
10006bc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
10006bca:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
10006bcc:	1c18      	adds	r0, r3, #0
10006bce:	46bd      	mov	sp, r7
10006bd0:	b004      	add	sp, #16
10006bd2:	bd80      	pop	{r7, pc}
10006bd4:	20000d80 	.word	0x20000d80
10006bd8:	20000d54 	.word	0x20000d54

10006bdc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
10006bdc:	b580      	push	{r7, lr}
10006bde:	b084      	sub	sp, #16
10006be0:	af00      	add	r7, sp, #0
10006be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
10006be4:	687b      	ldr	r3, [r7, #4]
10006be6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
10006be8:	687b      	ldr	r3, [r7, #4]
10006bea:	2b00      	cmp	r3, #0
10006bec:	d101      	bne.n	10006bf2 <vTaskResume+0x16>
10006bee:	b672      	cpsid	i
10006bf0:	e7fe      	b.n	10006bf0 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
10006bf2:	68fb      	ldr	r3, [r7, #12]
10006bf4:	2b00      	cmp	r3, #0
10006bf6:	d035      	beq.n	10006c64 <vTaskResume+0x88>
10006bf8:	4b1c      	ldr	r3, [pc, #112]	; (10006c6c <vTaskResume+0x90>)
10006bfa:	681b      	ldr	r3, [r3, #0]
10006bfc:	68fa      	ldr	r2, [r7, #12]
10006bfe:	429a      	cmp	r2, r3
10006c00:	d030      	beq.n	10006c64 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
10006c02:	f001 fc45 	bl	10008490 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
10006c06:	68fb      	ldr	r3, [r7, #12]
10006c08:	1c18      	adds	r0, r3, #0
10006c0a:	f7ff ffb7 	bl	10006b7c <prvTaskIsTaskSuspended>
10006c0e:	1c03      	adds	r3, r0, #0
10006c10:	2b01      	cmp	r3, #1
10006c12:	d125      	bne.n	10006c60 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
10006c14:	68fb      	ldr	r3, [r7, #12]
10006c16:	3304      	adds	r3, #4
10006c18:	1c18      	adds	r0, r3, #0
10006c1a:	f001 ffa1 	bl	10008b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
10006c1e:	68fb      	ldr	r3, [r7, #12]
10006c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006c22:	4b13      	ldr	r3, [pc, #76]	; (10006c70 <vTaskResume+0x94>)
10006c24:	681b      	ldr	r3, [r3, #0]
10006c26:	429a      	cmp	r2, r3
10006c28:	d903      	bls.n	10006c32 <vTaskResume+0x56>
10006c2a:	68fb      	ldr	r3, [r7, #12]
10006c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006c2e:	4b10      	ldr	r3, [pc, #64]	; (10006c70 <vTaskResume+0x94>)
10006c30:	601a      	str	r2, [r3, #0]
10006c32:	68fb      	ldr	r3, [r7, #12]
10006c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006c36:	1c13      	adds	r3, r2, #0
10006c38:	009b      	lsls	r3, r3, #2
10006c3a:	189b      	adds	r3, r3, r2
10006c3c:	009b      	lsls	r3, r3, #2
10006c3e:	4a0d      	ldr	r2, [pc, #52]	; (10006c74 <vTaskResume+0x98>)
10006c40:	189a      	adds	r2, r3, r2
10006c42:	68fb      	ldr	r3, [r7, #12]
10006c44:	3304      	adds	r3, #4
10006c46:	1c10      	adds	r0, r2, #0
10006c48:	1c19      	adds	r1, r3, #0
10006c4a:	f001 ff31 	bl	10008ab0 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
10006c4e:	68fb      	ldr	r3, [r7, #12]
10006c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006c52:	4b06      	ldr	r3, [pc, #24]	; (10006c6c <vTaskResume+0x90>)
10006c54:	681b      	ldr	r3, [r3, #0]
10006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10006c58:	429a      	cmp	r2, r3
10006c5a:	d301      	bcc.n	10006c60 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
10006c5c:	f001 fc0a 	bl	10008474 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
10006c60:	f001 fc26 	bl	100084b0 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
10006c64:	46bd      	mov	sp, r7
10006c66:	b004      	add	sp, #16
10006c68:	bd80      	pop	{r7, pc}
10006c6a:	46c0      	nop			; (mov r8, r8)
10006c6c:	20000cbc 	.word	0x20000cbc
10006c70:	20000d9c 	.word	0x20000d9c
10006c74:	20000cc0 	.word	0x20000cc0

10006c78 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
10006c78:	b580      	push	{r7, lr}
10006c7a:	b086      	sub	sp, #24
10006c7c:	af00      	add	r7, sp, #0
10006c7e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
10006c80:	2300      	movs	r3, #0
10006c82:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
10006c84:	687b      	ldr	r3, [r7, #4]
10006c86:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
10006c88:	687b      	ldr	r3, [r7, #4]
10006c8a:	2b00      	cmp	r3, #0
10006c8c:	d101      	bne.n	10006c92 <xTaskResumeFromISR+0x1a>
10006c8e:	b672      	cpsid	i
10006c90:	e7fe      	b.n	10006c90 <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
10006c92:	f001 fc23 	bl	100084dc <ulSetInterruptMaskFromISR>
10006c96:	1c03      	adds	r3, r0, #0
10006c98:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
10006c9a:	693b      	ldr	r3, [r7, #16]
10006c9c:	1c18      	adds	r0, r3, #0
10006c9e:	f7ff ff6d 	bl	10006b7c <prvTaskIsTaskSuspended>
10006ca2:	1c03      	adds	r3, r0, #0
10006ca4:	2b01      	cmp	r3, #1
10006ca6:	d131      	bne.n	10006d0c <xTaskResumeFromISR+0x94>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10006ca8:	4b1d      	ldr	r3, [pc, #116]	; (10006d20 <xTaskResumeFromISR+0xa8>)
10006caa:	681b      	ldr	r3, [r3, #0]
10006cac:	2b00      	cmp	r3, #0
10006cae:	d126      	bne.n	10006cfe <xTaskResumeFromISR+0x86>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
10006cb0:	693b      	ldr	r3, [r7, #16]
10006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006cb4:	4b1b      	ldr	r3, [pc, #108]	; (10006d24 <xTaskResumeFromISR+0xac>)
10006cb6:	681b      	ldr	r3, [r3, #0]
10006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10006cba:	429a      	cmp	r2, r3
10006cbc:	d301      	bcc.n	10006cc2 <xTaskResumeFromISR+0x4a>
					{
						xYieldRequired = pdTRUE;
10006cbe:	2301      	movs	r3, #1
10006cc0:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
10006cc2:	693b      	ldr	r3, [r7, #16]
10006cc4:	3304      	adds	r3, #4
10006cc6:	1c18      	adds	r0, r3, #0
10006cc8:	f001 ff4a 	bl	10008b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
10006ccc:	693b      	ldr	r3, [r7, #16]
10006cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006cd0:	4b15      	ldr	r3, [pc, #84]	; (10006d28 <xTaskResumeFromISR+0xb0>)
10006cd2:	681b      	ldr	r3, [r3, #0]
10006cd4:	429a      	cmp	r2, r3
10006cd6:	d903      	bls.n	10006ce0 <xTaskResumeFromISR+0x68>
10006cd8:	693b      	ldr	r3, [r7, #16]
10006cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006cdc:	4b12      	ldr	r3, [pc, #72]	; (10006d28 <xTaskResumeFromISR+0xb0>)
10006cde:	601a      	str	r2, [r3, #0]
10006ce0:	693b      	ldr	r3, [r7, #16]
10006ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006ce4:	1c13      	adds	r3, r2, #0
10006ce6:	009b      	lsls	r3, r3, #2
10006ce8:	189b      	adds	r3, r3, r2
10006cea:	009b      	lsls	r3, r3, #2
10006cec:	4a0f      	ldr	r2, [pc, #60]	; (10006d2c <xTaskResumeFromISR+0xb4>)
10006cee:	189a      	adds	r2, r3, r2
10006cf0:	693b      	ldr	r3, [r7, #16]
10006cf2:	3304      	adds	r3, #4
10006cf4:	1c10      	adds	r0, r2, #0
10006cf6:	1c19      	adds	r1, r3, #0
10006cf8:	f001 feda 	bl	10008ab0 <vListInsertEnd>
10006cfc:	e006      	b.n	10006d0c <xTaskResumeFromISR+0x94>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
10006cfe:	693b      	ldr	r3, [r7, #16]
10006d00:	3318      	adds	r3, #24
10006d02:	4a0b      	ldr	r2, [pc, #44]	; (10006d30 <xTaskResumeFromISR+0xb8>)
10006d04:	1c10      	adds	r0, r2, #0
10006d06:	1c19      	adds	r1, r3, #0
10006d08:	f001 fed2 	bl	10008ab0 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
10006d0c:	68fb      	ldr	r3, [r7, #12]
10006d0e:	1c18      	adds	r0, r3, #0
10006d10:	f001 fbea 	bl	100084e8 <vClearInterruptMaskFromISR>

		return xYieldRequired;
10006d14:	697b      	ldr	r3, [r7, #20]
	}
10006d16:	1c18      	adds	r0, r3, #0
10006d18:	46bd      	mov	sp, r7
10006d1a:	b006      	add	sp, #24
10006d1c:	bd80      	pop	{r7, pc}
10006d1e:	46c0      	nop			; (mov r8, r8)
10006d20:	20000db4 	.word	0x20000db4
10006d24:	20000cbc 	.word	0x20000cbc
10006d28:	20000d9c 	.word	0x20000d9c
10006d2c:	20000cc0 	.word	0x20000cc0
10006d30:	20000d54 	.word	0x20000d54

10006d34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
10006d34:	b580      	push	{r7, lr}
10006d36:	b086      	sub	sp, #24
10006d38:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
10006d3a:	4a17      	ldr	r2, [pc, #92]	; (10006d98 <vTaskStartScheduler+0x64>)
10006d3c:	4b17      	ldr	r3, [pc, #92]	; (10006d9c <vTaskStartScheduler+0x68>)
10006d3e:	2100      	movs	r1, #0
10006d40:	9100      	str	r1, [sp, #0]
10006d42:	2100      	movs	r1, #0
10006d44:	9101      	str	r1, [sp, #4]
10006d46:	2100      	movs	r1, #0
10006d48:	9102      	str	r1, [sp, #8]
10006d4a:	2100      	movs	r1, #0
10006d4c:	9103      	str	r1, [sp, #12]
10006d4e:	1c10      	adds	r0, r2, #0
10006d50:	1c19      	adds	r1, r3, #0
10006d52:	2282      	movs	r2, #130	; 0x82
10006d54:	2300      	movs	r3, #0
10006d56:	f7ff fc6d 	bl	10006634 <xTaskGenericCreate>
10006d5a:	1c03      	adds	r3, r0, #0
10006d5c:	607b      	str	r3, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
10006d5e:	687b      	ldr	r3, [r7, #4]
10006d60:	2b01      	cmp	r3, #1
10006d62:	d103      	bne.n	10006d6c <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
10006d64:	f000 ff8a 	bl	10007c7c <xTimerCreateTimerTask>
10006d68:	1c03      	adds	r3, r0, #0
10006d6a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
10006d6c:	687b      	ldr	r3, [r7, #4]
10006d6e:	2b01      	cmp	r3, #1
10006d70:	d109      	bne.n	10006d86 <vTaskStartScheduler+0x52>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
10006d72:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
10006d74:	4b0a      	ldr	r3, [pc, #40]	; (10006da0 <vTaskStartScheduler+0x6c>)
10006d76:	2201      	movs	r2, #1
10006d78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
10006d7a:	4b0a      	ldr	r3, [pc, #40]	; (10006da4 <vTaskStartScheduler+0x70>)
10006d7c:	2200      	movs	r2, #0
10006d7e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
10006d80:	f001 fb48 	bl	10008414 <xPortStartScheduler>
10006d84:	e004      	b.n	10006d90 <vTaskStartScheduler+0x5c>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
10006d86:	687b      	ldr	r3, [r7, #4]
10006d88:	2b00      	cmp	r3, #0
10006d8a:	d101      	bne.n	10006d90 <vTaskStartScheduler+0x5c>
10006d8c:	b672      	cpsid	i
10006d8e:	e7fe      	b.n	10006d8e <vTaskStartScheduler+0x5a>
	}
}
10006d90:	46bd      	mov	sp, r7
10006d92:	b002      	add	sp, #8
10006d94:	bd80      	pop	{r7, pc}
10006d96:	46c0      	nop			; (mov r8, r8)
10006d98:	10007689 	.word	0x10007689
10006d9c:	1000ad0c 	.word	0x1000ad0c
10006da0:	20000da0 	.word	0x20000da0
10006da4:	20000d98 	.word	0x20000d98

10006da8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
10006da8:	b580      	push	{r7, lr}
10006daa:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
10006dac:	b672      	cpsid	i
	xSchedulerRunning = pdFALSE;
10006dae:	4b03      	ldr	r3, [pc, #12]	; (10006dbc <vTaskEndScheduler+0x14>)
10006db0:	2200      	movs	r2, #0
10006db2:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
10006db4:	f001 fb50 	bl	10008458 <vPortEndScheduler>
}
10006db8:	46bd      	mov	sp, r7
10006dba:	bd80      	pop	{r7, pc}
10006dbc:	20000da0 	.word	0x20000da0

10006dc0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
10006dc0:	b580      	push	{r7, lr}
10006dc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
10006dc4:	4b03      	ldr	r3, [pc, #12]	; (10006dd4 <vTaskSuspendAll+0x14>)
10006dc6:	681b      	ldr	r3, [r3, #0]
10006dc8:	1c5a      	adds	r2, r3, #1
10006dca:	4b02      	ldr	r3, [pc, #8]	; (10006dd4 <vTaskSuspendAll+0x14>)
10006dcc:	601a      	str	r2, [r3, #0]
}
10006dce:	46bd      	mov	sp, r7
10006dd0:	bd80      	pop	{r7, pc}
10006dd2:	46c0      	nop			; (mov r8, r8)
10006dd4:	20000db4 	.word	0x20000db4

10006dd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
10006dd8:	b580      	push	{r7, lr}
10006dda:	b082      	sub	sp, #8
10006ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
10006dde:	2300      	movs	r3, #0
10006de0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
10006de2:	4b37      	ldr	r3, [pc, #220]	; (10006ec0 <xTaskResumeAll+0xe8>)
10006de4:	681b      	ldr	r3, [r3, #0]
10006de6:	2b00      	cmp	r3, #0
10006de8:	d101      	bne.n	10006dee <xTaskResumeAll+0x16>
10006dea:	b672      	cpsid	i
10006dec:	e7fe      	b.n	10006dec <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
10006dee:	f001 fb4f 	bl	10008490 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
10006df2:	4b33      	ldr	r3, [pc, #204]	; (10006ec0 <xTaskResumeAll+0xe8>)
10006df4:	681b      	ldr	r3, [r3, #0]
10006df6:	1e5a      	subs	r2, r3, #1
10006df8:	4b31      	ldr	r3, [pc, #196]	; (10006ec0 <xTaskResumeAll+0xe8>)
10006dfa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10006dfc:	4b30      	ldr	r3, [pc, #192]	; (10006ec0 <xTaskResumeAll+0xe8>)
10006dfe:	681b      	ldr	r3, [r3, #0]
10006e00:	2b00      	cmp	r3, #0
10006e02:	d156      	bne.n	10006eb2 <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
10006e04:	4b2f      	ldr	r3, [pc, #188]	; (10006ec4 <xTaskResumeAll+0xec>)
10006e06:	681b      	ldr	r3, [r3, #0]
10006e08:	2b00      	cmp	r3, #0
10006e0a:	d052      	beq.n	10006eb2 <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
10006e0c:	e02f      	b.n	10006e6e <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
10006e0e:	4b2e      	ldr	r3, [pc, #184]	; (10006ec8 <xTaskResumeAll+0xf0>)
10006e10:	68db      	ldr	r3, [r3, #12]
10006e12:	68db      	ldr	r3, [r3, #12]
10006e14:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
10006e16:	683b      	ldr	r3, [r7, #0]
10006e18:	3318      	adds	r3, #24
10006e1a:	1c18      	adds	r0, r3, #0
10006e1c:	f001 fea0 	bl	10008b60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
10006e20:	683b      	ldr	r3, [r7, #0]
10006e22:	3304      	adds	r3, #4
10006e24:	1c18      	adds	r0, r3, #0
10006e26:	f001 fe9b 	bl	10008b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
10006e2a:	683b      	ldr	r3, [r7, #0]
10006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006e2e:	4b27      	ldr	r3, [pc, #156]	; (10006ecc <xTaskResumeAll+0xf4>)
10006e30:	681b      	ldr	r3, [r3, #0]
10006e32:	429a      	cmp	r2, r3
10006e34:	d903      	bls.n	10006e3e <xTaskResumeAll+0x66>
10006e36:	683b      	ldr	r3, [r7, #0]
10006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006e3a:	4b24      	ldr	r3, [pc, #144]	; (10006ecc <xTaskResumeAll+0xf4>)
10006e3c:	601a      	str	r2, [r3, #0]
10006e3e:	683b      	ldr	r3, [r7, #0]
10006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006e42:	1c13      	adds	r3, r2, #0
10006e44:	009b      	lsls	r3, r3, #2
10006e46:	189b      	adds	r3, r3, r2
10006e48:	009b      	lsls	r3, r3, #2
10006e4a:	4a21      	ldr	r2, [pc, #132]	; (10006ed0 <xTaskResumeAll+0xf8>)
10006e4c:	189a      	adds	r2, r3, r2
10006e4e:	683b      	ldr	r3, [r7, #0]
10006e50:	3304      	adds	r3, #4
10006e52:	1c10      	adds	r0, r2, #0
10006e54:	1c19      	adds	r1, r3, #0
10006e56:	f001 fe2b 	bl	10008ab0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
10006e5a:	683b      	ldr	r3, [r7, #0]
10006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006e5e:	4b1d      	ldr	r3, [pc, #116]	; (10006ed4 <xTaskResumeAll+0xfc>)
10006e60:	681b      	ldr	r3, [r3, #0]
10006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10006e64:	429a      	cmp	r2, r3
10006e66:	d302      	bcc.n	10006e6e <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
10006e68:	4b1b      	ldr	r3, [pc, #108]	; (10006ed8 <xTaskResumeAll+0x100>)
10006e6a:	2201      	movs	r2, #1
10006e6c:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
10006e6e:	4b16      	ldr	r3, [pc, #88]	; (10006ec8 <xTaskResumeAll+0xf0>)
10006e70:	681b      	ldr	r3, [r3, #0]
10006e72:	2b00      	cmp	r3, #0
10006e74:	d1cb      	bne.n	10006e0e <xTaskResumeAll+0x36>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
10006e76:	4b19      	ldr	r3, [pc, #100]	; (10006edc <xTaskResumeAll+0x104>)
10006e78:	681b      	ldr	r3, [r3, #0]
10006e7a:	2b00      	cmp	r3, #0
10006e7c:	d011      	beq.n	10006ea2 <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
10006e7e:	e00c      	b.n	10006e9a <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
10006e80:	f000 f8de 	bl	10007040 <xTaskIncrementTick>
10006e84:	1c03      	adds	r3, r0, #0
10006e86:	2b00      	cmp	r3, #0
10006e88:	d002      	beq.n	10006e90 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
10006e8a:	4b13      	ldr	r3, [pc, #76]	; (10006ed8 <xTaskResumeAll+0x100>)
10006e8c:	2201      	movs	r2, #1
10006e8e:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
10006e90:	4b12      	ldr	r3, [pc, #72]	; (10006edc <xTaskResumeAll+0x104>)
10006e92:	681b      	ldr	r3, [r3, #0]
10006e94:	1e5a      	subs	r2, r3, #1
10006e96:	4b11      	ldr	r3, [pc, #68]	; (10006edc <xTaskResumeAll+0x104>)
10006e98:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
10006e9a:	4b10      	ldr	r3, [pc, #64]	; (10006edc <xTaskResumeAll+0x104>)
10006e9c:	681b      	ldr	r3, [r3, #0]
10006e9e:	2b00      	cmp	r3, #0
10006ea0:	d1ee      	bne.n	10006e80 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
10006ea2:	4b0d      	ldr	r3, [pc, #52]	; (10006ed8 <xTaskResumeAll+0x100>)
10006ea4:	681b      	ldr	r3, [r3, #0]
10006ea6:	2b01      	cmp	r3, #1
10006ea8:	d103      	bne.n	10006eb2 <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
10006eaa:	2301      	movs	r3, #1
10006eac:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
10006eae:	f001 fae1 	bl	10008474 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
10006eb2:	f001 fafd 	bl	100084b0 <vPortExitCritical>

	return xAlreadyYielded;
10006eb6:	687b      	ldr	r3, [r7, #4]
}
10006eb8:	1c18      	adds	r0, r3, #0
10006eba:	46bd      	mov	sp, r7
10006ebc:	b002      	add	sp, #8
10006ebe:	bd80      	pop	{r7, pc}
10006ec0:	20000db4 	.word	0x20000db4
10006ec4:	20000d94 	.word	0x20000d94
10006ec8:	20000d54 	.word	0x20000d54
10006ecc:	20000d9c 	.word	0x20000d9c
10006ed0:	20000cc0 	.word	0x20000cc0
10006ed4:	20000cbc 	.word	0x20000cbc
10006ed8:	20000da8 	.word	0x20000da8
10006edc:	20000da4 	.word	0x20000da4

10006ee0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
10006ee0:	b580      	push	{r7, lr}
10006ee2:	b082      	sub	sp, #8
10006ee4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
10006ee6:	f001 fad3 	bl	10008490 <vPortEnterCritical>
	{
		xTicks = xTickCount;
10006eea:	4b05      	ldr	r3, [pc, #20]	; (10006f00 <xTaskGetTickCount+0x20>)
10006eec:	681b      	ldr	r3, [r3, #0]
10006eee:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
10006ef0:	f001 fade 	bl	100084b0 <vPortExitCritical>

	return xTicks;
10006ef4:	687b      	ldr	r3, [r7, #4]
}
10006ef6:	1c18      	adds	r0, r3, #0
10006ef8:	46bd      	mov	sp, r7
10006efa:	b002      	add	sp, #8
10006efc:	bd80      	pop	{r7, pc}
10006efe:	46c0      	nop			; (mov r8, r8)
10006f00:	20000d98 	.word	0x20000d98

10006f04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
10006f04:	b580      	push	{r7, lr}
10006f06:	b082      	sub	sp, #8
10006f08:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
10006f0a:	f001 fae7 	bl	100084dc <ulSetInterruptMaskFromISR>
10006f0e:	1c03      	adds	r3, r0, #0
10006f10:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
10006f12:	4b06      	ldr	r3, [pc, #24]	; (10006f2c <xTaskGetTickCountFromISR+0x28>)
10006f14:	681b      	ldr	r3, [r3, #0]
10006f16:	603b      	str	r3, [r7, #0]
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
10006f18:	687b      	ldr	r3, [r7, #4]
10006f1a:	1c18      	adds	r0, r3, #0
10006f1c:	f001 fae4 	bl	100084e8 <vClearInterruptMaskFromISR>

	return xReturn;
10006f20:	683b      	ldr	r3, [r7, #0]
}
10006f22:	1c18      	adds	r0, r3, #0
10006f24:	46bd      	mov	sp, r7
10006f26:	b002      	add	sp, #8
10006f28:	bd80      	pop	{r7, pc}
10006f2a:	46c0      	nop			; (mov r8, r8)
10006f2c:	20000d98 	.word	0x20000d98

10006f30 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
10006f30:	b580      	push	{r7, lr}
10006f32:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
10006f34:	4b02      	ldr	r3, [pc, #8]	; (10006f40 <uxTaskGetNumberOfTasks+0x10>)
10006f36:	681b      	ldr	r3, [r3, #0]
}
10006f38:	1c18      	adds	r0, r3, #0
10006f3a:	46bd      	mov	sp, r7
10006f3c:	bd80      	pop	{r7, pc}
10006f3e:	46c0      	nop			; (mov r8, r8)
10006f40:	20000d94 	.word	0x20000d94

10006f44 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
10006f44:	b580      	push	{r7, lr}
10006f46:	b086      	sub	sp, #24
10006f48:	af00      	add	r7, sp, #0
10006f4a:	60f8      	str	r0, [r7, #12]
10006f4c:	60b9      	str	r1, [r7, #8]
10006f4e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
10006f50:	2300      	movs	r3, #0
10006f52:	617b      	str	r3, [r7, #20]
10006f54:	2305      	movs	r3, #5
10006f56:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
10006f58:	f7ff ff32 	bl	10006dc0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
10006f5c:	4b32      	ldr	r3, [pc, #200]	; (10007028 <uxTaskGetSystemState+0xe4>)
10006f5e:	681b      	ldr	r3, [r3, #0]
10006f60:	68ba      	ldr	r2, [r7, #8]
10006f62:	429a      	cmp	r2, r3
10006f64:	d359      	bcc.n	1000701a <uxTaskGetSystemState+0xd6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
10006f66:	693b      	ldr	r3, [r7, #16]
10006f68:	3b01      	subs	r3, #1
10006f6a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
10006f6c:	697b      	ldr	r3, [r7, #20]
10006f6e:	015b      	lsls	r3, r3, #5
10006f70:	68fa      	ldr	r2, [r7, #12]
10006f72:	18d1      	adds	r1, r2, r3
10006f74:	693a      	ldr	r2, [r7, #16]
10006f76:	1c13      	adds	r3, r2, #0
10006f78:	009b      	lsls	r3, r3, #2
10006f7a:	189b      	adds	r3, r3, r2
10006f7c:	009b      	lsls	r3, r3, #2
10006f7e:	4a2b      	ldr	r2, [pc, #172]	; (1000702c <uxTaskGetSystemState+0xe8>)
10006f80:	189b      	adds	r3, r3, r2
10006f82:	1c08      	adds	r0, r1, #0
10006f84:	1c19      	adds	r1, r3, #0
10006f86:	2201      	movs	r2, #1
10006f88:	f000 fcbe 	bl	10007908 <prvListTaskWithinSingleList>
10006f8c:	1c03      	adds	r3, r0, #0
10006f8e:	697a      	ldr	r2, [r7, #20]
10006f90:	18d3      	adds	r3, r2, r3
10006f92:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10006f94:	693b      	ldr	r3, [r7, #16]
10006f96:	2b00      	cmp	r3, #0
10006f98:	d1e5      	bne.n	10006f66 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
10006f9a:	697b      	ldr	r3, [r7, #20]
10006f9c:	015b      	lsls	r3, r3, #5
10006f9e:	68fa      	ldr	r2, [r7, #12]
10006fa0:	18d2      	adds	r2, r2, r3
10006fa2:	4b23      	ldr	r3, [pc, #140]	; (10007030 <uxTaskGetSystemState+0xec>)
10006fa4:	681b      	ldr	r3, [r3, #0]
10006fa6:	1c10      	adds	r0, r2, #0
10006fa8:	1c19      	adds	r1, r3, #0
10006faa:	2202      	movs	r2, #2
10006fac:	f000 fcac 	bl	10007908 <prvListTaskWithinSingleList>
10006fb0:	1c03      	adds	r3, r0, #0
10006fb2:	697a      	ldr	r2, [r7, #20]
10006fb4:	18d3      	adds	r3, r2, r3
10006fb6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
10006fb8:	697b      	ldr	r3, [r7, #20]
10006fba:	015b      	lsls	r3, r3, #5
10006fbc:	68fa      	ldr	r2, [r7, #12]
10006fbe:	18d2      	adds	r2, r2, r3
10006fc0:	4b1c      	ldr	r3, [pc, #112]	; (10007034 <uxTaskGetSystemState+0xf0>)
10006fc2:	681b      	ldr	r3, [r3, #0]
10006fc4:	1c10      	adds	r0, r2, #0
10006fc6:	1c19      	adds	r1, r3, #0
10006fc8:	2202      	movs	r2, #2
10006fca:	f000 fc9d 	bl	10007908 <prvListTaskWithinSingleList>
10006fce:	1c03      	adds	r3, r0, #0
10006fd0:	697a      	ldr	r2, [r7, #20]
10006fd2:	18d3      	adds	r3, r2, r3
10006fd4:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
10006fd6:	697b      	ldr	r3, [r7, #20]
10006fd8:	015b      	lsls	r3, r3, #5
10006fda:	68fa      	ldr	r2, [r7, #12]
10006fdc:	18d2      	adds	r2, r2, r3
10006fde:	4b16      	ldr	r3, [pc, #88]	; (10007038 <uxTaskGetSystemState+0xf4>)
10006fe0:	1c10      	adds	r0, r2, #0
10006fe2:	1c19      	adds	r1, r3, #0
10006fe4:	2204      	movs	r2, #4
10006fe6:	f000 fc8f 	bl	10007908 <prvListTaskWithinSingleList>
10006fea:	1c03      	adds	r3, r0, #0
10006fec:	697a      	ldr	r2, [r7, #20]
10006fee:	18d3      	adds	r3, r2, r3
10006ff0:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
10006ff2:	697b      	ldr	r3, [r7, #20]
10006ff4:	015b      	lsls	r3, r3, #5
10006ff6:	68fa      	ldr	r2, [r7, #12]
10006ff8:	18d2      	adds	r2, r2, r3
10006ffa:	4b10      	ldr	r3, [pc, #64]	; (1000703c <uxTaskGetSystemState+0xf8>)
10006ffc:	1c10      	adds	r0, r2, #0
10006ffe:	1c19      	adds	r1, r3, #0
10007000:	2203      	movs	r2, #3
10007002:	f000 fc81 	bl	10007908 <prvListTaskWithinSingleList>
10007006:	1c03      	adds	r3, r0, #0
10007008:	697a      	ldr	r2, [r7, #20]
1000700a:	18d3      	adds	r3, r2, r3
1000700c:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
1000700e:	687b      	ldr	r3, [r7, #4]
10007010:	2b00      	cmp	r3, #0
10007012:	d002      	beq.n	1000701a <uxTaskGetSystemState+0xd6>
					{
						*pulTotalRunTime = 0;
10007014:	687b      	ldr	r3, [r7, #4]
10007016:	2200      	movs	r2, #0
10007018:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
1000701a:	f7ff fedd 	bl	10006dd8 <xTaskResumeAll>

		return uxTask;
1000701e:	697b      	ldr	r3, [r7, #20]
	}
10007020:	1c18      	adds	r0, r3, #0
10007022:	46bd      	mov	sp, r7
10007024:	b006      	add	sp, #24
10007026:	bd80      	pop	{r7, pc}
10007028:	20000d94 	.word	0x20000d94
1000702c:	20000cc0 	.word	0x20000cc0
10007030:	20000d4c 	.word	0x20000d4c
10007034:	20000d50 	.word	0x20000d50
10007038:	20000d68 	.word	0x20000d68
1000703c:	20000d80 	.word	0x20000d80

10007040 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
10007040:	b580      	push	{r7, lr}
10007042:	b086      	sub	sp, #24
10007044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
10007046:	2300      	movs	r3, #0
10007048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1000704a:	4b52      	ldr	r3, [pc, #328]	; (10007194 <xTaskIncrementTick+0x154>)
1000704c:	681b      	ldr	r3, [r3, #0]
1000704e:	2b00      	cmp	r3, #0
10007050:	d000      	beq.n	10007054 <xTaskIncrementTick+0x14>
10007052:	e08c      	b.n	1000716e <xTaskIncrementTick+0x12e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
10007054:	4b50      	ldr	r3, [pc, #320]	; (10007198 <xTaskIncrementTick+0x158>)
10007056:	681b      	ldr	r3, [r3, #0]
10007058:	1c5a      	adds	r2, r3, #1
1000705a:	4b4f      	ldr	r3, [pc, #316]	; (10007198 <xTaskIncrementTick+0x158>)
1000705c:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
1000705e:	4b4e      	ldr	r3, [pc, #312]	; (10007198 <xTaskIncrementTick+0x158>)
10007060:	681b      	ldr	r3, [r3, #0]
10007062:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
10007064:	693b      	ldr	r3, [r7, #16]
10007066:	2b00      	cmp	r3, #0
10007068:	d117      	bne.n	1000709a <xTaskIncrementTick+0x5a>
			{
				taskSWITCH_DELAYED_LISTS();
1000706a:	4b4c      	ldr	r3, [pc, #304]	; (1000719c <xTaskIncrementTick+0x15c>)
1000706c:	681b      	ldr	r3, [r3, #0]
1000706e:	681b      	ldr	r3, [r3, #0]
10007070:	2b00      	cmp	r3, #0
10007072:	d001      	beq.n	10007078 <xTaskIncrementTick+0x38>
10007074:	b672      	cpsid	i
10007076:	e7fe      	b.n	10007076 <xTaskIncrementTick+0x36>
10007078:	4b48      	ldr	r3, [pc, #288]	; (1000719c <xTaskIncrementTick+0x15c>)
1000707a:	681b      	ldr	r3, [r3, #0]
1000707c:	60fb      	str	r3, [r7, #12]
1000707e:	4b48      	ldr	r3, [pc, #288]	; (100071a0 <xTaskIncrementTick+0x160>)
10007080:	681a      	ldr	r2, [r3, #0]
10007082:	4b46      	ldr	r3, [pc, #280]	; (1000719c <xTaskIncrementTick+0x15c>)
10007084:	601a      	str	r2, [r3, #0]
10007086:	4b46      	ldr	r3, [pc, #280]	; (100071a0 <xTaskIncrementTick+0x160>)
10007088:	68fa      	ldr	r2, [r7, #12]
1000708a:	601a      	str	r2, [r3, #0]
1000708c:	4b45      	ldr	r3, [pc, #276]	; (100071a4 <xTaskIncrementTick+0x164>)
1000708e:	681b      	ldr	r3, [r3, #0]
10007090:	1c5a      	adds	r2, r3, #1
10007092:	4b44      	ldr	r3, [pc, #272]	; (100071a4 <xTaskIncrementTick+0x164>)
10007094:	601a      	str	r2, [r3, #0]
10007096:	f000 fcef 	bl	10007a78 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
1000709a:	4b43      	ldr	r3, [pc, #268]	; (100071a8 <xTaskIncrementTick+0x168>)
1000709c:	681b      	ldr	r3, [r3, #0]
1000709e:	693a      	ldr	r2, [r7, #16]
100070a0:	429a      	cmp	r2, r3
100070a2:	d350      	bcc.n	10007146 <xTaskIncrementTick+0x106>
100070a4:	e000      	b.n	100070a8 <xTaskIncrementTick+0x68>
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
100070a6:	46c0      	nop			; (mov r8, r8)
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
100070a8:	4b3c      	ldr	r3, [pc, #240]	; (1000719c <xTaskIncrementTick+0x15c>)
100070aa:	681b      	ldr	r3, [r3, #0]
100070ac:	681b      	ldr	r3, [r3, #0]
100070ae:	2b00      	cmp	r3, #0
100070b0:	d101      	bne.n	100070b6 <xTaskIncrementTick+0x76>
100070b2:	2301      	movs	r3, #1
100070b4:	e000      	b.n	100070b8 <xTaskIncrementTick+0x78>
100070b6:	2300      	movs	r3, #0
100070b8:	2b00      	cmp	r3, #0
100070ba:	d004      	beq.n	100070c6 <xTaskIncrementTick+0x86>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
100070bc:	4b3a      	ldr	r3, [pc, #232]	; (100071a8 <xTaskIncrementTick+0x168>)
100070be:	2201      	movs	r2, #1
100070c0:	4252      	negs	r2, r2
100070c2:	601a      	str	r2, [r3, #0]
						break;
100070c4:	e03f      	b.n	10007146 <xTaskIncrementTick+0x106>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
100070c6:	4b35      	ldr	r3, [pc, #212]	; (1000719c <xTaskIncrementTick+0x15c>)
100070c8:	681b      	ldr	r3, [r3, #0]
100070ca:	68db      	ldr	r3, [r3, #12]
100070cc:	68db      	ldr	r3, [r3, #12]
100070ce:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
100070d0:	68bb      	ldr	r3, [r7, #8]
100070d2:	685b      	ldr	r3, [r3, #4]
100070d4:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
100070d6:	693a      	ldr	r2, [r7, #16]
100070d8:	687b      	ldr	r3, [r7, #4]
100070da:	429a      	cmp	r2, r3
100070dc:	d203      	bcs.n	100070e6 <xTaskIncrementTick+0xa6>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
100070de:	4b32      	ldr	r3, [pc, #200]	; (100071a8 <xTaskIncrementTick+0x168>)
100070e0:	687a      	ldr	r2, [r7, #4]
100070e2:	601a      	str	r2, [r3, #0]
							break;
100070e4:	e02f      	b.n	10007146 <xTaskIncrementTick+0x106>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
100070e6:	68bb      	ldr	r3, [r7, #8]
100070e8:	3304      	adds	r3, #4
100070ea:	1c18      	adds	r0, r3, #0
100070ec:	f001 fd38 	bl	10008b60 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
100070f0:	68bb      	ldr	r3, [r7, #8]
100070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100070f4:	2b00      	cmp	r3, #0
100070f6:	d004      	beq.n	10007102 <xTaskIncrementTick+0xc2>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
100070f8:	68bb      	ldr	r3, [r7, #8]
100070fa:	3318      	adds	r3, #24
100070fc:	1c18      	adds	r0, r3, #0
100070fe:	f001 fd2f 	bl	10008b60 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
10007102:	68bb      	ldr	r3, [r7, #8]
10007104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007106:	4b29      	ldr	r3, [pc, #164]	; (100071ac <xTaskIncrementTick+0x16c>)
10007108:	681b      	ldr	r3, [r3, #0]
1000710a:	429a      	cmp	r2, r3
1000710c:	d903      	bls.n	10007116 <xTaskIncrementTick+0xd6>
1000710e:	68bb      	ldr	r3, [r7, #8]
10007110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007112:	4b26      	ldr	r3, [pc, #152]	; (100071ac <xTaskIncrementTick+0x16c>)
10007114:	601a      	str	r2, [r3, #0]
10007116:	68bb      	ldr	r3, [r7, #8]
10007118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000711a:	1c13      	adds	r3, r2, #0
1000711c:	009b      	lsls	r3, r3, #2
1000711e:	189b      	adds	r3, r3, r2
10007120:	009b      	lsls	r3, r3, #2
10007122:	4a23      	ldr	r2, [pc, #140]	; (100071b0 <xTaskIncrementTick+0x170>)
10007124:	189a      	adds	r2, r3, r2
10007126:	68bb      	ldr	r3, [r7, #8]
10007128:	3304      	adds	r3, #4
1000712a:	1c10      	adds	r0, r2, #0
1000712c:	1c19      	adds	r1, r3, #0
1000712e:	f001 fcbf 	bl	10008ab0 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
10007132:	68bb      	ldr	r3, [r7, #8]
10007134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007136:	4b1f      	ldr	r3, [pc, #124]	; (100071b4 <xTaskIncrementTick+0x174>)
10007138:	681b      	ldr	r3, [r3, #0]
1000713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000713c:	429a      	cmp	r2, r3
1000713e:	d3b2      	bcc.n	100070a6 <xTaskIncrementTick+0x66>
							{
								xSwitchRequired = pdTRUE;
10007140:	2301      	movs	r3, #1
10007142:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
10007144:	e7af      	b.n	100070a6 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
10007146:	4b1b      	ldr	r3, [pc, #108]	; (100071b4 <xTaskIncrementTick+0x174>)
10007148:	681b      	ldr	r3, [r3, #0]
1000714a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000714c:	4918      	ldr	r1, [pc, #96]	; (100071b0 <xTaskIncrementTick+0x170>)
1000714e:	1c13      	adds	r3, r2, #0
10007150:	009b      	lsls	r3, r3, #2
10007152:	189b      	adds	r3, r3, r2
10007154:	009b      	lsls	r3, r3, #2
10007156:	585b      	ldr	r3, [r3, r1]
10007158:	2b01      	cmp	r3, #1
1000715a:	d901      	bls.n	10007160 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
1000715c:	2301      	movs	r3, #1
1000715e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
10007160:	4b15      	ldr	r3, [pc, #84]	; (100071b8 <xTaskIncrementTick+0x178>)
10007162:	681b      	ldr	r3, [r3, #0]
10007164:	2b00      	cmp	r3, #0
10007166:	d109      	bne.n	1000717c <xTaskIncrementTick+0x13c>
			{
				vApplicationTickHook();
10007168:	f7fe ff30 	bl	10005fcc <vApplicationTickHook>
1000716c:	e006      	b.n	1000717c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
1000716e:	4b12      	ldr	r3, [pc, #72]	; (100071b8 <xTaskIncrementTick+0x178>)
10007170:	681b      	ldr	r3, [r3, #0]
10007172:	1c5a      	adds	r2, r3, #1
10007174:	4b10      	ldr	r3, [pc, #64]	; (100071b8 <xTaskIncrementTick+0x178>)
10007176:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
10007178:	f7fe ff28 	bl	10005fcc <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
1000717c:	4b0f      	ldr	r3, [pc, #60]	; (100071bc <xTaskIncrementTick+0x17c>)
1000717e:	681b      	ldr	r3, [r3, #0]
10007180:	2b00      	cmp	r3, #0
10007182:	d001      	beq.n	10007188 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
10007184:	2301      	movs	r3, #1
10007186:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
10007188:	697b      	ldr	r3, [r7, #20]
}
1000718a:	1c18      	adds	r0, r3, #0
1000718c:	46bd      	mov	sp, r7
1000718e:	b006      	add	sp, #24
10007190:	bd80      	pop	{r7, pc}
10007192:	46c0      	nop			; (mov r8, r8)
10007194:	20000db4 	.word	0x20000db4
10007198:	20000d98 	.word	0x20000d98
1000719c:	20000d4c 	.word	0x20000d4c
100071a0:	20000d50 	.word	0x20000d50
100071a4:	20000dac 	.word	0x20000dac
100071a8:	200020a8 	.word	0x200020a8
100071ac:	20000d9c 	.word	0x20000d9c
100071b0:	20000cc0 	.word	0x20000cc0
100071b4:	20000cbc 	.word	0x20000cbc
100071b8:	20000da4 	.word	0x20000da4
100071bc:	20000da8 	.word	0x20000da8

100071c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
100071c0:	b580      	push	{r7, lr}
100071c2:	b082      	sub	sp, #8
100071c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
100071c6:	4b34      	ldr	r3, [pc, #208]	; (10007298 <vTaskSwitchContext+0xd8>)
100071c8:	681b      	ldr	r3, [r3, #0]
100071ca:	2b00      	cmp	r3, #0
100071cc:	d003      	beq.n	100071d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
100071ce:	4b33      	ldr	r3, [pc, #204]	; (1000729c <vTaskSwitchContext+0xdc>)
100071d0:	2201      	movs	r2, #1
100071d2:	601a      	str	r2, [r3, #0]
100071d4:	e05c      	b.n	10007290 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
100071d6:	4b31      	ldr	r3, [pc, #196]	; (1000729c <vTaskSwitchContext+0xdc>)
100071d8:	2200      	movs	r2, #0
100071da:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
100071dc:	4b30      	ldr	r3, [pc, #192]	; (100072a0 <vTaskSwitchContext+0xe0>)
100071de:	681b      	ldr	r3, [r3, #0]
100071e0:	681a      	ldr	r2, [r3, #0]
100071e2:	4b2f      	ldr	r3, [pc, #188]	; (100072a0 <vTaskSwitchContext+0xe0>)
100071e4:	681b      	ldr	r3, [r3, #0]
100071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100071e8:	429a      	cmp	r2, r3
100071ea:	d808      	bhi.n	100071fe <vTaskSwitchContext+0x3e>
100071ec:	4b2c      	ldr	r3, [pc, #176]	; (100072a0 <vTaskSwitchContext+0xe0>)
100071ee:	681a      	ldr	r2, [r3, #0]
100071f0:	4b2b      	ldr	r3, [pc, #172]	; (100072a0 <vTaskSwitchContext+0xe0>)
100071f2:	681b      	ldr	r3, [r3, #0]
100071f4:	3334      	adds	r3, #52	; 0x34
100071f6:	1c10      	adds	r0, r2, #0
100071f8:	1c19      	adds	r1, r3, #0
100071fa:	f001 fa19 	bl	10008630 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
100071fe:	4b28      	ldr	r3, [pc, #160]	; (100072a0 <vTaskSwitchContext+0xe0>)
10007200:	681b      	ldr	r3, [r3, #0]
10007202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10007204:	4b27      	ldr	r3, [pc, #156]	; (100072a4 <vTaskSwitchContext+0xe4>)
10007206:	1c10      	adds	r0, r2, #0
10007208:	1c19      	adds	r1, r3, #0
1000720a:	2214      	movs	r2, #20
1000720c:	f003 f940 	bl	1000a490 <memcmp>
10007210:	1c03      	adds	r3, r0, #0
10007212:	2b00      	cmp	r3, #0
10007214:	d014      	beq.n	10007240 <vTaskSwitchContext+0x80>
10007216:	4b22      	ldr	r3, [pc, #136]	; (100072a0 <vTaskSwitchContext+0xe0>)
10007218:	681a      	ldr	r2, [r3, #0]
1000721a:	4b21      	ldr	r3, [pc, #132]	; (100072a0 <vTaskSwitchContext+0xe0>)
1000721c:	681b      	ldr	r3, [r3, #0]
1000721e:	3334      	adds	r3, #52	; 0x34
10007220:	1c10      	adds	r0, r2, #0
10007222:	1c19      	adds	r1, r3, #0
10007224:	f001 fa04 	bl	10008630 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
10007228:	e00a      	b.n	10007240 <vTaskSwitchContext+0x80>
1000722a:	4b1f      	ldr	r3, [pc, #124]	; (100072a8 <vTaskSwitchContext+0xe8>)
1000722c:	681b      	ldr	r3, [r3, #0]
1000722e:	2b00      	cmp	r3, #0
10007230:	d101      	bne.n	10007236 <vTaskSwitchContext+0x76>
10007232:	b672      	cpsid	i
10007234:	e7fe      	b.n	10007234 <vTaskSwitchContext+0x74>
10007236:	4b1c      	ldr	r3, [pc, #112]	; (100072a8 <vTaskSwitchContext+0xe8>)
10007238:	681b      	ldr	r3, [r3, #0]
1000723a:	1e5a      	subs	r2, r3, #1
1000723c:	4b1a      	ldr	r3, [pc, #104]	; (100072a8 <vTaskSwitchContext+0xe8>)
1000723e:	601a      	str	r2, [r3, #0]
10007240:	4b19      	ldr	r3, [pc, #100]	; (100072a8 <vTaskSwitchContext+0xe8>)
10007242:	681a      	ldr	r2, [r3, #0]
10007244:	4919      	ldr	r1, [pc, #100]	; (100072ac <vTaskSwitchContext+0xec>)
10007246:	1c13      	adds	r3, r2, #0
10007248:	009b      	lsls	r3, r3, #2
1000724a:	189b      	adds	r3, r3, r2
1000724c:	009b      	lsls	r3, r3, #2
1000724e:	585b      	ldr	r3, [r3, r1]
10007250:	2b00      	cmp	r3, #0
10007252:	d0ea      	beq.n	1000722a <vTaskSwitchContext+0x6a>
10007254:	4b14      	ldr	r3, [pc, #80]	; (100072a8 <vTaskSwitchContext+0xe8>)
10007256:	681a      	ldr	r2, [r3, #0]
10007258:	1c13      	adds	r3, r2, #0
1000725a:	009b      	lsls	r3, r3, #2
1000725c:	189b      	adds	r3, r3, r2
1000725e:	009b      	lsls	r3, r3, #2
10007260:	4a12      	ldr	r2, [pc, #72]	; (100072ac <vTaskSwitchContext+0xec>)
10007262:	189b      	adds	r3, r3, r2
10007264:	607b      	str	r3, [r7, #4]
10007266:	687b      	ldr	r3, [r7, #4]
10007268:	685b      	ldr	r3, [r3, #4]
1000726a:	685a      	ldr	r2, [r3, #4]
1000726c:	687b      	ldr	r3, [r7, #4]
1000726e:	605a      	str	r2, [r3, #4]
10007270:	687b      	ldr	r3, [r7, #4]
10007272:	685a      	ldr	r2, [r3, #4]
10007274:	687b      	ldr	r3, [r7, #4]
10007276:	3308      	adds	r3, #8
10007278:	429a      	cmp	r2, r3
1000727a:	d104      	bne.n	10007286 <vTaskSwitchContext+0xc6>
1000727c:	687b      	ldr	r3, [r7, #4]
1000727e:	685b      	ldr	r3, [r3, #4]
10007280:	685a      	ldr	r2, [r3, #4]
10007282:	687b      	ldr	r3, [r7, #4]
10007284:	605a      	str	r2, [r3, #4]
10007286:	687b      	ldr	r3, [r7, #4]
10007288:	685b      	ldr	r3, [r3, #4]
1000728a:	68da      	ldr	r2, [r3, #12]
1000728c:	4b04      	ldr	r3, [pc, #16]	; (100072a0 <vTaskSwitchContext+0xe0>)
1000728e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
10007290:	46bd      	mov	sp, r7
10007292:	b002      	add	sp, #8
10007294:	bd80      	pop	{r7, pc}
10007296:	46c0      	nop			; (mov r8, r8)
10007298:	20000db4 	.word	0x20000db4
1000729c:	20000da8 	.word	0x20000da8
100072a0:	20000cbc 	.word	0x20000cbc
100072a4:	1000ad14 	.word	0x1000ad14
100072a8:	20000d9c 	.word	0x20000d9c
100072ac:	20000cc0 	.word	0x20000cc0

100072b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
100072b0:	b580      	push	{r7, lr}
100072b2:	b084      	sub	sp, #16
100072b4:	af00      	add	r7, sp, #0
100072b6:	6078      	str	r0, [r7, #4]
100072b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
100072ba:	687b      	ldr	r3, [r7, #4]
100072bc:	2b00      	cmp	r3, #0
100072be:	d101      	bne.n	100072c4 <vTaskPlaceOnEventList+0x14>
100072c0:	b672      	cpsid	i
100072c2:	e7fe      	b.n	100072c2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
100072c4:	4b12      	ldr	r3, [pc, #72]	; (10007310 <vTaskPlaceOnEventList+0x60>)
100072c6:	681b      	ldr	r3, [r3, #0]
100072c8:	3318      	adds	r3, #24
100072ca:	687a      	ldr	r2, [r7, #4]
100072cc:	1c10      	adds	r0, r2, #0
100072ce:	1c19      	adds	r1, r3, #0
100072d0:	f001 fc10 	bl	10008af4 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
100072d4:	4b0e      	ldr	r3, [pc, #56]	; (10007310 <vTaskPlaceOnEventList+0x60>)
100072d6:	681b      	ldr	r3, [r3, #0]
100072d8:	3304      	adds	r3, #4
100072da:	1c18      	adds	r0, r3, #0
100072dc:	f001 fc40 	bl	10008b60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
100072e0:	683b      	ldr	r3, [r7, #0]
100072e2:	3301      	adds	r3, #1
100072e4:	d108      	bne.n	100072f8 <vTaskPlaceOnEventList+0x48>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
100072e6:	4b0a      	ldr	r3, [pc, #40]	; (10007310 <vTaskPlaceOnEventList+0x60>)
100072e8:	681b      	ldr	r3, [r3, #0]
100072ea:	3304      	adds	r3, #4
100072ec:	4a09      	ldr	r2, [pc, #36]	; (10007314 <vTaskPlaceOnEventList+0x64>)
100072ee:	1c10      	adds	r0, r2, #0
100072f0:	1c19      	adds	r1, r3, #0
100072f2:	f001 fbdd 	bl	10008ab0 <vListInsertEnd>
100072f6:	e008      	b.n	1000730a <vTaskPlaceOnEventList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
100072f8:	4b07      	ldr	r3, [pc, #28]	; (10007318 <vTaskPlaceOnEventList+0x68>)
100072fa:	681a      	ldr	r2, [r3, #0]
100072fc:	683b      	ldr	r3, [r7, #0]
100072fe:	18d3      	adds	r3, r2, r3
10007300:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
10007302:	68fb      	ldr	r3, [r7, #12]
10007304:	1c18      	adds	r0, r3, #0
10007306:	f000 fa91 	bl	1000782c <prvAddCurrentTaskToDelayedList>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1000730a:	46bd      	mov	sp, r7
1000730c:	b004      	add	sp, #16
1000730e:	bd80      	pop	{r7, pc}
10007310:	20000cbc 	.word	0x20000cbc
10007314:	20000d80 	.word	0x20000d80
10007318:	20000d98 	.word	0x20000d98

1000731c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
1000731c:	b580      	push	{r7, lr}
1000731e:	b086      	sub	sp, #24
10007320:	af00      	add	r7, sp, #0
10007322:	60f8      	str	r0, [r7, #12]
10007324:	60b9      	str	r1, [r7, #8]
10007326:	607a      	str	r2, [r7, #4]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
10007328:	68fb      	ldr	r3, [r7, #12]
1000732a:	2b00      	cmp	r3, #0
1000732c:	d101      	bne.n	10007332 <vTaskPlaceOnUnorderedEventList+0x16>
1000732e:	b672      	cpsid	i
10007330:	e7fe      	b.n	10007330 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
10007332:	4b19      	ldr	r3, [pc, #100]	; (10007398 <vTaskPlaceOnUnorderedEventList+0x7c>)
10007334:	681b      	ldr	r3, [r3, #0]
10007336:	2b00      	cmp	r3, #0
10007338:	d101      	bne.n	1000733e <vTaskPlaceOnUnorderedEventList+0x22>
1000733a:	b672      	cpsid	i
1000733c:	e7fe      	b.n	1000733c <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
1000733e:	4b17      	ldr	r3, [pc, #92]	; (1000739c <vTaskPlaceOnUnorderedEventList+0x80>)
10007340:	681b      	ldr	r3, [r3, #0]
10007342:	68ba      	ldr	r2, [r7, #8]
10007344:	2180      	movs	r1, #128	; 0x80
10007346:	0609      	lsls	r1, r1, #24
10007348:	430a      	orrs	r2, r1
1000734a:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1000734c:	4b13      	ldr	r3, [pc, #76]	; (1000739c <vTaskPlaceOnUnorderedEventList+0x80>)
1000734e:	681b      	ldr	r3, [r3, #0]
10007350:	3318      	adds	r3, #24
10007352:	68fa      	ldr	r2, [r7, #12]
10007354:	1c10      	adds	r0, r2, #0
10007356:	1c19      	adds	r1, r3, #0
10007358:	f001 fbaa 	bl	10008ab0 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
1000735c:	4b0f      	ldr	r3, [pc, #60]	; (1000739c <vTaskPlaceOnUnorderedEventList+0x80>)
1000735e:	681b      	ldr	r3, [r3, #0]
10007360:	3304      	adds	r3, #4
10007362:	1c18      	adds	r0, r3, #0
10007364:	f001 fbfc 	bl	10008b60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
10007368:	687b      	ldr	r3, [r7, #4]
1000736a:	3301      	adds	r3, #1
1000736c:	d108      	bne.n	10007380 <vTaskPlaceOnUnorderedEventList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
1000736e:	4b0b      	ldr	r3, [pc, #44]	; (1000739c <vTaskPlaceOnUnorderedEventList+0x80>)
10007370:	681b      	ldr	r3, [r3, #0]
10007372:	3304      	adds	r3, #4
10007374:	4a0a      	ldr	r2, [pc, #40]	; (100073a0 <vTaskPlaceOnUnorderedEventList+0x84>)
10007376:	1c10      	adds	r0, r2, #0
10007378:	1c19      	adds	r1, r3, #0
1000737a:	f001 fb99 	bl	10008ab0 <vListInsertEnd>
1000737e:	e008      	b.n	10007392 <vTaskPlaceOnUnorderedEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
10007380:	4b08      	ldr	r3, [pc, #32]	; (100073a4 <vTaskPlaceOnUnorderedEventList+0x88>)
10007382:	681a      	ldr	r2, [r3, #0]
10007384:	687b      	ldr	r3, [r7, #4]
10007386:	18d3      	adds	r3, r2, r3
10007388:	617b      	str	r3, [r7, #20]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
1000738a:	697b      	ldr	r3, [r7, #20]
1000738c:	1c18      	adds	r0, r3, #0
1000738e:	f000 fa4d 	bl	1000782c <prvAddCurrentTaskToDelayedList>
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
10007392:	46bd      	mov	sp, r7
10007394:	b006      	add	sp, #24
10007396:	bd80      	pop	{r7, pc}
10007398:	20000db4 	.word	0x20000db4
1000739c:	20000cbc 	.word	0x20000cbc
100073a0:	20000d80 	.word	0x20000d80
100073a4:	20000d98 	.word	0x20000d98

100073a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
100073a8:	b580      	push	{r7, lr}
100073aa:	b084      	sub	sp, #16
100073ac:	af00      	add	r7, sp, #0
100073ae:	6078      	str	r0, [r7, #4]
100073b0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
100073b2:	687b      	ldr	r3, [r7, #4]
100073b4:	2b00      	cmp	r3, #0
100073b6:	d101      	bne.n	100073bc <vTaskPlaceOnEventListRestricted+0x14>
100073b8:	b672      	cpsid	i
100073ba:	e7fe      	b.n	100073ba <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
100073bc:	4b0c      	ldr	r3, [pc, #48]	; (100073f0 <vTaskPlaceOnEventListRestricted+0x48>)
100073be:	681b      	ldr	r3, [r3, #0]
100073c0:	3318      	adds	r3, #24
100073c2:	687a      	ldr	r2, [r7, #4]
100073c4:	1c10      	adds	r0, r2, #0
100073c6:	1c19      	adds	r1, r3, #0
100073c8:	f001 fb72 	bl	10008ab0 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
100073cc:	4b08      	ldr	r3, [pc, #32]	; (100073f0 <vTaskPlaceOnEventListRestricted+0x48>)
100073ce:	681b      	ldr	r3, [r3, #0]
100073d0:	3304      	adds	r3, #4
100073d2:	1c18      	adds	r0, r3, #0
100073d4:	f001 fbc4 	bl	10008b60 <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
100073d8:	4b06      	ldr	r3, [pc, #24]	; (100073f4 <vTaskPlaceOnEventListRestricted+0x4c>)
100073da:	681a      	ldr	r2, [r3, #0]
100073dc:	683b      	ldr	r3, [r7, #0]
100073de:	18d3      	adds	r3, r2, r3
100073e0:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
100073e2:	68fb      	ldr	r3, [r7, #12]
100073e4:	1c18      	adds	r0, r3, #0
100073e6:	f000 fa21 	bl	1000782c <prvAddCurrentTaskToDelayedList>
	}
100073ea:	46bd      	mov	sp, r7
100073ec:	b004      	add	sp, #16
100073ee:	bd80      	pop	{r7, pc}
100073f0:	20000cbc 	.word	0x20000cbc
100073f4:	20000d98 	.word	0x20000d98

100073f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
100073f8:	b580      	push	{r7, lr}
100073fa:	b084      	sub	sp, #16
100073fc:	af00      	add	r7, sp, #0
100073fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
10007400:	687b      	ldr	r3, [r7, #4]
10007402:	68db      	ldr	r3, [r3, #12]
10007404:	68db      	ldr	r3, [r3, #12]
10007406:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
10007408:	68bb      	ldr	r3, [r7, #8]
1000740a:	2b00      	cmp	r3, #0
1000740c:	d101      	bne.n	10007412 <xTaskRemoveFromEventList+0x1a>
1000740e:	b672      	cpsid	i
10007410:	e7fe      	b.n	10007410 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
10007412:	68bb      	ldr	r3, [r7, #8]
10007414:	3318      	adds	r3, #24
10007416:	1c18      	adds	r0, r3, #0
10007418:	f001 fba2 	bl	10008b60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1000741c:	4b1e      	ldr	r3, [pc, #120]	; (10007498 <xTaskRemoveFromEventList+0xa0>)
1000741e:	681b      	ldr	r3, [r3, #0]
10007420:	2b00      	cmp	r3, #0
10007422:	d11d      	bne.n	10007460 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
10007424:	68bb      	ldr	r3, [r7, #8]
10007426:	3304      	adds	r3, #4
10007428:	1c18      	adds	r0, r3, #0
1000742a:	f001 fb99 	bl	10008b60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1000742e:	68bb      	ldr	r3, [r7, #8]
10007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007432:	4b1a      	ldr	r3, [pc, #104]	; (1000749c <xTaskRemoveFromEventList+0xa4>)
10007434:	681b      	ldr	r3, [r3, #0]
10007436:	429a      	cmp	r2, r3
10007438:	d903      	bls.n	10007442 <xTaskRemoveFromEventList+0x4a>
1000743a:	68bb      	ldr	r3, [r7, #8]
1000743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000743e:	4b17      	ldr	r3, [pc, #92]	; (1000749c <xTaskRemoveFromEventList+0xa4>)
10007440:	601a      	str	r2, [r3, #0]
10007442:	68bb      	ldr	r3, [r7, #8]
10007444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007446:	1c13      	adds	r3, r2, #0
10007448:	009b      	lsls	r3, r3, #2
1000744a:	189b      	adds	r3, r3, r2
1000744c:	009b      	lsls	r3, r3, #2
1000744e:	4a14      	ldr	r2, [pc, #80]	; (100074a0 <xTaskRemoveFromEventList+0xa8>)
10007450:	189a      	adds	r2, r3, r2
10007452:	68bb      	ldr	r3, [r7, #8]
10007454:	3304      	adds	r3, #4
10007456:	1c10      	adds	r0, r2, #0
10007458:	1c19      	adds	r1, r3, #0
1000745a:	f001 fb29 	bl	10008ab0 <vListInsertEnd>
1000745e:	e006      	b.n	1000746e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
10007460:	68bb      	ldr	r3, [r7, #8]
10007462:	3318      	adds	r3, #24
10007464:	4a0f      	ldr	r2, [pc, #60]	; (100074a4 <xTaskRemoveFromEventList+0xac>)
10007466:	1c10      	adds	r0, r2, #0
10007468:	1c19      	adds	r1, r3, #0
1000746a:	f001 fb21 	bl	10008ab0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1000746e:	68bb      	ldr	r3, [r7, #8]
10007470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007472:	4b0d      	ldr	r3, [pc, #52]	; (100074a8 <xTaskRemoveFromEventList+0xb0>)
10007474:	681b      	ldr	r3, [r3, #0]
10007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007478:	429a      	cmp	r2, r3
1000747a:	d905      	bls.n	10007488 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
1000747c:	2301      	movs	r3, #1
1000747e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
10007480:	4b0a      	ldr	r3, [pc, #40]	; (100074ac <xTaskRemoveFromEventList+0xb4>)
10007482:	2201      	movs	r2, #1
10007484:	601a      	str	r2, [r3, #0]
10007486:	e001      	b.n	1000748c <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
10007488:	2300      	movs	r3, #0
1000748a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
1000748c:	68fb      	ldr	r3, [r7, #12]
}
1000748e:	1c18      	adds	r0, r3, #0
10007490:	46bd      	mov	sp, r7
10007492:	b004      	add	sp, #16
10007494:	bd80      	pop	{r7, pc}
10007496:	46c0      	nop			; (mov r8, r8)
10007498:	20000db4 	.word	0x20000db4
1000749c:	20000d9c 	.word	0x20000d9c
100074a0:	20000cc0 	.word	0x20000cc0
100074a4:	20000d54 	.word	0x20000d54
100074a8:	20000cbc 	.word	0x20000cbc
100074ac:	20000da8 	.word	0x20000da8

100074b0 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
100074b0:	b580      	push	{r7, lr}
100074b2:	b084      	sub	sp, #16
100074b4:	af00      	add	r7, sp, #0
100074b6:	6078      	str	r0, [r7, #4]
100074b8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
100074ba:	4b24      	ldr	r3, [pc, #144]	; (1000754c <xTaskRemoveFromUnorderedEventList+0x9c>)
100074bc:	681b      	ldr	r3, [r3, #0]
100074be:	2b00      	cmp	r3, #0
100074c0:	d101      	bne.n	100074c6 <xTaskRemoveFromUnorderedEventList+0x16>
100074c2:	b672      	cpsid	i
100074c4:	e7fe      	b.n	100074c4 <xTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
100074c6:	683b      	ldr	r3, [r7, #0]
100074c8:	2280      	movs	r2, #128	; 0x80
100074ca:	0612      	lsls	r2, r2, #24
100074cc:	431a      	orrs	r2, r3
100074ce:	687b      	ldr	r3, [r7, #4]
100074d0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
100074d2:	687b      	ldr	r3, [r7, #4]
100074d4:	68db      	ldr	r3, [r3, #12]
100074d6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
100074d8:	68bb      	ldr	r3, [r7, #8]
100074da:	2b00      	cmp	r3, #0
100074dc:	d101      	bne.n	100074e2 <xTaskRemoveFromUnorderedEventList+0x32>
100074de:	b672      	cpsid	i
100074e0:	e7fe      	b.n	100074e0 <xTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
100074e2:	687b      	ldr	r3, [r7, #4]
100074e4:	1c18      	adds	r0, r3, #0
100074e6:	f001 fb3b 	bl	10008b60 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
100074ea:	68bb      	ldr	r3, [r7, #8]
100074ec:	3304      	adds	r3, #4
100074ee:	1c18      	adds	r0, r3, #0
100074f0:	f001 fb36 	bl	10008b60 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
100074f4:	68bb      	ldr	r3, [r7, #8]
100074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
100074f8:	4b15      	ldr	r3, [pc, #84]	; (10007550 <xTaskRemoveFromUnorderedEventList+0xa0>)
100074fa:	681b      	ldr	r3, [r3, #0]
100074fc:	429a      	cmp	r2, r3
100074fe:	d903      	bls.n	10007508 <xTaskRemoveFromUnorderedEventList+0x58>
10007500:	68bb      	ldr	r3, [r7, #8]
10007502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007504:	4b12      	ldr	r3, [pc, #72]	; (10007550 <xTaskRemoveFromUnorderedEventList+0xa0>)
10007506:	601a      	str	r2, [r3, #0]
10007508:	68bb      	ldr	r3, [r7, #8]
1000750a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000750c:	1c13      	adds	r3, r2, #0
1000750e:	009b      	lsls	r3, r3, #2
10007510:	189b      	adds	r3, r3, r2
10007512:	009b      	lsls	r3, r3, #2
10007514:	4a0f      	ldr	r2, [pc, #60]	; (10007554 <xTaskRemoveFromUnorderedEventList+0xa4>)
10007516:	189a      	adds	r2, r3, r2
10007518:	68bb      	ldr	r3, [r7, #8]
1000751a:	3304      	adds	r3, #4
1000751c:	1c10      	adds	r0, r2, #0
1000751e:	1c19      	adds	r1, r3, #0
10007520:	f001 fac6 	bl	10008ab0 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
10007524:	68bb      	ldr	r3, [r7, #8]
10007526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007528:	4b0b      	ldr	r3, [pc, #44]	; (10007558 <xTaskRemoveFromUnorderedEventList+0xa8>)
1000752a:	681b      	ldr	r3, [r3, #0]
1000752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000752e:	429a      	cmp	r2, r3
10007530:	d905      	bls.n	1000753e <xTaskRemoveFromUnorderedEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
10007532:	2301      	movs	r3, #1
10007534:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
10007536:	4b09      	ldr	r3, [pc, #36]	; (1000755c <xTaskRemoveFromUnorderedEventList+0xac>)
10007538:	2201      	movs	r2, #1
1000753a:	601a      	str	r2, [r3, #0]
1000753c:	e001      	b.n	10007542 <xTaskRemoveFromUnorderedEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
1000753e:	2300      	movs	r3, #0
10007540:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
10007542:	68fb      	ldr	r3, [r7, #12]
}
10007544:	1c18      	adds	r0, r3, #0
10007546:	46bd      	mov	sp, r7
10007548:	b004      	add	sp, #16
1000754a:	bd80      	pop	{r7, pc}
1000754c:	20000db4 	.word	0x20000db4
10007550:	20000d9c 	.word	0x20000d9c
10007554:	20000cc0 	.word	0x20000cc0
10007558:	20000cbc 	.word	0x20000cbc
1000755c:	20000da8 	.word	0x20000da8

10007560 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
10007560:	b580      	push	{r7, lr}
10007562:	b082      	sub	sp, #8
10007564:	af00      	add	r7, sp, #0
10007566:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
10007568:	687b      	ldr	r3, [r7, #4]
1000756a:	2b00      	cmp	r3, #0
1000756c:	d101      	bne.n	10007572 <vTaskSetTimeOutState+0x12>
1000756e:	b672      	cpsid	i
10007570:	e7fe      	b.n	10007570 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
10007572:	4b05      	ldr	r3, [pc, #20]	; (10007588 <vTaskSetTimeOutState+0x28>)
10007574:	681a      	ldr	r2, [r3, #0]
10007576:	687b      	ldr	r3, [r7, #4]
10007578:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1000757a:	4b04      	ldr	r3, [pc, #16]	; (1000758c <vTaskSetTimeOutState+0x2c>)
1000757c:	681a      	ldr	r2, [r3, #0]
1000757e:	687b      	ldr	r3, [r7, #4]
10007580:	605a      	str	r2, [r3, #4]
}
10007582:	46bd      	mov	sp, r7
10007584:	b002      	add	sp, #8
10007586:	bd80      	pop	{r7, pc}
10007588:	20000dac 	.word	0x20000dac
1000758c:	20000d98 	.word	0x20000d98

10007590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
10007590:	b580      	push	{r7, lr}
10007592:	b084      	sub	sp, #16
10007594:	af00      	add	r7, sp, #0
10007596:	6078      	str	r0, [r7, #4]
10007598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1000759a:	687b      	ldr	r3, [r7, #4]
1000759c:	2b00      	cmp	r3, #0
1000759e:	d101      	bne.n	100075a4 <xTaskCheckForTimeOut+0x14>
100075a0:	b672      	cpsid	i
100075a2:	e7fe      	b.n	100075a2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
100075a4:	683b      	ldr	r3, [r7, #0]
100075a6:	2b00      	cmp	r3, #0
100075a8:	d101      	bne.n	100075ae <xTaskCheckForTimeOut+0x1e>
100075aa:	b672      	cpsid	i
100075ac:	e7fe      	b.n	100075ac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
100075ae:	f000 ff6f 	bl	10008490 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
100075b2:	4b1c      	ldr	r3, [pc, #112]	; (10007624 <xTaskCheckForTimeOut+0x94>)
100075b4:	681b      	ldr	r3, [r3, #0]
100075b6:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
100075b8:	683b      	ldr	r3, [r7, #0]
100075ba:	681b      	ldr	r3, [r3, #0]
100075bc:	3301      	adds	r3, #1
100075be:	d102      	bne.n	100075c6 <xTaskCheckForTimeOut+0x36>
			{
				xReturn = pdFALSE;
100075c0:	2300      	movs	r3, #0
100075c2:	60fb      	str	r3, [r7, #12]
100075c4:	e027      	b.n	10007616 <xTaskCheckForTimeOut+0x86>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
100075c6:	687b      	ldr	r3, [r7, #4]
100075c8:	681a      	ldr	r2, [r3, #0]
100075ca:	4b17      	ldr	r3, [pc, #92]	; (10007628 <xTaskCheckForTimeOut+0x98>)
100075cc:	681b      	ldr	r3, [r3, #0]
100075ce:	429a      	cmp	r2, r3
100075d0:	d007      	beq.n	100075e2 <xTaskCheckForTimeOut+0x52>
100075d2:	687b      	ldr	r3, [r7, #4]
100075d4:	685a      	ldr	r2, [r3, #4]
100075d6:	68bb      	ldr	r3, [r7, #8]
100075d8:	429a      	cmp	r2, r3
100075da:	d802      	bhi.n	100075e2 <xTaskCheckForTimeOut+0x52>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
100075dc:	2301      	movs	r3, #1
100075de:	60fb      	str	r3, [r7, #12]
100075e0:	e019      	b.n	10007616 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
100075e2:	687b      	ldr	r3, [r7, #4]
100075e4:	685b      	ldr	r3, [r3, #4]
100075e6:	68ba      	ldr	r2, [r7, #8]
100075e8:	1ad2      	subs	r2, r2, r3
100075ea:	683b      	ldr	r3, [r7, #0]
100075ec:	681b      	ldr	r3, [r3, #0]
100075ee:	429a      	cmp	r2, r3
100075f0:	d20f      	bcs.n	10007612 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
100075f2:	683b      	ldr	r3, [r7, #0]
100075f4:	681a      	ldr	r2, [r3, #0]
100075f6:	687b      	ldr	r3, [r7, #4]
100075f8:	6859      	ldr	r1, [r3, #4]
100075fa:	68bb      	ldr	r3, [r7, #8]
100075fc:	1acb      	subs	r3, r1, r3
100075fe:	18d2      	adds	r2, r2, r3
10007600:	683b      	ldr	r3, [r7, #0]
10007602:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
10007604:	687b      	ldr	r3, [r7, #4]
10007606:	1c18      	adds	r0, r3, #0
10007608:	f7ff ffaa 	bl	10007560 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
1000760c:	2300      	movs	r3, #0
1000760e:	60fb      	str	r3, [r7, #12]
10007610:	e001      	b.n	10007616 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
10007612:	2301      	movs	r3, #1
10007614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
10007616:	f000 ff4b 	bl	100084b0 <vPortExitCritical>

	return xReturn;
1000761a:	68fb      	ldr	r3, [r7, #12]
}
1000761c:	1c18      	adds	r0, r3, #0
1000761e:	46bd      	mov	sp, r7
10007620:	b004      	add	sp, #16
10007622:	bd80      	pop	{r7, pc}
10007624:	20000d98 	.word	0x20000d98
10007628:	20000dac 	.word	0x20000dac

1000762c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
1000762c:	b580      	push	{r7, lr}
1000762e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
10007630:	4b02      	ldr	r3, [pc, #8]	; (1000763c <vTaskMissedYield+0x10>)
10007632:	2201      	movs	r2, #1
10007634:	601a      	str	r2, [r3, #0]
}
10007636:	46bd      	mov	sp, r7
10007638:	bd80      	pop	{r7, pc}
1000763a:	46c0      	nop			; (mov r8, r8)
1000763c:	20000da8 	.word	0x20000da8

10007640 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
10007640:	b580      	push	{r7, lr}
10007642:	b084      	sub	sp, #16
10007644:	af00      	add	r7, sp, #0
10007646:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
10007648:	687b      	ldr	r3, [r7, #4]
1000764a:	2b00      	cmp	r3, #0
1000764c:	d005      	beq.n	1000765a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
1000764e:	687b      	ldr	r3, [r7, #4]
10007650:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
10007652:	68bb      	ldr	r3, [r7, #8]
10007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10007656:	60fb      	str	r3, [r7, #12]
10007658:	e001      	b.n	1000765e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
1000765a:	2300      	movs	r3, #0
1000765c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
1000765e:	68fb      	ldr	r3, [r7, #12]
	}
10007660:	1c18      	adds	r0, r3, #0
10007662:	46bd      	mov	sp, r7
10007664:	b004      	add	sp, #16
10007666:	bd80      	pop	{r7, pc}

10007668 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
10007668:	b580      	push	{r7, lr}
1000766a:	b084      	sub	sp, #16
1000766c:	af00      	add	r7, sp, #0
1000766e:	6078      	str	r0, [r7, #4]
10007670:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
10007672:	687b      	ldr	r3, [r7, #4]
10007674:	2b00      	cmp	r3, #0
10007676:	d004      	beq.n	10007682 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
10007678:	687b      	ldr	r3, [r7, #4]
1000767a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
1000767c:	68fb      	ldr	r3, [r7, #12]
1000767e:	683a      	ldr	r2, [r7, #0]
10007680:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
10007682:	46bd      	mov	sp, r7
10007684:	b004      	add	sp, #16
10007686:	bd80      	pop	{r7, pc}

10007688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
10007688:	b580      	push	{r7, lr}
1000768a:	b082      	sub	sp, #8
1000768c:	af00      	add	r7, sp, #0
1000768e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
10007690:	f000 f892 	bl	100077b8 <prvCheckTasksWaitingTermination>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
10007694:	f000 ffd4 	bl	10008640 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
10007698:	e7fa      	b.n	10007690 <prvIdleTask+0x8>
1000769a:	46c0      	nop			; (mov r8, r8)

1000769c <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
1000769c:	b580      	push	{r7, lr}
1000769e:	b086      	sub	sp, #24
100076a0:	af00      	add	r7, sp, #0
100076a2:	60f8      	str	r0, [r7, #12]
100076a4:	60b9      	str	r1, [r7, #8]
100076a6:	607a      	str	r2, [r7, #4]
100076a8:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
100076aa:	2300      	movs	r3, #0
100076ac:	617b      	str	r3, [r7, #20]
100076ae:	e012      	b.n	100076d6 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
100076b0:	68ba      	ldr	r2, [r7, #8]
100076b2:	697b      	ldr	r3, [r7, #20]
100076b4:	18d3      	adds	r3, r2, r3
100076b6:	781a      	ldrb	r2, [r3, #0]
100076b8:	68f8      	ldr	r0, [r7, #12]
100076ba:	2330      	movs	r3, #48	; 0x30
100076bc:	6979      	ldr	r1, [r7, #20]
100076be:	1841      	adds	r1, r0, r1
100076c0:	18cb      	adds	r3, r1, r3
100076c2:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
100076c4:	68ba      	ldr	r2, [r7, #8]
100076c6:	697b      	ldr	r3, [r7, #20]
100076c8:	18d3      	adds	r3, r2, r3
100076ca:	781b      	ldrb	r3, [r3, #0]
100076cc:	2b00      	cmp	r3, #0
100076ce:	d006      	beq.n	100076de <prvInitialiseTCBVariables+0x42>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
100076d0:	697b      	ldr	r3, [r7, #20]
100076d2:	3301      	adds	r3, #1
100076d4:	617b      	str	r3, [r7, #20]
100076d6:	697b      	ldr	r3, [r7, #20]
100076d8:	2b09      	cmp	r3, #9
100076da:	d9e9      	bls.n	100076b0 <prvInitialiseTCBVariables+0x14>
100076dc:	e000      	b.n	100076e0 <prvInitialiseTCBVariables+0x44>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
100076de:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
100076e0:	68fa      	ldr	r2, [r7, #12]
100076e2:	233d      	movs	r3, #61	; 0x3d
100076e4:	2100      	movs	r1, #0
100076e6:	54d1      	strb	r1, [r2, r3]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
100076e8:	687b      	ldr	r3, [r7, #4]
100076ea:	2b04      	cmp	r3, #4
100076ec:	d901      	bls.n	100076f2 <prvInitialiseTCBVariables+0x56>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
100076ee:	2304      	movs	r3, #4
100076f0:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
100076f2:	68fb      	ldr	r3, [r7, #12]
100076f4:	687a      	ldr	r2, [r7, #4]
100076f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
100076f8:	68fb      	ldr	r3, [r7, #12]
100076fa:	687a      	ldr	r2, [r7, #4]
100076fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
100076fe:	68fb      	ldr	r3, [r7, #12]
10007700:	3304      	adds	r3, #4
10007702:	1c18      	adds	r0, r3, #0
10007704:	f001 f9ca 	bl	10008a9c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
10007708:	68fb      	ldr	r3, [r7, #12]
1000770a:	3318      	adds	r3, #24
1000770c:	1c18      	adds	r0, r3, #0
1000770e:	f001 f9c5 	bl	10008a9c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
10007712:	68fb      	ldr	r3, [r7, #12]
10007714:	68fa      	ldr	r2, [r7, #12]
10007716:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10007718:	687b      	ldr	r3, [r7, #4]
1000771a:	2205      	movs	r2, #5
1000771c:	1ad2      	subs	r2, r2, r3
1000771e:	68fb      	ldr	r3, [r7, #12]
10007720:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
10007722:	68fb      	ldr	r3, [r7, #12]
10007724:	68fa      	ldr	r2, [r7, #12]
10007726:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
10007728:	46bd      	mov	sp, r7
1000772a:	b006      	add	sp, #24
1000772c:	bd80      	pop	{r7, pc}
1000772e:	46c0      	nop			; (mov r8, r8)

10007730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
10007730:	b580      	push	{r7, lr}
10007732:	b082      	sub	sp, #8
10007734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
10007736:	2300      	movs	r3, #0
10007738:	607b      	str	r3, [r7, #4]
1000773a:	e00c      	b.n	10007756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1000773c:	687a      	ldr	r2, [r7, #4]
1000773e:	1c13      	adds	r3, r2, #0
10007740:	009b      	lsls	r3, r3, #2
10007742:	189b      	adds	r3, r3, r2
10007744:	009b      	lsls	r3, r3, #2
10007746:	4a14      	ldr	r2, [pc, #80]	; (10007798 <prvInitialiseTaskLists+0x68>)
10007748:	189b      	adds	r3, r3, r2
1000774a:	1c18      	adds	r0, r3, #0
1000774c:	f001 f988 	bl	10008a60 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
10007750:	687b      	ldr	r3, [r7, #4]
10007752:	3301      	adds	r3, #1
10007754:	607b      	str	r3, [r7, #4]
10007756:	687b      	ldr	r3, [r7, #4]
10007758:	2b04      	cmp	r3, #4
1000775a:	d9ef      	bls.n	1000773c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
1000775c:	4b0f      	ldr	r3, [pc, #60]	; (1000779c <prvInitialiseTaskLists+0x6c>)
1000775e:	1c18      	adds	r0, r3, #0
10007760:	f001 f97e 	bl	10008a60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
10007764:	4b0e      	ldr	r3, [pc, #56]	; (100077a0 <prvInitialiseTaskLists+0x70>)
10007766:	1c18      	adds	r0, r3, #0
10007768:	f001 f97a 	bl	10008a60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1000776c:	4b0d      	ldr	r3, [pc, #52]	; (100077a4 <prvInitialiseTaskLists+0x74>)
1000776e:	1c18      	adds	r0, r3, #0
10007770:	f001 f976 	bl	10008a60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
10007774:	4b0c      	ldr	r3, [pc, #48]	; (100077a8 <prvInitialiseTaskLists+0x78>)
10007776:	1c18      	adds	r0, r3, #0
10007778:	f001 f972 	bl	10008a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
1000777c:	4b0b      	ldr	r3, [pc, #44]	; (100077ac <prvInitialiseTaskLists+0x7c>)
1000777e:	1c18      	adds	r0, r3, #0
10007780:	f001 f96e 	bl	10008a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
10007784:	4b0a      	ldr	r3, [pc, #40]	; (100077b0 <prvInitialiseTaskLists+0x80>)
10007786:	4a05      	ldr	r2, [pc, #20]	; (1000779c <prvInitialiseTaskLists+0x6c>)
10007788:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1000778a:	4b0a      	ldr	r3, [pc, #40]	; (100077b4 <prvInitialiseTaskLists+0x84>)
1000778c:	4a04      	ldr	r2, [pc, #16]	; (100077a0 <prvInitialiseTaskLists+0x70>)
1000778e:	601a      	str	r2, [r3, #0]
}
10007790:	46bd      	mov	sp, r7
10007792:	b002      	add	sp, #8
10007794:	bd80      	pop	{r7, pc}
10007796:	46c0      	nop			; (mov r8, r8)
10007798:	20000cc0 	.word	0x20000cc0
1000779c:	20000d24 	.word	0x20000d24
100077a0:	20000d38 	.word	0x20000d38
100077a4:	20000d54 	.word	0x20000d54
100077a8:	20000d68 	.word	0x20000d68
100077ac:	20000d80 	.word	0x20000d80
100077b0:	20000d4c 	.word	0x20000d4c
100077b4:	20000d50 	.word	0x20000d50

100077b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
100077b8:	b580      	push	{r7, lr}
100077ba:	b082      	sub	sp, #8
100077bc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
100077be:	e027      	b.n	10007810 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
100077c0:	f7ff fafe 	bl	10006dc0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
100077c4:	4b16      	ldr	r3, [pc, #88]	; (10007820 <prvCheckTasksWaitingTermination+0x68>)
100077c6:	681b      	ldr	r3, [r3, #0]
100077c8:	425a      	negs	r2, r3
100077ca:	4153      	adcs	r3, r2
100077cc:	b2db      	uxtb	r3, r3
100077ce:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
100077d0:	f7ff fb02 	bl	10006dd8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
100077d4:	687b      	ldr	r3, [r7, #4]
100077d6:	2b00      	cmp	r3, #0
100077d8:	d11a      	bne.n	10007810 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
100077da:	f000 fe59 	bl	10008490 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
100077de:	4b10      	ldr	r3, [pc, #64]	; (10007820 <prvCheckTasksWaitingTermination+0x68>)
100077e0:	68db      	ldr	r3, [r3, #12]
100077e2:	68db      	ldr	r3, [r3, #12]
100077e4:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
100077e6:	683b      	ldr	r3, [r7, #0]
100077e8:	3304      	adds	r3, #4
100077ea:	1c18      	adds	r0, r3, #0
100077ec:	f001 f9b8 	bl	10008b60 <uxListRemove>
					--uxCurrentNumberOfTasks;
100077f0:	4b0c      	ldr	r3, [pc, #48]	; (10007824 <prvCheckTasksWaitingTermination+0x6c>)
100077f2:	681b      	ldr	r3, [r3, #0]
100077f4:	1e5a      	subs	r2, r3, #1
100077f6:	4b0b      	ldr	r3, [pc, #44]	; (10007824 <prvCheckTasksWaitingTermination+0x6c>)
100077f8:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
100077fa:	4b0b      	ldr	r3, [pc, #44]	; (10007828 <prvCheckTasksWaitingTermination+0x70>)
100077fc:	681b      	ldr	r3, [r3, #0]
100077fe:	1e5a      	subs	r2, r3, #1
10007800:	4b09      	ldr	r3, [pc, #36]	; (10007828 <prvCheckTasksWaitingTermination+0x70>)
10007802:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
10007804:	f000 fe54 	bl	100084b0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
10007808:	683b      	ldr	r3, [r7, #0]
1000780a:	1c18      	adds	r0, r3, #0
1000780c:	f000 f924 	bl	10007a58 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
10007810:	4b05      	ldr	r3, [pc, #20]	; (10007828 <prvCheckTasksWaitingTermination+0x70>)
10007812:	681b      	ldr	r3, [r3, #0]
10007814:	2b00      	cmp	r3, #0
10007816:	d1d3      	bne.n	100077c0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
10007818:	46bd      	mov	sp, r7
1000781a:	b002      	add	sp, #8
1000781c:	bd80      	pop	{r7, pc}
1000781e:	46c0      	nop			; (mov r8, r8)
10007820:	20000d68 	.word	0x20000d68
10007824:	20000d94 	.word	0x20000d94
10007828:	20000d7c 	.word	0x20000d7c

1000782c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
1000782c:	b580      	push	{r7, lr}
1000782e:	b082      	sub	sp, #8
10007830:	af00      	add	r7, sp, #0
10007832:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
10007834:	4b13      	ldr	r3, [pc, #76]	; (10007884 <prvAddCurrentTaskToDelayedList+0x58>)
10007836:	681b      	ldr	r3, [r3, #0]
10007838:	687a      	ldr	r2, [r7, #4]
1000783a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
1000783c:	4b12      	ldr	r3, [pc, #72]	; (10007888 <prvAddCurrentTaskToDelayedList+0x5c>)
1000783e:	681b      	ldr	r3, [r3, #0]
10007840:	687a      	ldr	r2, [r7, #4]
10007842:	429a      	cmp	r2, r3
10007844:	d209      	bcs.n	1000785a <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
10007846:	4b11      	ldr	r3, [pc, #68]	; (1000788c <prvAddCurrentTaskToDelayedList+0x60>)
10007848:	681a      	ldr	r2, [r3, #0]
1000784a:	4b0e      	ldr	r3, [pc, #56]	; (10007884 <prvAddCurrentTaskToDelayedList+0x58>)
1000784c:	681b      	ldr	r3, [r3, #0]
1000784e:	3304      	adds	r3, #4
10007850:	1c10      	adds	r0, r2, #0
10007852:	1c19      	adds	r1, r3, #0
10007854:	f001 f94e 	bl	10008af4 <vListInsert>
10007858:	e010      	b.n	1000787c <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
1000785a:	4b0d      	ldr	r3, [pc, #52]	; (10007890 <prvAddCurrentTaskToDelayedList+0x64>)
1000785c:	681a      	ldr	r2, [r3, #0]
1000785e:	4b09      	ldr	r3, [pc, #36]	; (10007884 <prvAddCurrentTaskToDelayedList+0x58>)
10007860:	681b      	ldr	r3, [r3, #0]
10007862:	3304      	adds	r3, #4
10007864:	1c10      	adds	r0, r2, #0
10007866:	1c19      	adds	r1, r3, #0
10007868:	f001 f944 	bl	10008af4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
1000786c:	4b09      	ldr	r3, [pc, #36]	; (10007894 <prvAddCurrentTaskToDelayedList+0x68>)
1000786e:	681b      	ldr	r3, [r3, #0]
10007870:	687a      	ldr	r2, [r7, #4]
10007872:	429a      	cmp	r2, r3
10007874:	d202      	bcs.n	1000787c <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
10007876:	4b07      	ldr	r3, [pc, #28]	; (10007894 <prvAddCurrentTaskToDelayedList+0x68>)
10007878:	687a      	ldr	r2, [r7, #4]
1000787a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
1000787c:	46bd      	mov	sp, r7
1000787e:	b002      	add	sp, #8
10007880:	bd80      	pop	{r7, pc}
10007882:	46c0      	nop			; (mov r8, r8)
10007884:	20000cbc 	.word	0x20000cbc
10007888:	20000d98 	.word	0x20000d98
1000788c:	20000d50 	.word	0x20000d50
10007890:	20000d4c 	.word	0x20000d4c
10007894:	200020a8 	.word	0x200020a8

10007898 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
10007898:	b580      	push	{r7, lr}
1000789a:	b084      	sub	sp, #16
1000789c:	af00      	add	r7, sp, #0
1000789e:	1c02      	adds	r2, r0, #0
100078a0:	6039      	str	r1, [r7, #0]
100078a2:	1dbb      	adds	r3, r7, #6
100078a4:	801a      	strh	r2, [r3, #0]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
100078a6:	204c      	movs	r0, #76	; 0x4c
100078a8:	f000 fcfc 	bl	100082a4 <pvPortMalloc>
100078ac:	1c03      	adds	r3, r0, #0
100078ae:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
100078b0:	68fb      	ldr	r3, [r7, #12]
100078b2:	2b00      	cmp	r3, #0
100078b4:	d022      	beq.n	100078fc <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
100078b6:	683b      	ldr	r3, [r7, #0]
100078b8:	2b00      	cmp	r3, #0
100078ba:	d107      	bne.n	100078cc <prvAllocateTCBAndStack+0x34>
100078bc:	1dbb      	adds	r3, r7, #6
100078be:	881b      	ldrh	r3, [r3, #0]
100078c0:	009b      	lsls	r3, r3, #2
100078c2:	1c18      	adds	r0, r3, #0
100078c4:	f000 fcee 	bl	100082a4 <pvPortMalloc>
100078c8:	1c02      	adds	r2, r0, #0
100078ca:	e000      	b.n	100078ce <prvAllocateTCBAndStack+0x36>
100078cc:	683a      	ldr	r2, [r7, #0]
100078ce:	68fb      	ldr	r3, [r7, #12]
100078d0:	631a      	str	r2, [r3, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
100078d2:	68fb      	ldr	r3, [r7, #12]
100078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100078d6:	2b00      	cmp	r3, #0
100078d8:	d106      	bne.n	100078e8 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
100078da:	68fb      	ldr	r3, [r7, #12]
100078dc:	1c18      	adds	r0, r3, #0
100078de:	f000 fd2b 	bl	10008338 <vPortFree>
			pxNewTCB = NULL;
100078e2:	2300      	movs	r3, #0
100078e4:	60fb      	str	r3, [r7, #12]
100078e6:	e009      	b.n	100078fc <prvAllocateTCBAndStack+0x64>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
100078e8:	68fb      	ldr	r3, [r7, #12]
100078ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
100078ec:	1dbb      	adds	r3, r7, #6
100078ee:	881b      	ldrh	r3, [r3, #0]
100078f0:	009b      	lsls	r3, r3, #2
100078f2:	1c10      	adds	r0, r2, #0
100078f4:	21a5      	movs	r1, #165	; 0xa5
100078f6:	1c1a      	adds	r2, r3, #0
100078f8:	f002 fec6 	bl	1000a688 <memset>
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
100078fc:	68fb      	ldr	r3, [r7, #12]
}
100078fe:	1c18      	adds	r0, r3, #0
10007900:	46bd      	mov	sp, r7
10007902:	b004      	add	sp, #16
10007904:	bd80      	pop	{r7, pc}
10007906:	46c0      	nop			; (mov r8, r8)

10007908 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
10007908:	b590      	push	{r4, r7, lr}
1000790a:	b08b      	sub	sp, #44	; 0x2c
1000790c:	af00      	add	r7, sp, #0
1000790e:	60f8      	str	r0, [r7, #12]
10007910:	60b9      	str	r1, [r7, #8]
10007912:	1dfb      	adds	r3, r7, #7
10007914:	701a      	strb	r2, [r3, #0]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
10007916:	2300      	movs	r3, #0
10007918:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
1000791a:	68bb      	ldr	r3, [r7, #8]
1000791c:	681b      	ldr	r3, [r3, #0]
1000791e:	2b00      	cmp	r3, #0
10007920:	d100      	bne.n	10007924 <prvListTaskWithinSingleList+0x1c>
10007922:	e07a      	b.n	10007a1a <prvListTaskWithinSingleList+0x112>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
10007924:	68bb      	ldr	r3, [r7, #8]
10007926:	623b      	str	r3, [r7, #32]
10007928:	6a3b      	ldr	r3, [r7, #32]
1000792a:	685b      	ldr	r3, [r3, #4]
1000792c:	685a      	ldr	r2, [r3, #4]
1000792e:	6a3b      	ldr	r3, [r7, #32]
10007930:	605a      	str	r2, [r3, #4]
10007932:	6a3b      	ldr	r3, [r7, #32]
10007934:	685a      	ldr	r2, [r3, #4]
10007936:	6a3b      	ldr	r3, [r7, #32]
10007938:	3308      	adds	r3, #8
1000793a:	429a      	cmp	r2, r3
1000793c:	d104      	bne.n	10007948 <prvListTaskWithinSingleList+0x40>
1000793e:	6a3b      	ldr	r3, [r7, #32]
10007940:	685b      	ldr	r3, [r3, #4]
10007942:	685a      	ldr	r2, [r3, #4]
10007944:	6a3b      	ldr	r3, [r7, #32]
10007946:	605a      	str	r2, [r3, #4]
10007948:	6a3b      	ldr	r3, [r7, #32]
1000794a:	685b      	ldr	r3, [r3, #4]
1000794c:	68db      	ldr	r3, [r3, #12]
1000794e:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
10007950:	68bb      	ldr	r3, [r7, #8]
10007952:	61bb      	str	r3, [r7, #24]
10007954:	69bb      	ldr	r3, [r7, #24]
10007956:	685b      	ldr	r3, [r3, #4]
10007958:	685a      	ldr	r2, [r3, #4]
1000795a:	69bb      	ldr	r3, [r7, #24]
1000795c:	605a      	str	r2, [r3, #4]
1000795e:	69bb      	ldr	r3, [r7, #24]
10007960:	685a      	ldr	r2, [r3, #4]
10007962:	69bb      	ldr	r3, [r7, #24]
10007964:	3308      	adds	r3, #8
10007966:	429a      	cmp	r2, r3
10007968:	d104      	bne.n	10007974 <prvListTaskWithinSingleList+0x6c>
1000796a:	69bb      	ldr	r3, [r7, #24]
1000796c:	685b      	ldr	r3, [r3, #4]
1000796e:	685a      	ldr	r2, [r3, #4]
10007970:	69bb      	ldr	r3, [r7, #24]
10007972:	605a      	str	r2, [r3, #4]
10007974:	69bb      	ldr	r3, [r7, #24]
10007976:	685b      	ldr	r3, [r3, #4]
10007978:	68db      	ldr	r3, [r3, #12]
1000797a:	617b      	str	r3, [r7, #20]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
1000797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000797e:	015b      	lsls	r3, r3, #5
10007980:	68fa      	ldr	r2, [r7, #12]
10007982:	18d3      	adds	r3, r2, r3
10007984:	697a      	ldr	r2, [r7, #20]
10007986:	601a      	str	r2, [r3, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
10007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000798a:	015b      	lsls	r3, r3, #5
1000798c:	68fa      	ldr	r2, [r7, #12]
1000798e:	18d3      	adds	r3, r2, r3
10007990:	697a      	ldr	r2, [r7, #20]
10007992:	3234      	adds	r2, #52	; 0x34
10007994:	605a      	str	r2, [r3, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
10007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10007998:	015b      	lsls	r3, r3, #5
1000799a:	68fa      	ldr	r2, [r7, #12]
1000799c:	18d3      	adds	r3, r2, r3
1000799e:	697a      	ldr	r2, [r7, #20]
100079a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
100079a2:	609a      	str	r2, [r3, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
100079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100079a6:	015b      	lsls	r3, r3, #5
100079a8:	68fa      	ldr	r2, [r7, #12]
100079aa:	18d3      	adds	r3, r2, r3
100079ac:	1dfa      	adds	r2, r7, #7
100079ae:	7812      	ldrb	r2, [r2, #0]
100079b0:	731a      	strb	r2, [r3, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
100079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100079b4:	015b      	lsls	r3, r3, #5
100079b6:	68fa      	ldr	r2, [r7, #12]
100079b8:	18d3      	adds	r3, r2, r3
100079ba:	697a      	ldr	r2, [r7, #20]
100079bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
100079be:	611a      	str	r2, [r3, #16]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a chance
					it is actually just blocked indefinitely - so really it should
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
100079c0:	1dfb      	adds	r3, r7, #7
100079c2:	781b      	ldrb	r3, [r3, #0]
100079c4:	2b03      	cmp	r3, #3
100079c6:	d109      	bne.n	100079dc <prvListTaskWithinSingleList+0xd4>
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
100079c8:	697b      	ldr	r3, [r7, #20]
100079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100079cc:	2b00      	cmp	r3, #0
100079ce:	d005      	beq.n	100079dc <prvListTaskWithinSingleList+0xd4>
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
100079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100079d2:	015b      	lsls	r3, r3, #5
100079d4:	68fa      	ldr	r2, [r7, #12]
100079d6:	18d3      	adds	r3, r2, r3
100079d8:	2202      	movs	r2, #2
100079da:	731a      	strb	r2, [r3, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
100079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100079de:	015b      	lsls	r3, r3, #5
100079e0:	68fa      	ldr	r2, [r7, #12]
100079e2:	18d3      	adds	r3, r2, r3
100079e4:	697a      	ldr	r2, [r7, #20]
100079e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
100079e8:	615a      	str	r2, [r3, #20]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
100079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100079ec:	015b      	lsls	r3, r3, #5
100079ee:	68fa      	ldr	r2, [r7, #12]
100079f0:	18d3      	adds	r3, r2, r3
100079f2:	2200      	movs	r2, #0
100079f4:	619a      	str	r2, [r3, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
100079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100079f8:	015b      	lsls	r3, r3, #5
100079fa:	68fa      	ldr	r2, [r7, #12]
100079fc:	18d4      	adds	r4, r2, r3
100079fe:	697b      	ldr	r3, [r7, #20]
10007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10007a02:	1c18      	adds	r0, r3, #0
10007a04:	f000 f80e 	bl	10007a24 <prvTaskCheckFreeStackSpace>
10007a08:	1c03      	adds	r3, r0, #0
10007a0a:	83a3      	strh	r3, [r4, #28]
				}
				#endif

				uxTask++;
10007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10007a0e:	3301      	adds	r3, #1
10007a10:	627b      	str	r3, [r7, #36]	; 0x24

			} while( pxNextTCB != pxFirstTCB );
10007a12:	697a      	ldr	r2, [r7, #20]
10007a14:	69fb      	ldr	r3, [r7, #28]
10007a16:	429a      	cmp	r2, r3
10007a18:	d19a      	bne.n	10007950 <prvListTaskWithinSingleList+0x48>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
10007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
10007a1c:	1c18      	adds	r0, r3, #0
10007a1e:	46bd      	mov	sp, r7
10007a20:	b00b      	add	sp, #44	; 0x2c
10007a22:	bd90      	pop	{r4, r7, pc}

10007a24 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
10007a24:	b580      	push	{r7, lr}
10007a26:	b084      	sub	sp, #16
10007a28:	af00      	add	r7, sp, #0
10007a2a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
10007a2c:	2300      	movs	r3, #0
10007a2e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == tskSTACK_FILL_BYTE )
10007a30:	e005      	b.n	10007a3e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
10007a32:	687b      	ldr	r3, [r7, #4]
10007a34:	3301      	adds	r3, #1
10007a36:	607b      	str	r3, [r7, #4]
			ulCount++;
10007a38:	68fb      	ldr	r3, [r7, #12]
10007a3a:	3301      	adds	r3, #1
10007a3c:	60fb      	str	r3, [r7, #12]

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
10007a3e:	687b      	ldr	r3, [r7, #4]
10007a40:	781b      	ldrb	r3, [r3, #0]
10007a42:	2ba5      	cmp	r3, #165	; 0xa5
10007a44:	d0f5      	beq.n	10007a32 <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t );
10007a46:	68fb      	ldr	r3, [r7, #12]
10007a48:	089b      	lsrs	r3, r3, #2
10007a4a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
10007a4c:	68fb      	ldr	r3, [r7, #12]
10007a4e:	b29b      	uxth	r3, r3
	}
10007a50:	1c18      	adds	r0, r3, #0
10007a52:	46bd      	mov	sp, r7
10007a54:	b004      	add	sp, #16
10007a56:	bd80      	pop	{r7, pc}

10007a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
10007a58:	b580      	push	{r7, lr}
10007a5a:	b082      	sub	sp, #8
10007a5c:	af00      	add	r7, sp, #0
10007a5e:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
10007a60:	687b      	ldr	r3, [r7, #4]
10007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10007a64:	1c18      	adds	r0, r3, #0
10007a66:	f000 fc67 	bl	10008338 <vPortFree>
		vPortFree( pxTCB );
10007a6a:	687b      	ldr	r3, [r7, #4]
10007a6c:	1c18      	adds	r0, r3, #0
10007a6e:	f000 fc63 	bl	10008338 <vPortFree>
	}
10007a72:	46bd      	mov	sp, r7
10007a74:	b002      	add	sp, #8
10007a76:	bd80      	pop	{r7, pc}

10007a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
10007a78:	b580      	push	{r7, lr}
10007a7a:	b082      	sub	sp, #8
10007a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
10007a7e:	4b0d      	ldr	r3, [pc, #52]	; (10007ab4 <prvResetNextTaskUnblockTime+0x3c>)
10007a80:	681b      	ldr	r3, [r3, #0]
10007a82:	681b      	ldr	r3, [r3, #0]
10007a84:	2b00      	cmp	r3, #0
10007a86:	d101      	bne.n	10007a8c <prvResetNextTaskUnblockTime+0x14>
10007a88:	2301      	movs	r3, #1
10007a8a:	e000      	b.n	10007a8e <prvResetNextTaskUnblockTime+0x16>
10007a8c:	2300      	movs	r3, #0
10007a8e:	2b00      	cmp	r3, #0
10007a90:	d004      	beq.n	10007a9c <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
10007a92:	4b09      	ldr	r3, [pc, #36]	; (10007ab8 <prvResetNextTaskUnblockTime+0x40>)
10007a94:	2201      	movs	r2, #1
10007a96:	4252      	negs	r2, r2
10007a98:	601a      	str	r2, [r3, #0]
10007a9a:	e008      	b.n	10007aae <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
10007a9c:	4b05      	ldr	r3, [pc, #20]	; (10007ab4 <prvResetNextTaskUnblockTime+0x3c>)
10007a9e:	681b      	ldr	r3, [r3, #0]
10007aa0:	68db      	ldr	r3, [r3, #12]
10007aa2:	68db      	ldr	r3, [r3, #12]
10007aa4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
10007aa6:	687b      	ldr	r3, [r7, #4]
10007aa8:	685a      	ldr	r2, [r3, #4]
10007aaa:	4b03      	ldr	r3, [pc, #12]	; (10007ab8 <prvResetNextTaskUnblockTime+0x40>)
10007aac:	601a      	str	r2, [r3, #0]
	}
}
10007aae:	46bd      	mov	sp, r7
10007ab0:	b002      	add	sp, #8
10007ab2:	bd80      	pop	{r7, pc}
10007ab4:	20000d4c 	.word	0x20000d4c
10007ab8:	200020a8 	.word	0x200020a8

10007abc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
10007abc:	b580      	push	{r7, lr}
10007abe:	b082      	sub	sp, #8
10007ac0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
10007ac2:	4b04      	ldr	r3, [pc, #16]	; (10007ad4 <xTaskGetCurrentTaskHandle+0x18>)
10007ac4:	681b      	ldr	r3, [r3, #0]
10007ac6:	607b      	str	r3, [r7, #4]

		return xReturn;
10007ac8:	687b      	ldr	r3, [r7, #4]
	}
10007aca:	1c18      	adds	r0, r3, #0
10007acc:	46bd      	mov	sp, r7
10007ace:	b002      	add	sp, #8
10007ad0:	bd80      	pop	{r7, pc}
10007ad2:	46c0      	nop			; (mov r8, r8)
10007ad4:	20000cbc 	.word	0x20000cbc

10007ad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
10007ad8:	b580      	push	{r7, lr}
10007ada:	b082      	sub	sp, #8
10007adc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
10007ade:	4b0a      	ldr	r3, [pc, #40]	; (10007b08 <xTaskGetSchedulerState+0x30>)
10007ae0:	681b      	ldr	r3, [r3, #0]
10007ae2:	2b00      	cmp	r3, #0
10007ae4:	d102      	bne.n	10007aec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
10007ae6:	2301      	movs	r3, #1
10007ae8:	607b      	str	r3, [r7, #4]
10007aea:	e008      	b.n	10007afe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10007aec:	4b07      	ldr	r3, [pc, #28]	; (10007b0c <xTaskGetSchedulerState+0x34>)
10007aee:	681b      	ldr	r3, [r3, #0]
10007af0:	2b00      	cmp	r3, #0
10007af2:	d102      	bne.n	10007afa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
10007af4:	2302      	movs	r3, #2
10007af6:	607b      	str	r3, [r7, #4]
10007af8:	e001      	b.n	10007afe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
10007afa:	2300      	movs	r3, #0
10007afc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
10007afe:	687b      	ldr	r3, [r7, #4]
	}
10007b00:	1c18      	adds	r0, r3, #0
10007b02:	46bd      	mov	sp, r7
10007b04:	b002      	add	sp, #8
10007b06:	bd80      	pop	{r7, pc}
10007b08:	20000da0 	.word	0x20000da0
10007b0c:	20000db4 	.word	0x20000db4

10007b10 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
10007b10:	b580      	push	{r7, lr}
10007b12:	b084      	sub	sp, #16
10007b14:	af00      	add	r7, sp, #0
10007b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
10007b18:	687b      	ldr	r3, [r7, #4]
10007b1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
10007b1c:	687b      	ldr	r3, [r7, #4]
10007b1e:	2b00      	cmp	r3, #0
10007b20:	d04a      	beq.n	10007bb8 <vTaskPriorityInherit+0xa8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
10007b22:	68fb      	ldr	r3, [r7, #12]
10007b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007b26:	4b26      	ldr	r3, [pc, #152]	; (10007bc0 <vTaskPriorityInherit+0xb0>)
10007b28:	681b      	ldr	r3, [r3, #0]
10007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007b2c:	429a      	cmp	r2, r3
10007b2e:	d243      	bcs.n	10007bb8 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
10007b30:	68fb      	ldr	r3, [r7, #12]
10007b32:	699b      	ldr	r3, [r3, #24]
10007b34:	2b00      	cmp	r3, #0
10007b36:	db06      	blt.n	10007b46 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10007b38:	4b21      	ldr	r3, [pc, #132]	; (10007bc0 <vTaskPriorityInherit+0xb0>)
10007b3a:	681b      	ldr	r3, [r3, #0]
10007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007b3e:	2205      	movs	r2, #5
10007b40:	1ad2      	subs	r2, r2, r3
10007b42:	68fb      	ldr	r3, [r7, #12]
10007b44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
10007b46:	68fb      	ldr	r3, [r7, #12]
10007b48:	6959      	ldr	r1, [r3, #20]
10007b4a:	68fb      	ldr	r3, [r7, #12]
10007b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007b4e:	1c13      	adds	r3, r2, #0
10007b50:	009b      	lsls	r3, r3, #2
10007b52:	189b      	adds	r3, r3, r2
10007b54:	009b      	lsls	r3, r3, #2
10007b56:	4a1b      	ldr	r2, [pc, #108]	; (10007bc4 <vTaskPriorityInherit+0xb4>)
10007b58:	189b      	adds	r3, r3, r2
10007b5a:	4299      	cmp	r1, r3
10007b5c:	d101      	bne.n	10007b62 <vTaskPriorityInherit+0x52>
10007b5e:	2301      	movs	r3, #1
10007b60:	e000      	b.n	10007b64 <vTaskPriorityInherit+0x54>
10007b62:	2300      	movs	r3, #0
10007b64:	2b00      	cmp	r3, #0
10007b66:	d022      	beq.n	10007bae <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
10007b68:	68fb      	ldr	r3, [r7, #12]
10007b6a:	3304      	adds	r3, #4
10007b6c:	1c18      	adds	r0, r3, #0
10007b6e:	f000 fff7 	bl	10008b60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
10007b72:	4b13      	ldr	r3, [pc, #76]	; (10007bc0 <vTaskPriorityInherit+0xb0>)
10007b74:	681b      	ldr	r3, [r3, #0]
10007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007b78:	68fb      	ldr	r3, [r7, #12]
10007b7a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
10007b7c:	68fb      	ldr	r3, [r7, #12]
10007b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007b80:	4b11      	ldr	r3, [pc, #68]	; (10007bc8 <vTaskPriorityInherit+0xb8>)
10007b82:	681b      	ldr	r3, [r3, #0]
10007b84:	429a      	cmp	r2, r3
10007b86:	d903      	bls.n	10007b90 <vTaskPriorityInherit+0x80>
10007b88:	68fb      	ldr	r3, [r7, #12]
10007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007b8c:	4b0e      	ldr	r3, [pc, #56]	; (10007bc8 <vTaskPriorityInherit+0xb8>)
10007b8e:	601a      	str	r2, [r3, #0]
10007b90:	68fb      	ldr	r3, [r7, #12]
10007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007b94:	1c13      	adds	r3, r2, #0
10007b96:	009b      	lsls	r3, r3, #2
10007b98:	189b      	adds	r3, r3, r2
10007b9a:	009b      	lsls	r3, r3, #2
10007b9c:	4a09      	ldr	r2, [pc, #36]	; (10007bc4 <vTaskPriorityInherit+0xb4>)
10007b9e:	189a      	adds	r2, r3, r2
10007ba0:	68fb      	ldr	r3, [r7, #12]
10007ba2:	3304      	adds	r3, #4
10007ba4:	1c10      	adds	r0, r2, #0
10007ba6:	1c19      	adds	r1, r3, #0
10007ba8:	f000 ff82 	bl	10008ab0 <vListInsertEnd>
10007bac:	e004      	b.n	10007bb8 <vTaskPriorityInherit+0xa8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
10007bae:	4b04      	ldr	r3, [pc, #16]	; (10007bc0 <vTaskPriorityInherit+0xb0>)
10007bb0:	681b      	ldr	r3, [r3, #0]
10007bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007bb4:	68fb      	ldr	r3, [r7, #12]
10007bb6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
10007bb8:	46bd      	mov	sp, r7
10007bba:	b004      	add	sp, #16
10007bbc:	bd80      	pop	{r7, pc}
10007bbe:	46c0      	nop			; (mov r8, r8)
10007bc0:	20000cbc 	.word	0x20000cbc
10007bc4:	20000cc0 	.word	0x20000cc0
10007bc8:	20000d9c 	.word	0x20000d9c

10007bcc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
10007bcc:	b580      	push	{r7, lr}
10007bce:	b084      	sub	sp, #16
10007bd0:	af00      	add	r7, sp, #0
10007bd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
10007bd4:	687b      	ldr	r3, [r7, #4]
10007bd6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
10007bd8:	687b      	ldr	r3, [r7, #4]
10007bda:	2b00      	cmp	r3, #0
10007bdc:	d030      	beq.n	10007c40 <vTaskPriorityDisinherit+0x74>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
10007bde:	68fb      	ldr	r3, [r7, #12]
10007be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007be2:	68fb      	ldr	r3, [r7, #12]
10007be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10007be6:	429a      	cmp	r2, r3
10007be8:	d02a      	beq.n	10007c40 <vTaskPriorityDisinherit+0x74>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
10007bea:	68fb      	ldr	r3, [r7, #12]
10007bec:	3304      	adds	r3, #4
10007bee:	1c18      	adds	r0, r3, #0
10007bf0:	f000 ffb6 	bl	10008b60 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
10007bf4:	68fb      	ldr	r3, [r7, #12]
10007bf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10007bf8:	68fb      	ldr	r3, [r7, #12]
10007bfa:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
10007bfc:	68fb      	ldr	r3, [r7, #12]
10007bfe:	699b      	ldr	r3, [r3, #24]
10007c00:	2b00      	cmp	r3, #0
10007c02:	db05      	blt.n	10007c10 <vTaskPriorityDisinherit+0x44>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10007c04:	68fb      	ldr	r3, [r7, #12]
10007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007c08:	2205      	movs	r2, #5
10007c0a:	1ad2      	subs	r2, r2, r3
10007c0c:	68fb      	ldr	r3, [r7, #12]
10007c0e:	619a      	str	r2, [r3, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
10007c10:	68fb      	ldr	r3, [r7, #12]
10007c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007c14:	4b0c      	ldr	r3, [pc, #48]	; (10007c48 <vTaskPriorityDisinherit+0x7c>)
10007c16:	681b      	ldr	r3, [r3, #0]
10007c18:	429a      	cmp	r2, r3
10007c1a:	d903      	bls.n	10007c24 <vTaskPriorityDisinherit+0x58>
10007c1c:	68fb      	ldr	r3, [r7, #12]
10007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007c20:	4b09      	ldr	r3, [pc, #36]	; (10007c48 <vTaskPriorityDisinherit+0x7c>)
10007c22:	601a      	str	r2, [r3, #0]
10007c24:	68fb      	ldr	r3, [r7, #12]
10007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007c28:	1c13      	adds	r3, r2, #0
10007c2a:	009b      	lsls	r3, r3, #2
10007c2c:	189b      	adds	r3, r3, r2
10007c2e:	009b      	lsls	r3, r3, #2
10007c30:	4a06      	ldr	r2, [pc, #24]	; (10007c4c <vTaskPriorityDisinherit+0x80>)
10007c32:	189a      	adds	r2, r3, r2
10007c34:	68fb      	ldr	r3, [r7, #12]
10007c36:	3304      	adds	r3, #4
10007c38:	1c10      	adds	r0, r2, #0
10007c3a:	1c19      	adds	r1, r3, #0
10007c3c:	f000 ff38 	bl	10008ab0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
10007c40:	46bd      	mov	sp, r7
10007c42:	b004      	add	sp, #16
10007c44:	bd80      	pop	{r7, pc}
10007c46:	46c0      	nop			; (mov r8, r8)
10007c48:	20000d9c 	.word	0x20000d9c
10007c4c:	20000cc0 	.word	0x20000cc0

10007c50 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
10007c50:	b580      	push	{r7, lr}
10007c52:	b082      	sub	sp, #8
10007c54:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
10007c56:	4b08      	ldr	r3, [pc, #32]	; (10007c78 <uxTaskResetEventItemValue+0x28>)
10007c58:	681b      	ldr	r3, [r3, #0]
10007c5a:	699b      	ldr	r3, [r3, #24]
10007c5c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10007c5e:	4b06      	ldr	r3, [pc, #24]	; (10007c78 <uxTaskResetEventItemValue+0x28>)
10007c60:	681b      	ldr	r3, [r3, #0]
10007c62:	4a05      	ldr	r2, [pc, #20]	; (10007c78 <uxTaskResetEventItemValue+0x28>)
10007c64:	6812      	ldr	r2, [r2, #0]
10007c66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
10007c68:	2105      	movs	r1, #5
10007c6a:	1a8a      	subs	r2, r1, r2
10007c6c:	619a      	str	r2, [r3, #24]

	return uxReturn;
10007c6e:	687b      	ldr	r3, [r7, #4]
}
10007c70:	1c18      	adds	r0, r3, #0
10007c72:	46bd      	mov	sp, r7
10007c74:	b002      	add	sp, #8
10007c76:	bd80      	pop	{r7, pc}
10007c78:	20000cbc 	.word	0x20000cbc

10007c7c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
10007c7c:	b580      	push	{r7, lr}
10007c7e:	b086      	sub	sp, #24
10007c80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
10007c82:	2300      	movs	r3, #0
10007c84:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
10007c86:	f000 faab 	bl	100081e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
10007c8a:	4b11      	ldr	r3, [pc, #68]	; (10007cd0 <xTimerCreateTimerTask+0x54>)
10007c8c:	681b      	ldr	r3, [r3, #0]
10007c8e:	2b00      	cmp	r3, #0
10007c90:	d013      	beq.n	10007cba <xTimerCreateTimerTask+0x3e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
10007c92:	4910      	ldr	r1, [pc, #64]	; (10007cd4 <xTimerCreateTimerTask+0x58>)
10007c94:	4a10      	ldr	r2, [pc, #64]	; (10007cd8 <xTimerCreateTimerTask+0x5c>)
10007c96:	2382      	movs	r3, #130	; 0x82
10007c98:	005b      	lsls	r3, r3, #1
10007c9a:	2002      	movs	r0, #2
10007c9c:	9000      	str	r0, [sp, #0]
10007c9e:	2000      	movs	r0, #0
10007ca0:	9001      	str	r0, [sp, #4]
10007ca2:	2000      	movs	r0, #0
10007ca4:	9002      	str	r0, [sp, #8]
10007ca6:	2000      	movs	r0, #0
10007ca8:	9003      	str	r0, [sp, #12]
10007caa:	1c08      	adds	r0, r1, #0
10007cac:	1c11      	adds	r1, r2, #0
10007cae:	1c1a      	adds	r2, r3, #0
10007cb0:	2300      	movs	r3, #0
10007cb2:	f7fe fcbf 	bl	10006634 <xTaskGenericCreate>
10007cb6:	1c03      	adds	r3, r0, #0
10007cb8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
10007cba:	687b      	ldr	r3, [r7, #4]
10007cbc:	2b00      	cmp	r3, #0
10007cbe:	d101      	bne.n	10007cc4 <xTimerCreateTimerTask+0x48>
10007cc0:	b672      	cpsid	i
10007cc2:	e7fe      	b.n	10007cc2 <xTimerCreateTimerTask+0x46>
	return xReturn;
10007cc4:	687b      	ldr	r3, [r7, #4]
}
10007cc6:	1c18      	adds	r0, r3, #0
10007cc8:	46bd      	mov	sp, r7
10007cca:	b002      	add	sp, #8
10007ccc:	bd80      	pop	{r7, pc}
10007cce:	46c0      	nop			; (mov r8, r8)
10007cd0:	20000de8 	.word	0x20000de8
10007cd4:	10007e75 	.word	0x10007e75
10007cd8:	1000ad28 	.word	0x1000ad28

10007cdc <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
10007cdc:	b580      	push	{r7, lr}
10007cde:	b086      	sub	sp, #24
10007ce0:	af00      	add	r7, sp, #0
10007ce2:	60f8      	str	r0, [r7, #12]
10007ce4:	60b9      	str	r1, [r7, #8]
10007ce6:	607a      	str	r2, [r7, #4]
10007ce8:	603b      	str	r3, [r7, #0]
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
10007cea:	68bb      	ldr	r3, [r7, #8]
10007cec:	2b00      	cmp	r3, #0
10007cee:	d102      	bne.n	10007cf6 <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
10007cf0:	2300      	movs	r3, #0
10007cf2:	617b      	str	r3, [r7, #20]
10007cf4:	e01d      	b.n	10007d32 <xTimerCreate+0x56>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
10007cf6:	202c      	movs	r0, #44	; 0x2c
10007cf8:	f000 fad4 	bl	100082a4 <pvPortMalloc>
10007cfc:	1c03      	adds	r3, r0, #0
10007cfe:	617b      	str	r3, [r7, #20]
		if( pxNewTimer != NULL )
10007d00:	697b      	ldr	r3, [r7, #20]
10007d02:	2b00      	cmp	r3, #0
10007d04:	d015      	beq.n	10007d32 <xTimerCreate+0x56>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
10007d06:	f000 fa6b 	bl	100081e0 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
10007d0a:	697b      	ldr	r3, [r7, #20]
10007d0c:	68fa      	ldr	r2, [r7, #12]
10007d0e:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
10007d10:	697b      	ldr	r3, [r7, #20]
10007d12:	68ba      	ldr	r2, [r7, #8]
10007d14:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
10007d16:	697b      	ldr	r3, [r7, #20]
10007d18:	687a      	ldr	r2, [r7, #4]
10007d1a:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
10007d1c:	697b      	ldr	r3, [r7, #20]
10007d1e:	683a      	ldr	r2, [r7, #0]
10007d20:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
10007d22:	697b      	ldr	r3, [r7, #20]
10007d24:	6a3a      	ldr	r2, [r7, #32]
10007d26:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
10007d28:	697b      	ldr	r3, [r7, #20]
10007d2a:	3304      	adds	r3, #4
10007d2c:	1c18      	adds	r0, r3, #0
10007d2e:	f000 feb5 	bl	10008a9c <vListInitialiseItem>
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
10007d32:	68bb      	ldr	r3, [r7, #8]
10007d34:	2b00      	cmp	r3, #0
10007d36:	d101      	bne.n	10007d3c <xTimerCreate+0x60>
10007d38:	b672      	cpsid	i
10007d3a:	e7fe      	b.n	10007d3a <xTimerCreate+0x5e>

	return ( TimerHandle_t ) pxNewTimer;
10007d3c:	697b      	ldr	r3, [r7, #20]
}
10007d3e:	1c18      	adds	r0, r3, #0
10007d40:	46bd      	mov	sp, r7
10007d42:	b006      	add	sp, #24
10007d44:	bd80      	pop	{r7, pc}
10007d46:	46c0      	nop			; (mov r8, r8)

10007d48 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
10007d48:	b580      	push	{r7, lr}
10007d4a:	b088      	sub	sp, #32
10007d4c:	af00      	add	r7, sp, #0
10007d4e:	60f8      	str	r0, [r7, #12]
10007d50:	60b9      	str	r1, [r7, #8]
10007d52:	607a      	str	r2, [r7, #4]
10007d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
10007d56:	2300      	movs	r3, #0
10007d58:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
10007d5a:	4b22      	ldr	r3, [pc, #136]	; (10007de4 <xTimerGenericCommand+0x9c>)
10007d5c:	681b      	ldr	r3, [r3, #0]
10007d5e:	2b00      	cmp	r3, #0
10007d60:	d03b      	beq.n	10007dda <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
10007d62:	1c3b      	adds	r3, r7, #0
10007d64:	3310      	adds	r3, #16
10007d66:	68ba      	ldr	r2, [r7, #8]
10007d68:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
10007d6a:	1c3b      	adds	r3, r7, #0
10007d6c:	3310      	adds	r3, #16
10007d6e:	687a      	ldr	r2, [r7, #4]
10007d70:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
10007d72:	1c3b      	adds	r3, r7, #0
10007d74:	3310      	adds	r3, #16
10007d76:	68fa      	ldr	r2, [r7, #12]
10007d78:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
10007d7a:	68bb      	ldr	r3, [r7, #8]
10007d7c:	2b05      	cmp	r3, #5
10007d7e:	dc1f      	bgt.n	10007dc0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
10007d80:	f7ff feaa 	bl	10007ad8 <xTaskGetSchedulerState>
10007d84:	1c03      	adds	r3, r0, #0
10007d86:	2b02      	cmp	r3, #2
10007d88:	d10d      	bne.n	10007da6 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
10007d8a:	4b16      	ldr	r3, [pc, #88]	; (10007de4 <xTimerGenericCommand+0x9c>)
10007d8c:	6819      	ldr	r1, [r3, #0]
10007d8e:	1c3a      	adds	r2, r7, #0
10007d90:	3210      	adds	r2, #16
10007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
10007d94:	1c08      	adds	r0, r1, #0
10007d96:	1c11      	adds	r1, r2, #0
10007d98:	1c1a      	adds	r2, r3, #0
10007d9a:	2300      	movs	r3, #0
10007d9c:	f001 f876 	bl	10008e8c <xQueueGenericSend>
10007da0:	1c03      	adds	r3, r0, #0
10007da2:	61fb      	str	r3, [r7, #28]
10007da4:	e019      	b.n	10007dda <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
10007da6:	4b0f      	ldr	r3, [pc, #60]	; (10007de4 <xTimerGenericCommand+0x9c>)
10007da8:	681a      	ldr	r2, [r3, #0]
10007daa:	1c3b      	adds	r3, r7, #0
10007dac:	3310      	adds	r3, #16
10007dae:	1c10      	adds	r0, r2, #0
10007db0:	1c19      	adds	r1, r3, #0
10007db2:	2200      	movs	r2, #0
10007db4:	2300      	movs	r3, #0
10007db6:	f001 f869 	bl	10008e8c <xQueueGenericSend>
10007dba:	1c03      	adds	r3, r0, #0
10007dbc:	61fb      	str	r3, [r7, #28]
10007dbe:	e00c      	b.n	10007dda <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
10007dc0:	4b08      	ldr	r3, [pc, #32]	; (10007de4 <xTimerGenericCommand+0x9c>)
10007dc2:	6819      	ldr	r1, [r3, #0]
10007dc4:	1c3a      	adds	r2, r7, #0
10007dc6:	3210      	adds	r2, #16
10007dc8:	683b      	ldr	r3, [r7, #0]
10007dca:	1c08      	adds	r0, r1, #0
10007dcc:	1c11      	adds	r1, r2, #0
10007dce:	1c1a      	adds	r2, r3, #0
10007dd0:	2300      	movs	r3, #0
10007dd2:	f001 f91b 	bl	1000900c <xQueueGenericSendFromISR>
10007dd6:	1c03      	adds	r3, r0, #0
10007dd8:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
10007dda:	69fb      	ldr	r3, [r7, #28]
}
10007ddc:	1c18      	adds	r0, r3, #0
10007dde:	46bd      	mov	sp, r7
10007de0:	b008      	add	sp, #32
10007de2:	bd80      	pop	{r7, pc}
10007de4:	20000de8 	.word	0x20000de8

10007de8 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
10007de8:	b580      	push	{r7, lr}
10007dea:	b084      	sub	sp, #16
10007dec:	af00      	add	r7, sp, #0
10007dee:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = ( Timer_t * ) xTimer;
10007df0:	687b      	ldr	r3, [r7, #4]
10007df2:	60fb      	str	r3, [r7, #12]

	return pxTimer->pcTimerName;
10007df4:	68fb      	ldr	r3, [r7, #12]
10007df6:	681b      	ldr	r3, [r3, #0]
}
10007df8:	1c18      	adds	r0, r3, #0
10007dfa:	46bd      	mov	sp, r7
10007dfc:	b004      	add	sp, #16
10007dfe:	bd80      	pop	{r7, pc}

10007e00 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
10007e00:	b580      	push	{r7, lr}
10007e02:	b086      	sub	sp, #24
10007e04:	af02      	add	r7, sp, #8
10007e06:	6078      	str	r0, [r7, #4]
10007e08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
10007e0a:	4b19      	ldr	r3, [pc, #100]	; (10007e70 <prvProcessExpiredTimer+0x70>)
10007e0c:	681b      	ldr	r3, [r3, #0]
10007e0e:	68db      	ldr	r3, [r3, #12]
10007e10:	68db      	ldr	r3, [r3, #12]
10007e12:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
10007e14:	68fb      	ldr	r3, [r7, #12]
10007e16:	3304      	adds	r3, #4
10007e18:	1c18      	adds	r0, r3, #0
10007e1a:	f000 fea1 	bl	10008b60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
10007e1e:	68fb      	ldr	r3, [r7, #12]
10007e20:	69db      	ldr	r3, [r3, #28]
10007e22:	2b01      	cmp	r3, #1
10007e24:	d11c      	bne.n	10007e60 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
10007e26:	68fb      	ldr	r3, [r7, #12]
10007e28:	699a      	ldr	r2, [r3, #24]
10007e2a:	687b      	ldr	r3, [r7, #4]
10007e2c:	18d1      	adds	r1, r2, r3
10007e2e:	68f8      	ldr	r0, [r7, #12]
10007e30:	683a      	ldr	r2, [r7, #0]
10007e32:	687b      	ldr	r3, [r7, #4]
10007e34:	f000 f8ae 	bl	10007f94 <prvInsertTimerInActiveList>
10007e38:	1c03      	adds	r3, r0, #0
10007e3a:	2b01      	cmp	r3, #1
10007e3c:	d110      	bne.n	10007e60 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
10007e3e:	68fa      	ldr	r2, [r7, #12]
10007e40:	687b      	ldr	r3, [r7, #4]
10007e42:	2100      	movs	r1, #0
10007e44:	9100      	str	r1, [sp, #0]
10007e46:	1c10      	adds	r0, r2, #0
10007e48:	2100      	movs	r1, #0
10007e4a:	1c1a      	adds	r2, r3, #0
10007e4c:	2300      	movs	r3, #0
10007e4e:	f7ff ff7b 	bl	10007d48 <xTimerGenericCommand>
10007e52:	1c03      	adds	r3, r0, #0
10007e54:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
10007e56:	68bb      	ldr	r3, [r7, #8]
10007e58:	2b00      	cmp	r3, #0
10007e5a:	d101      	bne.n	10007e60 <prvProcessExpiredTimer+0x60>
10007e5c:	b672      	cpsid	i
10007e5e:	e7fe      	b.n	10007e5e <prvProcessExpiredTimer+0x5e>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
10007e60:	68fb      	ldr	r3, [r7, #12]
10007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10007e64:	68fa      	ldr	r2, [r7, #12]
10007e66:	1c10      	adds	r0, r2, #0
10007e68:	4798      	blx	r3
}
10007e6a:	46bd      	mov	sp, r7
10007e6c:	b004      	add	sp, #16
10007e6e:	bd80      	pop	{r7, pc}
10007e70:	20000de0 	.word	0x20000de0

10007e74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
10007e74:	b580      	push	{r7, lr}
10007e76:	b084      	sub	sp, #16
10007e78:	af00      	add	r7, sp, #0
10007e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
10007e7c:	1c3b      	adds	r3, r7, #0
10007e7e:	3308      	adds	r3, #8
10007e80:	1c18      	adds	r0, r3, #0
10007e82:	f000 f847 	bl	10007f14 <prvGetNextExpireTime>
10007e86:	1c03      	adds	r3, r0, #0
10007e88:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
10007e8a:	68bb      	ldr	r3, [r7, #8]
10007e8c:	68fa      	ldr	r2, [r7, #12]
10007e8e:	1c10      	adds	r0, r2, #0
10007e90:	1c19      	adds	r1, r3, #0
10007e92:	f000 f803 	bl	10007e9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
10007e96:	f000 f8bf 	bl	10008018 <prvProcessReceivedCommands>
	}
10007e9a:	e7ef      	b.n	10007e7c <prvTimerTask+0x8>

10007e9c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
10007e9c:	b580      	push	{r7, lr}
10007e9e:	b084      	sub	sp, #16
10007ea0:	af00      	add	r7, sp, #0
10007ea2:	6078      	str	r0, [r7, #4]
10007ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
10007ea6:	f7fe ff8b 	bl	10006dc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
10007eaa:	1c3b      	adds	r3, r7, #0
10007eac:	3308      	adds	r3, #8
10007eae:	1c18      	adds	r0, r3, #0
10007eb0:	f000 f850 	bl	10007f54 <prvSampleTimeNow>
10007eb4:	1c03      	adds	r3, r0, #0
10007eb6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
10007eb8:	68bb      	ldr	r3, [r7, #8]
10007eba:	2b00      	cmp	r3, #0
10007ebc:	d120      	bne.n	10007f00 <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
10007ebe:	683b      	ldr	r3, [r7, #0]
10007ec0:	2b00      	cmp	r3, #0
10007ec2:	d10c      	bne.n	10007ede <prvProcessTimerOrBlockTask+0x42>
10007ec4:	687a      	ldr	r2, [r7, #4]
10007ec6:	68fb      	ldr	r3, [r7, #12]
10007ec8:	429a      	cmp	r2, r3
10007eca:	d808      	bhi.n	10007ede <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
10007ecc:	f7fe ff84 	bl	10006dd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
10007ed0:	687a      	ldr	r2, [r7, #4]
10007ed2:	68fb      	ldr	r3, [r7, #12]
10007ed4:	1c10      	adds	r0, r2, #0
10007ed6:	1c19      	adds	r1, r3, #0
10007ed8:	f7ff ff92 	bl	10007e00 <prvProcessExpiredTimer>
10007edc:	e014      	b.n	10007f08 <prvProcessTimerOrBlockTask+0x6c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
10007ede:	4b0c      	ldr	r3, [pc, #48]	; (10007f10 <prvProcessTimerOrBlockTask+0x74>)
10007ee0:	681a      	ldr	r2, [r3, #0]
10007ee2:	6879      	ldr	r1, [r7, #4]
10007ee4:	68fb      	ldr	r3, [r7, #12]
10007ee6:	1acb      	subs	r3, r1, r3
10007ee8:	1c10      	adds	r0, r2, #0
10007eea:	1c19      	adds	r1, r3, #0
10007eec:	f001 fc74 	bl	100097d8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
10007ef0:	f7fe ff72 	bl	10006dd8 <xTaskResumeAll>
10007ef4:	1c03      	adds	r3, r0, #0
10007ef6:	2b00      	cmp	r3, #0
10007ef8:	d105      	bne.n	10007f06 <prvProcessTimerOrBlockTask+0x6a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
10007efa:	f000 fabb 	bl	10008474 <vPortYield>
10007efe:	e002      	b.n	10007f06 <prvProcessTimerOrBlockTask+0x6a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
10007f00:	f7fe ff6a 	bl	10006dd8 <xTaskResumeAll>
10007f04:	e000      	b.n	10007f08 <prvProcessTimerOrBlockTask+0x6c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
10007f06:	46c0      	nop			; (mov r8, r8)
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
10007f08:	46bd      	mov	sp, r7
10007f0a:	b004      	add	sp, #16
10007f0c:	bd80      	pop	{r7, pc}
10007f0e:	46c0      	nop			; (mov r8, r8)
10007f10:	20000de8 	.word	0x20000de8

10007f14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
10007f14:	b580      	push	{r7, lr}
10007f16:	b084      	sub	sp, #16
10007f18:	af00      	add	r7, sp, #0
10007f1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
10007f1c:	4b0c      	ldr	r3, [pc, #48]	; (10007f50 <prvGetNextExpireTime+0x3c>)
10007f1e:	681b      	ldr	r3, [r3, #0]
10007f20:	681b      	ldr	r3, [r3, #0]
10007f22:	425a      	negs	r2, r3
10007f24:	4153      	adcs	r3, r2
10007f26:	b2db      	uxtb	r3, r3
10007f28:	1c1a      	adds	r2, r3, #0
10007f2a:	687b      	ldr	r3, [r7, #4]
10007f2c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
10007f2e:	687b      	ldr	r3, [r7, #4]
10007f30:	681b      	ldr	r3, [r3, #0]
10007f32:	2b00      	cmp	r3, #0
10007f34:	d105      	bne.n	10007f42 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
10007f36:	4b06      	ldr	r3, [pc, #24]	; (10007f50 <prvGetNextExpireTime+0x3c>)
10007f38:	681b      	ldr	r3, [r3, #0]
10007f3a:	68db      	ldr	r3, [r3, #12]
10007f3c:	681b      	ldr	r3, [r3, #0]
10007f3e:	60fb      	str	r3, [r7, #12]
10007f40:	e001      	b.n	10007f46 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
10007f42:	2300      	movs	r3, #0
10007f44:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
10007f46:	68fb      	ldr	r3, [r7, #12]
}
10007f48:	1c18      	adds	r0, r3, #0
10007f4a:	46bd      	mov	sp, r7
10007f4c:	b004      	add	sp, #16
10007f4e:	bd80      	pop	{r7, pc}
10007f50:	20000de0 	.word	0x20000de0

10007f54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
10007f54:	b580      	push	{r7, lr}
10007f56:	b084      	sub	sp, #16
10007f58:	af00      	add	r7, sp, #0
10007f5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
10007f5c:	f7fe ffc0 	bl	10006ee0 <xTaskGetTickCount>
10007f60:	1c03      	adds	r3, r0, #0
10007f62:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
10007f64:	4b0a      	ldr	r3, [pc, #40]	; (10007f90 <prvSampleTimeNow+0x3c>)
10007f66:	681b      	ldr	r3, [r3, #0]
10007f68:	68fa      	ldr	r2, [r7, #12]
10007f6a:	429a      	cmp	r2, r3
10007f6c:	d205      	bcs.n	10007f7a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
10007f6e:	f000 f8db 	bl	10008128 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
10007f72:	687b      	ldr	r3, [r7, #4]
10007f74:	2201      	movs	r2, #1
10007f76:	601a      	str	r2, [r3, #0]
10007f78:	e002      	b.n	10007f80 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
10007f7a:	687b      	ldr	r3, [r7, #4]
10007f7c:	2200      	movs	r2, #0
10007f7e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
10007f80:	4b03      	ldr	r3, [pc, #12]	; (10007f90 <prvSampleTimeNow+0x3c>)
10007f82:	68fa      	ldr	r2, [r7, #12]
10007f84:	601a      	str	r2, [r3, #0]

	return xTimeNow;
10007f86:	68fb      	ldr	r3, [r7, #12]
}
10007f88:	1c18      	adds	r0, r3, #0
10007f8a:	46bd      	mov	sp, r7
10007f8c:	b004      	add	sp, #16
10007f8e:	bd80      	pop	{r7, pc}
10007f90:	20000dec 	.word	0x20000dec

10007f94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
10007f94:	b580      	push	{r7, lr}
10007f96:	b086      	sub	sp, #24
10007f98:	af00      	add	r7, sp, #0
10007f9a:	60f8      	str	r0, [r7, #12]
10007f9c:	60b9      	str	r1, [r7, #8]
10007f9e:	607a      	str	r2, [r7, #4]
10007fa0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
10007fa2:	2300      	movs	r3, #0
10007fa4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
10007fa6:	68fb      	ldr	r3, [r7, #12]
10007fa8:	68ba      	ldr	r2, [r7, #8]
10007faa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
10007fac:	68fb      	ldr	r3, [r7, #12]
10007fae:	68fa      	ldr	r2, [r7, #12]
10007fb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
10007fb2:	68ba      	ldr	r2, [r7, #8]
10007fb4:	687b      	ldr	r3, [r7, #4]
10007fb6:	429a      	cmp	r2, r3
10007fb8:	d812      	bhi.n	10007fe0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
10007fba:	687a      	ldr	r2, [r7, #4]
10007fbc:	683b      	ldr	r3, [r7, #0]
10007fbe:	1ad2      	subs	r2, r2, r3
10007fc0:	68fb      	ldr	r3, [r7, #12]
10007fc2:	699b      	ldr	r3, [r3, #24]
10007fc4:	429a      	cmp	r2, r3
10007fc6:	d302      	bcc.n	10007fce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
10007fc8:	2301      	movs	r3, #1
10007fca:	617b      	str	r3, [r7, #20]
10007fcc:	e01b      	b.n	10008006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
10007fce:	4b10      	ldr	r3, [pc, #64]	; (10008010 <prvInsertTimerInActiveList+0x7c>)
10007fd0:	681a      	ldr	r2, [r3, #0]
10007fd2:	68fb      	ldr	r3, [r7, #12]
10007fd4:	3304      	adds	r3, #4
10007fd6:	1c10      	adds	r0, r2, #0
10007fd8:	1c19      	adds	r1, r3, #0
10007fda:	f000 fd8b 	bl	10008af4 <vListInsert>
10007fde:	e012      	b.n	10008006 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
10007fe0:	687a      	ldr	r2, [r7, #4]
10007fe2:	683b      	ldr	r3, [r7, #0]
10007fe4:	429a      	cmp	r2, r3
10007fe6:	d206      	bcs.n	10007ff6 <prvInsertTimerInActiveList+0x62>
10007fe8:	68ba      	ldr	r2, [r7, #8]
10007fea:	683b      	ldr	r3, [r7, #0]
10007fec:	429a      	cmp	r2, r3
10007fee:	d302      	bcc.n	10007ff6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
10007ff0:	2301      	movs	r3, #1
10007ff2:	617b      	str	r3, [r7, #20]
10007ff4:	e007      	b.n	10008006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
10007ff6:	4b07      	ldr	r3, [pc, #28]	; (10008014 <prvInsertTimerInActiveList+0x80>)
10007ff8:	681a      	ldr	r2, [r3, #0]
10007ffa:	68fb      	ldr	r3, [r7, #12]
10007ffc:	3304      	adds	r3, #4
10007ffe:	1c10      	adds	r0, r2, #0
10008000:	1c19      	adds	r1, r3, #0
10008002:	f000 fd77 	bl	10008af4 <vListInsert>
		}
	}

	return xProcessTimerNow;
10008006:	697b      	ldr	r3, [r7, #20]
}
10008008:	1c18      	adds	r0, r3, #0
1000800a:	46bd      	mov	sp, r7
1000800c:	b006      	add	sp, #24
1000800e:	bd80      	pop	{r7, pc}
10008010:	20000de4 	.word	0x20000de4
10008014:	20000de0 	.word	0x20000de0

10008018 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
10008018:	b580      	push	{r7, lr}
1000801a:	b08a      	sub	sp, #40	; 0x28
1000801c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1000801e:	e06f      	b.n	10008100 <prvProcessReceivedCommands+0xe8>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
10008020:	1c3b      	adds	r3, r7, #0
10008022:	3308      	adds	r3, #8
10008024:	681b      	ldr	r3, [r3, #0]
10008026:	2b00      	cmp	r3, #0
10008028:	db6a      	blt.n	10008100 <prvProcessReceivedCommands+0xe8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1000802a:	1c3b      	adds	r3, r7, #0
1000802c:	3308      	adds	r3, #8
1000802e:	689b      	ldr	r3, [r3, #8]
10008030:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
10008032:	69fb      	ldr	r3, [r7, #28]
10008034:	695b      	ldr	r3, [r3, #20]
10008036:	2b00      	cmp	r3, #0
10008038:	d004      	beq.n	10008044 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1000803a:	69fb      	ldr	r3, [r7, #28]
1000803c:	3304      	adds	r3, #4
1000803e:	1c18      	adds	r0, r3, #0
10008040:	f000 fd8e 	bl	10008b60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
10008044:	1d3b      	adds	r3, r7, #4
10008046:	1c18      	adds	r0, r3, #0
10008048:	f7ff ff84 	bl	10007f54 <prvSampleTimeNow>
1000804c:	1c03      	adds	r3, r0, #0
1000804e:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
10008050:	1c3b      	adds	r3, r7, #0
10008052:	3308      	adds	r3, #8
10008054:	681b      	ldr	r3, [r3, #0]
10008056:	2b09      	cmp	r3, #9
10008058:	d84d      	bhi.n	100080f6 <prvProcessReceivedCommands+0xde>
1000805a:	009a      	lsls	r2, r3, #2
1000805c:	4b30      	ldr	r3, [pc, #192]	; (10008120 <prvProcessReceivedCommands+0x108>)
1000805e:	18d3      	adds	r3, r2, r3
10008060:	681b      	ldr	r3, [r3, #0]
10008062:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
10008064:	1c3b      	adds	r3, r7, #0
10008066:	3308      	adds	r3, #8
10008068:	685a      	ldr	r2, [r3, #4]
1000806a:	69fb      	ldr	r3, [r7, #28]
1000806c:	699b      	ldr	r3, [r3, #24]
1000806e:	18d1      	adds	r1, r2, r3
10008070:	1c3b      	adds	r3, r7, #0
10008072:	3308      	adds	r3, #8
10008074:	685b      	ldr	r3, [r3, #4]
10008076:	69f8      	ldr	r0, [r7, #28]
10008078:	69ba      	ldr	r2, [r7, #24]
1000807a:	f7ff ff8b 	bl	10007f94 <prvInsertTimerInActiveList>
1000807e:	1c03      	adds	r3, r0, #0
10008080:	2b01      	cmp	r3, #1
10008082:	d13c      	bne.n	100080fe <prvProcessReceivedCommands+0xe6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
10008084:	69fb      	ldr	r3, [r7, #28]
10008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10008088:	69fa      	ldr	r2, [r7, #28]
1000808a:	1c10      	adds	r0, r2, #0
1000808c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1000808e:	69fb      	ldr	r3, [r7, #28]
10008090:	69db      	ldr	r3, [r3, #28]
10008092:	2b01      	cmp	r3, #1
10008094:	d133      	bne.n	100080fe <prvProcessReceivedCommands+0xe6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
10008096:	1c3b      	adds	r3, r7, #0
10008098:	3308      	adds	r3, #8
1000809a:	685a      	ldr	r2, [r3, #4]
1000809c:	69fb      	ldr	r3, [r7, #28]
1000809e:	699b      	ldr	r3, [r3, #24]
100080a0:	18d3      	adds	r3, r2, r3
100080a2:	69fa      	ldr	r2, [r7, #28]
100080a4:	2100      	movs	r1, #0
100080a6:	9100      	str	r1, [sp, #0]
100080a8:	1c10      	adds	r0, r2, #0
100080aa:	2100      	movs	r1, #0
100080ac:	1c1a      	adds	r2, r3, #0
100080ae:	2300      	movs	r3, #0
100080b0:	f7ff fe4a 	bl	10007d48 <xTimerGenericCommand>
100080b4:	1c03      	adds	r3, r0, #0
100080b6:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
100080b8:	697b      	ldr	r3, [r7, #20]
100080ba:	2b00      	cmp	r3, #0
100080bc:	d11f      	bne.n	100080fe <prvProcessReceivedCommands+0xe6>
100080be:	b672      	cpsid	i
100080c0:	e7fe      	b.n	100080c0 <prvProcessReceivedCommands+0xa8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
100080c2:	1c3b      	adds	r3, r7, #0
100080c4:	3308      	adds	r3, #8
100080c6:	685a      	ldr	r2, [r3, #4]
100080c8:	69fb      	ldr	r3, [r7, #28]
100080ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
100080cc:	69fb      	ldr	r3, [r7, #28]
100080ce:	699b      	ldr	r3, [r3, #24]
100080d0:	2b00      	cmp	r3, #0
100080d2:	d101      	bne.n	100080d8 <prvProcessReceivedCommands+0xc0>
100080d4:	b672      	cpsid	i
100080d6:	e7fe      	b.n	100080d6 <prvProcessReceivedCommands+0xbe>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
100080d8:	69fb      	ldr	r3, [r7, #28]
100080da:	699a      	ldr	r2, [r3, #24]
100080dc:	69bb      	ldr	r3, [r7, #24]
100080de:	18d1      	adds	r1, r2, r3
100080e0:	69f8      	ldr	r0, [r7, #28]
100080e2:	69ba      	ldr	r2, [r7, #24]
100080e4:	69bb      	ldr	r3, [r7, #24]
100080e6:	f7ff ff55 	bl	10007f94 <prvInsertTimerInActiveList>
					break;
100080ea:	e009      	b.n	10008100 <prvProcessReceivedCommands+0xe8>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
100080ec:	69fb      	ldr	r3, [r7, #28]
100080ee:	1c18      	adds	r0, r3, #0
100080f0:	f000 f922 	bl	10008338 <vPortFree>
					break;
100080f4:	e004      	b.n	10008100 <prvProcessReceivedCommands+0xe8>

				default	:
					/* Don't expect to get here. */
					break;
100080f6:	46c0      	nop			; (mov r8, r8)
100080f8:	e002      	b.n	10008100 <prvProcessReceivedCommands+0xe8>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list.
					There is nothing to do here. */
					break;
100080fa:	46c0      	nop			; (mov r8, r8)
100080fc:	e000      	b.n	10008100 <prvProcessReceivedCommands+0xe8>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
100080fe:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
10008100:	4b08      	ldr	r3, [pc, #32]	; (10008124 <prvProcessReceivedCommands+0x10c>)
10008102:	681a      	ldr	r2, [r3, #0]
10008104:	1c3b      	adds	r3, r7, #0
10008106:	3308      	adds	r3, #8
10008108:	1c10      	adds	r0, r2, #0
1000810a:	1c19      	adds	r1, r3, #0
1000810c:	2200      	movs	r2, #0
1000810e:	2300      	movs	r3, #0
10008110:	f000 ffe6 	bl	100090e0 <xQueueGenericReceive>
10008114:	1c03      	adds	r3, r0, #0
10008116:	2b00      	cmp	r3, #0
10008118:	d182      	bne.n	10008020 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
1000811a:	46bd      	mov	sp, r7
1000811c:	b008      	add	sp, #32
1000811e:	bd80      	pop	{r7, pc}
10008120:	1000ad30 	.word	0x1000ad30
10008124:	20000de8 	.word	0x20000de8

10008128 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
10008128:	b580      	push	{r7, lr}
1000812a:	b088      	sub	sp, #32
1000812c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1000812e:	e040      	b.n	100081b2 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
10008130:	4b29      	ldr	r3, [pc, #164]	; (100081d8 <prvSwitchTimerLists+0xb0>)
10008132:	681b      	ldr	r3, [r3, #0]
10008134:	68db      	ldr	r3, [r3, #12]
10008136:	681b      	ldr	r3, [r3, #0]
10008138:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1000813a:	4b27      	ldr	r3, [pc, #156]	; (100081d8 <prvSwitchTimerLists+0xb0>)
1000813c:	681b      	ldr	r3, [r3, #0]
1000813e:	68db      	ldr	r3, [r3, #12]
10008140:	68db      	ldr	r3, [r3, #12]
10008142:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
10008144:	693b      	ldr	r3, [r7, #16]
10008146:	3304      	adds	r3, #4
10008148:	1c18      	adds	r0, r3, #0
1000814a:	f000 fd09 	bl	10008b60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1000814e:	693b      	ldr	r3, [r7, #16]
10008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10008152:	693a      	ldr	r2, [r7, #16]
10008154:	1c10      	adds	r0, r2, #0
10008156:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
10008158:	693b      	ldr	r3, [r7, #16]
1000815a:	69db      	ldr	r3, [r3, #28]
1000815c:	2b01      	cmp	r3, #1
1000815e:	d128      	bne.n	100081b2 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
10008160:	693b      	ldr	r3, [r7, #16]
10008162:	699a      	ldr	r2, [r3, #24]
10008164:	697b      	ldr	r3, [r7, #20]
10008166:	18d3      	adds	r3, r2, r3
10008168:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
1000816a:	68fa      	ldr	r2, [r7, #12]
1000816c:	697b      	ldr	r3, [r7, #20]
1000816e:	429a      	cmp	r2, r3
10008170:	d90e      	bls.n	10008190 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
10008172:	693b      	ldr	r3, [r7, #16]
10008174:	68fa      	ldr	r2, [r7, #12]
10008176:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
10008178:	693b      	ldr	r3, [r7, #16]
1000817a:	693a      	ldr	r2, [r7, #16]
1000817c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1000817e:	4b16      	ldr	r3, [pc, #88]	; (100081d8 <prvSwitchTimerLists+0xb0>)
10008180:	681a      	ldr	r2, [r3, #0]
10008182:	693b      	ldr	r3, [r7, #16]
10008184:	3304      	adds	r3, #4
10008186:	1c10      	adds	r0, r2, #0
10008188:	1c19      	adds	r1, r3, #0
1000818a:	f000 fcb3 	bl	10008af4 <vListInsert>
1000818e:	e010      	b.n	100081b2 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
10008190:	693a      	ldr	r2, [r7, #16]
10008192:	697b      	ldr	r3, [r7, #20]
10008194:	2100      	movs	r1, #0
10008196:	9100      	str	r1, [sp, #0]
10008198:	1c10      	adds	r0, r2, #0
1000819a:	2100      	movs	r1, #0
1000819c:	1c1a      	adds	r2, r3, #0
1000819e:	2300      	movs	r3, #0
100081a0:	f7ff fdd2 	bl	10007d48 <xTimerGenericCommand>
100081a4:	1c03      	adds	r3, r0, #0
100081a6:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
100081a8:	68bb      	ldr	r3, [r7, #8]
100081aa:	2b00      	cmp	r3, #0
100081ac:	d101      	bne.n	100081b2 <prvSwitchTimerLists+0x8a>
100081ae:	b672      	cpsid	i
100081b0:	e7fe      	b.n	100081b0 <prvSwitchTimerLists+0x88>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
100081b2:	4b09      	ldr	r3, [pc, #36]	; (100081d8 <prvSwitchTimerLists+0xb0>)
100081b4:	681b      	ldr	r3, [r3, #0]
100081b6:	681b      	ldr	r3, [r3, #0]
100081b8:	2b00      	cmp	r3, #0
100081ba:	d1b9      	bne.n	10008130 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
100081bc:	4b06      	ldr	r3, [pc, #24]	; (100081d8 <prvSwitchTimerLists+0xb0>)
100081be:	681b      	ldr	r3, [r3, #0]
100081c0:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
100081c2:	4b06      	ldr	r3, [pc, #24]	; (100081dc <prvSwitchTimerLists+0xb4>)
100081c4:	681a      	ldr	r2, [r3, #0]
100081c6:	4b04      	ldr	r3, [pc, #16]	; (100081d8 <prvSwitchTimerLists+0xb0>)
100081c8:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
100081ca:	4b04      	ldr	r3, [pc, #16]	; (100081dc <prvSwitchTimerLists+0xb4>)
100081cc:	687a      	ldr	r2, [r7, #4]
100081ce:	601a      	str	r2, [r3, #0]
}
100081d0:	46bd      	mov	sp, r7
100081d2:	b006      	add	sp, #24
100081d4:	bd80      	pop	{r7, pc}
100081d6:	46c0      	nop			; (mov r8, r8)
100081d8:	20000de0 	.word	0x20000de0
100081dc:	20000de4 	.word	0x20000de4

100081e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
100081e0:	b580      	push	{r7, lr}
100081e2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
100081e4:	f000 f954 	bl	10008490 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
100081e8:	4b17      	ldr	r3, [pc, #92]	; (10008248 <prvCheckForValidListAndQueue+0x68>)
100081ea:	681b      	ldr	r3, [r3, #0]
100081ec:	2b00      	cmp	r3, #0
100081ee:	d126      	bne.n	1000823e <prvCheckForValidListAndQueue+0x5e>
		{
			vListInitialise( &xActiveTimerList1 );
100081f0:	4b16      	ldr	r3, [pc, #88]	; (1000824c <prvCheckForValidListAndQueue+0x6c>)
100081f2:	1c18      	adds	r0, r3, #0
100081f4:	f000 fc34 	bl	10008a60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
100081f8:	4b15      	ldr	r3, [pc, #84]	; (10008250 <prvCheckForValidListAndQueue+0x70>)
100081fa:	1c18      	adds	r0, r3, #0
100081fc:	f000 fc30 	bl	10008a60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
10008200:	4b14      	ldr	r3, [pc, #80]	; (10008254 <prvCheckForValidListAndQueue+0x74>)
10008202:	4a12      	ldr	r2, [pc, #72]	; (1000824c <prvCheckForValidListAndQueue+0x6c>)
10008204:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
10008206:	4b14      	ldr	r3, [pc, #80]	; (10008258 <prvCheckForValidListAndQueue+0x78>)
10008208:	4a11      	ldr	r2, [pc, #68]	; (10008250 <prvCheckForValidListAndQueue+0x70>)
1000820a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
1000820c:	2005      	movs	r0, #5
1000820e:	210c      	movs	r1, #12
10008210:	2200      	movs	r2, #0
10008212:	f000 fd23 	bl	10008c5c <xQueueGenericCreate>
10008216:	1c02      	adds	r2, r0, #0
10008218:	4b0b      	ldr	r3, [pc, #44]	; (10008248 <prvCheckForValidListAndQueue+0x68>)
1000821a:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
1000821c:	4b0a      	ldr	r3, [pc, #40]	; (10008248 <prvCheckForValidListAndQueue+0x68>)
1000821e:	681b      	ldr	r3, [r3, #0]
10008220:	2b00      	cmp	r3, #0
10008222:	d101      	bne.n	10008228 <prvCheckForValidListAndQueue+0x48>
10008224:	b672      	cpsid	i
10008226:	e7fe      	b.n	10008226 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
10008228:	4b07      	ldr	r3, [pc, #28]	; (10008248 <prvCheckForValidListAndQueue+0x68>)
1000822a:	681b      	ldr	r3, [r3, #0]
1000822c:	2b00      	cmp	r3, #0
1000822e:	d006      	beq.n	1000823e <prvCheckForValidListAndQueue+0x5e>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
10008230:	4b05      	ldr	r3, [pc, #20]	; (10008248 <prvCheckForValidListAndQueue+0x68>)
10008232:	681a      	ldr	r2, [r3, #0]
10008234:	4b09      	ldr	r3, [pc, #36]	; (1000825c <prvCheckForValidListAndQueue+0x7c>)
10008236:	1c10      	adds	r0, r2, #0
10008238:	1c19      	adds	r1, r3, #0
1000823a:	f001 fa85 	bl	10009748 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1000823e:	f000 f937 	bl	100084b0 <vPortExitCritical>
}
10008242:	46bd      	mov	sp, r7
10008244:	bd80      	pop	{r7, pc}
10008246:	46c0      	nop			; (mov r8, r8)
10008248:	20000de8 	.word	0x20000de8
1000824c:	20000db8 	.word	0x20000db8
10008250:	20000dcc 	.word	0x20000dcc
10008254:	20000de0 	.word	0x20000de0
10008258:	20000de4 	.word	0x20000de4
1000825c:	1000ad58 	.word	0x1000ad58

10008260 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
10008260:	b580      	push	{r7, lr}
10008262:	b084      	sub	sp, #16
10008264:	af00      	add	r7, sp, #0
10008266:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
10008268:	687b      	ldr	r3, [r7, #4]
1000826a:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
1000826c:	f000 f910 	bl	10008490 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
10008270:	68fb      	ldr	r3, [r7, #12]
10008272:	695b      	ldr	r3, [r3, #20]
10008274:	1e5a      	subs	r2, r3, #1
10008276:	4193      	sbcs	r3, r2
10008278:	b2db      	uxtb	r3, r3
1000827a:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
1000827c:	f000 f918 	bl	100084b0 <vPortExitCritical>

	return xTimerIsInActiveList;
10008280:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
10008282:	1c18      	adds	r0, r3, #0
10008284:	46bd      	mov	sp, r7
10008286:	b004      	add	sp, #16
10008288:	bd80      	pop	{r7, pc}
1000828a:	46c0      	nop			; (mov r8, r8)

1000828c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
1000828c:	b580      	push	{r7, lr}
1000828e:	b084      	sub	sp, #16
10008290:	af00      	add	r7, sp, #0
10008292:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
10008294:	687b      	ldr	r3, [r7, #4]
10008296:	60fb      	str	r3, [r7, #12]

	return pxTimer->pvTimerID;
10008298:	68fb      	ldr	r3, [r7, #12]
1000829a:	6a1b      	ldr	r3, [r3, #32]
}
1000829c:	1c18      	adds	r0, r3, #0
1000829e:	46bd      	mov	sp, r7
100082a0:	b004      	add	sp, #16
100082a2:	bd80      	pop	{r7, pc}

100082a4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
100082a4:	b580      	push	{r7, lr}
100082a6:	b084      	sub	sp, #16
100082a8:	af00      	add	r7, sp, #0
100082aa:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
100082ac:	2300      	movs	r3, #0
100082ae:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
100082b0:	687a      	ldr	r2, [r7, #4]
100082b2:	2307      	movs	r3, #7
100082b4:	4013      	ands	r3, r2
100082b6:	d004      	beq.n	100082c2 <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
100082b8:	687b      	ldr	r3, [r7, #4]
100082ba:	2207      	movs	r2, #7
100082bc:	4393      	bics	r3, r2
100082be:	3308      	adds	r3, #8
100082c0:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
100082c2:	f7fe fd7d 	bl	10006dc0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
100082c6:	4b18      	ldr	r3, [pc, #96]	; (10008328 <pvPortMalloc+0x84>)
100082c8:	681b      	ldr	r3, [r3, #0]
100082ca:	2b00      	cmp	r3, #0
100082cc:	d105      	bne.n	100082da <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
100082ce:	4b17      	ldr	r3, [pc, #92]	; (1000832c <pvPortMalloc+0x88>)
100082d0:	2207      	movs	r2, #7
100082d2:	4393      	bics	r3, r2
100082d4:	1c1a      	adds	r2, r3, #0
100082d6:	4b14      	ldr	r3, [pc, #80]	; (10008328 <pvPortMalloc+0x84>)
100082d8:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
100082da:	4b15      	ldr	r3, [pc, #84]	; (10008330 <pvPortMalloc+0x8c>)
100082dc:	681a      	ldr	r2, [r3, #0]
100082de:	687b      	ldr	r3, [r7, #4]
100082e0:	18d2      	adds	r2, r2, r3
100082e2:	4b14      	ldr	r3, [pc, #80]	; (10008334 <pvPortMalloc+0x90>)
100082e4:	429a      	cmp	r2, r3
100082e6:	d813      	bhi.n	10008310 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
100082e8:	4b11      	ldr	r3, [pc, #68]	; (10008330 <pvPortMalloc+0x8c>)
100082ea:	681a      	ldr	r2, [r3, #0]
100082ec:	687b      	ldr	r3, [r7, #4]
100082ee:	18d2      	adds	r2, r2, r3
100082f0:	4b0f      	ldr	r3, [pc, #60]	; (10008330 <pvPortMalloc+0x8c>)
100082f2:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
100082f4:	429a      	cmp	r2, r3
100082f6:	d90b      	bls.n	10008310 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
100082f8:	4b0b      	ldr	r3, [pc, #44]	; (10008328 <pvPortMalloc+0x84>)
100082fa:	681a      	ldr	r2, [r3, #0]
100082fc:	4b0c      	ldr	r3, [pc, #48]	; (10008330 <pvPortMalloc+0x8c>)
100082fe:	681b      	ldr	r3, [r3, #0]
10008300:	18d3      	adds	r3, r2, r3
10008302:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
10008304:	4b0a      	ldr	r3, [pc, #40]	; (10008330 <pvPortMalloc+0x8c>)
10008306:	681a      	ldr	r2, [r3, #0]
10008308:	687b      	ldr	r3, [r7, #4]
1000830a:	18d2      	adds	r2, r2, r3
1000830c:	4b08      	ldr	r3, [pc, #32]	; (10008330 <pvPortMalloc+0x8c>)
1000830e:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
10008310:	f7fe fd62 	bl	10006dd8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
10008314:	68fb      	ldr	r3, [r7, #12]
10008316:	2b00      	cmp	r3, #0
10008318:	d101      	bne.n	1000831e <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1000831a:	f000 f985 	bl	10008628 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
1000831e:	68fb      	ldr	r3, [r7, #12]
}
10008320:	1c18      	adds	r0, r3, #0
10008322:	46bd      	mov	sp, r7
10008324:	b004      	add	sp, #16
10008326:	bd80      	pop	{r7, pc}
10008328:	20001df4 	.word	0x20001df4
1000832c:	20000df8 	.word	0x20000df8
10008330:	20001df0 	.word	0x20001df0
10008334:	00000ff7 	.word	0x00000ff7

10008338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
10008338:	b580      	push	{r7, lr}
1000833a:	b082      	sub	sp, #8
1000833c:	af00      	add	r7, sp, #0
1000833e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
10008340:	687b      	ldr	r3, [r7, #4]
10008342:	2b00      	cmp	r3, #0
10008344:	d001      	beq.n	1000834a <vPortFree+0x12>
10008346:	b672      	cpsid	i
10008348:	e7fe      	b.n	10008348 <vPortFree+0x10>
}
1000834a:	46bd      	mov	sp, r7
1000834c:	b002      	add	sp, #8
1000834e:	bd80      	pop	{r7, pc}

10008350 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
10008350:	b580      	push	{r7, lr}
10008352:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
10008354:	4b02      	ldr	r3, [pc, #8]	; (10008360 <vPortInitialiseBlocks+0x10>)
10008356:	2200      	movs	r2, #0
10008358:	601a      	str	r2, [r3, #0]
}
1000835a:	46bd      	mov	sp, r7
1000835c:	bd80      	pop	{r7, pc}
1000835e:	46c0      	nop			; (mov r8, r8)
10008360:	20001df0 	.word	0x20001df0

10008364 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
10008364:	b580      	push	{r7, lr}
10008366:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
10008368:	4b03      	ldr	r3, [pc, #12]	; (10008378 <xPortGetFreeHeapSize+0x14>)
1000836a:	681b      	ldr	r3, [r3, #0]
1000836c:	4a03      	ldr	r2, [pc, #12]	; (1000837c <xPortGetFreeHeapSize+0x18>)
1000836e:	1ad3      	subs	r3, r2, r3
}
10008370:	1c18      	adds	r0, r3, #0
10008372:	46bd      	mov	sp, r7
10008374:	bd80      	pop	{r7, pc}
10008376:	46c0      	nop			; (mov r8, r8)
10008378:	20001df0 	.word	0x20001df0
1000837c:	00000ff8 	.word	0x00000ff8

10008380 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
10008380:	b580      	push	{r7, lr}
10008382:	b084      	sub	sp, #16
10008384:	af00      	add	r7, sp, #0
10008386:	60f8      	str	r0, [r7, #12]
10008388:	60b9      	str	r1, [r7, #8]
1000838a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
1000838c:	68fb      	ldr	r3, [r7, #12]
1000838e:	3b04      	subs	r3, #4
10008390:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
10008392:	68fb      	ldr	r3, [r7, #12]
10008394:	2280      	movs	r2, #128	; 0x80
10008396:	0452      	lsls	r2, r2, #17
10008398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
1000839a:	68fb      	ldr	r3, [r7, #12]
1000839c:	3b04      	subs	r3, #4
1000839e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
100083a0:	68ba      	ldr	r2, [r7, #8]
100083a2:	68fb      	ldr	r3, [r7, #12]
100083a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
100083a6:	68fb      	ldr	r3, [r7, #12]
100083a8:	3b04      	subs	r3, #4
100083aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
100083ac:	4a08      	ldr	r2, [pc, #32]	; (100083d0 <pxPortInitialiseStack+0x50>)
100083ae:	68fb      	ldr	r3, [r7, #12]
100083b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
100083b2:	68fb      	ldr	r3, [r7, #12]
100083b4:	3b14      	subs	r3, #20
100083b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
100083b8:	687a      	ldr	r2, [r7, #4]
100083ba:	68fb      	ldr	r3, [r7, #12]
100083bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
100083be:	68fb      	ldr	r3, [r7, #12]
100083c0:	3b20      	subs	r3, #32
100083c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
100083c4:	68fb      	ldr	r3, [r7, #12]
}
100083c6:	1c18      	adds	r0, r3, #0
100083c8:	46bd      	mov	sp, r7
100083ca:	b004      	add	sp, #16
100083cc:	bd80      	pop	{r7, pc}
100083ce:	46c0      	nop			; (mov r8, r8)
100083d0:	100083d5 	.word	0x100083d5

100083d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
100083d4:	b580      	push	{r7, lr}
100083d6:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
100083d8:	4b03      	ldr	r3, [pc, #12]	; (100083e8 <prvTaskExitError+0x14>)
100083da:	681b      	ldr	r3, [r3, #0]
100083dc:	3301      	adds	r3, #1
100083de:	d001      	beq.n	100083e4 <prvTaskExitError+0x10>
100083e0:	b672      	cpsid	i
100083e2:	e7fe      	b.n	100083e2 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
100083e4:	b672      	cpsid	i
	for( ;; );
100083e6:	e7fe      	b.n	100083e6 <prvTaskExitError+0x12>
100083e8:	200020ac 	.word	0x200020ac

100083ec <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
100083ec:	b580      	push	{r7, lr}
100083ee:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
100083f0:	46bd      	mov	sp, r7
100083f2:	bd80      	pop	{r7, pc}

100083f4 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
100083f4:	4a06      	ldr	r2, [pc, #24]	; (10008410 <pxCurrentTCBConst2>)
100083f6:	6813      	ldr	r3, [r2, #0]
100083f8:	6818      	ldr	r0, [r3, #0]
100083fa:	3020      	adds	r0, #32
100083fc:	f380 8809 	msr	PSP, r0
10008400:	2002      	movs	r0, #2
10008402:	f380 8814 	msr	CONTROL, r0
10008406:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
10008408:	46ae      	mov	lr, r5
1000840a:	b662      	cpsie	i
1000840c:	bd00      	pop	{pc}
1000840e:	46c0      	nop			; (mov r8, r8)

10008410 <pxCurrentTCBConst2>:
10008410:	20000cbc 	.word	0x20000cbc

10008414 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
10008414:	b580      	push	{r7, lr}
10008416:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
10008418:	4b0d      	ldr	r3, [pc, #52]	; (10008450 <xPortStartScheduler+0x3c>)
1000841a:	4a0d      	ldr	r2, [pc, #52]	; (10008450 <xPortStartScheduler+0x3c>)
1000841c:	6812      	ldr	r2, [r2, #0]
1000841e:	21ff      	movs	r1, #255	; 0xff
10008420:	0409      	lsls	r1, r1, #16
10008422:	430a      	orrs	r2, r1
10008424:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
10008426:	4b0a      	ldr	r3, [pc, #40]	; (10008450 <xPortStartScheduler+0x3c>)
10008428:	4a09      	ldr	r2, [pc, #36]	; (10008450 <xPortStartScheduler+0x3c>)
1000842a:	6812      	ldr	r2, [r2, #0]
1000842c:	21ff      	movs	r1, #255	; 0xff
1000842e:	0609      	lsls	r1, r1, #24
10008430:	430a      	orrs	r2, r1
10008432:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
10008434:	f000 f898 	bl	10008568 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
10008438:	4b06      	ldr	r3, [pc, #24]	; (10008454 <xPortStartScheduler+0x40>)
1000843a:	2200      	movs	r2, #0
1000843c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
1000843e:	f7ff ffd9 	bl	100083f4 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
10008442:	f7ff ffc7 	bl	100083d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
10008446:	2300      	movs	r3, #0
}
10008448:	1c18      	adds	r0, r3, #0
1000844a:	46bd      	mov	sp, r7
1000844c:	bd80      	pop	{r7, pc}
1000844e:	46c0      	nop			; (mov r8, r8)
10008450:	e000ed20 	.word	0xe000ed20
10008454:	200020ac 	.word	0x200020ac

10008458 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
10008458:	b580      	push	{r7, lr}
1000845a:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
1000845c:	4b04      	ldr	r3, [pc, #16]	; (10008470 <vPortEndScheduler+0x18>)
1000845e:	681a      	ldr	r2, [r3, #0]
10008460:	23fa      	movs	r3, #250	; 0xfa
10008462:	009b      	lsls	r3, r3, #2
10008464:	429a      	cmp	r2, r3
10008466:	d001      	beq.n	1000846c <vPortEndScheduler+0x14>
10008468:	b672      	cpsid	i
1000846a:	e7fe      	b.n	1000846a <vPortEndScheduler+0x12>
}
1000846c:	46bd      	mov	sp, r7
1000846e:	bd80      	pop	{r7, pc}
10008470:	200020ac 	.word	0x200020ac

10008474 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
10008474:	b580      	push	{r7, lr}
10008476:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
10008478:	4b04      	ldr	r3, [pc, #16]	; (1000848c <vPortYield+0x18>)
1000847a:	2280      	movs	r2, #128	; 0x80
1000847c:	0552      	lsls	r2, r2, #21
1000847e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
10008480:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
10008484:	f3bf 8f6f 	isb	sy
}
10008488:	46bd      	mov	sp, r7
1000848a:	bd80      	pop	{r7, pc}
1000848c:	e000ed04 	.word	0xe000ed04

10008490 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
10008490:	b580      	push	{r7, lr}
10008492:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
10008494:	b672      	cpsid	i
    uxCriticalNesting++;
10008496:	4b05      	ldr	r3, [pc, #20]	; (100084ac <vPortEnterCritical+0x1c>)
10008498:	681b      	ldr	r3, [r3, #0]
1000849a:	1c5a      	adds	r2, r3, #1
1000849c:	4b03      	ldr	r3, [pc, #12]	; (100084ac <vPortEnterCritical+0x1c>)
1000849e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
100084a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
100084a4:	f3bf 8f6f 	isb	sy
}
100084a8:	46bd      	mov	sp, r7
100084aa:	bd80      	pop	{r7, pc}
100084ac:	200020ac 	.word	0x200020ac

100084b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
100084b0:	b580      	push	{r7, lr}
100084b2:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
100084b4:	4b08      	ldr	r3, [pc, #32]	; (100084d8 <vPortExitCritical+0x28>)
100084b6:	681b      	ldr	r3, [r3, #0]
100084b8:	2b00      	cmp	r3, #0
100084ba:	d101      	bne.n	100084c0 <vPortExitCritical+0x10>
100084bc:	b672      	cpsid	i
100084be:	e7fe      	b.n	100084be <vPortExitCritical+0xe>
    uxCriticalNesting--;
100084c0:	4b05      	ldr	r3, [pc, #20]	; (100084d8 <vPortExitCritical+0x28>)
100084c2:	681b      	ldr	r3, [r3, #0]
100084c4:	1e5a      	subs	r2, r3, #1
100084c6:	4b04      	ldr	r3, [pc, #16]	; (100084d8 <vPortExitCritical+0x28>)
100084c8:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
100084ca:	4b03      	ldr	r3, [pc, #12]	; (100084d8 <vPortExitCritical+0x28>)
100084cc:	681b      	ldr	r3, [r3, #0]
100084ce:	2b00      	cmp	r3, #0
100084d0:	d100      	bne.n	100084d4 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
100084d2:	b662      	cpsie	i
    }
}
100084d4:	46bd      	mov	sp, r7
100084d6:	bd80      	pop	{r7, pc}
100084d8:	200020ac 	.word	0x200020ac

100084dc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
100084dc:	f3ef 8010 	mrs	r0, PRIMASK
100084e0:	b672      	cpsid	i
100084e2:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
100084e4:	2300      	movs	r3, #0
}
100084e6:	1c18      	adds	r0, r3, #0

100084e8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
100084e8:	f380 8810 	msr	PRIMASK, r0
100084ec:	4770      	bx	lr
100084ee:	46c0      	nop			; (mov r8, r8)

100084f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
100084f0:	f3ef 8009 	mrs	r0, PSP
100084f4:	4b0e      	ldr	r3, [pc, #56]	; (10008530 <pxCurrentTCBConst>)
100084f6:	681a      	ldr	r2, [r3, #0]
100084f8:	3820      	subs	r0, #32
100084fa:	6010      	str	r0, [r2, #0]
100084fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
100084fe:	4644      	mov	r4, r8
10008500:	464d      	mov	r5, r9
10008502:	4656      	mov	r6, sl
10008504:	465f      	mov	r7, fp
10008506:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
10008508:	b508      	push	{r3, lr}
1000850a:	b672      	cpsid	i
1000850c:	f7fe fe58 	bl	100071c0 <vTaskSwitchContext>
10008510:	b662      	cpsie	i
10008512:	bc0c      	pop	{r2, r3}
10008514:	6811      	ldr	r1, [r2, #0]
10008516:	6808      	ldr	r0, [r1, #0]
10008518:	3010      	adds	r0, #16
1000851a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
1000851c:	46a0      	mov	r8, r4
1000851e:	46a9      	mov	r9, r5
10008520:	46b2      	mov	sl, r6
10008522:	46bb      	mov	fp, r7
10008524:	f380 8809 	msr	PSP, r0
10008528:	3820      	subs	r0, #32
1000852a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
1000852c:	4718      	bx	r3
1000852e:	46c0      	nop			; (mov r8, r8)

10008530 <pxCurrentTCBConst>:
10008530:	20000cbc 	.word	0x20000cbc

10008534 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
10008534:	b580      	push	{r7, lr}
10008536:	b082      	sub	sp, #8
10008538:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
1000853a:	f7ff ffcf 	bl	100084dc <ulSetInterruptMaskFromISR>
1000853e:	1c03      	adds	r3, r0, #0
10008540:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
10008542:	f7fe fd7d 	bl	10007040 <xTaskIncrementTick>
10008546:	1c03      	adds	r3, r0, #0
10008548:	2b00      	cmp	r3, #0
1000854a:	d003      	beq.n	10008554 <SysTick_Handler+0x20>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
1000854c:	4b05      	ldr	r3, [pc, #20]	; (10008564 <SysTick_Handler+0x30>)
1000854e:	2280      	movs	r2, #128	; 0x80
10008550:	0552      	lsls	r2, r2, #21
10008552:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
10008554:	687b      	ldr	r3, [r7, #4]
10008556:	1c18      	adds	r0, r3, #0
10008558:	f7ff ffc6 	bl	100084e8 <vClearInterruptMaskFromISR>
}
1000855c:	46bd      	mov	sp, r7
1000855e:	b002      	add	sp, #8
10008560:	bd80      	pop	{r7, pc}
10008562:	46c0      	nop			; (mov r8, r8)
10008564:	e000ed04 	.word	0xe000ed04

10008568 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
10008568:	b598      	push	{r3, r4, r7, lr}
1000856a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1000856c:	4c07      	ldr	r4, [pc, #28]	; (1000858c <prvSetupTimerInterrupt+0x24>)
1000856e:	4b08      	ldr	r3, [pc, #32]	; (10008590 <prvSetupTimerInterrupt+0x28>)
10008570:	681b      	ldr	r3, [r3, #0]
10008572:	1c18      	adds	r0, r3, #0
10008574:	23fa      	movs	r3, #250	; 0xfa
10008576:	0099      	lsls	r1, r3, #2
10008578:	f001 f95a 	bl	10009830 <__aeabi_uidiv>
1000857c:	1c03      	adds	r3, r0, #0
1000857e:	3b01      	subs	r3, #1
10008580:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
10008582:	4b04      	ldr	r3, [pc, #16]	; (10008594 <prvSetupTimerInterrupt+0x2c>)
10008584:	2207      	movs	r2, #7
10008586:	601a      	str	r2, [r3, #0]
}
10008588:	46bd      	mov	sp, r7
1000858a:	bd98      	pop	{r3, r4, r7, pc}
1000858c:	e000e014 	.word	0xe000e014
10008590:	20001fe0 	.word	0x20001fe0
10008594:	e000e010 	.word	0xe000e010

10008598 <etMutex_construct>:
#include "osal/etMutex.h"

#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"

void etMutex_construct(etMutex* self){
10008598:	b580      	push	{r7, lr}
1000859a:	b082      	sub	sp, #8
1000859c:	af00      	add	r7, sp, #0
1000859e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMutex", "construct")
		self->osData = xSemaphoreCreateMutex();
100085a0:	2001      	movs	r0, #1
100085a2:	f000 fba1 	bl	10008ce8 <xQueueCreateMutex>
100085a6:	1c02      	adds	r2, r0, #0
100085a8:	687b      	ldr	r3, [r7, #4]
100085aa:	601a      	str	r2, [r3, #0]
		if((self->osData) == NULL){
100085ac:	687b      	ldr	r3, [r7, #4]
100085ae:	681b      	ldr	r3, [r3, #0]
100085b0:	2b00      	cmp	r3, #0
100085b2:	d100      	bne.n	100085b6 <etMutex_construct+0x1e>
			while(1){};
100085b4:	e7fe      	b.n	100085b4 <etMutex_construct+0x1c>
		}
	ET_MSC_LOGGER_SYNC_EXIT
}
100085b6:	46bd      	mov	sp, r7
100085b8:	b002      	add	sp, #8
100085ba:	bd80      	pop	{r7, pc}

100085bc <etMutex_destruct>:
void etMutex_destruct(etMutex* self){
100085bc:	b580      	push	{r7, lr}
100085be:	b082      	sub	sp, #8
100085c0:	af00      	add	r7, sp, #0
100085c2:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMutex", "destruct")
		vSemaphoreDelete( self->osData );
100085c4:	687b      	ldr	r3, [r7, #4]
100085c6:	681b      	ldr	r3, [r3, #0]
100085c8:	1c18      	adds	r0, r3, #0
100085ca:	f000 ff3d 	bl	10009448 <vQueueDelete>
	ET_MSC_LOGGER_SYNC_EXIT
}
100085ce:	46bd      	mov	sp, r7
100085d0:	b002      	add	sp, #8
100085d2:	bd80      	pop	{r7, pc}

100085d4 <etMutex_enter>:

void etMutex_enter(etMutex* self){
100085d4:	b580      	push	{r7, lr}
100085d6:	b082      	sub	sp, #8
100085d8:	af00      	add	r7, sp, #0
100085da:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMutex", "enter")
		xSemaphoreTake(self->osData,portMAX_DELAY );
100085dc:	687b      	ldr	r3, [r7, #4]
100085de:	681a      	ldr	r2, [r3, #0]
100085e0:	2301      	movs	r3, #1
100085e2:	425b      	negs	r3, r3
100085e4:	1c10      	adds	r0, r2, #0
100085e6:	2100      	movs	r1, #0
100085e8:	1c1a      	adds	r2, r3, #0
100085ea:	2300      	movs	r3, #0
100085ec:	f000 fd78 	bl	100090e0 <xQueueGenericReceive>
	ET_MSC_LOGGER_SYNC_EXIT
}
100085f0:	46bd      	mov	sp, r7
100085f2:	b002      	add	sp, #8
100085f4:	bd80      	pop	{r7, pc}
100085f6:	46c0      	nop			; (mov r8, r8)

100085f8 <etMutex_leave>:
void etMutex_leave(etMutex* self){
100085f8:	b580      	push	{r7, lr}
100085fa:	b082      	sub	sp, #8
100085fc:	af00      	add	r7, sp, #0
100085fe:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMutex", "leave")
		xSemaphoreGive(self->osData);
10008600:	687b      	ldr	r3, [r7, #4]
10008602:	681b      	ldr	r3, [r3, #0]
10008604:	1c18      	adds	r0, r3, #0
10008606:	2100      	movs	r1, #0
10008608:	2200      	movs	r2, #0
1000860a:	2300      	movs	r3, #0
1000860c:	f000 fc3e 	bl	10008e8c <xQueueGenericSend>
	ET_MSC_LOGGER_SYNC_EXIT
}
10008610:	46bd      	mov	sp, r7
10008612:	b002      	add	sp, #8
10008614:	bd80      	pop	{r7, pc}
10008616:	46c0      	nop			; (mov r8, r8)

10008618 <initHw>:
#include "semphr.h"
#include "queue.h"

void DAVE_Init(void);

void initHw(void) {
10008618:	b580      	push	{r7, lr}
1000861a:	af00      	add	r7, sp, #0
	DAVE_Init();
1000861c:	f7fd fa40 	bl	10005aa0 <DAVE_Init>
	etTime_init();
10008620:	f7fd fcb6 	bl	10005f90 <etTime_init>
}
10008624:	46bd      	mov	sp, r7
10008626:	bd80      	pop	{r7, pc}

10008628 <vApplicationMallocFailedHook>:


void vApplicationMallocFailedHook(void){
10008628:	b580      	push	{r7, lr}
1000862a:	af00      	add	r7, sp, #0
	while (1);
1000862c:	e7fe      	b.n	1000862c <vApplicationMallocFailedHook+0x4>
1000862e:	46c0      	nop			; (mov r8, r8)

10008630 <vApplicationStackOverflowHook>:
}


void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName )
{
10008630:	b580      	push	{r7, lr}
10008632:	b082      	sub	sp, #8
10008634:	af00      	add	r7, sp, #0
10008636:	6078      	str	r0, [r7, #4]
10008638:	6039      	str	r1, [r7, #0]
	( void ) pcTaskName;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
1000863a:	b672      	cpsid	i
	for( ;; );
1000863c:	e7fe      	b.n	1000863c <vApplicationStackOverflowHook+0xc>
1000863e:	46c0      	nop			; (mov r8, r8)

10008640 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void){
10008640:	b580      	push	{r7, lr}
10008642:	b082      	sub	sp, #8
10008644:	af00      	add	r7, sp, #0
volatile int i;

	i++;
10008646:	687b      	ldr	r3, [r7, #4]
10008648:	3301      	adds	r3, #1
1000864a:	607b      	str	r3, [r7, #4]
}
1000864c:	46bd      	mov	sp, r7
1000864e:	b002      	add	sp, #8
10008650:	bd80      	pop	{r7, pc}
10008652:	46c0      	nop			; (mov r8, r8)

10008654 <etSema_construct>:
#include "osal/etSema.h"

#include "debugging/etMSCLogger.h"


void etSema_construct(etSema* self){
10008654:	b580      	push	{r7, lr}
10008656:	b082      	sub	sp, #8
10008658:	af00      	add	r7, sp, #0
1000865a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSema", "construct")
		self->osData = xSemaphoreCreateCounting( 1, 0 );
1000865c:	2001      	movs	r0, #1
1000865e:	2100      	movs	r1, #0
10008660:	f000 fbec 	bl	10008e3c <xQueueCreateCountingSemaphore>
10008664:	1c02      	adds	r2, r0, #0
10008666:	687b      	ldr	r3, [r7, #4]
10008668:	601a      	str	r2, [r3, #0]
		if ((self->osData) == NULL){
1000866a:	687b      	ldr	r3, [r7, #4]
1000866c:	681b      	ldr	r3, [r3, #0]
1000866e:	2b00      	cmp	r3, #0
10008670:	d100      	bne.n	10008674 <etSema_construct+0x20>
			while(1){};
10008672:	e7fe      	b.n	10008672 <etSema_construct+0x1e>
		}
	ET_MSC_LOGGER_SYNC_EXIT
}
10008674:	46bd      	mov	sp, r7
10008676:	b002      	add	sp, #8
10008678:	bd80      	pop	{r7, pc}
1000867a:	46c0      	nop			; (mov r8, r8)

1000867c <etSema_destruct>:
void etSema_destruct(etSema* self){
1000867c:	b580      	push	{r7, lr}
1000867e:	b082      	sub	sp, #8
10008680:	af00      	add	r7, sp, #0
10008682:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSema", "destruct")
		vSemaphoreDelete( self->osData );
10008684:	687b      	ldr	r3, [r7, #4]
10008686:	681b      	ldr	r3, [r3, #0]
10008688:	1c18      	adds	r0, r3, #0
1000868a:	f000 fedd 	bl	10009448 <vQueueDelete>
	ET_MSC_LOGGER_SYNC_EXIT
}
1000868e:	46bd      	mov	sp, r7
10008690:	b002      	add	sp, #8
10008692:	bd80      	pop	{r7, pc}

10008694 <etSema_wakeup>:

void etSema_wakeup(etSema* self){
10008694:	b580      	push	{r7, lr}
10008696:	b082      	sub	sp, #8
10008698:	af00      	add	r7, sp, #0
1000869a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSema", "wakeup")
		xSemaphoreGive( self->osData );
1000869c:	687b      	ldr	r3, [r7, #4]
1000869e:	681b      	ldr	r3, [r3, #0]
100086a0:	1c18      	adds	r0, r3, #0
100086a2:	2100      	movs	r1, #0
100086a4:	2200      	movs	r2, #0
100086a6:	2300      	movs	r3, #0
100086a8:	f000 fbf0 	bl	10008e8c <xQueueGenericSend>
	ET_MSC_LOGGER_SYNC_EXIT
}
100086ac:	46bd      	mov	sp, r7
100086ae:	b002      	add	sp, #8
100086b0:	bd80      	pop	{r7, pc}
100086b2:	46c0      	nop			; (mov r8, r8)

100086b4 <etSema_waitForWakeup>:

void etSema_waitForWakeup(etSema* self){
100086b4:	b580      	push	{r7, lr}
100086b6:	b082      	sub	sp, #8
100086b8:	af00      	add	r7, sp, #0
100086ba:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etSema", "waitForWakeup")
		xSemaphoreTake(self->osData, portMAX_DELAY );
100086bc:	687b      	ldr	r3, [r7, #4]
100086be:	681a      	ldr	r2, [r3, #0]
100086c0:	2301      	movs	r3, #1
100086c2:	425b      	negs	r3, r3
100086c4:	1c10      	adds	r0, r2, #0
100086c6:	2100      	movs	r1, #0
100086c8:	1c1a      	adds	r2, r3, #0
100086ca:	2300      	movs	r3, #0
100086cc:	f000 fd08 	bl	100090e0 <xQueueGenericReceive>
	ET_MSC_LOGGER_SYNC_EXIT
}
100086d0:	46bd      	mov	sp, r7
100086d2:	b002      	add	sp, #8
100086d4:	bd80      	pop	{r7, pc}
100086d6:	46c0      	nop			; (mov r8, r8)

100086d8 <etThread_construct>:
		etStacksize stacksize,
		etPriority priority,
		etThreadname threadName,
		etThreadFunction threadFunction,
		void* threadFunctionData)
{
100086d8:	b5b0      	push	{r4, r5, r7, lr}
100086da:	b088      	sub	sp, #32
100086dc:	af04      	add	r7, sp, #16
100086de:	60f8      	str	r0, [r7, #12]
100086e0:	60b9      	str	r1, [r7, #8]
100086e2:	607a      	str	r2, [r7, #4]
100086e4:	603b      	str	r3, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "construct")

	/* fill in data */
	self->stacksize = stacksize;
100086e6:	68fb      	ldr	r3, [r7, #12]
100086e8:	68ba      	ldr	r2, [r7, #8]
100086ea:	609a      	str	r2, [r3, #8]
	self->priority = priority;
100086ec:	68fb      	ldr	r3, [r7, #12]
100086ee:	687a      	ldr	r2, [r7, #4]
100086f0:	60da      	str	r2, [r3, #12]
	self->threadName = threadName;
100086f2:	68fb      	ldr	r3, [r7, #12]
100086f4:	683a      	ldr	r2, [r7, #0]
100086f6:	611a      	str	r2, [r3, #16]
	self->threadFunction = threadFunction;
100086f8:	68fb      	ldr	r3, [r7, #12]
100086fa:	6a3a      	ldr	r2, [r7, #32]
100086fc:	615a      	str	r2, [r3, #20]
	self->threadFunctionData = threadFunctionData;
100086fe:	68fb      	ldr	r3, [r7, #12]
10008700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10008702:	619a      	str	r2, [r3, #24]

	if (xTaskCreate( threadFunction, ( signed char * ) threadName, stacksize, self->threadFunctionData, priority, &(self->osData)) != pdPASS){
10008704:	68bb      	ldr	r3, [r7, #8]
10008706:	b29a      	uxth	r2, r3
10008708:	68fb      	ldr	r3, [r7, #12]
1000870a:	699b      	ldr	r3, [r3, #24]
1000870c:	687d      	ldr	r5, [r7, #4]
1000870e:	68fc      	ldr	r4, [r7, #12]
10008710:	6a38      	ldr	r0, [r7, #32]
10008712:	6839      	ldr	r1, [r7, #0]
10008714:	9500      	str	r5, [sp, #0]
10008716:	9401      	str	r4, [sp, #4]
10008718:	2400      	movs	r4, #0
1000871a:	9402      	str	r4, [sp, #8]
1000871c:	2400      	movs	r4, #0
1000871e:	9403      	str	r4, [sp, #12]
10008720:	f7fd ff88 	bl	10006634 <xTaskGenericCreate>
10008724:	1c03      	adds	r3, r0, #0
10008726:	2b01      	cmp	r3, #1
10008728:	d000      	beq.n	1000872c <etThread_construct+0x54>
		while(1){};
1000872a:	e7fe      	b.n	1000872a <etThread_construct+0x52>
	}
//	xTaskCreate( threadFunction, ( signed char * ) threadName, stacksize, self->threadFunctionData, priority, &(self->osData) );

	ET_MSC_LOGGER_SYNC_EXIT
}
1000872c:	46bd      	mov	sp, r7
1000872e:	b004      	add	sp, #16
10008730:	bdb0      	pop	{r4, r5, r7, pc}
10008732:	46c0      	nop			; (mov r8, r8)

10008734 <etThread_start>:

void etThread_start(etThread* self) {
10008734:	b580      	push	{r7, lr}
10008736:	b082      	sub	sp, #8
10008738:	af00      	add	r7, sp, #0
1000873a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "start")
	ET_MSC_LOGGER_SYNC_EXIT
}
1000873c:	46bd      	mov	sp, r7
1000873e:	b002      	add	sp, #8
10008740:	bd80      	pop	{r7, pc}
10008742:	46c0      	nop			; (mov r8, r8)

10008744 <etThread_execute>:

void etThread_execute(etThread* self){
10008744:	b580      	push	{r7, lr}
10008746:	b082      	sub	sp, #8
10008748:	af00      	add	r7, sp, #0
1000874a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "execute")
	/* etThread_execute redirects the call from the thread to the execute function in the eTrice runtime to enable correct synchronous MSC logging */
	self->threadFunction(self->threadFunctionData);
1000874c:	687b      	ldr	r3, [r7, #4]
1000874e:	695a      	ldr	r2, [r3, #20]
10008750:	687b      	ldr	r3, [r7, #4]
10008752:	699b      	ldr	r3, [r3, #24]
10008754:	1c18      	adds	r0, r3, #0
10008756:	4790      	blx	r2
	ET_MSC_LOGGER_SYNC_EXIT
}
10008758:	46bd      	mov	sp, r7
1000875a:	b002      	add	sp, #8
1000875c:	bd80      	pop	{r7, pc}
1000875e:	46c0      	nop			; (mov r8, r8)

10008760 <etThread_destruct>:

void etThread_destruct(etThread* self){
10008760:	b580      	push	{r7, lr}
10008762:	b082      	sub	sp, #8
10008764:	af00      	add	r7, sp, #0
10008766:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "destruct")
		vTaskDelete( self->osData );
10008768:	687b      	ldr	r3, [r7, #4]
1000876a:	681b      	ldr	r3, [r3, #0]
1000876c:	1c18      	adds	r0, r3, #0
1000876e:	f7fe f817 	bl	100067a0 <vTaskDelete>
	ET_MSC_LOGGER_SYNC_EXIT
}
10008772:	46bd      	mov	sp, r7
10008774:	b002      	add	sp, #8
10008776:	bd80      	pop	{r7, pc}

10008778 <etThread_sleep>:

void etThread_sleep(etInt32 millis){
10008778:	b580      	push	{r7, lr}
1000877a:	b082      	sub	sp, #8
1000877c:	af00      	add	r7, sp, #0
1000877e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etThread", "sleep")

	ET_MSC_LOGGER_SYNC_EXIT
}
10008780:	46bd      	mov	sp, r7
10008782:	b002      	add	sp, #8
10008784:	bd80      	pop	{r7, pc}
10008786:	46c0      	nop			; (mov r8, r8)

10008788 <etTimer_construct>:
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"

void etTimer_callback(xTimerHandle timer);

void etTimer_construct(etTimer* self, etTime* timerInterval, etTimerFunction timerFunction, void* timerFunctionData){
10008788:	b590      	push	{r4, r7, lr}
1000878a:	b089      	sub	sp, #36	; 0x24
1000878c:	af02      	add	r7, sp, #8
1000878e:	60f8      	str	r0, [r7, #12]
10008790:	60b9      	str	r1, [r7, #8]
10008792:	607a      	str	r2, [r7, #4]
10008794:	603b      	str	r3, [r7, #0]
	ET_MSC_LOGGER_SYNC_ENTRY("etTimer", "construct")
	{
		self->osTimerData = NULL;
10008796:	68fb      	ldr	r3, [r7, #12]
10008798:	2200      	movs	r2, #0
1000879a:	611a      	str	r2, [r3, #16]
		self->timerInterval.sec = timerInterval->sec;
1000879c:	68bb      	ldr	r3, [r7, #8]
1000879e:	681a      	ldr	r2, [r3, #0]
100087a0:	68fb      	ldr	r3, [r7, #12]
100087a2:	601a      	str	r2, [r3, #0]
		self->timerInterval.nSec = timerInterval->nSec;
100087a4:	68bb      	ldr	r3, [r7, #8]
100087a6:	685a      	ldr	r2, [r3, #4]
100087a8:	68fb      	ldr	r3, [r7, #12]
100087aa:	605a      	str	r2, [r3, #4]
		self->timerFunction = timerFunction;
100087ac:	68fb      	ldr	r3, [r7, #12]
100087ae:	687a      	ldr	r2, [r7, #4]
100087b0:	609a      	str	r2, [r3, #8]
		self->timerFunctionData = timerFunctionData;
100087b2:	68fb      	ldr	r3, [r7, #12]
100087b4:	683a      	ldr	r2, [r7, #0]
100087b6:	60da      	str	r2, [r3, #12]
	}

	portTickType period = (timerInterval->sec*configTICK_RATE_HZ) + (timerInterval->nSec / (1000000000 / configTICK_RATE_HZ));
100087b8:	68bb      	ldr	r3, [r7, #8]
100087ba:	681b      	ldr	r3, [r3, #0]
100087bc:	22fa      	movs	r2, #250	; 0xfa
100087be:	0092      	lsls	r2, r2, #2
100087c0:	1c14      	adds	r4, r2, #0
100087c2:	435c      	muls	r4, r3
100087c4:	68bb      	ldr	r3, [r7, #8]
100087c6:	685b      	ldr	r3, [r3, #4]
100087c8:	1c18      	adds	r0, r3, #0
100087ca:	490b      	ldr	r1, [pc, #44]	; (100087f8 <etTimer_construct+0x70>)
100087cc:	f001 f830 	bl	10009830 <__aeabi_uidiv>
100087d0:	1c03      	adds	r3, r0, #0
100087d2:	18e3      	adds	r3, r4, r3
100087d4:	617b      	str	r3, [r7, #20]


	self->osTimerData = xTimerCreate ( "etTimer", period, pdTRUE, (void *) self, etTimer_callback );
100087d6:	4909      	ldr	r1, [pc, #36]	; (100087fc <etTimer_construct+0x74>)
100087d8:	697a      	ldr	r2, [r7, #20]
100087da:	68fb      	ldr	r3, [r7, #12]
100087dc:	4808      	ldr	r0, [pc, #32]	; (10008800 <etTimer_construct+0x78>)
100087de:	9000      	str	r0, [sp, #0]
100087e0:	1c08      	adds	r0, r1, #0
100087e2:	1c11      	adds	r1, r2, #0
100087e4:	2201      	movs	r2, #1
100087e6:	f7ff fa79 	bl	10007cdc <xTimerCreate>
100087ea:	1c02      	adds	r2, r0, #0
100087ec:	68fb      	ldr	r3, [r7, #12]
100087ee:	611a      	str	r2, [r3, #16]

	ET_MSC_LOGGER_SYNC_EXIT
}
100087f0:	46bd      	mov	sp, r7
100087f2:	b007      	add	sp, #28
100087f4:	bd90      	pop	{r4, r7, pc}
100087f6:	46c0      	nop			; (mov r8, r8)
100087f8:	000f4240 	.word	0x000f4240
100087fc:	1000ad60 	.word	0x1000ad60
10008800:	1000888d 	.word	0x1000888d

10008804 <etTimer_start>:

void etTimer_start(etTimer* self){
10008804:	b590      	push	{r4, r7, lr}
10008806:	b085      	sub	sp, #20
10008808:	af02      	add	r7, sp, #8
1000880a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etTimer", "start")
		if (xTimerStart( self->osTimerData, 0 ) != pdPASS){
1000880c:	687b      	ldr	r3, [r7, #4]
1000880e:	691c      	ldr	r4, [r3, #16]
10008810:	f7fe fb66 	bl	10006ee0 <xTaskGetTickCount>
10008814:	1c03      	adds	r3, r0, #0
10008816:	2200      	movs	r2, #0
10008818:	9200      	str	r2, [sp, #0]
1000881a:	1c20      	adds	r0, r4, #0
1000881c:	2101      	movs	r1, #1
1000881e:	1c1a      	adds	r2, r3, #0
10008820:	2300      	movs	r3, #0
10008822:	f7ff fa91 	bl	10007d48 <xTimerGenericCommand>
10008826:	1c03      	adds	r3, r0, #0
10008828:	2b01      	cmp	r3, #1
1000882a:	d000      	beq.n	1000882e <etTimer_start+0x2a>
			while(1){};
1000882c:	e7fe      	b.n	1000882c <etTimer_start+0x28>
		}
	ET_MSC_LOGGER_SYNC_EXIT
}
1000882e:	46bd      	mov	sp, r7
10008830:	b003      	add	sp, #12
10008832:	bd90      	pop	{r4, r7, pc}

10008834 <etTimer_stop>:

void etTimer_stop(etTimer* self){
10008834:	b580      	push	{r7, lr}
10008836:	b084      	sub	sp, #16
10008838:	af02      	add	r7, sp, #8
1000883a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etTimer", "stop")
		 if (xTimerStop( self->osTimerData, 0 ) != pdPASS){
1000883c:	687b      	ldr	r3, [r7, #4]
1000883e:	691b      	ldr	r3, [r3, #16]
10008840:	2200      	movs	r2, #0
10008842:	9200      	str	r2, [sp, #0]
10008844:	1c18      	adds	r0, r3, #0
10008846:	2103      	movs	r1, #3
10008848:	2200      	movs	r2, #0
1000884a:	2300      	movs	r3, #0
1000884c:	f7ff fa7c 	bl	10007d48 <xTimerGenericCommand>
10008850:	1c03      	adds	r3, r0, #0
10008852:	2b01      	cmp	r3, #1
10008854:	d000      	beq.n	10008858 <etTimer_stop+0x24>
			 while(1){};
10008856:	e7fe      	b.n	10008856 <etTimer_stop+0x22>
		 }
	ET_MSC_LOGGER_SYNC_EXIT
}
10008858:	46bd      	mov	sp, r7
1000885a:	b002      	add	sp, #8
1000885c:	bd80      	pop	{r7, pc}
1000885e:	46c0      	nop			; (mov r8, r8)

10008860 <etTimer_destruct>:

void etTimer_destruct(etTimer* self){
10008860:	b580      	push	{r7, lr}
10008862:	b084      	sub	sp, #16
10008864:	af02      	add	r7, sp, #8
10008866:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etTimer", "destruct")

		 if (xTimerDelete( self->osTimerData, 0 ) != pdPASS){
10008868:	687b      	ldr	r3, [r7, #4]
1000886a:	691b      	ldr	r3, [r3, #16]
1000886c:	2200      	movs	r2, #0
1000886e:	9200      	str	r2, [sp, #0]
10008870:	1c18      	adds	r0, r3, #0
10008872:	2105      	movs	r1, #5
10008874:	2200      	movs	r2, #0
10008876:	2300      	movs	r3, #0
10008878:	f7ff fa66 	bl	10007d48 <xTimerGenericCommand>
1000887c:	1c03      	adds	r3, r0, #0
1000887e:	2b01      	cmp	r3, #1
10008880:	d000      	beq.n	10008884 <etTimer_destruct+0x24>
			 while(1){};
10008882:	e7fe      	b.n	10008882 <etTimer_destruct+0x22>
		 }
	ET_MSC_LOGGER_SYNC_EXIT
}
10008884:	46bd      	mov	sp, r7
10008886:	b002      	add	sp, #8
10008888:	bd80      	pop	{r7, pc}
1000888a:	46c0      	nop			; (mov r8, r8)

1000888c <etTimer_callback>:

void etTimer_callback(xTimerHandle timer){
1000888c:	b580      	push	{r7, lr}
1000888e:	b084      	sub	sp, #16
10008890:	af00      	add	r7, sp, #0
10008892:	6078      	str	r0, [r7, #4]
	{
		etTimer* self = (etTimer*) pvTimerGetTimerID( timer );
10008894:	687b      	ldr	r3, [r7, #4]
10008896:	1c18      	adds	r0, r3, #0
10008898:	f7ff fcf8 	bl	1000828c <pvTimerGetTimerID>
1000889c:	1c03      	adds	r3, r0, #0
1000889e:	60fb      	str	r3, [r7, #12]
		self->timerFunction(self->timerFunctionData);
100088a0:	68fb      	ldr	r3, [r7, #12]
100088a2:	689a      	ldr	r2, [r3, #8]
100088a4:	68fb      	ldr	r3, [r7, #12]
100088a6:	68db      	ldr	r3, [r3, #12]
100088a8:	1c18      	adds	r0, r3, #0
100088aa:	4790      	blx	r2
	}
}
100088ac:	46bd      	mov	sp, r7
100088ae:	b004      	add	sp, #16
100088b0:	bd80      	pop	{r7, pc}
100088b2:	46c0      	nop			; (mov r8, r8)

100088b4 <etMessageQueue_init>:

#include "messaging/etMessageQueue.h"

#include "debugging/etMSCLogger.h"

void etMessageQueue_init(etMessageQueue* self){
100088b4:	b580      	push	{r7, lr}
100088b6:	b082      	sub	sp, #8
100088b8:	af00      	add	r7, sp, #0
100088ba:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "init")
	self->first = NULL;
100088bc:	687b      	ldr	r3, [r7, #4]
100088be:	2200      	movs	r2, #0
100088c0:	601a      	str	r2, [r3, #0]
	self->last = NULL;
100088c2:	687b      	ldr	r3, [r7, #4]
100088c4:	2200      	movs	r2, #0
100088c6:	605a      	str	r2, [r3, #4]
	self->highWaterMark = 0;
100088c8:	687b      	ldr	r3, [r7, #4]
100088ca:	2200      	movs	r2, #0
100088cc:	811a      	strh	r2, [r3, #8]
	self->lowWaterMark = 0;
100088ce:	687b      	ldr	r3, [r7, #4]
100088d0:	2200      	movs	r2, #0
100088d2:	815a      	strh	r2, [r3, #10]
	self->size = 0;
100088d4:	687b      	ldr	r3, [r7, #4]
100088d6:	2200      	movs	r2, #0
100088d8:	819a      	strh	r2, [r3, #12]
	ET_MSC_LOGGER_SYNC_EXIT
}
100088da:	46bd      	mov	sp, r7
100088dc:	b002      	add	sp, #8
100088de:	bd80      	pop	{r7, pc}

100088e0 <etMessageQueue_push>:


void etMessageQueue_push(etMessageQueue* self, etMessage* msg){
100088e0:	b580      	push	{r7, lr}
100088e2:	b082      	sub	sp, #8
100088e4:	af00      	add	r7, sp, #0
100088e6:	6078      	str	r0, [r7, #4]
100088e8:	6039      	str	r1, [r7, #0]
	/* TODO: optimize queue for concurrent push / pop */
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "push")
	if (self->first == NULL) {
100088ea:	687b      	ldr	r3, [r7, #4]
100088ec:	681b      	ldr	r3, [r3, #0]
100088ee:	2b00      	cmp	r3, #0
100088f0:	d107      	bne.n	10008902 <etMessageQueue_push+0x22>
		/*no message in queue*/
		self->first = self->last = msg;
100088f2:	687b      	ldr	r3, [r7, #4]
100088f4:	683a      	ldr	r2, [r7, #0]
100088f6:	605a      	str	r2, [r3, #4]
100088f8:	687b      	ldr	r3, [r7, #4]
100088fa:	685a      	ldr	r2, [r3, #4]
100088fc:	687b      	ldr	r3, [r7, #4]
100088fe:	601a      	str	r2, [r3, #0]
10008900:	e006      	b.n	10008910 <etMessageQueue_push+0x30>
	}
	else {
		/*at least one message in queue*/
		self->last->next = msg;
10008902:	687b      	ldr	r3, [r7, #4]
10008904:	685b      	ldr	r3, [r3, #4]
10008906:	683a      	ldr	r2, [r7, #0]
10008908:	601a      	str	r2, [r3, #0]
		self->last = msg;
1000890a:	687b      	ldr	r3, [r7, #4]
1000890c:	683a      	ldr	r2, [r7, #0]
1000890e:	605a      	str	r2, [r3, #4]
	}
	msg->next = NULL; /*TODO: optimization: this line could be removed if we assume that all messages are initialized*/
10008910:	683b      	ldr	r3, [r7, #0]
10008912:	2200      	movs	r2, #0
10008914:	601a      	str	r2, [r3, #0]

	if (++self->size > self->highWaterMark)
10008916:	687b      	ldr	r3, [r7, #4]
10008918:	899b      	ldrh	r3, [r3, #12]
1000891a:	3301      	adds	r3, #1
1000891c:	b29a      	uxth	r2, r3
1000891e:	687b      	ldr	r3, [r7, #4]
10008920:	819a      	strh	r2, [r3, #12]
10008922:	687b      	ldr	r3, [r7, #4]
10008924:	899a      	ldrh	r2, [r3, #12]
10008926:	687b      	ldr	r3, [r7, #4]
10008928:	891b      	ldrh	r3, [r3, #8]
1000892a:	b212      	sxth	r2, r2
1000892c:	b21b      	sxth	r3, r3
1000892e:	429a      	cmp	r2, r3
10008930:	dd05      	ble.n	1000893e <etMessageQueue_push+0x5e>
		self->highWaterMark++;
10008932:	687b      	ldr	r3, [r7, #4]
10008934:	891b      	ldrh	r3, [r3, #8]
10008936:	3301      	adds	r3, #1
10008938:	b29a      	uxth	r2, r3
1000893a:	687b      	ldr	r3, [r7, #4]
1000893c:	811a      	strh	r2, [r3, #8]

	ET_MSC_LOGGER_SYNC_EXIT
}
1000893e:	46bd      	mov	sp, r7
10008940:	b002      	add	sp, #8
10008942:	bd80      	pop	{r7, pc}

10008944 <etMessageQueue_pop>:

etMessage* etMessageQueue_pop(etMessageQueue* self){
10008944:	b580      	push	{r7, lr}
10008946:	b084      	sub	sp, #16
10008948:	af00      	add	r7, sp, #0
1000894a:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "pop")
	etMessage* pop_msg = self->first;
1000894c:	687b      	ldr	r3, [r7, #4]
1000894e:	681b      	ldr	r3, [r3, #0]
10008950:	60fb      	str	r3, [r7, #12]
	if(self->first == NULL){
10008952:	687b      	ldr	r3, [r7, #4]
10008954:	681b      	ldr	r3, [r3, #0]
10008956:	2b00      	cmp	r3, #0
10008958:	d101      	bne.n	1000895e <etMessageQueue_pop+0x1a>
		/*no message in queue*/
		ET_MSC_LOGGER_SYNC_EXIT
		return NULL;
1000895a:	2300      	movs	r3, #0
1000895c:	e029      	b.n	100089b2 <etMessageQueue_pop+0x6e>
	}
	if (self->first->next==NULL){
1000895e:	687b      	ldr	r3, [r7, #4]
10008960:	681b      	ldr	r3, [r3, #0]
10008962:	681b      	ldr	r3, [r3, #0]
10008964:	2b00      	cmp	r3, #0
10008966:	d107      	bne.n	10008978 <etMessageQueue_pop+0x34>
		/*only one message in queue*/
		self->first = self->last = NULL;
10008968:	687b      	ldr	r3, [r7, #4]
1000896a:	2200      	movs	r2, #0
1000896c:	605a      	str	r2, [r3, #4]
1000896e:	687b      	ldr	r3, [r7, #4]
10008970:	685a      	ldr	r2, [r3, #4]
10008972:	687b      	ldr	r3, [r7, #4]
10008974:	601a      	str	r2, [r3, #0]
10008976:	e004      	b.n	10008982 <etMessageQueue_pop+0x3e>
	}
	else {
		/*more than one message in queue -> set first to nex message*/
		self->first = self->first->next;
10008978:	687b      	ldr	r3, [r7, #4]
1000897a:	681b      	ldr	r3, [r3, #0]
1000897c:	681a      	ldr	r2, [r3, #0]
1000897e:	687b      	ldr	r3, [r7, #4]
10008980:	601a      	str	r2, [r3, #0]
	}

	pop_msg->next=NULL;
10008982:	68fb      	ldr	r3, [r7, #12]
10008984:	2200      	movs	r2, #0
10008986:	601a      	str	r2, [r3, #0]
	self->size--;
10008988:	687b      	ldr	r3, [r7, #4]
1000898a:	899b      	ldrh	r3, [r3, #12]
1000898c:	3b01      	subs	r3, #1
1000898e:	b29a      	uxth	r2, r3
10008990:	687b      	ldr	r3, [r7, #4]
10008992:	819a      	strh	r2, [r3, #12]

	if (self->size < self->lowWaterMark)
10008994:	687b      	ldr	r3, [r7, #4]
10008996:	899a      	ldrh	r2, [r3, #12]
10008998:	687b      	ldr	r3, [r7, #4]
1000899a:	895b      	ldrh	r3, [r3, #10]
1000899c:	b212      	sxth	r2, r2
1000899e:	b21b      	sxth	r3, r3
100089a0:	429a      	cmp	r2, r3
100089a2:	da05      	bge.n	100089b0 <etMessageQueue_pop+0x6c>
		self->lowWaterMark--;
100089a4:	687b      	ldr	r3, [r7, #4]
100089a6:	895b      	ldrh	r3, [r3, #10]
100089a8:	3b01      	subs	r3, #1
100089aa:	b29a      	uxth	r2, r3
100089ac:	687b      	ldr	r3, [r7, #4]
100089ae:	815a      	strh	r2, [r3, #10]

	ET_MSC_LOGGER_SYNC_EXIT
	return pop_msg;
100089b0:	68fb      	ldr	r3, [r7, #12]
}
100089b2:	1c18      	adds	r0, r3, #0
100089b4:	46bd      	mov	sp, r7
100089b6:	b004      	add	sp, #16
100089b8:	bd80      	pop	{r7, pc}
100089ba:	46c0      	nop			; (mov r8, r8)

100089bc <etMessageQueue_getSize>:

etInt16 etMessageQueue_getSize(etMessageQueue* self) {
100089bc:	b580      	push	{r7, lr}
100089be:	b082      	sub	sp, #8
100089c0:	af00      	add	r7, sp, #0
100089c2:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getSize")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->size;
100089c4:	687b      	ldr	r3, [r7, #4]
100089c6:	899b      	ldrh	r3, [r3, #12]
100089c8:	b21b      	sxth	r3, r3
}
100089ca:	1c18      	adds	r0, r3, #0
100089cc:	46bd      	mov	sp, r7
100089ce:	b002      	add	sp, #8
100089d0:	bd80      	pop	{r7, pc}
100089d2:	46c0      	nop			; (mov r8, r8)

100089d4 <etMessageQueue_getFirst>:

etMessage* etMessageQueue_getFirst(etMessageQueue* self){
100089d4:	b580      	push	{r7, lr}
100089d6:	b082      	sub	sp, #8
100089d8:	af00      	add	r7, sp, #0
100089da:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getFirst")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->first;
100089dc:	687b      	ldr	r3, [r7, #4]
100089de:	681b      	ldr	r3, [r3, #0]
}
100089e0:	1c18      	adds	r0, r3, #0
100089e2:	46bd      	mov	sp, r7
100089e4:	b002      	add	sp, #8
100089e6:	bd80      	pop	{r7, pc}

100089e8 <etMessageQueue_getLast>:

etMessage* etMessageQueue_getLast(etMessageQueue* self){
100089e8:	b580      	push	{r7, lr}
100089ea:	b082      	sub	sp, #8
100089ec:	af00      	add	r7, sp, #0
100089ee:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getLast")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->last;
100089f0:	687b      	ldr	r3, [r7, #4]
100089f2:	685b      	ldr	r3, [r3, #4]
}
100089f4:	1c18      	adds	r0, r3, #0
100089f6:	46bd      	mov	sp, r7
100089f8:	b002      	add	sp, #8
100089fa:	bd80      	pop	{r7, pc}

100089fc <etMessageQueue_isNotEmpty>:

etBool etMessageQueue_isNotEmpty(etMessageQueue* self){
100089fc:	b580      	push	{r7, lr}
100089fe:	b082      	sub	sp, #8
10008a00:	af00      	add	r7, sp, #0
10008a02:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "isNotEmpty")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->last != NULL;
10008a04:	687b      	ldr	r3, [r7, #4]
10008a06:	685b      	ldr	r3, [r3, #4]
10008a08:	1e5a      	subs	r2, r3, #1
10008a0a:	4193      	sbcs	r3, r2
10008a0c:	b2db      	uxtb	r3, r3
}
10008a0e:	1c18      	adds	r0, r3, #0
10008a10:	46bd      	mov	sp, r7
10008a12:	b002      	add	sp, #8
10008a14:	bd80      	pop	{r7, pc}
10008a16:	46c0      	nop			; (mov r8, r8)

10008a18 <etMessageQueue_getHighWaterMark>:

etInt16 etMessageQueue_getHighWaterMark(etMessageQueue* self) {
10008a18:	b580      	push	{r7, lr}
10008a1a:	b082      	sub	sp, #8
10008a1c:	af00      	add	r7, sp, #0
10008a1e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getHighWaterMark")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->highWaterMark;
10008a20:	687b      	ldr	r3, [r7, #4]
10008a22:	891b      	ldrh	r3, [r3, #8]
10008a24:	b21b      	sxth	r3, r3
}
10008a26:	1c18      	adds	r0, r3, #0
10008a28:	46bd      	mov	sp, r7
10008a2a:	b002      	add	sp, #8
10008a2c:	bd80      	pop	{r7, pc}
10008a2e:	46c0      	nop			; (mov r8, r8)

10008a30 <etMessageQueue_getLowWaterMark>:

etInt16 etMessageQueue_getLowWaterMark(etMessageQueue* self) {
10008a30:	b580      	push	{r7, lr}
10008a32:	b082      	sub	sp, #8
10008a34:	af00      	add	r7, sp, #0
10008a36:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "getLowWaterMark")
	ET_MSC_LOGGER_SYNC_EXIT
	return self->lowWaterMark;
10008a38:	687b      	ldr	r3, [r7, #4]
10008a3a:	895b      	ldrh	r3, [r3, #10]
10008a3c:	b21b      	sxth	r3, r3
}
10008a3e:	1c18      	adds	r0, r3, #0
10008a40:	46bd      	mov	sp, r7
10008a42:	b002      	add	sp, #8
10008a44:	bd80      	pop	{r7, pc}
10008a46:	46c0      	nop			; (mov r8, r8)

10008a48 <etMessageQueue_resetLowWaterMark>:

void etMessageQueue_resetLowWaterMark(etMessageQueue* self) {
10008a48:	b580      	push	{r7, lr}
10008a4a:	b082      	sub	sp, #8
10008a4c:	af00      	add	r7, sp, #0
10008a4e:	6078      	str	r0, [r7, #4]
	ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "resetLowWaterMark")
	self->lowWaterMark = self->size;
10008a50:	687b      	ldr	r3, [r7, #4]
10008a52:	899a      	ldrh	r2, [r3, #12]
10008a54:	687b      	ldr	r3, [r7, #4]
10008a56:	815a      	strh	r2, [r3, #10]
	ET_MSC_LOGGER_SYNC_EXIT
}
10008a58:	46bd      	mov	sp, r7
10008a5a:	b002      	add	sp, #8
10008a5c:	bd80      	pop	{r7, pc}
10008a5e:	46c0      	nop			; (mov r8, r8)

10008a60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
10008a60:	b580      	push	{r7, lr}
10008a62:	b082      	sub	sp, #8
10008a64:	af00      	add	r7, sp, #0
10008a66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10008a68:	687b      	ldr	r3, [r7, #4]
10008a6a:	1c1a      	adds	r2, r3, #0
10008a6c:	3208      	adds	r2, #8
10008a6e:	687b      	ldr	r3, [r7, #4]
10008a70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
10008a72:	687b      	ldr	r3, [r7, #4]
10008a74:	2201      	movs	r2, #1
10008a76:	4252      	negs	r2, r2
10008a78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10008a7a:	687b      	ldr	r3, [r7, #4]
10008a7c:	1c1a      	adds	r2, r3, #0
10008a7e:	3208      	adds	r2, #8
10008a80:	687b      	ldr	r3, [r7, #4]
10008a82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10008a84:	687b      	ldr	r3, [r7, #4]
10008a86:	1c1a      	adds	r2, r3, #0
10008a88:	3208      	adds	r2, #8
10008a8a:	687b      	ldr	r3, [r7, #4]
10008a8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
10008a8e:	687b      	ldr	r3, [r7, #4]
10008a90:	2200      	movs	r2, #0
10008a92:	601a      	str	r2, [r3, #0]
}
10008a94:	46bd      	mov	sp, r7
10008a96:	b002      	add	sp, #8
10008a98:	bd80      	pop	{r7, pc}
10008a9a:	46c0      	nop			; (mov r8, r8)

10008a9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
10008a9c:	b580      	push	{r7, lr}
10008a9e:	b082      	sub	sp, #8
10008aa0:	af00      	add	r7, sp, #0
10008aa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
10008aa4:	687b      	ldr	r3, [r7, #4]
10008aa6:	2200      	movs	r2, #0
10008aa8:	611a      	str	r2, [r3, #16]
}
10008aaa:	46bd      	mov	sp, r7
10008aac:	b002      	add	sp, #8
10008aae:	bd80      	pop	{r7, pc}

10008ab0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
10008ab0:	b580      	push	{r7, lr}
10008ab2:	b084      	sub	sp, #16
10008ab4:	af00      	add	r7, sp, #0
10008ab6:	6078      	str	r0, [r7, #4]
10008ab8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
10008aba:	687b      	ldr	r3, [r7, #4]
10008abc:	685b      	ldr	r3, [r3, #4]
10008abe:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
10008ac0:	683b      	ldr	r3, [r7, #0]
10008ac2:	68fa      	ldr	r2, [r7, #12]
10008ac4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
10008ac6:	68fb      	ldr	r3, [r7, #12]
10008ac8:	689a      	ldr	r2, [r3, #8]
10008aca:	683b      	ldr	r3, [r7, #0]
10008acc:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
10008ace:	68fb      	ldr	r3, [r7, #12]
10008ad0:	689b      	ldr	r3, [r3, #8]
10008ad2:	683a      	ldr	r2, [r7, #0]
10008ad4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
10008ad6:	68fb      	ldr	r3, [r7, #12]
10008ad8:	683a      	ldr	r2, [r7, #0]
10008ada:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
10008adc:	683b      	ldr	r3, [r7, #0]
10008ade:	687a      	ldr	r2, [r7, #4]
10008ae0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
10008ae2:	687b      	ldr	r3, [r7, #4]
10008ae4:	681b      	ldr	r3, [r3, #0]
10008ae6:	1c5a      	adds	r2, r3, #1
10008ae8:	687b      	ldr	r3, [r7, #4]
10008aea:	601a      	str	r2, [r3, #0]
}
10008aec:	46bd      	mov	sp, r7
10008aee:	b004      	add	sp, #16
10008af0:	bd80      	pop	{r7, pc}
10008af2:	46c0      	nop			; (mov r8, r8)

10008af4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
10008af4:	b580      	push	{r7, lr}
10008af6:	b084      	sub	sp, #16
10008af8:	af00      	add	r7, sp, #0
10008afa:	6078      	str	r0, [r7, #4]
10008afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
10008afe:	683b      	ldr	r3, [r7, #0]
10008b00:	681b      	ldr	r3, [r3, #0]
10008b02:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
10008b04:	68bb      	ldr	r3, [r7, #8]
10008b06:	3301      	adds	r3, #1
10008b08:	d103      	bne.n	10008b12 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
10008b0a:	687b      	ldr	r3, [r7, #4]
10008b0c:	691b      	ldr	r3, [r3, #16]
10008b0e:	60fb      	str	r3, [r7, #12]
10008b10:	e00c      	b.n	10008b2c <vListInsert+0x38>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10008b12:	687b      	ldr	r3, [r7, #4]
10008b14:	3308      	adds	r3, #8
10008b16:	60fb      	str	r3, [r7, #12]
10008b18:	e002      	b.n	10008b20 <vListInsert+0x2c>
10008b1a:	68fb      	ldr	r3, [r7, #12]
10008b1c:	685b      	ldr	r3, [r3, #4]
10008b1e:	60fb      	str	r3, [r7, #12]
10008b20:	68fb      	ldr	r3, [r7, #12]
10008b22:	685b      	ldr	r3, [r3, #4]
10008b24:	681a      	ldr	r2, [r3, #0]
10008b26:	68bb      	ldr	r3, [r7, #8]
10008b28:	429a      	cmp	r2, r3
10008b2a:	d9f6      	bls.n	10008b1a <vListInsert+0x26>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
10008b2c:	68fb      	ldr	r3, [r7, #12]
10008b2e:	685a      	ldr	r2, [r3, #4]
10008b30:	683b      	ldr	r3, [r7, #0]
10008b32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
10008b34:	683b      	ldr	r3, [r7, #0]
10008b36:	685b      	ldr	r3, [r3, #4]
10008b38:	683a      	ldr	r2, [r7, #0]
10008b3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
10008b3c:	683b      	ldr	r3, [r7, #0]
10008b3e:	68fa      	ldr	r2, [r7, #12]
10008b40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
10008b42:	68fb      	ldr	r3, [r7, #12]
10008b44:	683a      	ldr	r2, [r7, #0]
10008b46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
10008b48:	683b      	ldr	r3, [r7, #0]
10008b4a:	687a      	ldr	r2, [r7, #4]
10008b4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
10008b4e:	687b      	ldr	r3, [r7, #4]
10008b50:	681b      	ldr	r3, [r3, #0]
10008b52:	1c5a      	adds	r2, r3, #1
10008b54:	687b      	ldr	r3, [r7, #4]
10008b56:	601a      	str	r2, [r3, #0]
}
10008b58:	46bd      	mov	sp, r7
10008b5a:	b004      	add	sp, #16
10008b5c:	bd80      	pop	{r7, pc}
10008b5e:	46c0      	nop			; (mov r8, r8)

10008b60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
10008b60:	b580      	push	{r7, lr}
10008b62:	b084      	sub	sp, #16
10008b64:	af00      	add	r7, sp, #0
10008b66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
10008b68:	687b      	ldr	r3, [r7, #4]
10008b6a:	691b      	ldr	r3, [r3, #16]
10008b6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
10008b6e:	687b      	ldr	r3, [r7, #4]
10008b70:	685b      	ldr	r3, [r3, #4]
10008b72:	687a      	ldr	r2, [r7, #4]
10008b74:	6892      	ldr	r2, [r2, #8]
10008b76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
10008b78:	687b      	ldr	r3, [r7, #4]
10008b7a:	689b      	ldr	r3, [r3, #8]
10008b7c:	687a      	ldr	r2, [r7, #4]
10008b7e:	6852      	ldr	r2, [r2, #4]
10008b80:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
10008b82:	68fb      	ldr	r3, [r7, #12]
10008b84:	685a      	ldr	r2, [r3, #4]
10008b86:	687b      	ldr	r3, [r7, #4]
10008b88:	429a      	cmp	r2, r3
10008b8a:	d103      	bne.n	10008b94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
10008b8c:	687b      	ldr	r3, [r7, #4]
10008b8e:	689a      	ldr	r2, [r3, #8]
10008b90:	68fb      	ldr	r3, [r7, #12]
10008b92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
10008b94:	687b      	ldr	r3, [r7, #4]
10008b96:	2200      	movs	r2, #0
10008b98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
10008b9a:	68fb      	ldr	r3, [r7, #12]
10008b9c:	681b      	ldr	r3, [r3, #0]
10008b9e:	1e5a      	subs	r2, r3, #1
10008ba0:	68fb      	ldr	r3, [r7, #12]
10008ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
10008ba4:	68fb      	ldr	r3, [r7, #12]
10008ba6:	681b      	ldr	r3, [r3, #0]
}
10008ba8:	1c18      	adds	r0, r3, #0
10008baa:	46bd      	mov	sp, r7
10008bac:	b004      	add	sp, #16
10008bae:	bd80      	pop	{r7, pc}

10008bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
10008bb0:	b580      	push	{r7, lr}
10008bb2:	b084      	sub	sp, #16
10008bb4:	af00      	add	r7, sp, #0
10008bb6:	6078      	str	r0, [r7, #4]
10008bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
10008bba:	687b      	ldr	r3, [r7, #4]
10008bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
10008bbe:	68fb      	ldr	r3, [r7, #12]
10008bc0:	2b00      	cmp	r3, #0
10008bc2:	d101      	bne.n	10008bc8 <xQueueGenericReset+0x18>
10008bc4:	b672      	cpsid	i
10008bc6:	e7fe      	b.n	10008bc6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
10008bc8:	f7ff fc62 	bl	10008490 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
10008bcc:	68fb      	ldr	r3, [r7, #12]
10008bce:	681a      	ldr	r2, [r3, #0]
10008bd0:	68fb      	ldr	r3, [r7, #12]
10008bd2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
10008bd4:	68fb      	ldr	r3, [r7, #12]
10008bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10008bd8:	434b      	muls	r3, r1
10008bda:	18d2      	adds	r2, r2, r3
10008bdc:	68fb      	ldr	r3, [r7, #12]
10008bde:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
10008be0:	68fb      	ldr	r3, [r7, #12]
10008be2:	2200      	movs	r2, #0
10008be4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
10008be6:	68fb      	ldr	r3, [r7, #12]
10008be8:	681a      	ldr	r2, [r3, #0]
10008bea:	68fb      	ldr	r3, [r7, #12]
10008bec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
10008bee:	68fb      	ldr	r3, [r7, #12]
10008bf0:	681a      	ldr	r2, [r3, #0]
10008bf2:	68fb      	ldr	r3, [r7, #12]
10008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10008bf6:	1e59      	subs	r1, r3, #1
10008bf8:	68fb      	ldr	r3, [r7, #12]
10008bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10008bfc:	434b      	muls	r3, r1
10008bfe:	18d2      	adds	r2, r2, r3
10008c00:	68fb      	ldr	r3, [r7, #12]
10008c02:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
10008c04:	68fb      	ldr	r3, [r7, #12]
10008c06:	2201      	movs	r2, #1
10008c08:	4252      	negs	r2, r2
10008c0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
10008c0c:	68fb      	ldr	r3, [r7, #12]
10008c0e:	2201      	movs	r2, #1
10008c10:	4252      	negs	r2, r2
10008c12:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
10008c14:	683b      	ldr	r3, [r7, #0]
10008c16:	2b00      	cmp	r3, #0
10008c18:	d10e      	bne.n	10008c38 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10008c1a:	68fb      	ldr	r3, [r7, #12]
10008c1c:	691b      	ldr	r3, [r3, #16]
10008c1e:	2b00      	cmp	r3, #0
10008c20:	d014      	beq.n	10008c4c <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
10008c22:	68fb      	ldr	r3, [r7, #12]
10008c24:	3310      	adds	r3, #16
10008c26:	1c18      	adds	r0, r3, #0
10008c28:	f7fe fbe6 	bl	100073f8 <xTaskRemoveFromEventList>
10008c2c:	1c03      	adds	r3, r0, #0
10008c2e:	2b01      	cmp	r3, #1
10008c30:	d10c      	bne.n	10008c4c <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
10008c32:	f7ff fc1f 	bl	10008474 <vPortYield>
10008c36:	e009      	b.n	10008c4c <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
10008c38:	68fb      	ldr	r3, [r7, #12]
10008c3a:	3310      	adds	r3, #16
10008c3c:	1c18      	adds	r0, r3, #0
10008c3e:	f7ff ff0f 	bl	10008a60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
10008c42:	68fb      	ldr	r3, [r7, #12]
10008c44:	3324      	adds	r3, #36	; 0x24
10008c46:	1c18      	adds	r0, r3, #0
10008c48:	f7ff ff0a 	bl	10008a60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
10008c4c:	f7ff fc30 	bl	100084b0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
10008c50:	2301      	movs	r3, #1
}
10008c52:	1c18      	adds	r0, r3, #0
10008c54:	46bd      	mov	sp, r7
10008c56:	b004      	add	sp, #16
10008c58:	bd80      	pop	{r7, pc}
10008c5a:	46c0      	nop			; (mov r8, r8)

10008c5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
10008c5c:	b580      	push	{r7, lr}
10008c5e:	b088      	sub	sp, #32
10008c60:	af00      	add	r7, sp, #0
10008c62:	60f8      	str	r0, [r7, #12]
10008c64:	60b9      	str	r1, [r7, #8]
10008c66:	1dfb      	adds	r3, r7, #7
10008c68:	701a      	strb	r2, [r3, #0]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
10008c6a:	2300      	movs	r3, #0
10008c6c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
10008c6e:	68fb      	ldr	r3, [r7, #12]
10008c70:	2b00      	cmp	r3, #0
10008c72:	d02e      	beq.n	10008cd2 <xQueueGenericCreate+0x76>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
10008c74:	2054      	movs	r0, #84	; 0x54
10008c76:	f7ff fb15 	bl	100082a4 <pvPortMalloc>
10008c7a:	1c03      	adds	r3, r0, #0
10008c7c:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
10008c7e:	69bb      	ldr	r3, [r7, #24]
10008c80:	2b00      	cmp	r3, #0
10008c82:	d026      	beq.n	10008cd2 <xQueueGenericCreate+0x76>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10008c84:	68fb      	ldr	r3, [r7, #12]
10008c86:	68ba      	ldr	r2, [r7, #8]
10008c88:	4353      	muls	r3, r2
10008c8a:	3301      	adds	r3, #1
10008c8c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
10008c8e:	697b      	ldr	r3, [r7, #20]
10008c90:	1c18      	adds	r0, r3, #0
10008c92:	f7ff fb07 	bl	100082a4 <pvPortMalloc>
10008c96:	1c02      	adds	r2, r0, #0
10008c98:	69bb      	ldr	r3, [r7, #24]
10008c9a:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
10008c9c:	69bb      	ldr	r3, [r7, #24]
10008c9e:	681b      	ldr	r3, [r3, #0]
10008ca0:	2b00      	cmp	r3, #0
10008ca2:	d012      	beq.n	10008cca <xQueueGenericCreate+0x6e>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
10008ca4:	69bb      	ldr	r3, [r7, #24]
10008ca6:	68fa      	ldr	r2, [r7, #12]
10008ca8:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
10008caa:	69bb      	ldr	r3, [r7, #24]
10008cac:	68ba      	ldr	r2, [r7, #8]
10008cae:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
10008cb0:	69bb      	ldr	r3, [r7, #24]
10008cb2:	1c18      	adds	r0, r3, #0
10008cb4:	2101      	movs	r1, #1
10008cb6:	f7ff ff7b 	bl	10008bb0 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
10008cba:	69ba      	ldr	r2, [r7, #24]
10008cbc:	1df9      	adds	r1, r7, #7
10008cbe:	2350      	movs	r3, #80	; 0x50
10008cc0:	7809      	ldrb	r1, [r1, #0]
10008cc2:	54d1      	strb	r1, [r2, r3]
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
10008cc4:	69bb      	ldr	r3, [r7, #24]
10008cc6:	61fb      	str	r3, [r7, #28]
10008cc8:	e003      	b.n	10008cd2 <xQueueGenericCreate+0x76>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
10008cca:	69bb      	ldr	r3, [r7, #24]
10008ccc:	1c18      	adds	r0, r3, #0
10008cce:	f7ff fb33 	bl	10008338 <vPortFree>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
10008cd2:	69fb      	ldr	r3, [r7, #28]
10008cd4:	2b00      	cmp	r3, #0
10008cd6:	d101      	bne.n	10008cdc <xQueueGenericCreate+0x80>
10008cd8:	b672      	cpsid	i
10008cda:	e7fe      	b.n	10008cda <xQueueGenericCreate+0x7e>

	return xReturn;
10008cdc:	69fb      	ldr	r3, [r7, #28]
}
10008cde:	1c18      	adds	r0, r3, #0
10008ce0:	46bd      	mov	sp, r7
10008ce2:	b008      	add	sp, #32
10008ce4:	bd80      	pop	{r7, pc}
10008ce6:	46c0      	nop			; (mov r8, r8)

10008ce8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
10008ce8:	b580      	push	{r7, lr}
10008cea:	b084      	sub	sp, #16
10008cec:	af00      	add	r7, sp, #0
10008cee:	1c02      	adds	r2, r0, #0
10008cf0:	1dfb      	adds	r3, r7, #7
10008cf2:	701a      	strb	r2, [r3, #0]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
10008cf4:	2054      	movs	r0, #84	; 0x54
10008cf6:	f7ff fad5 	bl	100082a4 <pvPortMalloc>
10008cfa:	1c03      	adds	r3, r0, #0
10008cfc:	60fb      	str	r3, [r7, #12]
		if( pxNewQueue != NULL )
10008cfe:	68fb      	ldr	r3, [r7, #12]
10008d00:	2b00      	cmp	r3, #0
10008d02:	d032      	beq.n	10008d6a <xQueueCreateMutex+0x82>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
10008d04:	68fb      	ldr	r3, [r7, #12]
10008d06:	2200      	movs	r2, #0
10008d08:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
10008d0a:	68fb      	ldr	r3, [r7, #12]
10008d0c:	2200      	movs	r2, #0
10008d0e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
10008d10:	68fb      	ldr	r3, [r7, #12]
10008d12:	2200      	movs	r2, #0
10008d14:	609a      	str	r2, [r3, #8]
			pxNewQueue->u.pcReadFrom = NULL;
10008d16:	68fb      	ldr	r3, [r7, #12]
10008d18:	2200      	movs	r2, #0
10008d1a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
10008d1c:	68fb      	ldr	r3, [r7, #12]
10008d1e:	2200      	movs	r2, #0
10008d20:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
10008d22:	68fb      	ldr	r3, [r7, #12]
10008d24:	2201      	movs	r2, #1
10008d26:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
10008d28:	68fb      	ldr	r3, [r7, #12]
10008d2a:	2200      	movs	r2, #0
10008d2c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
10008d2e:	68fb      	ldr	r3, [r7, #12]
10008d30:	2201      	movs	r2, #1
10008d32:	4252      	negs	r2, r2
10008d34:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
10008d36:	68fb      	ldr	r3, [r7, #12]
10008d38:	2201      	movs	r2, #1
10008d3a:	4252      	negs	r2, r2
10008d3c:	649a      	str	r2, [r3, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
10008d3e:	68fa      	ldr	r2, [r7, #12]
10008d40:	1df9      	adds	r1, r7, #7
10008d42:	2350      	movs	r3, #80	; 0x50
10008d44:	7809      	ldrb	r1, [r1, #0]
10008d46:	54d1      	strb	r1, [r2, r3]
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
10008d48:	68fb      	ldr	r3, [r7, #12]
10008d4a:	3310      	adds	r3, #16
10008d4c:	1c18      	adds	r0, r3, #0
10008d4e:	f7ff fe87 	bl	10008a60 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
10008d52:	68fb      	ldr	r3, [r7, #12]
10008d54:	3324      	adds	r3, #36	; 0x24
10008d56:	1c18      	adds	r0, r3, #0
10008d58:	f7ff fe82 	bl	10008a60 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
10008d5c:	68fb      	ldr	r3, [r7, #12]
10008d5e:	1c18      	adds	r0, r3, #0
10008d60:	2100      	movs	r1, #0
10008d62:	2200      	movs	r2, #0
10008d64:	2300      	movs	r3, #0
10008d66:	f000 f891 	bl	10008e8c <xQueueGenericSend>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
10008d6a:	68fb      	ldr	r3, [r7, #12]
10008d6c:	2b00      	cmp	r3, #0
10008d6e:	d101      	bne.n	10008d74 <xQueueCreateMutex+0x8c>
10008d70:	b672      	cpsid	i
10008d72:	e7fe      	b.n	10008d72 <xQueueCreateMutex+0x8a>
		return pxNewQueue;
10008d74:	68fb      	ldr	r3, [r7, #12]
	}
10008d76:	1c18      	adds	r0, r3, #0
10008d78:	46bd      	mov	sp, r7
10008d7a:	b004      	add	sp, #16
10008d7c:	bd80      	pop	{r7, pc}
10008d7e:	46c0      	nop			; (mov r8, r8)

10008d80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
10008d80:	b590      	push	{r4, r7, lr}
10008d82:	b085      	sub	sp, #20
10008d84:	af00      	add	r7, sp, #0
10008d86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
10008d88:	687b      	ldr	r3, [r7, #4]
10008d8a:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
10008d8c:	68bb      	ldr	r3, [r7, #8]
10008d8e:	2b00      	cmp	r3, #0
10008d90:	d101      	bne.n	10008d96 <xQueueGiveMutexRecursive+0x16>
10008d92:	b672      	cpsid	i
10008d94:	e7fe      	b.n	10008d94 <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
10008d96:	68bb      	ldr	r3, [r7, #8]
10008d98:	685c      	ldr	r4, [r3, #4]
10008d9a:	f7fe fe8f 	bl	10007abc <xTaskGetCurrentTaskHandle>
10008d9e:	1c03      	adds	r3, r0, #0
10008da0:	429c      	cmp	r4, r3
10008da2:	d112      	bne.n	10008dca <xQueueGiveMutexRecursive+0x4a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
10008da4:	68bb      	ldr	r3, [r7, #8]
10008da6:	68db      	ldr	r3, [r3, #12]
10008da8:	1e5a      	subs	r2, r3, #1
10008daa:	68bb      	ldr	r3, [r7, #8]
10008dac:	60da      	str	r2, [r3, #12]

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
10008dae:	68bb      	ldr	r3, [r7, #8]
10008db0:	68db      	ldr	r3, [r3, #12]
10008db2:	2b00      	cmp	r3, #0
10008db4:	d106      	bne.n	10008dc4 <xQueueGiveMutexRecursive+0x44>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
10008db6:	68bb      	ldr	r3, [r7, #8]
10008db8:	1c18      	adds	r0, r3, #0
10008dba:	2100      	movs	r1, #0
10008dbc:	2200      	movs	r2, #0
10008dbe:	2300      	movs	r3, #0
10008dc0:	f000 f864 	bl	10008e8c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
10008dc4:	2301      	movs	r3, #1
10008dc6:	60fb      	str	r3, [r7, #12]
10008dc8:	e001      	b.n	10008dce <xQueueGiveMutexRecursive+0x4e>
		}
		else
		{
			/* We cannot give the mutex because we are not the holder. */
			xReturn = pdFAIL;
10008dca:	2300      	movs	r3, #0
10008dcc:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
10008dce:	68fb      	ldr	r3, [r7, #12]
	}
10008dd0:	1c18      	adds	r0, r3, #0
10008dd2:	46bd      	mov	sp, r7
10008dd4:	b005      	add	sp, #20
10008dd6:	bd90      	pop	{r4, r7, pc}

10008dd8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
10008dd8:	b590      	push	{r4, r7, lr}
10008dda:	b085      	sub	sp, #20
10008ddc:	af00      	add	r7, sp, #0
10008dde:	6078      	str	r0, [r7, #4]
10008de0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
10008de2:	687b      	ldr	r3, [r7, #4]
10008de4:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
10008de6:	68bb      	ldr	r3, [r7, #8]
10008de8:	2b00      	cmp	r3, #0
10008dea:	d101      	bne.n	10008df0 <xQueueTakeMutexRecursive+0x18>
10008dec:	b672      	cpsid	i
10008dee:	e7fe      	b.n	10008dee <xQueueTakeMutexRecursive+0x16>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
10008df0:	68bb      	ldr	r3, [r7, #8]
10008df2:	685c      	ldr	r4, [r3, #4]
10008df4:	f7fe fe62 	bl	10007abc <xTaskGetCurrentTaskHandle>
10008df8:	1c03      	adds	r3, r0, #0
10008dfa:	429c      	cmp	r4, r3
10008dfc:	d107      	bne.n	10008e0e <xQueueTakeMutexRecursive+0x36>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
10008dfe:	68bb      	ldr	r3, [r7, #8]
10008e00:	68db      	ldr	r3, [r3, #12]
10008e02:	1c5a      	adds	r2, r3, #1
10008e04:	68bb      	ldr	r3, [r7, #8]
10008e06:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
10008e08:	2301      	movs	r3, #1
10008e0a:	60fb      	str	r3, [r7, #12]
10008e0c:	e011      	b.n	10008e32 <xQueueTakeMutexRecursive+0x5a>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
10008e0e:	68ba      	ldr	r2, [r7, #8]
10008e10:	683b      	ldr	r3, [r7, #0]
10008e12:	1c10      	adds	r0, r2, #0
10008e14:	2100      	movs	r1, #0
10008e16:	1c1a      	adds	r2, r3, #0
10008e18:	2300      	movs	r3, #0
10008e1a:	f000 f961 	bl	100090e0 <xQueueGenericReceive>
10008e1e:	1c03      	adds	r3, r0, #0
10008e20:	60fb      	str	r3, [r7, #12]

			/* pdPASS will only be returned if we successfully obtained the mutex,
			we may have blocked to reach here. */
			if( xReturn == pdPASS )
10008e22:	68fb      	ldr	r3, [r7, #12]
10008e24:	2b01      	cmp	r3, #1
10008e26:	d104      	bne.n	10008e32 <xQueueTakeMutexRecursive+0x5a>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
10008e28:	68bb      	ldr	r3, [r7, #8]
10008e2a:	68db      	ldr	r3, [r3, #12]
10008e2c:	1c5a      	adds	r2, r3, #1
10008e2e:	68bb      	ldr	r3, [r7, #8]
10008e30:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
10008e32:	68fb      	ldr	r3, [r7, #12]
	}
10008e34:	1c18      	adds	r0, r3, #0
10008e36:	46bd      	mov	sp, r7
10008e38:	b005      	add	sp, #20
10008e3a:	bd90      	pop	{r4, r7, pc}

10008e3c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
10008e3c:	b580      	push	{r7, lr}
10008e3e:	b084      	sub	sp, #16
10008e40:	af00      	add	r7, sp, #0
10008e42:	6078      	str	r0, [r7, #4]
10008e44:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
10008e46:	687b      	ldr	r3, [r7, #4]
10008e48:	2b00      	cmp	r3, #0
10008e4a:	d101      	bne.n	10008e50 <xQueueCreateCountingSemaphore+0x14>
10008e4c:	b672      	cpsid	i
10008e4e:	e7fe      	b.n	10008e4e <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
10008e50:	683a      	ldr	r2, [r7, #0]
10008e52:	687b      	ldr	r3, [r7, #4]
10008e54:	429a      	cmp	r2, r3
10008e56:	d901      	bls.n	10008e5c <xQueueCreateCountingSemaphore+0x20>
10008e58:	b672      	cpsid	i
10008e5a:	e7fe      	b.n	10008e5a <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
10008e5c:	687b      	ldr	r3, [r7, #4]
10008e5e:	1c18      	adds	r0, r3, #0
10008e60:	2100      	movs	r1, #0
10008e62:	2202      	movs	r2, #2
10008e64:	f7ff fefa 	bl	10008c5c <xQueueGenericCreate>
10008e68:	1c03      	adds	r3, r0, #0
10008e6a:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
10008e6c:	68fb      	ldr	r3, [r7, #12]
10008e6e:	2b00      	cmp	r3, #0
10008e70:	d002      	beq.n	10008e78 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
10008e72:	68fb      	ldr	r3, [r7, #12]
10008e74:	683a      	ldr	r2, [r7, #0]
10008e76:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
10008e78:	68fb      	ldr	r3, [r7, #12]
10008e7a:	2b00      	cmp	r3, #0
10008e7c:	d101      	bne.n	10008e82 <xQueueCreateCountingSemaphore+0x46>
10008e7e:	b672      	cpsid	i
10008e80:	e7fe      	b.n	10008e80 <xQueueCreateCountingSemaphore+0x44>
		return xHandle;
10008e82:	68fb      	ldr	r3, [r7, #12]
	}
10008e84:	1c18      	adds	r0, r3, #0
10008e86:	46bd      	mov	sp, r7
10008e88:	b004      	add	sp, #16
10008e8a:	bd80      	pop	{r7, pc}

10008e8c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
10008e8c:	b580      	push	{r7, lr}
10008e8e:	b088      	sub	sp, #32
10008e90:	af00      	add	r7, sp, #0
10008e92:	60f8      	str	r0, [r7, #12]
10008e94:	60b9      	str	r1, [r7, #8]
10008e96:	607a      	str	r2, [r7, #4]
10008e98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
10008e9a:	2300      	movs	r3, #0
10008e9c:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
10008e9e:	68fb      	ldr	r3, [r7, #12]
10008ea0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
10008ea2:	69bb      	ldr	r3, [r7, #24]
10008ea4:	2b00      	cmp	r3, #0
10008ea6:	d101      	bne.n	10008eac <xQueueGenericSend+0x20>
10008ea8:	b672      	cpsid	i
10008eaa:	e7fe      	b.n	10008eaa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
10008eac:	68bb      	ldr	r3, [r7, #8]
10008eae:	2b00      	cmp	r3, #0
10008eb0:	d103      	bne.n	10008eba <xQueueGenericSend+0x2e>
10008eb2:	69bb      	ldr	r3, [r7, #24]
10008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10008eb6:	2b00      	cmp	r3, #0
10008eb8:	d101      	bne.n	10008ebe <xQueueGenericSend+0x32>
10008eba:	2301      	movs	r3, #1
10008ebc:	e000      	b.n	10008ec0 <xQueueGenericSend+0x34>
10008ebe:	2300      	movs	r3, #0
10008ec0:	2b00      	cmp	r3, #0
10008ec2:	d101      	bne.n	10008ec8 <xQueueGenericSend+0x3c>
10008ec4:	b672      	cpsid	i
10008ec6:	e7fe      	b.n	10008ec6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
10008ec8:	683b      	ldr	r3, [r7, #0]
10008eca:	2b02      	cmp	r3, #2
10008ecc:	d103      	bne.n	10008ed6 <xQueueGenericSend+0x4a>
10008ece:	69bb      	ldr	r3, [r7, #24]
10008ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10008ed2:	2b01      	cmp	r3, #1
10008ed4:	d101      	bne.n	10008eda <xQueueGenericSend+0x4e>
10008ed6:	2301      	movs	r3, #1
10008ed8:	e000      	b.n	10008edc <xQueueGenericSend+0x50>
10008eda:	2300      	movs	r3, #0
10008edc:	2b00      	cmp	r3, #0
10008ede:	d101      	bne.n	10008ee4 <xQueueGenericSend+0x58>
10008ee0:	b672      	cpsid	i
10008ee2:	e7fe      	b.n	10008ee2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
10008ee4:	f7fe fdf8 	bl	10007ad8 <xTaskGetSchedulerState>
10008ee8:	1c03      	adds	r3, r0, #0
10008eea:	2b00      	cmp	r3, #0
10008eec:	d102      	bne.n	10008ef4 <xQueueGenericSend+0x68>
10008eee:	687b      	ldr	r3, [r7, #4]
10008ef0:	2b00      	cmp	r3, #0
10008ef2:	d101      	bne.n	10008ef8 <xQueueGenericSend+0x6c>
10008ef4:	2301      	movs	r3, #1
10008ef6:	e000      	b.n	10008efa <xQueueGenericSend+0x6e>
10008ef8:	2300      	movs	r3, #0
10008efa:	2b00      	cmp	r3, #0
10008efc:	d102      	bne.n	10008f04 <xQueueGenericSend+0x78>
10008efe:	b672      	cpsid	i
10008f00:	e7fe      	b.n	10008f00 <xQueueGenericSend+0x74>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
10008f02:	46c0      	nop			; (mov r8, r8)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
10008f04:	f7ff fac4 	bl	10008490 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
10008f08:	69bb      	ldr	r3, [r7, #24]
10008f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10008f0c:	69bb      	ldr	r3, [r7, #24]
10008f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10008f10:	429a      	cmp	r2, r3
10008f12:	d302      	bcc.n	10008f1a <xQueueGenericSend+0x8e>
10008f14:	683b      	ldr	r3, [r7, #0]
10008f16:	2b02      	cmp	r3, #2
10008f18:	d119      	bne.n	10008f4e <xQueueGenericSend+0xc2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
10008f1a:	69b9      	ldr	r1, [r7, #24]
10008f1c:	68ba      	ldr	r2, [r7, #8]
10008f1e:	683b      	ldr	r3, [r7, #0]
10008f20:	1c08      	adds	r0, r1, #0
10008f22:	1c11      	adds	r1, r2, #0
10008f24:	1c1a      	adds	r2, r3, #0
10008f26:	f000 fad1 	bl	100094cc <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
10008f2a:	69bb      	ldr	r3, [r7, #24]
10008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10008f2e:	2b00      	cmp	r3, #0
10008f30:	d009      	beq.n	10008f46 <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
10008f32:	69bb      	ldr	r3, [r7, #24]
10008f34:	3324      	adds	r3, #36	; 0x24
10008f36:	1c18      	adds	r0, r3, #0
10008f38:	f7fe fa5e 	bl	100073f8 <xTaskRemoveFromEventList>
10008f3c:	1c03      	adds	r3, r0, #0
10008f3e:	2b01      	cmp	r3, #1
10008f40:	d101      	bne.n	10008f46 <xQueueGenericSend+0xba>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
10008f42:	f7ff fa97 	bl	10008474 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
10008f46:	f7ff fab3 	bl	100084b0 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
10008f4a:	2301      	movs	r3, #1
10008f4c:	e059      	b.n	10009002 <xQueueGenericSend+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
10008f4e:	687b      	ldr	r3, [r7, #4]
10008f50:	2b00      	cmp	r3, #0
10008f52:	d103      	bne.n	10008f5c <xQueueGenericSend+0xd0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
10008f54:	f7ff faac 	bl	100084b0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
10008f58:	2300      	movs	r3, #0
10008f5a:	e052      	b.n	10009002 <xQueueGenericSend+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
10008f5c:	69fb      	ldr	r3, [r7, #28]
10008f5e:	2b00      	cmp	r3, #0
10008f60:	d106      	bne.n	10008f70 <xQueueGenericSend+0xe4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
10008f62:	1c3b      	adds	r3, r7, #0
10008f64:	3310      	adds	r3, #16
10008f66:	1c18      	adds	r0, r3, #0
10008f68:	f7fe fafa 	bl	10007560 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
10008f6c:	2301      	movs	r3, #1
10008f6e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
10008f70:	f7ff fa9e 	bl	100084b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
10008f74:	f7fd ff24 	bl	10006dc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
10008f78:	f7ff fa8a 	bl	10008490 <vPortEnterCritical>
10008f7c:	69bb      	ldr	r3, [r7, #24]
10008f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10008f80:	3301      	adds	r3, #1
10008f82:	d102      	bne.n	10008f8a <xQueueGenericSend+0xfe>
10008f84:	69bb      	ldr	r3, [r7, #24]
10008f86:	2200      	movs	r2, #0
10008f88:	645a      	str	r2, [r3, #68]	; 0x44
10008f8a:	69bb      	ldr	r3, [r7, #24]
10008f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10008f8e:	3301      	adds	r3, #1
10008f90:	d102      	bne.n	10008f98 <xQueueGenericSend+0x10c>
10008f92:	69bb      	ldr	r3, [r7, #24]
10008f94:	2200      	movs	r2, #0
10008f96:	649a      	str	r2, [r3, #72]	; 0x48
10008f98:	f7ff fa8a 	bl	100084b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
10008f9c:	1c3a      	adds	r2, r7, #0
10008f9e:	3210      	adds	r2, #16
10008fa0:	1d3b      	adds	r3, r7, #4
10008fa2:	1c10      	adds	r0, r2, #0
10008fa4:	1c19      	adds	r1, r3, #0
10008fa6:	f7fe faf3 	bl	10007590 <xTaskCheckForTimeOut>
10008faa:	1c03      	adds	r3, r0, #0
10008fac:	2b00      	cmp	r3, #0
10008fae:	d121      	bne.n	10008ff4 <xQueueGenericSend+0x168>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
10008fb0:	69bb      	ldr	r3, [r7, #24]
10008fb2:	1c18      	adds	r0, r3, #0
10008fb4:	f000 fb96 	bl	100096e4 <prvIsQueueFull>
10008fb8:	1c03      	adds	r3, r0, #0
10008fba:	2b00      	cmp	r3, #0
10008fbc:	d013      	beq.n	10008fe6 <xQueueGenericSend+0x15a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
10008fbe:	69bb      	ldr	r3, [r7, #24]
10008fc0:	1c1a      	adds	r2, r3, #0
10008fc2:	3210      	adds	r2, #16
10008fc4:	687b      	ldr	r3, [r7, #4]
10008fc6:	1c10      	adds	r0, r2, #0
10008fc8:	1c19      	adds	r1, r3, #0
10008fca:	f7fe f971 	bl	100072b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
10008fce:	69bb      	ldr	r3, [r7, #24]
10008fd0:	1c18      	adds	r0, r3, #0
10008fd2:	f000 fb0d 	bl	100095f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
10008fd6:	f7fd feff 	bl	10006dd8 <xTaskResumeAll>
10008fda:	1c03      	adds	r3, r0, #0
10008fdc:	2b00      	cmp	r3, #0
10008fde:	d190      	bne.n	10008f02 <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
10008fe0:	f7ff fa48 	bl	10008474 <vPortYield>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
10008fe4:	e78d      	b.n	10008f02 <xQueueGenericSend+0x76>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
10008fe6:	69bb      	ldr	r3, [r7, #24]
10008fe8:	1c18      	adds	r0, r3, #0
10008fea:	f000 fb01 	bl	100095f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
10008fee:	f7fd fef3 	bl	10006dd8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
10008ff2:	e786      	b.n	10008f02 <xQueueGenericSend+0x76>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
10008ff4:	69bb      	ldr	r3, [r7, #24]
10008ff6:	1c18      	adds	r0, r3, #0
10008ff8:	f000 fafa 	bl	100095f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
10008ffc:	f7fd feec 	bl	10006dd8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
10009000:	2300      	movs	r3, #0
		}
	}
}
10009002:	1c18      	adds	r0, r3, #0
10009004:	46bd      	mov	sp, r7
10009006:	b008      	add	sp, #32
10009008:	bd80      	pop	{r7, pc}
1000900a:	46c0      	nop			; (mov r8, r8)

1000900c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
1000900c:	b580      	push	{r7, lr}
1000900e:	b088      	sub	sp, #32
10009010:	af00      	add	r7, sp, #0
10009012:	60f8      	str	r0, [r7, #12]
10009014:	60b9      	str	r1, [r7, #8]
10009016:	607a      	str	r2, [r7, #4]
10009018:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1000901a:	68fb      	ldr	r3, [r7, #12]
1000901c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
1000901e:	69bb      	ldr	r3, [r7, #24]
10009020:	2b00      	cmp	r3, #0
10009022:	d101      	bne.n	10009028 <xQueueGenericSendFromISR+0x1c>
10009024:	b672      	cpsid	i
10009026:	e7fe      	b.n	10009026 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
10009028:	68bb      	ldr	r3, [r7, #8]
1000902a:	2b00      	cmp	r3, #0
1000902c:	d103      	bne.n	10009036 <xQueueGenericSendFromISR+0x2a>
1000902e:	69bb      	ldr	r3, [r7, #24]
10009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10009032:	2b00      	cmp	r3, #0
10009034:	d101      	bne.n	1000903a <xQueueGenericSendFromISR+0x2e>
10009036:	2301      	movs	r3, #1
10009038:	e000      	b.n	1000903c <xQueueGenericSendFromISR+0x30>
1000903a:	2300      	movs	r3, #0
1000903c:	2b00      	cmp	r3, #0
1000903e:	d101      	bne.n	10009044 <xQueueGenericSendFromISR+0x38>
10009040:	b672      	cpsid	i
10009042:	e7fe      	b.n	10009042 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
10009044:	683b      	ldr	r3, [r7, #0]
10009046:	2b02      	cmp	r3, #2
10009048:	d103      	bne.n	10009052 <xQueueGenericSendFromISR+0x46>
1000904a:	69bb      	ldr	r3, [r7, #24]
1000904c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000904e:	2b01      	cmp	r3, #1
10009050:	d101      	bne.n	10009056 <xQueueGenericSendFromISR+0x4a>
10009052:	2301      	movs	r3, #1
10009054:	e000      	b.n	10009058 <xQueueGenericSendFromISR+0x4c>
10009056:	2300      	movs	r3, #0
10009058:	2b00      	cmp	r3, #0
1000905a:	d101      	bne.n	10009060 <xQueueGenericSendFromISR+0x54>
1000905c:	b672      	cpsid	i
1000905e:	e7fe      	b.n	1000905e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
10009060:	f7ff fa3c 	bl	100084dc <ulSetInterruptMaskFromISR>
10009064:	1c03      	adds	r3, r0, #0
10009066:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
10009068:	69bb      	ldr	r3, [r7, #24]
1000906a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000906c:	69bb      	ldr	r3, [r7, #24]
1000906e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10009070:	429a      	cmp	r2, r3
10009072:	d302      	bcc.n	1000907a <xQueueGenericSendFromISR+0x6e>
10009074:	683b      	ldr	r3, [r7, #0]
10009076:	2b02      	cmp	r3, #2
10009078:	d126      	bne.n	100090c8 <xQueueGenericSendFromISR+0xbc>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1000907a:	69b9      	ldr	r1, [r7, #24]
1000907c:	68ba      	ldr	r2, [r7, #8]
1000907e:	683b      	ldr	r3, [r7, #0]
10009080:	1c08      	adds	r0, r1, #0
10009082:	1c11      	adds	r1, r2, #0
10009084:	1c1a      	adds	r2, r3, #0
10009086:	f000 fa21 	bl	100094cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
1000908a:	69bb      	ldr	r3, [r7, #24]
1000908c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000908e:	3301      	adds	r3, #1
10009090:	d112      	bne.n	100090b8 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
10009092:	69bb      	ldr	r3, [r7, #24]
10009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009096:	2b00      	cmp	r3, #0
10009098:	d013      	beq.n	100090c2 <xQueueGenericSendFromISR+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1000909a:	69bb      	ldr	r3, [r7, #24]
1000909c:	3324      	adds	r3, #36	; 0x24
1000909e:	1c18      	adds	r0, r3, #0
100090a0:	f7fe f9aa 	bl	100073f8 <xTaskRemoveFromEventList>
100090a4:	1c03      	adds	r3, r0, #0
100090a6:	2b00      	cmp	r3, #0
100090a8:	d00b      	beq.n	100090c2 <xQueueGenericSendFromISR+0xb6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
100090aa:	687b      	ldr	r3, [r7, #4]
100090ac:	2b00      	cmp	r3, #0
100090ae:	d008      	beq.n	100090c2 <xQueueGenericSendFromISR+0xb6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
100090b0:	687b      	ldr	r3, [r7, #4]
100090b2:	2201      	movs	r2, #1
100090b4:	601a      	str	r2, [r3, #0]
100090b6:	e004      	b.n	100090c2 <xQueueGenericSendFromISR+0xb6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
100090b8:	69bb      	ldr	r3, [r7, #24]
100090ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100090bc:	1c5a      	adds	r2, r3, #1
100090be:	69bb      	ldr	r3, [r7, #24]
100090c0:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
100090c2:	2301      	movs	r3, #1
100090c4:	61fb      	str	r3, [r7, #28]
100090c6:	e001      	b.n	100090cc <xQueueGenericSendFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
100090c8:	2300      	movs	r3, #0
100090ca:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
100090cc:	697b      	ldr	r3, [r7, #20]
100090ce:	1c18      	adds	r0, r3, #0
100090d0:	f7ff fa0a 	bl	100084e8 <vClearInterruptMaskFromISR>

	return xReturn;
100090d4:	69fb      	ldr	r3, [r7, #28]
}
100090d6:	1c18      	adds	r0, r3, #0
100090d8:	46bd      	mov	sp, r7
100090da:	b008      	add	sp, #32
100090dc:	bd80      	pop	{r7, pc}
100090de:	46c0      	nop			; (mov r8, r8)

100090e0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
100090e0:	b580      	push	{r7, lr}
100090e2:	b08a      	sub	sp, #40	; 0x28
100090e4:	af00      	add	r7, sp, #0
100090e6:	60f8      	str	r0, [r7, #12]
100090e8:	60b9      	str	r1, [r7, #8]
100090ea:	607a      	str	r2, [r7, #4]
100090ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
100090ee:	2300      	movs	r3, #0
100090f0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
100090f2:	68fb      	ldr	r3, [r7, #12]
100090f4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
100090f6:	6a3b      	ldr	r3, [r7, #32]
100090f8:	2b00      	cmp	r3, #0
100090fa:	d101      	bne.n	10009100 <xQueueGenericReceive+0x20>
100090fc:	b672      	cpsid	i
100090fe:	e7fe      	b.n	100090fe <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
10009100:	68bb      	ldr	r3, [r7, #8]
10009102:	2b00      	cmp	r3, #0
10009104:	d103      	bne.n	1000910e <xQueueGenericReceive+0x2e>
10009106:	6a3b      	ldr	r3, [r7, #32]
10009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000910a:	2b00      	cmp	r3, #0
1000910c:	d101      	bne.n	10009112 <xQueueGenericReceive+0x32>
1000910e:	2301      	movs	r3, #1
10009110:	e000      	b.n	10009114 <xQueueGenericReceive+0x34>
10009112:	2300      	movs	r3, #0
10009114:	2b00      	cmp	r3, #0
10009116:	d101      	bne.n	1000911c <xQueueGenericReceive+0x3c>
10009118:	b672      	cpsid	i
1000911a:	e7fe      	b.n	1000911a <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1000911c:	f7fe fcdc 	bl	10007ad8 <xTaskGetSchedulerState>
10009120:	1c03      	adds	r3, r0, #0
10009122:	2b00      	cmp	r3, #0
10009124:	d102      	bne.n	1000912c <xQueueGenericReceive+0x4c>
10009126:	687b      	ldr	r3, [r7, #4]
10009128:	2b00      	cmp	r3, #0
1000912a:	d101      	bne.n	10009130 <xQueueGenericReceive+0x50>
1000912c:	2301      	movs	r3, #1
1000912e:	e000      	b.n	10009132 <xQueueGenericReceive+0x52>
10009130:	2300      	movs	r3, #0
10009132:	2b00      	cmp	r3, #0
10009134:	d102      	bne.n	1000913c <xQueueGenericReceive+0x5c>
10009136:	b672      	cpsid	i
10009138:	e7fe      	b.n	10009138 <xQueueGenericReceive+0x58>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
1000913a:	46c0      	nop			; (mov r8, r8)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1000913c:	f7ff f9a8 	bl	10008490 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
10009140:	6a3b      	ldr	r3, [r7, #32]
10009142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10009144:	2b00      	cmp	r3, #0
10009146:	d03d      	beq.n	100091c4 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
10009148:	6a3b      	ldr	r3, [r7, #32]
1000914a:	68db      	ldr	r3, [r3, #12]
1000914c:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
1000914e:	6a3a      	ldr	r2, [r7, #32]
10009150:	68bb      	ldr	r3, [r7, #8]
10009152:	1c10      	adds	r0, r2, #0
10009154:	1c19      	adds	r1, r3, #0
10009156:	f000 fa23 	bl	100095a0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
1000915a:	683b      	ldr	r3, [r7, #0]
1000915c:	2b00      	cmp	r3, #0
1000915e:	d11c      	bne.n	1000919a <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
10009160:	6a3b      	ldr	r3, [r7, #32]
10009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10009164:	1e5a      	subs	r2, r3, #1
10009166:	6a3b      	ldr	r3, [r7, #32]
10009168:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1000916a:	6a3b      	ldr	r3, [r7, #32]
1000916c:	681b      	ldr	r3, [r3, #0]
1000916e:	2b00      	cmp	r3, #0
10009170:	d104      	bne.n	1000917c <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
10009172:	f7fe fca3 	bl	10007abc <xTaskGetCurrentTaskHandle>
10009176:	1c02      	adds	r2, r0, #0
10009178:	6a3b      	ldr	r3, [r7, #32]
1000917a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1000917c:	6a3b      	ldr	r3, [r7, #32]
1000917e:	691b      	ldr	r3, [r3, #16]
10009180:	2b00      	cmp	r3, #0
10009182:	d01b      	beq.n	100091bc <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
10009184:	6a3b      	ldr	r3, [r7, #32]
10009186:	3310      	adds	r3, #16
10009188:	1c18      	adds	r0, r3, #0
1000918a:	f7fe f935 	bl	100073f8 <xTaskRemoveFromEventList>
1000918e:	1c03      	adds	r3, r0, #0
10009190:	2b01      	cmp	r3, #1
10009192:	d113      	bne.n	100091bc <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
10009194:	f7ff f96e 	bl	10008474 <vPortYield>
10009198:	e010      	b.n	100091bc <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1000919a:	6a3b      	ldr	r3, [r7, #32]
1000919c:	69fa      	ldr	r2, [r7, #28]
1000919e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
100091a0:	6a3b      	ldr	r3, [r7, #32]
100091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091a4:	2b00      	cmp	r3, #0
100091a6:	d009      	beq.n	100091bc <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
100091a8:	6a3b      	ldr	r3, [r7, #32]
100091aa:	3324      	adds	r3, #36	; 0x24
100091ac:	1c18      	adds	r0, r3, #0
100091ae:	f7fe f923 	bl	100073f8 <xTaskRemoveFromEventList>
100091b2:	1c03      	adds	r3, r0, #0
100091b4:	2b00      	cmp	r3, #0
100091b6:	d001      	beq.n	100091bc <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
100091b8:	f7ff f95c 	bl	10008474 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
100091bc:	f7ff f978 	bl	100084b0 <vPortExitCritical>
				return pdPASS;
100091c0:	2301      	movs	r3, #1
100091c2:	e067      	b.n	10009294 <xQueueGenericReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
100091c4:	687b      	ldr	r3, [r7, #4]
100091c6:	2b00      	cmp	r3, #0
100091c8:	d103      	bne.n	100091d2 <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
100091ca:	f7ff f971 	bl	100084b0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
100091ce:	2300      	movs	r3, #0
100091d0:	e060      	b.n	10009294 <xQueueGenericReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
100091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100091d4:	2b00      	cmp	r3, #0
100091d6:	d106      	bne.n	100091e6 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
100091d8:	1c3b      	adds	r3, r7, #0
100091da:	3314      	adds	r3, #20
100091dc:	1c18      	adds	r0, r3, #0
100091de:	f7fe f9bf 	bl	10007560 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
100091e2:	2301      	movs	r3, #1
100091e4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
100091e6:	f7ff f963 	bl	100084b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
100091ea:	f7fd fde9 	bl	10006dc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
100091ee:	f7ff f94f 	bl	10008490 <vPortEnterCritical>
100091f2:	6a3b      	ldr	r3, [r7, #32]
100091f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100091f6:	3301      	adds	r3, #1
100091f8:	d102      	bne.n	10009200 <xQueueGenericReceive+0x120>
100091fa:	6a3b      	ldr	r3, [r7, #32]
100091fc:	2200      	movs	r2, #0
100091fe:	645a      	str	r2, [r3, #68]	; 0x44
10009200:	6a3b      	ldr	r3, [r7, #32]
10009202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10009204:	3301      	adds	r3, #1
10009206:	d102      	bne.n	1000920e <xQueueGenericReceive+0x12e>
10009208:	6a3b      	ldr	r3, [r7, #32]
1000920a:	2200      	movs	r2, #0
1000920c:	649a      	str	r2, [r3, #72]	; 0x48
1000920e:	f7ff f94f 	bl	100084b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
10009212:	1c3a      	adds	r2, r7, #0
10009214:	3214      	adds	r2, #20
10009216:	1d3b      	adds	r3, r7, #4
10009218:	1c10      	adds	r0, r2, #0
1000921a:	1c19      	adds	r1, r3, #0
1000921c:	f7fe f9b8 	bl	10007590 <xTaskCheckForTimeOut>
10009220:	1c03      	adds	r3, r0, #0
10009222:	2b00      	cmp	r3, #0
10009224:	d12f      	bne.n	10009286 <xQueueGenericReceive+0x1a6>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
10009226:	6a3b      	ldr	r3, [r7, #32]
10009228:	1c18      	adds	r0, r3, #0
1000922a:	f000 fa2d 	bl	10009688 <prvIsQueueEmpty>
1000922e:	1c03      	adds	r3, r0, #0
10009230:	2b00      	cmp	r3, #0
10009232:	d021      	beq.n	10009278 <xQueueGenericReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
10009234:	6a3b      	ldr	r3, [r7, #32]
10009236:	681b      	ldr	r3, [r3, #0]
10009238:	2b00      	cmp	r3, #0
1000923a:	d108      	bne.n	1000924e <xQueueGenericReceive+0x16e>
					{
						taskENTER_CRITICAL();
1000923c:	f7ff f928 	bl	10008490 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
10009240:	6a3b      	ldr	r3, [r7, #32]
10009242:	685b      	ldr	r3, [r3, #4]
10009244:	1c18      	adds	r0, r3, #0
10009246:	f7fe fc63 	bl	10007b10 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
1000924a:	f7ff f931 	bl	100084b0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1000924e:	6a3b      	ldr	r3, [r7, #32]
10009250:	1c1a      	adds	r2, r3, #0
10009252:	3224      	adds	r2, #36	; 0x24
10009254:	687b      	ldr	r3, [r7, #4]
10009256:	1c10      	adds	r0, r2, #0
10009258:	1c19      	adds	r1, r3, #0
1000925a:	f7fe f829 	bl	100072b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1000925e:	6a3b      	ldr	r3, [r7, #32]
10009260:	1c18      	adds	r0, r3, #0
10009262:	f000 f9c5 	bl	100095f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
10009266:	f7fd fdb7 	bl	10006dd8 <xTaskResumeAll>
1000926a:	1c03      	adds	r3, r0, #0
1000926c:	2b00      	cmp	r3, #0
1000926e:	d000      	beq.n	10009272 <xQueueGenericReceive+0x192>
10009270:	e763      	b.n	1000913a <xQueueGenericReceive+0x5a>
				{
					portYIELD_WITHIN_API();
10009272:	f7ff f8ff 	bl	10008474 <vPortYield>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
10009276:	e760      	b.n	1000913a <xQueueGenericReceive+0x5a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
10009278:	6a3b      	ldr	r3, [r7, #32]
1000927a:	1c18      	adds	r0, r3, #0
1000927c:	f000 f9b8 	bl	100095f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
10009280:	f7fd fdaa 	bl	10006dd8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
10009284:	e759      	b.n	1000913a <xQueueGenericReceive+0x5a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
10009286:	6a3b      	ldr	r3, [r7, #32]
10009288:	1c18      	adds	r0, r3, #0
1000928a:	f000 f9b1 	bl	100095f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1000928e:	f7fd fda3 	bl	10006dd8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
10009292:	2300      	movs	r3, #0
		}
	}
}
10009294:	1c18      	adds	r0, r3, #0
10009296:	46bd      	mov	sp, r7
10009298:	b00a      	add	sp, #40	; 0x28
1000929a:	bd80      	pop	{r7, pc}

1000929c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
1000929c:	b580      	push	{r7, lr}
1000929e:	b088      	sub	sp, #32
100092a0:	af00      	add	r7, sp, #0
100092a2:	60f8      	str	r0, [r7, #12]
100092a4:	60b9      	str	r1, [r7, #8]
100092a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
100092a8:	68fb      	ldr	r3, [r7, #12]
100092aa:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
100092ac:	69bb      	ldr	r3, [r7, #24]
100092ae:	2b00      	cmp	r3, #0
100092b0:	d101      	bne.n	100092b6 <xQueueReceiveFromISR+0x1a>
100092b2:	b672      	cpsid	i
100092b4:	e7fe      	b.n	100092b4 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
100092b6:	68bb      	ldr	r3, [r7, #8]
100092b8:	2b00      	cmp	r3, #0
100092ba:	d103      	bne.n	100092c4 <xQueueReceiveFromISR+0x28>
100092bc:	69bb      	ldr	r3, [r7, #24]
100092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100092c0:	2b00      	cmp	r3, #0
100092c2:	d101      	bne.n	100092c8 <xQueueReceiveFromISR+0x2c>
100092c4:	2301      	movs	r3, #1
100092c6:	e000      	b.n	100092ca <xQueueReceiveFromISR+0x2e>
100092c8:	2300      	movs	r3, #0
100092ca:	2b00      	cmp	r3, #0
100092cc:	d101      	bne.n	100092d2 <xQueueReceiveFromISR+0x36>
100092ce:	b672      	cpsid	i
100092d0:	e7fe      	b.n	100092d0 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
100092d2:	f7ff f903 	bl	100084dc <ulSetInterruptMaskFromISR>
100092d6:	1c03      	adds	r3, r0, #0
100092d8:	617b      	str	r3, [r7, #20]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
100092da:	69bb      	ldr	r3, [r7, #24]
100092dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100092de:	2b00      	cmp	r3, #0
100092e0:	d029      	beq.n	10009336 <xQueueReceiveFromISR+0x9a>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
100092e2:	69ba      	ldr	r2, [r7, #24]
100092e4:	68bb      	ldr	r3, [r7, #8]
100092e6:	1c10      	adds	r0, r2, #0
100092e8:	1c19      	adds	r1, r3, #0
100092ea:	f000 f959 	bl	100095a0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
100092ee:	69bb      	ldr	r3, [r7, #24]
100092f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100092f2:	1e5a      	subs	r2, r3, #1
100092f4:	69bb      	ldr	r3, [r7, #24]
100092f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
100092f8:	69bb      	ldr	r3, [r7, #24]
100092fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100092fc:	3301      	adds	r3, #1
100092fe:	d112      	bne.n	10009326 <xQueueReceiveFromISR+0x8a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10009300:	69bb      	ldr	r3, [r7, #24]
10009302:	691b      	ldr	r3, [r3, #16]
10009304:	2b00      	cmp	r3, #0
10009306:	d013      	beq.n	10009330 <xQueueReceiveFromISR+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10009308:	69bb      	ldr	r3, [r7, #24]
1000930a:	3310      	adds	r3, #16
1000930c:	1c18      	adds	r0, r3, #0
1000930e:	f7fe f873 	bl	100073f8 <xTaskRemoveFromEventList>
10009312:	1c03      	adds	r3, r0, #0
10009314:	2b00      	cmp	r3, #0
10009316:	d00b      	beq.n	10009330 <xQueueReceiveFromISR+0x94>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
10009318:	687b      	ldr	r3, [r7, #4]
1000931a:	2b00      	cmp	r3, #0
1000931c:	d008      	beq.n	10009330 <xQueueReceiveFromISR+0x94>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
1000931e:	687b      	ldr	r3, [r7, #4]
10009320:	2201      	movs	r2, #1
10009322:	601a      	str	r2, [r3, #0]
10009324:	e004      	b.n	10009330 <xQueueReceiveFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
10009326:	69bb      	ldr	r3, [r7, #24]
10009328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000932a:	1c5a      	adds	r2, r3, #1
1000932c:	69bb      	ldr	r3, [r7, #24]
1000932e:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
10009330:	2301      	movs	r3, #1
10009332:	61fb      	str	r3, [r7, #28]
10009334:	e001      	b.n	1000933a <xQueueReceiveFromISR+0x9e>
		}
		else
		{
			xReturn = pdFAIL;
10009336:	2300      	movs	r3, #0
10009338:	61fb      	str	r3, [r7, #28]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1000933a:	697b      	ldr	r3, [r7, #20]
1000933c:	1c18      	adds	r0, r3, #0
1000933e:	f7ff f8d3 	bl	100084e8 <vClearInterruptMaskFromISR>

	return xReturn;
10009342:	69fb      	ldr	r3, [r7, #28]
}
10009344:	1c18      	adds	r0, r3, #0
10009346:	46bd      	mov	sp, r7
10009348:	b008      	add	sp, #32
1000934a:	bd80      	pop	{r7, pc}

1000934c <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
1000934c:	b580      	push	{r7, lr}
1000934e:	b086      	sub	sp, #24
10009350:	af00      	add	r7, sp, #0
10009352:	6078      	str	r0, [r7, #4]
10009354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
10009356:	687b      	ldr	r3, [r7, #4]
10009358:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
1000935a:	693b      	ldr	r3, [r7, #16]
1000935c:	2b00      	cmp	r3, #0
1000935e:	d101      	bne.n	10009364 <xQueuePeekFromISR+0x18>
10009360:	b672      	cpsid	i
10009362:	e7fe      	b.n	10009362 <xQueuePeekFromISR+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
10009364:	683b      	ldr	r3, [r7, #0]
10009366:	2b00      	cmp	r3, #0
10009368:	d103      	bne.n	10009372 <xQueuePeekFromISR+0x26>
1000936a:	693b      	ldr	r3, [r7, #16]
1000936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000936e:	2b00      	cmp	r3, #0
10009370:	d101      	bne.n	10009376 <xQueuePeekFromISR+0x2a>
10009372:	2301      	movs	r3, #1
10009374:	e000      	b.n	10009378 <xQueuePeekFromISR+0x2c>
10009376:	2300      	movs	r3, #0
10009378:	2b00      	cmp	r3, #0
1000937a:	d101      	bne.n	10009380 <xQueuePeekFromISR+0x34>
1000937c:	b672      	cpsid	i
1000937e:	e7fe      	b.n	1000937e <xQueuePeekFromISR+0x32>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
10009380:	f7ff f8ac 	bl	100084dc <ulSetInterruptMaskFromISR>
10009384:	1c03      	adds	r3, r0, #0
10009386:	60fb      	str	r3, [r7, #12]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
10009388:	693b      	ldr	r3, [r7, #16]
1000938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000938c:	2b00      	cmp	r3, #0
1000938e:	d00e      	beq.n	100093ae <xQueuePeekFromISR+0x62>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
10009390:	693b      	ldr	r3, [r7, #16]
10009392:	68db      	ldr	r3, [r3, #12]
10009394:	60bb      	str	r3, [r7, #8]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
10009396:	693a      	ldr	r2, [r7, #16]
10009398:	683b      	ldr	r3, [r7, #0]
1000939a:	1c10      	adds	r0, r2, #0
1000939c:	1c19      	adds	r1, r3, #0
1000939e:	f000 f8ff 	bl	100095a0 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
100093a2:	693b      	ldr	r3, [r7, #16]
100093a4:	68ba      	ldr	r2, [r7, #8]
100093a6:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
100093a8:	2301      	movs	r3, #1
100093aa:	617b      	str	r3, [r7, #20]
100093ac:	e001      	b.n	100093b2 <xQueuePeekFromISR+0x66>
		}
		else
		{
			xReturn = pdFAIL;
100093ae:	2300      	movs	r3, #0
100093b0:	617b      	str	r3, [r7, #20]
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
100093b2:	68fb      	ldr	r3, [r7, #12]
100093b4:	1c18      	adds	r0, r3, #0
100093b6:	f7ff f897 	bl	100084e8 <vClearInterruptMaskFromISR>

	return xReturn;
100093ba:	697b      	ldr	r3, [r7, #20]
}
100093bc:	1c18      	adds	r0, r3, #0
100093be:	46bd      	mov	sp, r7
100093c0:	b006      	add	sp, #24
100093c2:	bd80      	pop	{r7, pc}

100093c4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
100093c4:	b580      	push	{r7, lr}
100093c6:	b084      	sub	sp, #16
100093c8:	af00      	add	r7, sp, #0
100093ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
100093cc:	687b      	ldr	r3, [r7, #4]
100093ce:	2b00      	cmp	r3, #0
100093d0:	d101      	bne.n	100093d6 <uxQueueMessagesWaiting+0x12>
100093d2:	b672      	cpsid	i
100093d4:	e7fe      	b.n	100093d4 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
100093d6:	f7ff f85b 	bl	10008490 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
100093da:	687b      	ldr	r3, [r7, #4]
100093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100093de:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
100093e0:	f7ff f866 	bl	100084b0 <vPortExitCritical>

	return uxReturn;
100093e4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
100093e6:	1c18      	adds	r0, r3, #0
100093e8:	46bd      	mov	sp, r7
100093ea:	b004      	add	sp, #16
100093ec:	bd80      	pop	{r7, pc}
100093ee:	46c0      	nop			; (mov r8, r8)

100093f0 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
100093f0:	b580      	push	{r7, lr}
100093f2:	b084      	sub	sp, #16
100093f4:	af00      	add	r7, sp, #0
100093f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
100093f8:	687b      	ldr	r3, [r7, #4]
100093fa:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
100093fc:	68fb      	ldr	r3, [r7, #12]
100093fe:	2b00      	cmp	r3, #0
10009400:	d101      	bne.n	10009406 <uxQueueSpacesAvailable+0x16>
10009402:	b672      	cpsid	i
10009404:	e7fe      	b.n	10009404 <uxQueueSpacesAvailable+0x14>

	taskENTER_CRITICAL();
10009406:	f7ff f843 	bl	10008490 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1000940a:	68fb      	ldr	r3, [r7, #12]
1000940c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000940e:	68fb      	ldr	r3, [r7, #12]
10009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10009412:	1ad3      	subs	r3, r2, r3
10009414:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
10009416:	f7ff f84b 	bl	100084b0 <vPortExitCritical>

	return uxReturn;
1000941a:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1000941c:	1c18      	adds	r0, r3, #0
1000941e:	46bd      	mov	sp, r7
10009420:	b004      	add	sp, #16
10009422:	bd80      	pop	{r7, pc}

10009424 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
10009424:	b580      	push	{r7, lr}
10009426:	b084      	sub	sp, #16
10009428:	af00      	add	r7, sp, #0
1000942a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
1000942c:	687b      	ldr	r3, [r7, #4]
1000942e:	2b00      	cmp	r3, #0
10009430:	d101      	bne.n	10009436 <uxQueueMessagesWaitingFromISR+0x12>
10009432:	b672      	cpsid	i
10009434:	e7fe      	b.n	10009434 <uxQueueMessagesWaitingFromISR+0x10>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
10009436:	687b      	ldr	r3, [r7, #4]
10009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000943a:	60fb      	str	r3, [r7, #12]

	return uxReturn;
1000943c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1000943e:	1c18      	adds	r0, r3, #0
10009440:	46bd      	mov	sp, r7
10009442:	b004      	add	sp, #16
10009444:	bd80      	pop	{r7, pc}
10009446:	46c0      	nop			; (mov r8, r8)

10009448 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
10009448:	b580      	push	{r7, lr}
1000944a:	b084      	sub	sp, #16
1000944c:	af00      	add	r7, sp, #0
1000944e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
10009450:	687b      	ldr	r3, [r7, #4]
10009452:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
10009454:	68fb      	ldr	r3, [r7, #12]
10009456:	2b00      	cmp	r3, #0
10009458:	d101      	bne.n	1000945e <vQueueDelete+0x16>
1000945a:	b672      	cpsid	i
1000945c:	e7fe      	b.n	1000945c <vQueueDelete+0x14>

	traceQUEUE_DELETE( pxQueue );
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
1000945e:	68fb      	ldr	r3, [r7, #12]
10009460:	1c18      	adds	r0, r3, #0
10009462:	f000 f997 	bl	10009794 <vQueueUnregisterQueue>
	}
	#endif
	if( pxQueue->pcHead != NULL )
10009466:	68fb      	ldr	r3, [r7, #12]
10009468:	681b      	ldr	r3, [r3, #0]
1000946a:	2b00      	cmp	r3, #0
1000946c:	d004      	beq.n	10009478 <vQueueDelete+0x30>
	{
		vPortFree( pxQueue->pcHead );
1000946e:	68fb      	ldr	r3, [r7, #12]
10009470:	681b      	ldr	r3, [r3, #0]
10009472:	1c18      	adds	r0, r3, #0
10009474:	f7fe ff60 	bl	10008338 <vPortFree>
	}
	vPortFree( pxQueue );
10009478:	68fb      	ldr	r3, [r7, #12]
1000947a:	1c18      	adds	r0, r3, #0
1000947c:	f7fe ff5c 	bl	10008338 <vPortFree>
}
10009480:	46bd      	mov	sp, r7
10009482:	b004      	add	sp, #16
10009484:	bd80      	pop	{r7, pc}
10009486:	46c0      	nop			; (mov r8, r8)

10009488 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
10009488:	b580      	push	{r7, lr}
1000948a:	b082      	sub	sp, #8
1000948c:	af00      	add	r7, sp, #0
1000948e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
10009490:	687b      	ldr	r3, [r7, #4]
10009492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
10009494:	1c18      	adds	r0, r3, #0
10009496:	46bd      	mov	sp, r7
10009498:	b002      	add	sp, #8
1000949a:	bd80      	pop	{r7, pc}

1000949c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
1000949c:	b580      	push	{r7, lr}
1000949e:	b082      	sub	sp, #8
100094a0:	af00      	add	r7, sp, #0
100094a2:	6078      	str	r0, [r7, #4]
100094a4:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
100094a6:	687b      	ldr	r3, [r7, #4]
100094a8:	683a      	ldr	r2, [r7, #0]
100094aa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
100094ac:	46bd      	mov	sp, r7
100094ae:	b002      	add	sp, #8
100094b0:	bd80      	pop	{r7, pc}
100094b2:	46c0      	nop			; (mov r8, r8)

100094b4 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
100094b4:	b580      	push	{r7, lr}
100094b6:	b082      	sub	sp, #8
100094b8:	af00      	add	r7, sp, #0
100094ba:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
100094bc:	687a      	ldr	r2, [r7, #4]
100094be:	2350      	movs	r3, #80	; 0x50
100094c0:	5cd3      	ldrb	r3, [r2, r3]
	}
100094c2:	1c18      	adds	r0, r3, #0
100094c4:	46bd      	mov	sp, r7
100094c6:	b002      	add	sp, #8
100094c8:	bd80      	pop	{r7, pc}
100094ca:	46c0      	nop			; (mov r8, r8)

100094cc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
100094cc:	b580      	push	{r7, lr}
100094ce:	b084      	sub	sp, #16
100094d0:	af00      	add	r7, sp, #0
100094d2:	60f8      	str	r0, [r7, #12]
100094d4:	60b9      	str	r1, [r7, #8]
100094d6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
100094d8:	68fb      	ldr	r3, [r7, #12]
100094da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100094dc:	2b00      	cmp	r3, #0
100094de:	d10c      	bne.n	100094fa <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
100094e0:	68fb      	ldr	r3, [r7, #12]
100094e2:	681b      	ldr	r3, [r3, #0]
100094e4:	2b00      	cmp	r3, #0
100094e6:	d153      	bne.n	10009590 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
100094e8:	68fb      	ldr	r3, [r7, #12]
100094ea:	685b      	ldr	r3, [r3, #4]
100094ec:	1c18      	adds	r0, r3, #0
100094ee:	f7fe fb6d 	bl	10007bcc <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
100094f2:	68fb      	ldr	r3, [r7, #12]
100094f4:	2200      	movs	r2, #0
100094f6:	605a      	str	r2, [r3, #4]
100094f8:	e04a      	b.n	10009590 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
100094fa:	687b      	ldr	r3, [r7, #4]
100094fc:	2b00      	cmp	r3, #0
100094fe:	d11b      	bne.n	10009538 <prvCopyDataToQueue+0x6c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
10009500:	68fb      	ldr	r3, [r7, #12]
10009502:	6899      	ldr	r1, [r3, #8]
10009504:	68fb      	ldr	r3, [r7, #12]
10009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10009508:	68ba      	ldr	r2, [r7, #8]
1000950a:	1c08      	adds	r0, r1, #0
1000950c:	1c11      	adds	r1, r2, #0
1000950e:	1c1a      	adds	r2, r3, #0
10009510:	f001 f818 	bl	1000a544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
10009514:	68fb      	ldr	r3, [r7, #12]
10009516:	689a      	ldr	r2, [r3, #8]
10009518:	68fb      	ldr	r3, [r7, #12]
1000951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000951c:	18d2      	adds	r2, r2, r3
1000951e:	68fb      	ldr	r3, [r7, #12]
10009520:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
10009522:	68fb      	ldr	r3, [r7, #12]
10009524:	689a      	ldr	r2, [r3, #8]
10009526:	68fb      	ldr	r3, [r7, #12]
10009528:	685b      	ldr	r3, [r3, #4]
1000952a:	429a      	cmp	r2, r3
1000952c:	d330      	bcc.n	10009590 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1000952e:	68fb      	ldr	r3, [r7, #12]
10009530:	681a      	ldr	r2, [r3, #0]
10009532:	68fb      	ldr	r3, [r7, #12]
10009534:	609a      	str	r2, [r3, #8]
10009536:	e02b      	b.n	10009590 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10009538:	68fb      	ldr	r3, [r7, #12]
1000953a:	68d9      	ldr	r1, [r3, #12]
1000953c:	68fb      	ldr	r3, [r7, #12]
1000953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10009540:	68ba      	ldr	r2, [r7, #8]
10009542:	1c08      	adds	r0, r1, #0
10009544:	1c11      	adds	r1, r2, #0
10009546:	1c1a      	adds	r2, r3, #0
10009548:	f000 fffc 	bl	1000a544 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1000954c:	68fb      	ldr	r3, [r7, #12]
1000954e:	68da      	ldr	r2, [r3, #12]
10009550:	68fb      	ldr	r3, [r7, #12]
10009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10009554:	425b      	negs	r3, r3
10009556:	18d2      	adds	r2, r2, r3
10009558:	68fb      	ldr	r3, [r7, #12]
1000955a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1000955c:	68fb      	ldr	r3, [r7, #12]
1000955e:	68da      	ldr	r2, [r3, #12]
10009560:	68fb      	ldr	r3, [r7, #12]
10009562:	681b      	ldr	r3, [r3, #0]
10009564:	429a      	cmp	r2, r3
10009566:	d207      	bcs.n	10009578 <prvCopyDataToQueue+0xac>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
10009568:	68fb      	ldr	r3, [r7, #12]
1000956a:	685a      	ldr	r2, [r3, #4]
1000956c:	68fb      	ldr	r3, [r7, #12]
1000956e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10009570:	425b      	negs	r3, r3
10009572:	18d2      	adds	r2, r2, r3
10009574:	68fb      	ldr	r3, [r7, #12]
10009576:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
10009578:	687b      	ldr	r3, [r7, #4]
1000957a:	2b02      	cmp	r3, #2
1000957c:	d108      	bne.n	10009590 <prvCopyDataToQueue+0xc4>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1000957e:	68fb      	ldr	r3, [r7, #12]
10009580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10009582:	2b00      	cmp	r3, #0
10009584:	d004      	beq.n	10009590 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
10009586:	68fb      	ldr	r3, [r7, #12]
10009588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000958a:	1e5a      	subs	r2, r3, #1
1000958c:	68fb      	ldr	r3, [r7, #12]
1000958e:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
10009590:	68fb      	ldr	r3, [r7, #12]
10009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10009594:	1c5a      	adds	r2, r3, #1
10009596:	68fb      	ldr	r3, [r7, #12]
10009598:	639a      	str	r2, [r3, #56]	; 0x38
}
1000959a:	46bd      	mov	sp, r7
1000959c:	b004      	add	sp, #16
1000959e:	bd80      	pop	{r7, pc}

100095a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
100095a0:	b580      	push	{r7, lr}
100095a2:	b082      	sub	sp, #8
100095a4:	af00      	add	r7, sp, #0
100095a6:	6078      	str	r0, [r7, #4]
100095a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
100095aa:	687b      	ldr	r3, [r7, #4]
100095ac:	681b      	ldr	r3, [r3, #0]
100095ae:	2b00      	cmp	r3, #0
100095b0:	d01a      	beq.n	100095e8 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
100095b2:	687b      	ldr	r3, [r7, #4]
100095b4:	68da      	ldr	r2, [r3, #12]
100095b6:	687b      	ldr	r3, [r7, #4]
100095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100095ba:	18d2      	adds	r2, r2, r3
100095bc:	687b      	ldr	r3, [r7, #4]
100095be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
100095c0:	687b      	ldr	r3, [r7, #4]
100095c2:	68da      	ldr	r2, [r3, #12]
100095c4:	687b      	ldr	r3, [r7, #4]
100095c6:	685b      	ldr	r3, [r3, #4]
100095c8:	429a      	cmp	r2, r3
100095ca:	d303      	bcc.n	100095d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
100095cc:	687b      	ldr	r3, [r7, #4]
100095ce:	681a      	ldr	r2, [r3, #0]
100095d0:	687b      	ldr	r3, [r7, #4]
100095d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
100095d4:	687b      	ldr	r3, [r7, #4]
100095d6:	68da      	ldr	r2, [r3, #12]
100095d8:	687b      	ldr	r3, [r7, #4]
100095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100095dc:	6839      	ldr	r1, [r7, #0]
100095de:	1c08      	adds	r0, r1, #0
100095e0:	1c11      	adds	r1, r2, #0
100095e2:	1c1a      	adds	r2, r3, #0
100095e4:	f000 ffae 	bl	1000a544 <memcpy>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
100095e8:	46bd      	mov	sp, r7
100095ea:	b002      	add	sp, #8
100095ec:	bd80      	pop	{r7, pc}
100095ee:	46c0      	nop			; (mov r8, r8)

100095f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
100095f0:	b580      	push	{r7, lr}
100095f2:	b082      	sub	sp, #8
100095f4:	af00      	add	r7, sp, #0
100095f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
100095f8:	f7fe ff4a 	bl	10008490 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
100095fc:	e012      	b.n	10009624 <prvUnlockQueue+0x34>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
100095fe:	687b      	ldr	r3, [r7, #4]
10009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009602:	2b00      	cmp	r3, #0
10009604:	d013      	beq.n	1000962e <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
10009606:	687b      	ldr	r3, [r7, #4]
10009608:	3324      	adds	r3, #36	; 0x24
1000960a:	1c18      	adds	r0, r3, #0
1000960c:	f7fd fef4 	bl	100073f8 <xTaskRemoveFromEventList>
10009610:	1c03      	adds	r3, r0, #0
10009612:	2b00      	cmp	r3, #0
10009614:	d001      	beq.n	1000961a <prvUnlockQueue+0x2a>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
10009616:	f7fe f809 	bl	1000762c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
1000961a:	687b      	ldr	r3, [r7, #4]
1000961c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000961e:	1e5a      	subs	r2, r3, #1
10009620:	687b      	ldr	r3, [r7, #4]
10009622:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
10009624:	687b      	ldr	r3, [r7, #4]
10009626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10009628:	2b00      	cmp	r3, #0
1000962a:	dce8      	bgt.n	100095fe <prvUnlockQueue+0xe>
1000962c:	e000      	b.n	10009630 <prvUnlockQueue+0x40>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
1000962e:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
10009630:	687b      	ldr	r3, [r7, #4]
10009632:	2201      	movs	r2, #1
10009634:	4252      	negs	r2, r2
10009636:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
10009638:	f7fe ff3a 	bl	100084b0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1000963c:	f7fe ff28 	bl	10008490 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
10009640:	e012      	b.n	10009668 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10009642:	687b      	ldr	r3, [r7, #4]
10009644:	691b      	ldr	r3, [r3, #16]
10009646:	2b00      	cmp	r3, #0
10009648:	d013      	beq.n	10009672 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1000964a:	687b      	ldr	r3, [r7, #4]
1000964c:	3310      	adds	r3, #16
1000964e:	1c18      	adds	r0, r3, #0
10009650:	f7fd fed2 	bl	100073f8 <xTaskRemoveFromEventList>
10009654:	1c03      	adds	r3, r0, #0
10009656:	2b00      	cmp	r3, #0
10009658:	d001      	beq.n	1000965e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
1000965a:	f7fd ffe7 	bl	1000762c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
1000965e:	687b      	ldr	r3, [r7, #4]
10009660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10009662:	1e5a      	subs	r2, r3, #1
10009664:	687b      	ldr	r3, [r7, #4]
10009666:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
10009668:	687b      	ldr	r3, [r7, #4]
1000966a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000966c:	2b00      	cmp	r3, #0
1000966e:	dce8      	bgt.n	10009642 <prvUnlockQueue+0x52>
10009670:	e000      	b.n	10009674 <prvUnlockQueue+0x84>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
10009672:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
10009674:	687b      	ldr	r3, [r7, #4]
10009676:	2201      	movs	r2, #1
10009678:	4252      	negs	r2, r2
1000967a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
1000967c:	f7fe ff18 	bl	100084b0 <vPortExitCritical>
}
10009680:	46bd      	mov	sp, r7
10009682:	b002      	add	sp, #8
10009684:	bd80      	pop	{r7, pc}
10009686:	46c0      	nop			; (mov r8, r8)

10009688 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
10009688:	b580      	push	{r7, lr}
1000968a:	b084      	sub	sp, #16
1000968c:	af00      	add	r7, sp, #0
1000968e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
10009690:	f7fe fefe 	bl	10008490 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
10009694:	687b      	ldr	r3, [r7, #4]
10009696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10009698:	2b00      	cmp	r3, #0
1000969a:	d102      	bne.n	100096a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
1000969c:	2301      	movs	r3, #1
1000969e:	60fb      	str	r3, [r7, #12]
100096a0:	e001      	b.n	100096a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
100096a2:	2300      	movs	r3, #0
100096a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
100096a6:	f7fe ff03 	bl	100084b0 <vPortExitCritical>

	return xReturn;
100096aa:	68fb      	ldr	r3, [r7, #12]
}
100096ac:	1c18      	adds	r0, r3, #0
100096ae:	46bd      	mov	sp, r7
100096b0:	b004      	add	sp, #16
100096b2:	bd80      	pop	{r7, pc}

100096b4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
100096b4:	b580      	push	{r7, lr}
100096b6:	b084      	sub	sp, #16
100096b8:	af00      	add	r7, sp, #0
100096ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
100096bc:	687b      	ldr	r3, [r7, #4]
100096be:	2b00      	cmp	r3, #0
100096c0:	d101      	bne.n	100096c6 <xQueueIsQueueEmptyFromISR+0x12>
100096c2:	b672      	cpsid	i
100096c4:	e7fe      	b.n	100096c4 <xQueueIsQueueEmptyFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
100096c6:	687b      	ldr	r3, [r7, #4]
100096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100096ca:	2b00      	cmp	r3, #0
100096cc:	d102      	bne.n	100096d4 <xQueueIsQueueEmptyFromISR+0x20>
	{
		xReturn = pdTRUE;
100096ce:	2301      	movs	r3, #1
100096d0:	60fb      	str	r3, [r7, #12]
100096d2:	e001      	b.n	100096d8 <xQueueIsQueueEmptyFromISR+0x24>
	}
	else
	{
		xReturn = pdFALSE;
100096d4:	2300      	movs	r3, #0
100096d6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
100096d8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
100096da:	1c18      	adds	r0, r3, #0
100096dc:	46bd      	mov	sp, r7
100096de:	b004      	add	sp, #16
100096e0:	bd80      	pop	{r7, pc}
100096e2:	46c0      	nop			; (mov r8, r8)

100096e4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
100096e4:	b580      	push	{r7, lr}
100096e6:	b084      	sub	sp, #16
100096e8:	af00      	add	r7, sp, #0
100096ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
100096ec:	f7fe fed0 	bl	10008490 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
100096f0:	687b      	ldr	r3, [r7, #4]
100096f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
100096f4:	687b      	ldr	r3, [r7, #4]
100096f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100096f8:	429a      	cmp	r2, r3
100096fa:	d102      	bne.n	10009702 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
100096fc:	2301      	movs	r3, #1
100096fe:	60fb      	str	r3, [r7, #12]
10009700:	e001      	b.n	10009706 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
10009702:	2300      	movs	r3, #0
10009704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
10009706:	f7fe fed3 	bl	100084b0 <vPortExitCritical>

	return xReturn;
1000970a:	68fb      	ldr	r3, [r7, #12]
}
1000970c:	1c18      	adds	r0, r3, #0
1000970e:	46bd      	mov	sp, r7
10009710:	b004      	add	sp, #16
10009712:	bd80      	pop	{r7, pc}

10009714 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
10009714:	b580      	push	{r7, lr}
10009716:	b084      	sub	sp, #16
10009718:	af00      	add	r7, sp, #0
1000971a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
1000971c:	687b      	ldr	r3, [r7, #4]
1000971e:	2b00      	cmp	r3, #0
10009720:	d101      	bne.n	10009726 <xQueueIsQueueFullFromISR+0x12>
10009722:	b672      	cpsid	i
10009724:	e7fe      	b.n	10009724 <xQueueIsQueueFullFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
10009726:	687b      	ldr	r3, [r7, #4]
10009728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000972a:	687b      	ldr	r3, [r7, #4]
1000972c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000972e:	429a      	cmp	r2, r3
10009730:	d102      	bne.n	10009738 <xQueueIsQueueFullFromISR+0x24>
	{
		xReturn = pdTRUE;
10009732:	2301      	movs	r3, #1
10009734:	60fb      	str	r3, [r7, #12]
10009736:	e001      	b.n	1000973c <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
10009738:	2300      	movs	r3, #0
1000973a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
1000973c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1000973e:	1c18      	adds	r0, r3, #0
10009740:	46bd      	mov	sp, r7
10009742:	b004      	add	sp, #16
10009744:	bd80      	pop	{r7, pc}
10009746:	46c0      	nop			; (mov r8, r8)

10009748 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
10009748:	b580      	push	{r7, lr}
1000974a:	b084      	sub	sp, #16
1000974c:	af00      	add	r7, sp, #0
1000974e:	6078      	str	r0, [r7, #4]
10009750:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
10009752:	2300      	movs	r3, #0
10009754:	60fb      	str	r3, [r7, #12]
10009756:	e015      	b.n	10009784 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
10009758:	4b0d      	ldr	r3, [pc, #52]	; (10009790 <vQueueAddToRegistry+0x48>)
1000975a:	68fa      	ldr	r2, [r7, #12]
1000975c:	00d2      	lsls	r2, r2, #3
1000975e:	58d3      	ldr	r3, [r2, r3]
10009760:	2b00      	cmp	r3, #0
10009762:	d10c      	bne.n	1000977e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
10009764:	4b0a      	ldr	r3, [pc, #40]	; (10009790 <vQueueAddToRegistry+0x48>)
10009766:	68fa      	ldr	r2, [r7, #12]
10009768:	00d2      	lsls	r2, r2, #3
1000976a:	6839      	ldr	r1, [r7, #0]
1000976c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1000976e:	4a08      	ldr	r2, [pc, #32]	; (10009790 <vQueueAddToRegistry+0x48>)
10009770:	68fb      	ldr	r3, [r7, #12]
10009772:	00db      	lsls	r3, r3, #3
10009774:	18d3      	adds	r3, r2, r3
10009776:	3304      	adds	r3, #4
10009778:	687a      	ldr	r2, [r7, #4]
1000977a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1000977c:	e005      	b.n	1000978a <vQueueAddToRegistry+0x42>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1000977e:	68fb      	ldr	r3, [r7, #12]
10009780:	3301      	adds	r3, #1
10009782:	60fb      	str	r3, [r7, #12]
10009784:	68fb      	ldr	r3, [r7, #12]
10009786:	2b07      	cmp	r3, #7
10009788:	d9e6      	bls.n	10009758 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1000978a:	46bd      	mov	sp, r7
1000978c:	b004      	add	sp, #16
1000978e:	bd80      	pop	{r7, pc}
10009790:	20001fec 	.word	0x20001fec

10009794 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
10009794:	b580      	push	{r7, lr}
10009796:	b084      	sub	sp, #16
10009798:	af00      	add	r7, sp, #0
1000979a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1000979c:	2300      	movs	r3, #0
1000979e:	60fb      	str	r3, [r7, #12]
100097a0:	e011      	b.n	100097c6 <vQueueUnregisterQueue+0x32>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
100097a2:	4a0c      	ldr	r2, [pc, #48]	; (100097d4 <vQueueUnregisterQueue+0x40>)
100097a4:	68fb      	ldr	r3, [r7, #12]
100097a6:	00db      	lsls	r3, r3, #3
100097a8:	18d3      	adds	r3, r2, r3
100097aa:	3304      	adds	r3, #4
100097ac:	681a      	ldr	r2, [r3, #0]
100097ae:	687b      	ldr	r3, [r7, #4]
100097b0:	429a      	cmp	r2, r3
100097b2:	d105      	bne.n	100097c0 <vQueueUnregisterQueue+0x2c>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
100097b4:	4b07      	ldr	r3, [pc, #28]	; (100097d4 <vQueueUnregisterQueue+0x40>)
100097b6:	68fa      	ldr	r2, [r7, #12]
100097b8:	00d2      	lsls	r2, r2, #3
100097ba:	2100      	movs	r1, #0
100097bc:	50d1      	str	r1, [r2, r3]
				break;
100097be:	e005      	b.n	100097cc <vQueueUnregisterQueue+0x38>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
100097c0:	68fb      	ldr	r3, [r7, #12]
100097c2:	3301      	adds	r3, #1
100097c4:	60fb      	str	r3, [r7, #12]
100097c6:	68fb      	ldr	r3, [r7, #12]
100097c8:	2b07      	cmp	r3, #7
100097ca:	d9ea      	bls.n	100097a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
100097cc:	46bd      	mov	sp, r7
100097ce:	b004      	add	sp, #16
100097d0:	bd80      	pop	{r7, pc}
100097d2:	46c0      	nop			; (mov r8, r8)
100097d4:	20001fec 	.word	0x20001fec

100097d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
100097d8:	b580      	push	{r7, lr}
100097da:	b084      	sub	sp, #16
100097dc:	af00      	add	r7, sp, #0
100097de:	6078      	str	r0, [r7, #4]
100097e0:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
100097e2:	687b      	ldr	r3, [r7, #4]
100097e4:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
100097e6:	f7fe fe53 	bl	10008490 <vPortEnterCritical>
100097ea:	68fb      	ldr	r3, [r7, #12]
100097ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100097ee:	3301      	adds	r3, #1
100097f0:	d102      	bne.n	100097f8 <vQueueWaitForMessageRestricted+0x20>
100097f2:	68fb      	ldr	r3, [r7, #12]
100097f4:	2200      	movs	r2, #0
100097f6:	645a      	str	r2, [r3, #68]	; 0x44
100097f8:	68fb      	ldr	r3, [r7, #12]
100097fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100097fc:	3301      	adds	r3, #1
100097fe:	d102      	bne.n	10009806 <vQueueWaitForMessageRestricted+0x2e>
10009800:	68fb      	ldr	r3, [r7, #12]
10009802:	2200      	movs	r2, #0
10009804:	649a      	str	r2, [r3, #72]	; 0x48
10009806:	f7fe fe53 	bl	100084b0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1000980a:	68fb      	ldr	r3, [r7, #12]
1000980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000980e:	2b00      	cmp	r3, #0
10009810:	d107      	bne.n	10009822 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
10009812:	68fb      	ldr	r3, [r7, #12]
10009814:	1c1a      	adds	r2, r3, #0
10009816:	3224      	adds	r2, #36	; 0x24
10009818:	683b      	ldr	r3, [r7, #0]
1000981a:	1c10      	adds	r0, r2, #0
1000981c:	1c19      	adds	r1, r3, #0
1000981e:	f7fd fdc3 	bl	100073a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
10009822:	68fb      	ldr	r3, [r7, #12]
10009824:	1c18      	adds	r0, r3, #0
10009826:	f7ff fee3 	bl	100095f0 <prvUnlockQueue>
	}
1000982a:	46bd      	mov	sp, r7
1000982c:	b004      	add	sp, #16
1000982e:	bd80      	pop	{r7, pc}

10009830 <__aeabi_uidiv>:
10009830:	2900      	cmp	r1, #0
10009832:	d034      	beq.n	1000989e <.udivsi3_skip_div0_test+0x6a>

10009834 <.udivsi3_skip_div0_test>:
10009834:	2301      	movs	r3, #1
10009836:	2200      	movs	r2, #0
10009838:	b410      	push	{r4}
1000983a:	4288      	cmp	r0, r1
1000983c:	d32c      	bcc.n	10009898 <.udivsi3_skip_div0_test+0x64>
1000983e:	2401      	movs	r4, #1
10009840:	0724      	lsls	r4, r4, #28
10009842:	42a1      	cmp	r1, r4
10009844:	d204      	bcs.n	10009850 <.udivsi3_skip_div0_test+0x1c>
10009846:	4281      	cmp	r1, r0
10009848:	d202      	bcs.n	10009850 <.udivsi3_skip_div0_test+0x1c>
1000984a:	0109      	lsls	r1, r1, #4
1000984c:	011b      	lsls	r3, r3, #4
1000984e:	e7f8      	b.n	10009842 <.udivsi3_skip_div0_test+0xe>
10009850:	00e4      	lsls	r4, r4, #3
10009852:	42a1      	cmp	r1, r4
10009854:	d204      	bcs.n	10009860 <.udivsi3_skip_div0_test+0x2c>
10009856:	4281      	cmp	r1, r0
10009858:	d202      	bcs.n	10009860 <.udivsi3_skip_div0_test+0x2c>
1000985a:	0049      	lsls	r1, r1, #1
1000985c:	005b      	lsls	r3, r3, #1
1000985e:	e7f8      	b.n	10009852 <.udivsi3_skip_div0_test+0x1e>
10009860:	4288      	cmp	r0, r1
10009862:	d301      	bcc.n	10009868 <.udivsi3_skip_div0_test+0x34>
10009864:	1a40      	subs	r0, r0, r1
10009866:	431a      	orrs	r2, r3
10009868:	084c      	lsrs	r4, r1, #1
1000986a:	42a0      	cmp	r0, r4
1000986c:	d302      	bcc.n	10009874 <.udivsi3_skip_div0_test+0x40>
1000986e:	1b00      	subs	r0, r0, r4
10009870:	085c      	lsrs	r4, r3, #1
10009872:	4322      	orrs	r2, r4
10009874:	088c      	lsrs	r4, r1, #2
10009876:	42a0      	cmp	r0, r4
10009878:	d302      	bcc.n	10009880 <.udivsi3_skip_div0_test+0x4c>
1000987a:	1b00      	subs	r0, r0, r4
1000987c:	089c      	lsrs	r4, r3, #2
1000987e:	4322      	orrs	r2, r4
10009880:	08cc      	lsrs	r4, r1, #3
10009882:	42a0      	cmp	r0, r4
10009884:	d302      	bcc.n	1000988c <.udivsi3_skip_div0_test+0x58>
10009886:	1b00      	subs	r0, r0, r4
10009888:	08dc      	lsrs	r4, r3, #3
1000988a:	4322      	orrs	r2, r4
1000988c:	2800      	cmp	r0, #0
1000988e:	d003      	beq.n	10009898 <.udivsi3_skip_div0_test+0x64>
10009890:	091b      	lsrs	r3, r3, #4
10009892:	d001      	beq.n	10009898 <.udivsi3_skip_div0_test+0x64>
10009894:	0909      	lsrs	r1, r1, #4
10009896:	e7e3      	b.n	10009860 <.udivsi3_skip_div0_test+0x2c>
10009898:	1c10      	adds	r0, r2, #0
1000989a:	bc10      	pop	{r4}
1000989c:	4770      	bx	lr
1000989e:	2800      	cmp	r0, #0
100098a0:	d001      	beq.n	100098a6 <.udivsi3_skip_div0_test+0x72>
100098a2:	2000      	movs	r0, #0
100098a4:	43c0      	mvns	r0, r0
100098a6:	b407      	push	{r0, r1, r2}
100098a8:	4802      	ldr	r0, [pc, #8]	; (100098b4 <.udivsi3_skip_div0_test+0x80>)
100098aa:	a102      	add	r1, pc, #8	; (adr r1, 100098b4 <.udivsi3_skip_div0_test+0x80>)
100098ac:	1840      	adds	r0, r0, r1
100098ae:	9002      	str	r0, [sp, #8]
100098b0:	bd03      	pop	{r0, r1, pc}
100098b2:	46c0      	nop			; (mov r8, r8)
100098b4:	00000019 	.word	0x00000019

100098b8 <__aeabi_uidivmod>:
100098b8:	2900      	cmp	r1, #0
100098ba:	d0f0      	beq.n	1000989e <.udivsi3_skip_div0_test+0x6a>
100098bc:	b503      	push	{r0, r1, lr}
100098be:	f7ff ffb9 	bl	10009834 <.udivsi3_skip_div0_test>
100098c2:	bc0e      	pop	{r1, r2, r3}
100098c4:	4342      	muls	r2, r0
100098c6:	1a89      	subs	r1, r1, r2
100098c8:	4718      	bx	r3
100098ca:	46c0      	nop			; (mov r8, r8)

100098cc <__aeabi_idiv0>:
100098cc:	4770      	bx	lr
100098ce:	46c0      	nop			; (mov r8, r8)

100098d0 <__aeabi_cfrcmple>:
100098d0:	4684      	mov	ip, r0
100098d2:	1c08      	adds	r0, r1, #0
100098d4:	4661      	mov	r1, ip
100098d6:	e7ff      	b.n	100098d8 <__aeabi_cfcmpeq>

100098d8 <__aeabi_cfcmpeq>:
100098d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100098da:	f000 f9f5 	bl	10009cc8 <__lesf2>
100098de:	2800      	cmp	r0, #0
100098e0:	d401      	bmi.n	100098e6 <__aeabi_cfcmpeq+0xe>
100098e2:	2100      	movs	r1, #0
100098e4:	42c8      	cmn	r0, r1
100098e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100098e8 <__aeabi_fcmpeq>:
100098e8:	b510      	push	{r4, lr}
100098ea:	f000 f97d 	bl	10009be8 <__eqsf2>
100098ee:	4240      	negs	r0, r0
100098f0:	3001      	adds	r0, #1
100098f2:	bd10      	pop	{r4, pc}

100098f4 <__aeabi_fcmplt>:
100098f4:	b510      	push	{r4, lr}
100098f6:	f000 f9e7 	bl	10009cc8 <__lesf2>
100098fa:	2800      	cmp	r0, #0
100098fc:	db01      	blt.n	10009902 <__aeabi_fcmplt+0xe>
100098fe:	2000      	movs	r0, #0
10009900:	bd10      	pop	{r4, pc}
10009902:	2001      	movs	r0, #1
10009904:	bd10      	pop	{r4, pc}
10009906:	46c0      	nop			; (mov r8, r8)

10009908 <__aeabi_fcmple>:
10009908:	b510      	push	{r4, lr}
1000990a:	f000 f9dd 	bl	10009cc8 <__lesf2>
1000990e:	2800      	cmp	r0, #0
10009910:	dd01      	ble.n	10009916 <__aeabi_fcmple+0xe>
10009912:	2000      	movs	r0, #0
10009914:	bd10      	pop	{r4, pc}
10009916:	2001      	movs	r0, #1
10009918:	bd10      	pop	{r4, pc}
1000991a:	46c0      	nop			; (mov r8, r8)

1000991c <__aeabi_fcmpgt>:
1000991c:	b510      	push	{r4, lr}
1000991e:	f000 f98b 	bl	10009c38 <__gesf2>
10009922:	2800      	cmp	r0, #0
10009924:	dc01      	bgt.n	1000992a <__aeabi_fcmpgt+0xe>
10009926:	2000      	movs	r0, #0
10009928:	bd10      	pop	{r4, pc}
1000992a:	2001      	movs	r0, #1
1000992c:	bd10      	pop	{r4, pc}
1000992e:	46c0      	nop			; (mov r8, r8)

10009930 <__aeabi_fcmpge>:
10009930:	b510      	push	{r4, lr}
10009932:	f000 f981 	bl	10009c38 <__gesf2>
10009936:	2800      	cmp	r0, #0
10009938:	da01      	bge.n	1000993e <__aeabi_fcmpge+0xe>
1000993a:	2000      	movs	r0, #0
1000993c:	bd10      	pop	{r4, pc}
1000993e:	2001      	movs	r0, #1
10009940:	bd10      	pop	{r4, pc}
10009942:	46c0      	nop			; (mov r8, r8)

10009944 <__aeabi_f2uiz>:
10009944:	219e      	movs	r1, #158	; 0x9e
10009946:	b510      	push	{r4, lr}
10009948:	05c9      	lsls	r1, r1, #23
1000994a:	1c04      	adds	r4, r0, #0
1000994c:	f7ff fff0 	bl	10009930 <__aeabi_fcmpge>
10009950:	2800      	cmp	r0, #0
10009952:	d103      	bne.n	1000995c <__aeabi_f2uiz+0x18>
10009954:	1c20      	adds	r0, r4, #0
10009956:	f000 fd09 	bl	1000a36c <__aeabi_f2iz>
1000995a:	bd10      	pop	{r4, pc}
1000995c:	229e      	movs	r2, #158	; 0x9e
1000995e:	1c20      	adds	r0, r4, #0
10009960:	05d1      	lsls	r1, r2, #23
10009962:	f000 fb29 	bl	10009fb8 <__aeabi_fsub>
10009966:	f000 fd01 	bl	1000a36c <__aeabi_f2iz>
1000996a:	2380      	movs	r3, #128	; 0x80
1000996c:	061c      	lsls	r4, r3, #24
1000996e:	1900      	adds	r0, r0, r4
10009970:	e7f3      	b.n	1000995a <__aeabi_f2uiz+0x16>
10009972:	46c0      	nop			; (mov r8, r8)

10009974 <__aeabi_fdiv>:
10009974:	b5f0      	push	{r4, r5, r6, r7, lr}
10009976:	465f      	mov	r7, fp
10009978:	4656      	mov	r6, sl
1000997a:	464d      	mov	r5, r9
1000997c:	4644      	mov	r4, r8
1000997e:	b4f0      	push	{r4, r5, r6, r7}
10009980:	0245      	lsls	r5, r0, #9
10009982:	0044      	lsls	r4, r0, #1
10009984:	b083      	sub	sp, #12
10009986:	1c0e      	adds	r6, r1, #0
10009988:	0a6d      	lsrs	r5, r5, #9
1000998a:	0e24      	lsrs	r4, r4, #24
1000998c:	0fc7      	lsrs	r7, r0, #31
1000998e:	2c00      	cmp	r4, #0
10009990:	d107      	bne.n	100099a2 <__aeabi_fdiv+0x2e>
10009992:	2d00      	cmp	r5, #0
10009994:	d000      	beq.n	10009998 <__aeabi_fdiv+0x24>
10009996:	e091      	b.n	10009abc <__aeabi_fdiv+0x148>
10009998:	2104      	movs	r1, #4
1000999a:	2201      	movs	r2, #1
1000999c:	4688      	mov	r8, r1
1000999e:	4692      	mov	sl, r2
100099a0:	e009      	b.n	100099b6 <__aeabi_fdiv+0x42>
100099a2:	2cff      	cmp	r4, #255	; 0xff
100099a4:	d055      	beq.n	10009a52 <__aeabi_fdiv+0xde>
100099a6:	2380      	movs	r3, #128	; 0x80
100099a8:	0418      	lsls	r0, r3, #16
100099aa:	2100      	movs	r1, #0
100099ac:	4305      	orrs	r5, r0
100099ae:	00ed      	lsls	r5, r5, #3
100099b0:	3c7f      	subs	r4, #127	; 0x7f
100099b2:	4688      	mov	r8, r1
100099b4:	468a      	mov	sl, r1
100099b6:	1c33      	adds	r3, r6, #0
100099b8:	0058      	lsls	r0, r3, #1
100099ba:	0276      	lsls	r6, r6, #9
100099bc:	0fd9      	lsrs	r1, r3, #31
100099be:	0a76      	lsrs	r6, r6, #9
100099c0:	0e00      	lsrs	r0, r0, #24
100099c2:	468b      	mov	fp, r1
100099c4:	d14c      	bne.n	10009a60 <__aeabi_fdiv+0xec>
100099c6:	2201      	movs	r2, #1
100099c8:	4694      	mov	ip, r2
100099ca:	2e00      	cmp	r6, #0
100099cc:	d000      	beq.n	100099d0 <__aeabi_fdiv+0x5c>
100099ce:	e081      	b.n	10009ad4 <__aeabi_fdiv+0x160>
100099d0:	465b      	mov	r3, fp
100099d2:	407b      	eors	r3, r7
100099d4:	4662      	mov	r2, ip
100099d6:	4641      	mov	r1, r8
100099d8:	9301      	str	r3, [sp, #4]
100099da:	430a      	orrs	r2, r1
100099dc:	2a0f      	cmp	r2, #15
100099de:	d950      	bls.n	10009a82 <__aeabi_fdiv+0x10e>
100099e0:	1a20      	subs	r0, r4, r0
100099e2:	0169      	lsls	r1, r5, #5
100099e4:	4681      	mov	r9, r0
100099e6:	0175      	lsls	r5, r6, #5
100099e8:	42a9      	cmp	r1, r5
100099ea:	d300      	bcc.n	100099ee <__aeabi_fdiv+0x7a>
100099ec:	e0b3      	b.n	10009b56 <__aeabi_fdiv+0x1e2>
100099ee:	2201      	movs	r2, #1
100099f0:	4253      	negs	r3, r2
100099f2:	4499      	add	r9, r3
100099f4:	241b      	movs	r4, #27
100099f6:	2600      	movs	r6, #0
100099f8:	2701      	movs	r7, #1
100099fa:	1e62      	subs	r2, r4, #1
100099fc:	1c38      	adds	r0, r7, #0
100099fe:	4010      	ands	r0, r2
10009a00:	004b      	lsls	r3, r1, #1
10009a02:	0076      	lsls	r6, r6, #1
10009a04:	2900      	cmp	r1, #0
10009a06:	da00      	bge.n	10009a0a <__aeabi_fdiv+0x96>
10009a08:	e0a9      	b.n	10009b5e <__aeabi_fdiv+0x1ea>
10009a0a:	429d      	cmp	r5, r3
10009a0c:	d800      	bhi.n	10009a10 <__aeabi_fdiv+0x9c>
10009a0e:	e0a6      	b.n	10009b5e <__aeabi_fdiv+0x1ea>
10009a10:	3c01      	subs	r4, #1
10009a12:	2c00      	cmp	r4, #0
10009a14:	dc00      	bgt.n	10009a18 <__aeabi_fdiv+0xa4>
10009a16:	e0ab      	b.n	10009b70 <__aeabi_fdiv+0x1fc>
10009a18:	2800      	cmp	r0, #0
10009a1a:	d00c      	beq.n	10009a36 <__aeabi_fdiv+0xc2>
10009a1c:	1c19      	adds	r1, r3, #0
10009a1e:	0076      	lsls	r6, r6, #1
10009a20:	005b      	lsls	r3, r3, #1
10009a22:	2900      	cmp	r1, #0
10009a24:	db01      	blt.n	10009a2a <__aeabi_fdiv+0xb6>
10009a26:	429d      	cmp	r5, r3
10009a28:	d801      	bhi.n	10009a2e <__aeabi_fdiv+0xba>
10009a2a:	1b5b      	subs	r3, r3, r5
10009a2c:	433e      	orrs	r6, r7
10009a2e:	3c01      	subs	r4, #1
10009a30:	2c00      	cmp	r4, #0
10009a32:	dc00      	bgt.n	10009a36 <__aeabi_fdiv+0xc2>
10009a34:	e09c      	b.n	10009b70 <__aeabi_fdiv+0x1fc>
10009a36:	0059      	lsls	r1, r3, #1
10009a38:	0072      	lsls	r2, r6, #1
10009a3a:	2b00      	cmp	r3, #0
10009a3c:	db01      	blt.n	10009a42 <__aeabi_fdiv+0xce>
10009a3e:	428d      	cmp	r5, r1
10009a40:	d801      	bhi.n	10009a46 <__aeabi_fdiv+0xd2>
10009a42:	1b49      	subs	r1, r1, r5
10009a44:	433a      	orrs	r2, r7
10009a46:	3c01      	subs	r4, #1
10009a48:	004b      	lsls	r3, r1, #1
10009a4a:	0056      	lsls	r6, r2, #1
10009a4c:	2900      	cmp	r1, #0
10009a4e:	daea      	bge.n	10009a26 <__aeabi_fdiv+0xb2>
10009a50:	e7eb      	b.n	10009a2a <__aeabi_fdiv+0xb6>
10009a52:	2d00      	cmp	r5, #0
10009a54:	d12d      	bne.n	10009ab2 <__aeabi_fdiv+0x13e>
10009a56:	2008      	movs	r0, #8
10009a58:	2102      	movs	r1, #2
10009a5a:	4680      	mov	r8, r0
10009a5c:	468a      	mov	sl, r1
10009a5e:	e7aa      	b.n	100099b6 <__aeabi_fdiv+0x42>
10009a60:	28ff      	cmp	r0, #255	; 0xff
10009a62:	d020      	beq.n	10009aa6 <__aeabi_fdiv+0x132>
10009a64:	2280      	movs	r2, #128	; 0x80
10009a66:	0413      	lsls	r3, r2, #16
10009a68:	2100      	movs	r1, #0
10009a6a:	431e      	orrs	r6, r3
10009a6c:	468c      	mov	ip, r1
10009a6e:	465b      	mov	r3, fp
10009a70:	407b      	eors	r3, r7
10009a72:	4662      	mov	r2, ip
10009a74:	4641      	mov	r1, r8
10009a76:	00f6      	lsls	r6, r6, #3
10009a78:	387f      	subs	r0, #127	; 0x7f
10009a7a:	9301      	str	r3, [sp, #4]
10009a7c:	430a      	orrs	r2, r1
10009a7e:	2a0f      	cmp	r2, #15
10009a80:	d8ae      	bhi.n	100099e0 <__aeabi_fdiv+0x6c>
10009a82:	4956      	ldr	r1, [pc, #344]	; (10009bdc <__aeabi_fdiv+0x268>)
10009a84:	0092      	lsls	r2, r2, #2
10009a86:	588a      	ldr	r2, [r1, r2]
10009a88:	4697      	mov	pc, r2
10009a8a:	9b01      	ldr	r3, [sp, #4]
10009a8c:	26ff      	movs	r6, #255	; 0xff
10009a8e:	2500      	movs	r5, #0
10009a90:	05f0      	lsls	r0, r6, #23
10009a92:	4328      	orrs	r0, r5
10009a94:	07de      	lsls	r6, r3, #31
10009a96:	4330      	orrs	r0, r6
10009a98:	b003      	add	sp, #12
10009a9a:	bc3c      	pop	{r2, r3, r4, r5}
10009a9c:	4690      	mov	r8, r2
10009a9e:	4699      	mov	r9, r3
10009aa0:	46a2      	mov	sl, r4
10009aa2:	46ab      	mov	fp, r5
10009aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009aa6:	1c33      	adds	r3, r6, #0
10009aa8:	1e5a      	subs	r2, r3, #1
10009aaa:	4193      	sbcs	r3, r2
10009aac:	3302      	adds	r3, #2
10009aae:	469c      	mov	ip, r3
10009ab0:	e78e      	b.n	100099d0 <__aeabi_fdiv+0x5c>
10009ab2:	220c      	movs	r2, #12
10009ab4:	2303      	movs	r3, #3
10009ab6:	4690      	mov	r8, r2
10009ab8:	469a      	mov	sl, r3
10009aba:	e77c      	b.n	100099b6 <__aeabi_fdiv+0x42>
10009abc:	1c28      	adds	r0, r5, #0
10009abe:	f000 fcc9 	bl	1000a454 <__clzsi2>
10009ac2:	2276      	movs	r2, #118	; 0x76
10009ac4:	1f44      	subs	r4, r0, #5
10009ac6:	4253      	negs	r3, r2
10009ac8:	40a5      	lsls	r5, r4
10009aca:	1a1c      	subs	r4, r3, r0
10009acc:	2000      	movs	r0, #0
10009ace:	4680      	mov	r8, r0
10009ad0:	4682      	mov	sl, r0
10009ad2:	e770      	b.n	100099b6 <__aeabi_fdiv+0x42>
10009ad4:	1c30      	adds	r0, r6, #0
10009ad6:	f000 fcbd 	bl	1000a454 <__clzsi2>
10009ada:	2376      	movs	r3, #118	; 0x76
10009adc:	1f41      	subs	r1, r0, #5
10009ade:	408e      	lsls	r6, r1
10009ae0:	425a      	negs	r2, r3
10009ae2:	2100      	movs	r1, #0
10009ae4:	1a10      	subs	r0, r2, r0
10009ae6:	468c      	mov	ip, r1
10009ae8:	e772      	b.n	100099d0 <__aeabi_fdiv+0x5c>
10009aea:	2300      	movs	r3, #0
10009aec:	4d3c      	ldr	r5, [pc, #240]	; (10009be0 <__aeabi_fdiv+0x26c>)
10009aee:	26ff      	movs	r6, #255	; 0xff
10009af0:	e7ce      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009af2:	465f      	mov	r7, fp
10009af4:	1c35      	adds	r5, r6, #0
10009af6:	9701      	str	r7, [sp, #4]
10009af8:	4663      	mov	r3, ip
10009afa:	2b02      	cmp	r3, #2
10009afc:	d0c5      	beq.n	10009a8a <__aeabi_fdiv+0x116>
10009afe:	2b03      	cmp	r3, #3
10009b00:	d063      	beq.n	10009bca <__aeabi_fdiv+0x256>
10009b02:	2b01      	cmp	r3, #1
10009b04:	d043      	beq.n	10009b8e <__aeabi_fdiv+0x21a>
10009b06:	4649      	mov	r1, r9
10009b08:	317f      	adds	r1, #127	; 0x7f
10009b0a:	2900      	cmp	r1, #0
10009b0c:	dd35      	ble.n	10009b7a <__aeabi_fdiv+0x206>
10009b0e:	270f      	movs	r7, #15
10009b10:	402f      	ands	r7, r5
10009b12:	2f04      	cmp	r7, #4
10009b14:	d000      	beq.n	10009b18 <__aeabi_fdiv+0x1a4>
10009b16:	3504      	adds	r5, #4
10009b18:	012b      	lsls	r3, r5, #4
10009b1a:	d503      	bpl.n	10009b24 <__aeabi_fdiv+0x1b0>
10009b1c:	4a31      	ldr	r2, [pc, #196]	; (10009be4 <__aeabi_fdiv+0x270>)
10009b1e:	4649      	mov	r1, r9
10009b20:	4015      	ands	r5, r2
10009b22:	3180      	adds	r1, #128	; 0x80
10009b24:	29fe      	cmp	r1, #254	; 0xfe
10009b26:	dcb0      	bgt.n	10009a8a <__aeabi_fdiv+0x116>
10009b28:	01a8      	lsls	r0, r5, #6
10009b2a:	0a45      	lsrs	r5, r0, #9
10009b2c:	b2ce      	uxtb	r6, r1
10009b2e:	9b01      	ldr	r3, [sp, #4]
10009b30:	e7ae      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009b32:	2600      	movs	r6, #0
10009b34:	2500      	movs	r5, #0
10009b36:	e7ab      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009b38:	2080      	movs	r0, #128	; 0x80
10009b3a:	03c1      	lsls	r1, r0, #15
10009b3c:	420d      	tst	r5, r1
10009b3e:	d011      	beq.n	10009b64 <__aeabi_fdiv+0x1f0>
10009b40:	420e      	tst	r6, r1
10009b42:	d10f      	bne.n	10009b64 <__aeabi_fdiv+0x1f0>
10009b44:	430e      	orrs	r6, r1
10009b46:	0273      	lsls	r3, r6, #9
10009b48:	0a5d      	lsrs	r5, r3, #9
10009b4a:	26ff      	movs	r6, #255	; 0xff
10009b4c:	465b      	mov	r3, fp
10009b4e:	e79f      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009b50:	9701      	str	r7, [sp, #4]
10009b52:	4653      	mov	r3, sl
10009b54:	e7d1      	b.n	10009afa <__aeabi_fdiv+0x186>
10009b56:	1b49      	subs	r1, r1, r5
10009b58:	241a      	movs	r4, #26
10009b5a:	2601      	movs	r6, #1
10009b5c:	e74c      	b.n	100099f8 <__aeabi_fdiv+0x84>
10009b5e:	1b5b      	subs	r3, r3, r5
10009b60:	433e      	orrs	r6, r7
10009b62:	e755      	b.n	10009a10 <__aeabi_fdiv+0x9c>
10009b64:	430d      	orrs	r5, r1
10009b66:	026a      	lsls	r2, r5, #9
10009b68:	0a55      	lsrs	r5, r2, #9
10009b6a:	1c3b      	adds	r3, r7, #0
10009b6c:	26ff      	movs	r6, #255	; 0xff
10009b6e:	e78f      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009b70:	1c1d      	adds	r5, r3, #0
10009b72:	1e6b      	subs	r3, r5, #1
10009b74:	419d      	sbcs	r5, r3
10009b76:	4335      	orrs	r5, r6
10009b78:	e7c5      	b.n	10009b06 <__aeabi_fdiv+0x192>
10009b7a:	247e      	movs	r4, #126	; 0x7e
10009b7c:	4267      	negs	r7, r4
10009b7e:	464a      	mov	r2, r9
10009b80:	1ab9      	subs	r1, r7, r2
10009b82:	291b      	cmp	r1, #27
10009b84:	dd08      	ble.n	10009b98 <__aeabi_fdiv+0x224>
10009b86:	9b01      	ldr	r3, [sp, #4]
10009b88:	2600      	movs	r6, #0
10009b8a:	2500      	movs	r5, #0
10009b8c:	e780      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009b8e:	9d01      	ldr	r5, [sp, #4]
10009b90:	2600      	movs	r6, #0
10009b92:	402b      	ands	r3, r5
10009b94:	2500      	movs	r5, #0
10009b96:	e77b      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009b98:	464e      	mov	r6, r9
10009b9a:	369e      	adds	r6, #158	; 0x9e
10009b9c:	1c28      	adds	r0, r5, #0
10009b9e:	40b5      	lsls	r5, r6
10009ba0:	1c2b      	adds	r3, r5, #0
10009ba2:	1e5d      	subs	r5, r3, #1
10009ba4:	41ab      	sbcs	r3, r5
10009ba6:	40c8      	lsrs	r0, r1
10009ba8:	4303      	orrs	r3, r0
10009baa:	250f      	movs	r5, #15
10009bac:	401d      	ands	r5, r3
10009bae:	2d04      	cmp	r5, #4
10009bb0:	d000      	beq.n	10009bb4 <__aeabi_fdiv+0x240>
10009bb2:	3304      	adds	r3, #4
10009bb4:	015a      	lsls	r2, r3, #5
10009bb6:	d503      	bpl.n	10009bc0 <__aeabi_fdiv+0x24c>
10009bb8:	9b01      	ldr	r3, [sp, #4]
10009bba:	2601      	movs	r6, #1
10009bbc:	2500      	movs	r5, #0
10009bbe:	e767      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009bc0:	019c      	lsls	r4, r3, #6
10009bc2:	0a65      	lsrs	r5, r4, #9
10009bc4:	9b01      	ldr	r3, [sp, #4]
10009bc6:	2600      	movs	r6, #0
10009bc8:	e762      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009bca:	2780      	movs	r7, #128	; 0x80
10009bcc:	03fc      	lsls	r4, r7, #15
10009bce:	4325      	orrs	r5, r4
10009bd0:	026e      	lsls	r6, r5, #9
10009bd2:	0a75      	lsrs	r5, r6, #9
10009bd4:	9b01      	ldr	r3, [sp, #4]
10009bd6:	26ff      	movs	r6, #255	; 0xff
10009bd8:	e75a      	b.n	10009a90 <__aeabi_fdiv+0x11c>
10009bda:	46c0      	nop			; (mov r8, r8)
10009bdc:	1000ad68 	.word	0x1000ad68
10009be0:	007fffff 	.word	0x007fffff
10009be4:	f7ffffff 	.word	0xf7ffffff

10009be8 <__eqsf2>:
10009be8:	0243      	lsls	r3, r0, #9
10009bea:	0042      	lsls	r2, r0, #1
10009bec:	b570      	push	{r4, r5, r6, lr}
10009bee:	0a5c      	lsrs	r4, r3, #9
10009bf0:	0fc6      	lsrs	r6, r0, #31
10009bf2:	0e13      	lsrs	r3, r2, #24
10009bf4:	0248      	lsls	r0, r1, #9
10009bf6:	004a      	lsls	r2, r1, #1
10009bf8:	0a45      	lsrs	r5, r0, #9
10009bfa:	0e12      	lsrs	r2, r2, #24
10009bfc:	0fc9      	lsrs	r1, r1, #31
10009bfe:	2bff      	cmp	r3, #255	; 0xff
10009c00:	d005      	beq.n	10009c0e <__eqsf2+0x26>
10009c02:	2aff      	cmp	r2, #255	; 0xff
10009c04:	d008      	beq.n	10009c18 <__eqsf2+0x30>
10009c06:	2001      	movs	r0, #1
10009c08:	4293      	cmp	r3, r2
10009c0a:	d00b      	beq.n	10009c24 <__eqsf2+0x3c>
10009c0c:	bd70      	pop	{r4, r5, r6, pc}
10009c0e:	2001      	movs	r0, #1
10009c10:	2c00      	cmp	r4, #0
10009c12:	d1fb      	bne.n	10009c0c <__eqsf2+0x24>
10009c14:	2aff      	cmp	r2, #255	; 0xff
10009c16:	d1f6      	bne.n	10009c06 <__eqsf2+0x1e>
10009c18:	2001      	movs	r0, #1
10009c1a:	2d00      	cmp	r5, #0
10009c1c:	d1f6      	bne.n	10009c0c <__eqsf2+0x24>
10009c1e:	2001      	movs	r0, #1
10009c20:	4293      	cmp	r3, r2
10009c22:	d1f3      	bne.n	10009c0c <__eqsf2+0x24>
10009c24:	42ac      	cmp	r4, r5
10009c26:	d1f1      	bne.n	10009c0c <__eqsf2+0x24>
10009c28:	428e      	cmp	r6, r1
10009c2a:	d003      	beq.n	10009c34 <__eqsf2+0x4c>
10009c2c:	2b00      	cmp	r3, #0
10009c2e:	d1ed      	bne.n	10009c0c <__eqsf2+0x24>
10009c30:	2c00      	cmp	r4, #0
10009c32:	d1eb      	bne.n	10009c0c <__eqsf2+0x24>
10009c34:	2000      	movs	r0, #0
10009c36:	e7e9      	b.n	10009c0c <__eqsf2+0x24>

10009c38 <__gesf2>:
10009c38:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c3a:	0243      	lsls	r3, r0, #9
10009c3c:	0042      	lsls	r2, r0, #1
10009c3e:	004f      	lsls	r7, r1, #1
10009c40:	0fc6      	lsrs	r6, r0, #31
10009c42:	0248      	lsls	r0, r1, #9
10009c44:	0a5c      	lsrs	r4, r3, #9
10009c46:	0a45      	lsrs	r5, r0, #9
10009c48:	0e13      	lsrs	r3, r2, #24
10009c4a:	0fc9      	lsrs	r1, r1, #31
10009c4c:	0e3a      	lsrs	r2, r7, #24
10009c4e:	2bff      	cmp	r3, #255	; 0xff
10009c50:	d026      	beq.n	10009ca0 <__gesf2+0x68>
10009c52:	2aff      	cmp	r2, #255	; 0xff
10009c54:	d029      	beq.n	10009caa <__gesf2+0x72>
10009c56:	2b00      	cmp	r3, #0
10009c58:	d10c      	bne.n	10009c74 <__gesf2+0x3c>
10009c5a:	4260      	negs	r0, r4
10009c5c:	4160      	adcs	r0, r4
10009c5e:	4684      	mov	ip, r0
10009c60:	2a00      	cmp	r2, #0
10009c62:	d00a      	beq.n	10009c7a <__gesf2+0x42>
10009c64:	2800      	cmp	r0, #0
10009c66:	d116      	bne.n	10009c96 <__gesf2+0x5e>
10009c68:	428e      	cmp	r6, r1
10009c6a:	d021      	beq.n	10009cb0 <__gesf2+0x78>
10009c6c:	2e00      	cmp	r6, #0
10009c6e:	d114      	bne.n	10009c9a <__gesf2+0x62>
10009c70:	2001      	movs	r0, #1
10009c72:	e014      	b.n	10009c9e <__gesf2+0x66>
10009c74:	2a00      	cmp	r2, #0
10009c76:	d1f7      	bne.n	10009c68 <__gesf2+0x30>
10009c78:	4694      	mov	ip, r2
10009c7a:	426f      	negs	r7, r5
10009c7c:	416f      	adcs	r7, r5
10009c7e:	4660      	mov	r0, ip
10009c80:	2800      	cmp	r0, #0
10009c82:	d105      	bne.n	10009c90 <__gesf2+0x58>
10009c84:	2f00      	cmp	r7, #0
10009c86:	d0ef      	beq.n	10009c68 <__gesf2+0x30>
10009c88:	2001      	movs	r0, #1
10009c8a:	2e00      	cmp	r6, #0
10009c8c:	d007      	beq.n	10009c9e <__gesf2+0x66>
10009c8e:	e004      	b.n	10009c9a <__gesf2+0x62>
10009c90:	2000      	movs	r0, #0
10009c92:	2f00      	cmp	r7, #0
10009c94:	d103      	bne.n	10009c9e <__gesf2+0x66>
10009c96:	2900      	cmp	r1, #0
10009c98:	d1ea      	bne.n	10009c70 <__gesf2+0x38>
10009c9a:	2101      	movs	r1, #1
10009c9c:	4248      	negs	r0, r1
10009c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ca0:	2c00      	cmp	r4, #0
10009ca2:	d0d6      	beq.n	10009c52 <__gesf2+0x1a>
10009ca4:	2202      	movs	r2, #2
10009ca6:	4250      	negs	r0, r2
10009ca8:	e7f9      	b.n	10009c9e <__gesf2+0x66>
10009caa:	2d00      	cmp	r5, #0
10009cac:	d0d3      	beq.n	10009c56 <__gesf2+0x1e>
10009cae:	e7f9      	b.n	10009ca4 <__gesf2+0x6c>
10009cb0:	4293      	cmp	r3, r2
10009cb2:	dcdb      	bgt.n	10009c6c <__gesf2+0x34>
10009cb4:	db04      	blt.n	10009cc0 <__gesf2+0x88>
10009cb6:	42ac      	cmp	r4, r5
10009cb8:	d8d8      	bhi.n	10009c6c <__gesf2+0x34>
10009cba:	2000      	movs	r0, #0
10009cbc:	42ac      	cmp	r4, r5
10009cbe:	d2ee      	bcs.n	10009c9e <__gesf2+0x66>
10009cc0:	2e00      	cmp	r6, #0
10009cc2:	d0ea      	beq.n	10009c9a <__gesf2+0x62>
10009cc4:	2001      	movs	r0, #1
10009cc6:	e7ea      	b.n	10009c9e <__gesf2+0x66>

10009cc8 <__lesf2>:
10009cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009cca:	0243      	lsls	r3, r0, #9
10009ccc:	0042      	lsls	r2, r0, #1
10009cce:	004f      	lsls	r7, r1, #1
10009cd0:	0fc6      	lsrs	r6, r0, #31
10009cd2:	0248      	lsls	r0, r1, #9
10009cd4:	0a5c      	lsrs	r4, r3, #9
10009cd6:	0a45      	lsrs	r5, r0, #9
10009cd8:	0e13      	lsrs	r3, r2, #24
10009cda:	0fc9      	lsrs	r1, r1, #31
10009cdc:	0e3a      	lsrs	r2, r7, #24
10009cde:	2bff      	cmp	r3, #255	; 0xff
10009ce0:	d026      	beq.n	10009d30 <__lesf2+0x68>
10009ce2:	2aff      	cmp	r2, #255	; 0xff
10009ce4:	d028      	beq.n	10009d38 <__lesf2+0x70>
10009ce6:	2b00      	cmp	r3, #0
10009ce8:	d00f      	beq.n	10009d0a <__lesf2+0x42>
10009cea:	2a00      	cmp	r2, #0
10009cec:	d114      	bne.n	10009d18 <__lesf2+0x50>
10009cee:	4694      	mov	ip, r2
10009cf0:	426f      	negs	r7, r5
10009cf2:	416f      	adcs	r7, r5
10009cf4:	4660      	mov	r0, ip
10009cf6:	2800      	cmp	r0, #0
10009cf8:	d014      	beq.n	10009d24 <__lesf2+0x5c>
10009cfa:	2000      	movs	r0, #0
10009cfc:	2f00      	cmp	r7, #0
10009cfe:	d103      	bne.n	10009d08 <__lesf2+0x40>
10009d00:	2900      	cmp	r1, #0
10009d02:	d10d      	bne.n	10009d20 <__lesf2+0x58>
10009d04:	2101      	movs	r1, #1
10009d06:	4248      	negs	r0, r1
10009d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d0a:	4260      	negs	r0, r4
10009d0c:	4160      	adcs	r0, r4
10009d0e:	4684      	mov	ip, r0
10009d10:	2a00      	cmp	r2, #0
10009d12:	d0ed      	beq.n	10009cf0 <__lesf2+0x28>
10009d14:	2800      	cmp	r0, #0
10009d16:	d1f3      	bne.n	10009d00 <__lesf2+0x38>
10009d18:	428e      	cmp	r6, r1
10009d1a:	d011      	beq.n	10009d40 <__lesf2+0x78>
10009d1c:	2e00      	cmp	r6, #0
10009d1e:	d1f1      	bne.n	10009d04 <__lesf2+0x3c>
10009d20:	2001      	movs	r0, #1
10009d22:	e7f1      	b.n	10009d08 <__lesf2+0x40>
10009d24:	2f00      	cmp	r7, #0
10009d26:	d0f7      	beq.n	10009d18 <__lesf2+0x50>
10009d28:	2001      	movs	r0, #1
10009d2a:	2e00      	cmp	r6, #0
10009d2c:	d0ec      	beq.n	10009d08 <__lesf2+0x40>
10009d2e:	e7e9      	b.n	10009d04 <__lesf2+0x3c>
10009d30:	2002      	movs	r0, #2
10009d32:	2c00      	cmp	r4, #0
10009d34:	d1e8      	bne.n	10009d08 <__lesf2+0x40>
10009d36:	e7d4      	b.n	10009ce2 <__lesf2+0x1a>
10009d38:	2002      	movs	r0, #2
10009d3a:	2d00      	cmp	r5, #0
10009d3c:	d1e4      	bne.n	10009d08 <__lesf2+0x40>
10009d3e:	e7d2      	b.n	10009ce6 <__lesf2+0x1e>
10009d40:	4293      	cmp	r3, r2
10009d42:	dceb      	bgt.n	10009d1c <__lesf2+0x54>
10009d44:	db04      	blt.n	10009d50 <__lesf2+0x88>
10009d46:	42ac      	cmp	r4, r5
10009d48:	d8e8      	bhi.n	10009d1c <__lesf2+0x54>
10009d4a:	2000      	movs	r0, #0
10009d4c:	42ac      	cmp	r4, r5
10009d4e:	d2db      	bcs.n	10009d08 <__lesf2+0x40>
10009d50:	2e00      	cmp	r6, #0
10009d52:	d0d7      	beq.n	10009d04 <__lesf2+0x3c>
10009d54:	2001      	movs	r0, #1
10009d56:	e7d7      	b.n	10009d08 <__lesf2+0x40>

10009d58 <__aeabi_fmul>:
10009d58:	b5f0      	push	{r4, r5, r6, r7, lr}
10009d5a:	465f      	mov	r7, fp
10009d5c:	4656      	mov	r6, sl
10009d5e:	464d      	mov	r5, r9
10009d60:	4644      	mov	r4, r8
10009d62:	b4f0      	push	{r4, r5, r6, r7}
10009d64:	0245      	lsls	r5, r0, #9
10009d66:	0046      	lsls	r6, r0, #1
10009d68:	b083      	sub	sp, #12
10009d6a:	1c0f      	adds	r7, r1, #0
10009d6c:	0a6d      	lsrs	r5, r5, #9
10009d6e:	0e36      	lsrs	r6, r6, #24
10009d70:	0fc4      	lsrs	r4, r0, #31
10009d72:	2e00      	cmp	r6, #0
10009d74:	d106      	bne.n	10009d84 <__aeabi_fmul+0x2c>
10009d76:	2d00      	cmp	r5, #0
10009d78:	d170      	bne.n	10009e5c <__aeabi_fmul+0x104>
10009d7a:	2104      	movs	r1, #4
10009d7c:	2201      	movs	r2, #1
10009d7e:	4688      	mov	r8, r1
10009d80:	4692      	mov	sl, r2
10009d82:	e009      	b.n	10009d98 <__aeabi_fmul+0x40>
10009d84:	2eff      	cmp	r6, #255	; 0xff
10009d86:	d043      	beq.n	10009e10 <__aeabi_fmul+0xb8>
10009d88:	2380      	movs	r3, #128	; 0x80
10009d8a:	0418      	lsls	r0, r3, #16
10009d8c:	2100      	movs	r1, #0
10009d8e:	4305      	orrs	r5, r0
10009d90:	00ed      	lsls	r5, r5, #3
10009d92:	3e7f      	subs	r6, #127	; 0x7f
10009d94:	4688      	mov	r8, r1
10009d96:	468a      	mov	sl, r1
10009d98:	1c38      	adds	r0, r7, #0
10009d9a:	0043      	lsls	r3, r0, #1
10009d9c:	027f      	lsls	r7, r7, #9
10009d9e:	0fc1      	lsrs	r1, r0, #31
10009da0:	0a7f      	lsrs	r7, r7, #9
10009da2:	0e1b      	lsrs	r3, r3, #24
10009da4:	468b      	mov	fp, r1
10009da6:	d13a      	bne.n	10009e1e <__aeabi_fmul+0xc6>
10009da8:	2101      	movs	r1, #1
10009daa:	2f00      	cmp	r7, #0
10009dac:	d162      	bne.n	10009e74 <__aeabi_fmul+0x11c>
10009dae:	4658      	mov	r0, fp
10009db0:	4060      	eors	r0, r4
10009db2:	4642      	mov	r2, r8
10009db4:	9001      	str	r0, [sp, #4]
10009db6:	430a      	orrs	r2, r1
10009db8:	2a0f      	cmp	r2, #15
10009dba:	d93f      	bls.n	10009e3c <__aeabi_fmul+0xe4>
10009dbc:	042c      	lsls	r4, r5, #16
10009dbe:	18f0      	adds	r0, r6, r3
10009dc0:	0c26      	lsrs	r6, r4, #16
10009dc2:	043b      	lsls	r3, r7, #16
10009dc4:	0c1a      	lsrs	r2, r3, #16
10009dc6:	1c31      	adds	r1, r6, #0
10009dc8:	4351      	muls	r1, r2
10009dca:	0c3f      	lsrs	r7, r7, #16
10009dcc:	0c2d      	lsrs	r5, r5, #16
10009dce:	437e      	muls	r6, r7
10009dd0:	436a      	muls	r2, r5
10009dd2:	4681      	mov	r9, r0
10009dd4:	0c08      	lsrs	r0, r1, #16
10009dd6:	1836      	adds	r6, r6, r0
10009dd8:	1c2c      	adds	r4, r5, #0
10009dda:	18b3      	adds	r3, r6, r2
10009ddc:	437c      	muls	r4, r7
10009dde:	429a      	cmp	r2, r3
10009de0:	d900      	bls.n	10009de4 <__aeabi_fmul+0x8c>
10009de2:	e09a      	b.n	10009f1a <__aeabi_fmul+0x1c2>
10009de4:	0409      	lsls	r1, r1, #16
10009de6:	041d      	lsls	r5, r3, #16
10009de8:	0c08      	lsrs	r0, r1, #16
10009dea:	182e      	adds	r6, r5, r0
10009dec:	01b5      	lsls	r5, r6, #6
10009dee:	0c1b      	lsrs	r3, r3, #16
10009df0:	1e69      	subs	r1, r5, #1
10009df2:	418d      	sbcs	r5, r1
10009df4:	0eb2      	lsrs	r2, r6, #26
10009df6:	18e7      	adds	r7, r4, r3
10009df8:	4315      	orrs	r5, r2
10009dfa:	01bc      	lsls	r4, r7, #6
10009dfc:	4325      	orrs	r5, r4
10009dfe:	012b      	lsls	r3, r5, #4
10009e00:	d54b      	bpl.n	10009e9a <__aeabi_fmul+0x142>
10009e02:	2001      	movs	r0, #1
10009e04:	4028      	ands	r0, r5
10009e06:	2101      	movs	r1, #1
10009e08:	086d      	lsrs	r5, r5, #1
10009e0a:	4489      	add	r9, r1
10009e0c:	4305      	orrs	r5, r0
10009e0e:	e044      	b.n	10009e9a <__aeabi_fmul+0x142>
10009e10:	2d00      	cmp	r5, #0
10009e12:	d11e      	bne.n	10009e52 <__aeabi_fmul+0xfa>
10009e14:	2008      	movs	r0, #8
10009e16:	2102      	movs	r1, #2
10009e18:	4680      	mov	r8, r0
10009e1a:	468a      	mov	sl, r1
10009e1c:	e7bc      	b.n	10009d98 <__aeabi_fmul+0x40>
10009e1e:	2bff      	cmp	r3, #255	; 0xff
10009e20:	d012      	beq.n	10009e48 <__aeabi_fmul+0xf0>
10009e22:	2280      	movs	r2, #128	; 0x80
10009e24:	0410      	lsls	r0, r2, #16
10009e26:	4307      	orrs	r7, r0
10009e28:	4658      	mov	r0, fp
10009e2a:	2100      	movs	r1, #0
10009e2c:	4060      	eors	r0, r4
10009e2e:	4642      	mov	r2, r8
10009e30:	00ff      	lsls	r7, r7, #3
10009e32:	3b7f      	subs	r3, #127	; 0x7f
10009e34:	9001      	str	r0, [sp, #4]
10009e36:	430a      	orrs	r2, r1
10009e38:	2a0f      	cmp	r2, #15
10009e3a:	d8bf      	bhi.n	10009dbc <__aeabi_fmul+0x64>
10009e3c:	0090      	lsls	r0, r2, #2
10009e3e:	4a5b      	ldr	r2, [pc, #364]	; (10009fac <__aeabi_fmul+0x254>)
10009e40:	4684      	mov	ip, r0
10009e42:	4462      	add	r2, ip
10009e44:	6810      	ldr	r0, [r2, #0]
10009e46:	4687      	mov	pc, r0
10009e48:	1c39      	adds	r1, r7, #0
10009e4a:	1e4a      	subs	r2, r1, #1
10009e4c:	4191      	sbcs	r1, r2
10009e4e:	3102      	adds	r1, #2
10009e50:	e7ad      	b.n	10009dae <__aeabi_fmul+0x56>
10009e52:	220c      	movs	r2, #12
10009e54:	2303      	movs	r3, #3
10009e56:	4690      	mov	r8, r2
10009e58:	469a      	mov	sl, r3
10009e5a:	e79d      	b.n	10009d98 <__aeabi_fmul+0x40>
10009e5c:	1c28      	adds	r0, r5, #0
10009e5e:	f000 faf9 	bl	1000a454 <__clzsi2>
10009e62:	2276      	movs	r2, #118	; 0x76
10009e64:	1f46      	subs	r6, r0, #5
10009e66:	4253      	negs	r3, r2
10009e68:	40b5      	lsls	r5, r6
10009e6a:	1a1e      	subs	r6, r3, r0
10009e6c:	2000      	movs	r0, #0
10009e6e:	4680      	mov	r8, r0
10009e70:	4682      	mov	sl, r0
10009e72:	e791      	b.n	10009d98 <__aeabi_fmul+0x40>
10009e74:	1c38      	adds	r0, r7, #0
10009e76:	f000 faed 	bl	1000a454 <__clzsi2>
10009e7a:	2176      	movs	r1, #118	; 0x76
10009e7c:	1f43      	subs	r3, r0, #5
10009e7e:	424a      	negs	r2, r1
10009e80:	409f      	lsls	r7, r3
10009e82:	2100      	movs	r1, #0
10009e84:	1a13      	subs	r3, r2, r0
10009e86:	e792      	b.n	10009dae <__aeabi_fmul+0x56>
10009e88:	9401      	str	r4, [sp, #4]
10009e8a:	4651      	mov	r1, sl
10009e8c:	2902      	cmp	r1, #2
10009e8e:	d02c      	beq.n	10009eea <__aeabi_fmul+0x192>
10009e90:	2903      	cmp	r1, #3
10009e92:	d100      	bne.n	10009e96 <__aeabi_fmul+0x13e>
10009e94:	e080      	b.n	10009f98 <__aeabi_fmul+0x240>
10009e96:	2901      	cmp	r1, #1
10009e98:	d048      	beq.n	10009f2c <__aeabi_fmul+0x1d4>
10009e9a:	464e      	mov	r6, r9
10009e9c:	367f      	adds	r6, #127	; 0x7f
10009e9e:	2e00      	cmp	r6, #0
10009ea0:	dd51      	ble.n	10009f46 <__aeabi_fmul+0x1ee>
10009ea2:	240f      	movs	r4, #15
10009ea4:	402c      	ands	r4, r5
10009ea6:	2c04      	cmp	r4, #4
10009ea8:	d000      	beq.n	10009eac <__aeabi_fmul+0x154>
10009eaa:	3504      	adds	r5, #4
10009eac:	012a      	lsls	r2, r5, #4
10009eae:	d503      	bpl.n	10009eb8 <__aeabi_fmul+0x160>
10009eb0:	493f      	ldr	r1, [pc, #252]	; (10009fb0 <__aeabi_fmul+0x258>)
10009eb2:	464e      	mov	r6, r9
10009eb4:	400d      	ands	r5, r1
10009eb6:	3680      	adds	r6, #128	; 0x80
10009eb8:	2efe      	cmp	r6, #254	; 0xfe
10009eba:	dd3d      	ble.n	10009f38 <__aeabi_fmul+0x1e0>
10009ebc:	9b01      	ldr	r3, [sp, #4]
10009ebe:	2401      	movs	r4, #1
10009ec0:	401c      	ands	r4, r3
10009ec2:	21ff      	movs	r1, #255	; 0xff
10009ec4:	2500      	movs	r5, #0
10009ec6:	05c8      	lsls	r0, r1, #23
10009ec8:	07e2      	lsls	r2, r4, #31
10009eca:	4328      	orrs	r0, r5
10009ecc:	4310      	orrs	r0, r2
10009ece:	b003      	add	sp, #12
10009ed0:	bc3c      	pop	{r2, r3, r4, r5}
10009ed2:	4690      	mov	r8, r2
10009ed4:	4699      	mov	r9, r3
10009ed6:	46a2      	mov	sl, r4
10009ed8:	46ab      	mov	fp, r5
10009eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009edc:	2400      	movs	r4, #0
10009ede:	4d35      	ldr	r5, [pc, #212]	; (10009fb4 <__aeabi_fmul+0x25c>)
10009ee0:	21ff      	movs	r1, #255	; 0xff
10009ee2:	e7f0      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009ee4:	4651      	mov	r1, sl
10009ee6:	2902      	cmp	r1, #2
10009ee8:	d1d2      	bne.n	10009e90 <__aeabi_fmul+0x138>
10009eea:	9d01      	ldr	r5, [sp, #4]
10009eec:	2401      	movs	r4, #1
10009eee:	402c      	ands	r4, r5
10009ef0:	21ff      	movs	r1, #255	; 0xff
10009ef2:	2500      	movs	r5, #0
10009ef4:	e7e7      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009ef6:	465e      	mov	r6, fp
10009ef8:	1c3d      	adds	r5, r7, #0
10009efa:	9601      	str	r6, [sp, #4]
10009efc:	e7c6      	b.n	10009e8c <__aeabi_fmul+0x134>
10009efe:	1c3d      	adds	r5, r7, #0
10009f00:	e7c4      	b.n	10009e8c <__aeabi_fmul+0x134>
10009f02:	2680      	movs	r6, #128	; 0x80
10009f04:	03f3      	lsls	r3, r6, #15
10009f06:	421d      	tst	r5, r3
10009f08:	d00b      	beq.n	10009f22 <__aeabi_fmul+0x1ca>
10009f0a:	421f      	tst	r7, r3
10009f0c:	d109      	bne.n	10009f22 <__aeabi_fmul+0x1ca>
10009f0e:	431f      	orrs	r7, r3
10009f10:	027a      	lsls	r2, r7, #9
10009f12:	0a55      	lsrs	r5, r2, #9
10009f14:	465c      	mov	r4, fp
10009f16:	21ff      	movs	r1, #255	; 0xff
10009f18:	e7d5      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009f1a:	2280      	movs	r2, #128	; 0x80
10009f1c:	0257      	lsls	r7, r2, #9
10009f1e:	19e4      	adds	r4, r4, r7
10009f20:	e760      	b.n	10009de4 <__aeabi_fmul+0x8c>
10009f22:	431d      	orrs	r5, r3
10009f24:	026f      	lsls	r7, r5, #9
10009f26:	0a7d      	lsrs	r5, r7, #9
10009f28:	21ff      	movs	r1, #255	; 0xff
10009f2a:	e7cc      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009f2c:	9b01      	ldr	r3, [sp, #4]
10009f2e:	2500      	movs	r5, #0
10009f30:	4019      	ands	r1, r3
10009f32:	b2cc      	uxtb	r4, r1
10009f34:	2100      	movs	r1, #0
10009f36:	e7c6      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009f38:	9801      	ldr	r0, [sp, #4]
10009f3a:	01ad      	lsls	r5, r5, #6
10009f3c:	2401      	movs	r4, #1
10009f3e:	0a6d      	lsrs	r5, r5, #9
10009f40:	b2f1      	uxtb	r1, r6
10009f42:	4004      	ands	r4, r0
10009f44:	e7bf      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009f46:	267e      	movs	r6, #126	; 0x7e
10009f48:	4273      	negs	r3, r6
10009f4a:	464a      	mov	r2, r9
10009f4c:	1a9f      	subs	r7, r3, r2
10009f4e:	2f1b      	cmp	r7, #27
10009f50:	dd05      	ble.n	10009f5e <__aeabi_fmul+0x206>
10009f52:	9d01      	ldr	r5, [sp, #4]
10009f54:	2401      	movs	r4, #1
10009f56:	402c      	ands	r4, r5
10009f58:	2100      	movs	r1, #0
10009f5a:	2500      	movs	r5, #0
10009f5c:	e7b3      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009f5e:	4649      	mov	r1, r9
10009f60:	319e      	adds	r1, #158	; 0x9e
10009f62:	1c2c      	adds	r4, r5, #0
10009f64:	408d      	lsls	r5, r1
10009f66:	1c2e      	adds	r6, r5, #0
10009f68:	40fc      	lsrs	r4, r7
10009f6a:	1e75      	subs	r5, r6, #1
10009f6c:	41ae      	sbcs	r6, r5
10009f6e:	4326      	orrs	r6, r4
10009f70:	200f      	movs	r0, #15
10009f72:	4030      	ands	r0, r6
10009f74:	2804      	cmp	r0, #4
10009f76:	d000      	beq.n	10009f7a <__aeabi_fmul+0x222>
10009f78:	3604      	adds	r6, #4
10009f7a:	0170      	lsls	r0, r6, #5
10009f7c:	d505      	bpl.n	10009f8a <__aeabi_fmul+0x232>
10009f7e:	9f01      	ldr	r7, [sp, #4]
10009f80:	2401      	movs	r4, #1
10009f82:	403c      	ands	r4, r7
10009f84:	2101      	movs	r1, #1
10009f86:	2500      	movs	r5, #0
10009f88:	e79d      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009f8a:	9a01      	ldr	r2, [sp, #4]
10009f8c:	01b3      	lsls	r3, r6, #6
10009f8e:	2401      	movs	r4, #1
10009f90:	0a5d      	lsrs	r5, r3, #9
10009f92:	4014      	ands	r4, r2
10009f94:	2100      	movs	r1, #0
10009f96:	e796      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009f98:	2280      	movs	r2, #128	; 0x80
10009f9a:	03d0      	lsls	r0, r2, #15
10009f9c:	4305      	orrs	r5, r0
10009f9e:	026c      	lsls	r4, r5, #9
10009fa0:	9901      	ldr	r1, [sp, #4]
10009fa2:	0a65      	lsrs	r5, r4, #9
10009fa4:	2401      	movs	r4, #1
10009fa6:	400c      	ands	r4, r1
10009fa8:	21ff      	movs	r1, #255	; 0xff
10009faa:	e78c      	b.n	10009ec6 <__aeabi_fmul+0x16e>
10009fac:	1000ada8 	.word	0x1000ada8
10009fb0:	f7ffffff 	.word	0xf7ffffff
10009fb4:	007fffff 	.word	0x007fffff

10009fb8 <__aeabi_fsub>:
10009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009fba:	0243      	lsls	r3, r0, #9
10009fbc:	0045      	lsls	r5, r0, #1
10009fbe:	024f      	lsls	r7, r1, #9
10009fc0:	004c      	lsls	r4, r1, #1
10009fc2:	0fc2      	lsrs	r2, r0, #31
10009fc4:	0998      	lsrs	r0, r3, #6
10009fc6:	4684      	mov	ip, r0
10009fc8:	0e2d      	lsrs	r5, r5, #24
10009fca:	0e20      	lsrs	r0, r4, #24
10009fcc:	0fc9      	lsrs	r1, r1, #31
10009fce:	09bf      	lsrs	r7, r7, #6
10009fd0:	28ff      	cmp	r0, #255	; 0xff
10009fd2:	d054      	beq.n	1000a07e <__aeabi_fsub+0xc6>
10009fd4:	2601      	movs	r6, #1
10009fd6:	4071      	eors	r1, r6
10009fd8:	428a      	cmp	r2, r1
10009fda:	d03b      	beq.n	1000a054 <__aeabi_fsub+0x9c>
10009fdc:	1a2c      	subs	r4, r5, r0
10009fde:	2c00      	cmp	r4, #0
10009fe0:	dc00      	bgt.n	10009fe4 <__aeabi_fsub+0x2c>
10009fe2:	e089      	b.n	1000a0f8 <__aeabi_fsub+0x140>
10009fe4:	2800      	cmp	r0, #0
10009fe6:	d125      	bne.n	1000a034 <__aeabi_fsub+0x7c>
10009fe8:	2f00      	cmp	r7, #0
10009fea:	d14b      	bne.n	1000a084 <__aeabi_fsub+0xcc>
10009fec:	1c6e      	adds	r6, r5, #1
10009fee:	1c2c      	adds	r4, r5, #0
10009ff0:	4663      	mov	r3, ip
10009ff2:	1c15      	adds	r5, r2, #0
10009ff4:	220f      	movs	r2, #15
10009ff6:	401a      	ands	r2, r3
10009ff8:	2a04      	cmp	r2, #4
10009ffa:	d000      	beq.n	10009ffe <__aeabi_fsub+0x46>
10009ffc:	3304      	adds	r3, #4
10009ffe:	2780      	movs	r7, #128	; 0x80
1000a000:	04f9      	lsls	r1, r7, #19
1000a002:	2201      	movs	r2, #1
1000a004:	4019      	ands	r1, r3
1000a006:	402a      	ands	r2, r5
1000a008:	2900      	cmp	r1, #0
1000a00a:	d006      	beq.n	1000a01a <__aeabi_fsub+0x62>
1000a00c:	2eff      	cmp	r6, #255	; 0xff
1000a00e:	d100      	bne.n	1000a012 <__aeabi_fsub+0x5a>
1000a010:	e081      	b.n	1000a116 <__aeabi_fsub+0x15e>
1000a012:	4db1      	ldr	r5, [pc, #708]	; (1000a2d8 <__aeabi_fsub+0x320>)
1000a014:	1c34      	adds	r4, r6, #0
1000a016:	402b      	ands	r3, r5
1000a018:	3601      	adds	r6, #1
1000a01a:	b2f6      	uxtb	r6, r6
1000a01c:	08dd      	lsrs	r5, r3, #3
1000a01e:	2e01      	cmp	r6, #1
1000a020:	dd62      	ble.n	1000a0e8 <__aeabi_fsub+0x130>
1000a022:	026b      	lsls	r3, r5, #9
1000a024:	0a5d      	lsrs	r5, r3, #9
1000a026:	b2e4      	uxtb	r4, r4
1000a028:	05e4      	lsls	r4, r4, #23
1000a02a:	4325      	orrs	r5, r4
1000a02c:	1c28      	adds	r0, r5, #0
1000a02e:	07d2      	lsls	r2, r2, #31
1000a030:	4310      	orrs	r0, r2
1000a032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a034:	2dff      	cmp	r5, #255	; 0xff
1000a036:	d051      	beq.n	1000a0dc <__aeabi_fsub+0x124>
1000a038:	2180      	movs	r1, #128	; 0x80
1000a03a:	04cb      	lsls	r3, r1, #19
1000a03c:	431f      	orrs	r7, r3
1000a03e:	2601      	movs	r6, #1
1000a040:	2c1b      	cmp	r4, #27
1000a042:	dd70      	ble.n	1000a126 <__aeabi_fsub+0x16e>
1000a044:	4667      	mov	r7, ip
1000a046:	1c2c      	adds	r4, r5, #0
1000a048:	1bbb      	subs	r3, r7, r6
1000a04a:	1c15      	adds	r5, r2, #0
1000a04c:	0158      	lsls	r0, r3, #5
1000a04e:	d422      	bmi.n	1000a096 <__aeabi_fsub+0xde>
1000a050:	1c66      	adds	r6, r4, #1
1000a052:	e7cf      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a054:	1a2e      	subs	r6, r5, r0
1000a056:	2e00      	cmp	r6, #0
1000a058:	dd76      	ble.n	1000a148 <__aeabi_fsub+0x190>
1000a05a:	2800      	cmp	r0, #0
1000a05c:	d032      	beq.n	1000a0c4 <__aeabi_fsub+0x10c>
1000a05e:	2dff      	cmp	r5, #255	; 0xff
1000a060:	d03c      	beq.n	1000a0dc <__aeabi_fsub+0x124>
1000a062:	2480      	movs	r4, #128	; 0x80
1000a064:	04e1      	lsls	r1, r4, #19
1000a066:	430f      	orrs	r7, r1
1000a068:	2301      	movs	r3, #1
1000a06a:	2e1b      	cmp	r6, #27
1000a06c:	dc00      	bgt.n	1000a070 <__aeabi_fsub+0xb8>
1000a06e:	e0d1      	b.n	1000a214 <__aeabi_fsub+0x25c>
1000a070:	4463      	add	r3, ip
1000a072:	1c2c      	adds	r4, r5, #0
1000a074:	0158      	lsls	r0, r3, #5
1000a076:	d47a      	bmi.n	1000a16e <__aeabi_fsub+0x1b6>
1000a078:	1c66      	adds	r6, r4, #1
1000a07a:	1c15      	adds	r5, r2, #0
1000a07c:	e7ba      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a07e:	2f00      	cmp	r7, #0
1000a080:	d1aa      	bne.n	10009fd8 <__aeabi_fsub+0x20>
1000a082:	e7a7      	b.n	10009fd4 <__aeabi_fsub+0x1c>
1000a084:	3c01      	subs	r4, #1
1000a086:	2c00      	cmp	r4, #0
1000a088:	d16d      	bne.n	1000a166 <__aeabi_fsub+0x1ae>
1000a08a:	4663      	mov	r3, ip
1000a08c:	1c2c      	adds	r4, r5, #0
1000a08e:	1bdb      	subs	r3, r3, r7
1000a090:	1c15      	adds	r5, r2, #0
1000a092:	0158      	lsls	r0, r3, #5
1000a094:	d5dc      	bpl.n	1000a050 <__aeabi_fsub+0x98>
1000a096:	019a      	lsls	r2, r3, #6
1000a098:	0996      	lsrs	r6, r2, #6
1000a09a:	1c30      	adds	r0, r6, #0
1000a09c:	f000 f9da 	bl	1000a454 <__clzsi2>
1000a0a0:	3805      	subs	r0, #5
1000a0a2:	4086      	lsls	r6, r0
1000a0a4:	4284      	cmp	r4, r0
1000a0a6:	dc39      	bgt.n	1000a11c <__aeabi_fsub+0x164>
1000a0a8:	1b00      	subs	r0, r0, r4
1000a0aa:	231f      	movs	r3, #31
1000a0ac:	1a1a      	subs	r2, r3, r0
1000a0ae:	1c33      	adds	r3, r6, #0
1000a0b0:	1c31      	adds	r1, r6, #0
1000a0b2:	1c44      	adds	r4, r0, #1
1000a0b4:	4093      	lsls	r3, r2
1000a0b6:	40e1      	lsrs	r1, r4
1000a0b8:	1e5e      	subs	r6, r3, #1
1000a0ba:	41b3      	sbcs	r3, r6
1000a0bc:	430b      	orrs	r3, r1
1000a0be:	2601      	movs	r6, #1
1000a0c0:	2400      	movs	r4, #0
1000a0c2:	e797      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a0c4:	2f00      	cmp	r7, #0
1000a0c6:	d100      	bne.n	1000a0ca <__aeabi_fsub+0x112>
1000a0c8:	e790      	b.n	10009fec <__aeabi_fsub+0x34>
1000a0ca:	3e01      	subs	r6, #1
1000a0cc:	2e00      	cmp	r6, #0
1000a0ce:	d103      	bne.n	1000a0d8 <__aeabi_fsub+0x120>
1000a0d0:	4664      	mov	r4, ip
1000a0d2:	193b      	adds	r3, r7, r4
1000a0d4:	1c2c      	adds	r4, r5, #0
1000a0d6:	e7cd      	b.n	1000a074 <__aeabi_fsub+0xbc>
1000a0d8:	2dff      	cmp	r5, #255	; 0xff
1000a0da:	d1c5      	bne.n	1000a068 <__aeabi_fsub+0xb0>
1000a0dc:	1c15      	adds	r5, r2, #0
1000a0de:	2280      	movs	r2, #128	; 0x80
1000a0e0:	4663      	mov	r3, ip
1000a0e2:	0056      	lsls	r6, r2, #1
1000a0e4:	24ff      	movs	r4, #255	; 0xff
1000a0e6:	e785      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a0e8:	2d00      	cmp	r5, #0
1000a0ea:	d09c      	beq.n	1000a026 <__aeabi_fsub+0x6e>
1000a0ec:	2c00      	cmp	r4, #0
1000a0ee:	d028      	beq.n	1000a142 <__aeabi_fsub+0x18a>
1000a0f0:	2080      	movs	r0, #128	; 0x80
1000a0f2:	03c7      	lsls	r7, r0, #15
1000a0f4:	433d      	orrs	r5, r7
1000a0f6:	e794      	b.n	1000a022 <__aeabi_fsub+0x6a>
1000a0f8:	2c00      	cmp	r4, #0
1000a0fa:	d145      	bne.n	1000a188 <__aeabi_fsub+0x1d0>
1000a0fc:	1c6b      	adds	r3, r5, #1
1000a0fe:	b2d8      	uxtb	r0, r3
1000a100:	2801      	cmp	r0, #1
1000a102:	dc00      	bgt.n	1000a106 <__aeabi_fsub+0x14e>
1000a104:	e090      	b.n	1000a228 <__aeabi_fsub+0x270>
1000a106:	4664      	mov	r4, ip
1000a108:	1be6      	subs	r6, r4, r7
1000a10a:	0173      	lsls	r3, r6, #5
1000a10c:	d557      	bpl.n	1000a1be <__aeabi_fsub+0x206>
1000a10e:	1b3e      	subs	r6, r7, r4
1000a110:	1c2c      	adds	r4, r5, #0
1000a112:	1c0d      	adds	r5, r1, #0
1000a114:	e7c1      	b.n	1000a09a <__aeabi_fsub+0xe2>
1000a116:	24ff      	movs	r4, #255	; 0xff
1000a118:	2500      	movs	r5, #0
1000a11a:	e785      	b.n	1000a028 <__aeabi_fsub+0x70>
1000a11c:	4b6e      	ldr	r3, [pc, #440]	; (1000a2d8 <__aeabi_fsub+0x320>)
1000a11e:	1a24      	subs	r4, r4, r0
1000a120:	4033      	ands	r3, r6
1000a122:	1c66      	adds	r6, r4, #1
1000a124:	e766      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a126:	1c38      	adds	r0, r7, #0
1000a128:	2120      	movs	r1, #32
1000a12a:	40e0      	lsrs	r0, r4
1000a12c:	1b0c      	subs	r4, r1, r4
1000a12e:	40a7      	lsls	r7, r4
1000a130:	1c3e      	adds	r6, r7, #0
1000a132:	1e77      	subs	r7, r6, #1
1000a134:	41be      	sbcs	r6, r7
1000a136:	4306      	orrs	r6, r0
1000a138:	4667      	mov	r7, ip
1000a13a:	1c2c      	adds	r4, r5, #0
1000a13c:	1bbb      	subs	r3, r7, r6
1000a13e:	1c15      	adds	r5, r2, #0
1000a140:	e784      	b.n	1000a04c <__aeabi_fsub+0x94>
1000a142:	0269      	lsls	r1, r5, #9
1000a144:	0a4d      	lsrs	r5, r1, #9
1000a146:	e76f      	b.n	1000a028 <__aeabi_fsub+0x70>
1000a148:	2e00      	cmp	r6, #0
1000a14a:	d179      	bne.n	1000a240 <__aeabi_fsub+0x288>
1000a14c:	1c6c      	adds	r4, r5, #1
1000a14e:	b2e0      	uxtb	r0, r4
1000a150:	2801      	cmp	r0, #1
1000a152:	dd4b      	ble.n	1000a1ec <__aeabi_fsub+0x234>
1000a154:	2cff      	cmp	r4, #255	; 0xff
1000a156:	d100      	bne.n	1000a15a <__aeabi_fsub+0x1a2>
1000a158:	e098      	b.n	1000a28c <__aeabi_fsub+0x2d4>
1000a15a:	4661      	mov	r1, ip
1000a15c:	187f      	adds	r7, r7, r1
1000a15e:	1cae      	adds	r6, r5, #2
1000a160:	087b      	lsrs	r3, r7, #1
1000a162:	1c15      	adds	r5, r2, #0
1000a164:	e746      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a166:	2dff      	cmp	r5, #255	; 0xff
1000a168:	d000      	beq.n	1000a16c <__aeabi_fsub+0x1b4>
1000a16a:	e768      	b.n	1000a03e <__aeabi_fsub+0x86>
1000a16c:	e7b6      	b.n	1000a0dc <__aeabi_fsub+0x124>
1000a16e:	1c67      	adds	r7, r4, #1
1000a170:	2fff      	cmp	r7, #255	; 0xff
1000a172:	d036      	beq.n	1000a1e2 <__aeabi_fsub+0x22a>
1000a174:	4858      	ldr	r0, [pc, #352]	; (1000a2d8 <__aeabi_fsub+0x320>)
1000a176:	2101      	movs	r1, #1
1000a178:	4019      	ands	r1, r3
1000a17a:	4003      	ands	r3, r0
1000a17c:	085b      	lsrs	r3, r3, #1
1000a17e:	1ca6      	adds	r6, r4, #2
1000a180:	430b      	orrs	r3, r1
1000a182:	1c3c      	adds	r4, r7, #0
1000a184:	1c15      	adds	r5, r2, #0
1000a186:	e735      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a188:	4266      	negs	r6, r4
1000a18a:	2d00      	cmp	r5, #0
1000a18c:	d01e      	beq.n	1000a1cc <__aeabi_fsub+0x214>
1000a18e:	28ff      	cmp	r0, #255	; 0xff
1000a190:	d06f      	beq.n	1000a272 <__aeabi_fsub+0x2ba>
1000a192:	2580      	movs	r5, #128	; 0x80
1000a194:	4662      	mov	r2, ip
1000a196:	04eb      	lsls	r3, r5, #19
1000a198:	431a      	orrs	r2, r3
1000a19a:	4694      	mov	ip, r2
1000a19c:	2501      	movs	r5, #1
1000a19e:	2e1b      	cmp	r6, #27
1000a1a0:	dc09      	bgt.n	1000a1b6 <__aeabi_fsub+0x1fe>
1000a1a2:	4662      	mov	r2, ip
1000a1a4:	2320      	movs	r3, #32
1000a1a6:	40f2      	lsrs	r2, r6
1000a1a8:	4664      	mov	r4, ip
1000a1aa:	1b9e      	subs	r6, r3, r6
1000a1ac:	40b4      	lsls	r4, r6
1000a1ae:	1c25      	adds	r5, r4, #0
1000a1b0:	1e6c      	subs	r4, r5, #1
1000a1b2:	41a5      	sbcs	r5, r4
1000a1b4:	4315      	orrs	r5, r2
1000a1b6:	1b7b      	subs	r3, r7, r5
1000a1b8:	1c04      	adds	r4, r0, #0
1000a1ba:	1c0d      	adds	r5, r1, #0
1000a1bc:	e769      	b.n	1000a092 <__aeabi_fsub+0xda>
1000a1be:	2e00      	cmp	r6, #0
1000a1c0:	d10c      	bne.n	1000a1dc <__aeabi_fsub+0x224>
1000a1c2:	2200      	movs	r2, #0
1000a1c4:	2601      	movs	r6, #1
1000a1c6:	2304      	movs	r3, #4
1000a1c8:	2400      	movs	r4, #0
1000a1ca:	e726      	b.n	1000a01a <__aeabi_fsub+0x62>
1000a1cc:	4664      	mov	r4, ip
1000a1ce:	2c00      	cmp	r4, #0
1000a1d0:	d155      	bne.n	1000a27e <__aeabi_fsub+0x2c6>
1000a1d2:	1c46      	adds	r6, r0, #1
1000a1d4:	1c3b      	adds	r3, r7, #0
1000a1d6:	1c04      	adds	r4, r0, #0
1000a1d8:	1c0d      	adds	r5, r1, #0
1000a1da:	e70b      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a1dc:	1c2c      	adds	r4, r5, #0
1000a1de:	1c15      	adds	r5, r2, #0
1000a1e0:	e75b      	b.n	1000a09a <__aeabi_fsub+0xe2>
1000a1e2:	2380      	movs	r3, #128	; 0x80
1000a1e4:	005e      	lsls	r6, r3, #1
1000a1e6:	24ff      	movs	r4, #255	; 0xff
1000a1e8:	2304      	movs	r3, #4
1000a1ea:	e716      	b.n	1000a01a <__aeabi_fsub+0x62>
1000a1ec:	2d00      	cmp	r5, #0
1000a1ee:	d000      	beq.n	1000a1f2 <__aeabi_fsub+0x23a>
1000a1f0:	e08d      	b.n	1000a30e <__aeabi_fsub+0x356>
1000a1f2:	4665      	mov	r5, ip
1000a1f4:	2d00      	cmp	r5, #0
1000a1f6:	d100      	bne.n	1000a1fa <__aeabi_fsub+0x242>
1000a1f8:	e0ad      	b.n	1000a356 <__aeabi_fsub+0x39e>
1000a1fa:	2f00      	cmp	r7, #0
1000a1fc:	d100      	bne.n	1000a200 <__aeabi_fsub+0x248>
1000a1fe:	e081      	b.n	1000a304 <__aeabi_fsub+0x34c>
1000a200:	197b      	adds	r3, r7, r5
1000a202:	015c      	lsls	r4, r3, #5
1000a204:	d400      	bmi.n	1000a208 <__aeabi_fsub+0x250>
1000a206:	e07e      	b.n	1000a306 <__aeabi_fsub+0x34e>
1000a208:	4f33      	ldr	r7, [pc, #204]	; (1000a2d8 <__aeabi_fsub+0x320>)
1000a20a:	1c15      	adds	r5, r2, #0
1000a20c:	403b      	ands	r3, r7
1000a20e:	2602      	movs	r6, #2
1000a210:	2401      	movs	r4, #1
1000a212:	e6ef      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a214:	1c38      	adds	r0, r7, #0
1000a216:	2320      	movs	r3, #32
1000a218:	40f0      	lsrs	r0, r6
1000a21a:	1b9e      	subs	r6, r3, r6
1000a21c:	40b7      	lsls	r7, r6
1000a21e:	1c3b      	adds	r3, r7, #0
1000a220:	1e5f      	subs	r7, r3, #1
1000a222:	41bb      	sbcs	r3, r7
1000a224:	4303      	orrs	r3, r0
1000a226:	e723      	b.n	1000a070 <__aeabi_fsub+0xb8>
1000a228:	2d00      	cmp	r5, #0
1000a22a:	d115      	bne.n	1000a258 <__aeabi_fsub+0x2a0>
1000a22c:	4665      	mov	r5, ip
1000a22e:	2d00      	cmp	r5, #0
1000a230:	d147      	bne.n	1000a2c2 <__aeabi_fsub+0x30a>
1000a232:	2f00      	cmp	r7, #0
1000a234:	d0c5      	beq.n	1000a1c2 <__aeabi_fsub+0x20a>
1000a236:	1c3b      	adds	r3, r7, #0
1000a238:	1c0d      	adds	r5, r1, #0
1000a23a:	2601      	movs	r6, #1
1000a23c:	2400      	movs	r4, #0
1000a23e:	e6d9      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a240:	4276      	negs	r6, r6
1000a242:	2d00      	cmp	r5, #0
1000a244:	d126      	bne.n	1000a294 <__aeabi_fsub+0x2dc>
1000a246:	4665      	mov	r5, ip
1000a248:	2d00      	cmp	r5, #0
1000a24a:	d000      	beq.n	1000a24e <__aeabi_fsub+0x296>
1000a24c:	e07d      	b.n	1000a34a <__aeabi_fsub+0x392>
1000a24e:	1c46      	adds	r6, r0, #1
1000a250:	1c3b      	adds	r3, r7, #0
1000a252:	1c04      	adds	r4, r0, #0
1000a254:	1c15      	adds	r5, r2, #0
1000a256:	e6cd      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a258:	4665      	mov	r5, ip
1000a25a:	2d00      	cmp	r5, #0
1000a25c:	d140      	bne.n	1000a2e0 <__aeabi_fsub+0x328>
1000a25e:	2f00      	cmp	r7, #0
1000a260:	d107      	bne.n	1000a272 <__aeabi_fsub+0x2ba>
1000a262:	2180      	movs	r1, #128	; 0x80
1000a264:	2200      	movs	r2, #0
1000a266:	004e      	lsls	r6, r1, #1
1000a268:	4b1c      	ldr	r3, [pc, #112]	; (1000a2dc <__aeabi_fsub+0x324>)
1000a26a:	24ff      	movs	r4, #255	; 0xff
1000a26c:	e6d5      	b.n	1000a01a <__aeabi_fsub+0x62>
1000a26e:	28ff      	cmp	r0, #255	; 0xff
1000a270:	d194      	bne.n	1000a19c <__aeabi_fsub+0x1e4>
1000a272:	2080      	movs	r0, #128	; 0x80
1000a274:	1c3b      	adds	r3, r7, #0
1000a276:	1c0d      	adds	r5, r1, #0
1000a278:	0046      	lsls	r6, r0, #1
1000a27a:	24ff      	movs	r4, #255	; 0xff
1000a27c:	e6ba      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a27e:	3e01      	subs	r6, #1
1000a280:	2e00      	cmp	r6, #0
1000a282:	d1f4      	bne.n	1000a26e <__aeabi_fsub+0x2b6>
1000a284:	1b3b      	subs	r3, r7, r4
1000a286:	1c0d      	adds	r5, r1, #0
1000a288:	1c04      	adds	r4, r0, #0
1000a28a:	e702      	b.n	1000a092 <__aeabi_fsub+0xda>
1000a28c:	2580      	movs	r5, #128	; 0x80
1000a28e:	006e      	lsls	r6, r5, #1
1000a290:	2304      	movs	r3, #4
1000a292:	e6c2      	b.n	1000a01a <__aeabi_fsub+0x62>
1000a294:	28ff      	cmp	r0, #255	; 0xff
1000a296:	d052      	beq.n	1000a33e <__aeabi_fsub+0x386>
1000a298:	2480      	movs	r4, #128	; 0x80
1000a29a:	4661      	mov	r1, ip
1000a29c:	04e3      	lsls	r3, r4, #19
1000a29e:	4319      	orrs	r1, r3
1000a2a0:	468c      	mov	ip, r1
1000a2a2:	2301      	movs	r3, #1
1000a2a4:	2e1b      	cmp	r6, #27
1000a2a6:	dc09      	bgt.n	1000a2bc <__aeabi_fsub+0x304>
1000a2a8:	2120      	movs	r1, #32
1000a2aa:	4664      	mov	r4, ip
1000a2ac:	40f4      	lsrs	r4, r6
1000a2ae:	4665      	mov	r5, ip
1000a2b0:	1b8e      	subs	r6, r1, r6
1000a2b2:	40b5      	lsls	r5, r6
1000a2b4:	1c2b      	adds	r3, r5, #0
1000a2b6:	1e59      	subs	r1, r3, #1
1000a2b8:	418b      	sbcs	r3, r1
1000a2ba:	4323      	orrs	r3, r4
1000a2bc:	19db      	adds	r3, r3, r7
1000a2be:	1c04      	adds	r4, r0, #0
1000a2c0:	e6d8      	b.n	1000a074 <__aeabi_fsub+0xbc>
1000a2c2:	2f00      	cmp	r7, #0
1000a2c4:	d01e      	beq.n	1000a304 <__aeabi_fsub+0x34c>
1000a2c6:	1beb      	subs	r3, r5, r7
1000a2c8:	0158      	lsls	r0, r3, #5
1000a2ca:	d54b      	bpl.n	1000a364 <__aeabi_fsub+0x3ac>
1000a2cc:	1b7b      	subs	r3, r7, r5
1000a2ce:	2601      	movs	r6, #1
1000a2d0:	1c0d      	adds	r5, r1, #0
1000a2d2:	2400      	movs	r4, #0
1000a2d4:	e68e      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a2d6:	46c0      	nop			; (mov r8, r8)
1000a2d8:	fbffffff 	.word	0xfbffffff
1000a2dc:	03fffffc 	.word	0x03fffffc
1000a2e0:	2f00      	cmp	r7, #0
1000a2e2:	d100      	bne.n	1000a2e6 <__aeabi_fsub+0x32e>
1000a2e4:	e6fa      	b.n	1000a0dc <__aeabi_fsub+0x124>
1000a2e6:	2080      	movs	r0, #128	; 0x80
1000a2e8:	08eb      	lsrs	r3, r5, #3
1000a2ea:	03c4      	lsls	r4, r0, #15
1000a2ec:	4223      	tst	r3, r4
1000a2ee:	d037      	beq.n	1000a360 <__aeabi_fsub+0x3a8>
1000a2f0:	08ff      	lsrs	r7, r7, #3
1000a2f2:	4227      	tst	r7, r4
1000a2f4:	d134      	bne.n	1000a360 <__aeabi_fsub+0x3a8>
1000a2f6:	1c3b      	adds	r3, r7, #0
1000a2f8:	1c0d      	adds	r5, r1, #0
1000a2fa:	2280      	movs	r2, #128	; 0x80
1000a2fc:	00db      	lsls	r3, r3, #3
1000a2fe:	0056      	lsls	r6, r2, #1
1000a300:	24ff      	movs	r4, #255	; 0xff
1000a302:	e677      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a304:	4663      	mov	r3, ip
1000a306:	1c15      	adds	r5, r2, #0
1000a308:	2601      	movs	r6, #1
1000a30a:	2400      	movs	r4, #0
1000a30c:	e672      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a30e:	4664      	mov	r4, ip
1000a310:	2c00      	cmp	r4, #0
1000a312:	d014      	beq.n	1000a33e <__aeabi_fsub+0x386>
1000a314:	2f00      	cmp	r7, #0
1000a316:	d100      	bne.n	1000a31a <__aeabi_fsub+0x362>
1000a318:	e6e0      	b.n	1000a0dc <__aeabi_fsub+0x124>
1000a31a:	2380      	movs	r3, #128	; 0x80
1000a31c:	08e6      	lsrs	r6, r4, #3
1000a31e:	03d8      	lsls	r0, r3, #15
1000a320:	1c31      	adds	r1, r6, #0
1000a322:	4206      	tst	r6, r0
1000a324:	d003      	beq.n	1000a32e <__aeabi_fsub+0x376>
1000a326:	08f9      	lsrs	r1, r7, #3
1000a328:	4201      	tst	r1, r0
1000a32a:	d000      	beq.n	1000a32e <__aeabi_fsub+0x376>
1000a32c:	1c31      	adds	r1, r6, #0
1000a32e:	1c15      	adds	r5, r2, #0
1000a330:	2280      	movs	r2, #128	; 0x80
1000a332:	00cb      	lsls	r3, r1, #3
1000a334:	0056      	lsls	r6, r2, #1
1000a336:	24ff      	movs	r4, #255	; 0xff
1000a338:	e65c      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a33a:	28ff      	cmp	r0, #255	; 0xff
1000a33c:	d1b1      	bne.n	1000a2a2 <__aeabi_fsub+0x2ea>
1000a33e:	2080      	movs	r0, #128	; 0x80
1000a340:	1c3b      	adds	r3, r7, #0
1000a342:	1c15      	adds	r5, r2, #0
1000a344:	0046      	lsls	r6, r0, #1
1000a346:	24ff      	movs	r4, #255	; 0xff
1000a348:	e654      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a34a:	3e01      	subs	r6, #1
1000a34c:	2e00      	cmp	r6, #0
1000a34e:	d1f4      	bne.n	1000a33a <__aeabi_fsub+0x382>
1000a350:	197b      	adds	r3, r7, r5
1000a352:	1c04      	adds	r4, r0, #0
1000a354:	e68e      	b.n	1000a074 <__aeabi_fsub+0xbc>
1000a356:	1c3b      	adds	r3, r7, #0
1000a358:	1c15      	adds	r5, r2, #0
1000a35a:	2601      	movs	r6, #1
1000a35c:	2400      	movs	r4, #0
1000a35e:	e649      	b.n	10009ff4 <__aeabi_fsub+0x3c>
1000a360:	1c15      	adds	r5, r2, #0
1000a362:	e7ca      	b.n	1000a2fa <__aeabi_fsub+0x342>
1000a364:	2b00      	cmp	r3, #0
1000a366:	d100      	bne.n	1000a36a <__aeabi_fsub+0x3b2>
1000a368:	e72b      	b.n	1000a1c2 <__aeabi_fsub+0x20a>
1000a36a:	e7cc      	b.n	1000a306 <__aeabi_fsub+0x34e>

1000a36c <__aeabi_f2iz>:
1000a36c:	0243      	lsls	r3, r0, #9
1000a36e:	0042      	lsls	r2, r0, #1
1000a370:	0a59      	lsrs	r1, r3, #9
1000a372:	0e13      	lsrs	r3, r2, #24
1000a374:	0fc2      	lsrs	r2, r0, #31
1000a376:	2000      	movs	r0, #0
1000a378:	2b7e      	cmp	r3, #126	; 0x7e
1000a37a:	dd0d      	ble.n	1000a398 <__aeabi_f2iz+0x2c>
1000a37c:	2b9d      	cmp	r3, #157	; 0x9d
1000a37e:	dc0c      	bgt.n	1000a39a <__aeabi_f2iz+0x2e>
1000a380:	2080      	movs	r0, #128	; 0x80
1000a382:	0400      	lsls	r0, r0, #16
1000a384:	4301      	orrs	r1, r0
1000a386:	2b95      	cmp	r3, #149	; 0x95
1000a388:	dc0a      	bgt.n	1000a3a0 <__aeabi_f2iz+0x34>
1000a38a:	2096      	movs	r0, #150	; 0x96
1000a38c:	1ac3      	subs	r3, r0, r3
1000a38e:	40d9      	lsrs	r1, r3
1000a390:	4248      	negs	r0, r1
1000a392:	2a00      	cmp	r2, #0
1000a394:	d100      	bne.n	1000a398 <__aeabi_f2iz+0x2c>
1000a396:	1c08      	adds	r0, r1, #0
1000a398:	4770      	bx	lr
1000a39a:	4903      	ldr	r1, [pc, #12]	; (1000a3a8 <__aeabi_f2iz+0x3c>)
1000a39c:	1850      	adds	r0, r2, r1
1000a39e:	e7fb      	b.n	1000a398 <__aeabi_f2iz+0x2c>
1000a3a0:	3b96      	subs	r3, #150	; 0x96
1000a3a2:	4099      	lsls	r1, r3
1000a3a4:	e7f4      	b.n	1000a390 <__aeabi_f2iz+0x24>
1000a3a6:	46c0      	nop			; (mov r8, r8)
1000a3a8:	7fffffff 	.word	0x7fffffff

1000a3ac <__aeabi_ui2f>:
1000a3ac:	b510      	push	{r4, lr}
1000a3ae:	1e04      	subs	r4, r0, #0
1000a3b0:	d034      	beq.n	1000a41c <__aeabi_ui2f+0x70>
1000a3b2:	f000 f84f 	bl	1000a454 <__clzsi2>
1000a3b6:	239e      	movs	r3, #158	; 0x9e
1000a3b8:	1a1b      	subs	r3, r3, r0
1000a3ba:	2b96      	cmp	r3, #150	; 0x96
1000a3bc:	dc07      	bgt.n	1000a3ce <__aeabi_ui2f+0x22>
1000a3be:	3808      	subs	r0, #8
1000a3c0:	4084      	lsls	r4, r0
1000a3c2:	0264      	lsls	r4, r4, #9
1000a3c4:	0a61      	lsrs	r1, r4, #9
1000a3c6:	b2db      	uxtb	r3, r3
1000a3c8:	05d8      	lsls	r0, r3, #23
1000a3ca:	4308      	orrs	r0, r1
1000a3cc:	bd10      	pop	{r4, pc}
1000a3ce:	2b99      	cmp	r3, #153	; 0x99
1000a3d0:	dd0a      	ble.n	1000a3e8 <__aeabi_ui2f+0x3c>
1000a3d2:	1c02      	adds	r2, r0, #0
1000a3d4:	321b      	adds	r2, #27
1000a3d6:	1c21      	adds	r1, r4, #0
1000a3d8:	4091      	lsls	r1, r2
1000a3da:	1c0a      	adds	r2, r1, #0
1000a3dc:	1e51      	subs	r1, r2, #1
1000a3de:	418a      	sbcs	r2, r1
1000a3e0:	2105      	movs	r1, #5
1000a3e2:	1a09      	subs	r1, r1, r0
1000a3e4:	40cc      	lsrs	r4, r1
1000a3e6:	4314      	orrs	r4, r2
1000a3e8:	2805      	cmp	r0, #5
1000a3ea:	dc1a      	bgt.n	1000a422 <__aeabi_ui2f+0x76>
1000a3ec:	4a18      	ldr	r2, [pc, #96]	; (1000a450 <__aeabi_ui2f+0xa4>)
1000a3ee:	210f      	movs	r1, #15
1000a3f0:	4022      	ands	r2, r4
1000a3f2:	400c      	ands	r4, r1
1000a3f4:	2c04      	cmp	r4, #4
1000a3f6:	d000      	beq.n	1000a3fa <__aeabi_ui2f+0x4e>
1000a3f8:	3204      	adds	r2, #4
1000a3fa:	0151      	lsls	r1, r2, #5
1000a3fc:	d505      	bpl.n	1000a40a <__aeabi_ui2f+0x5e>
1000a3fe:	249f      	movs	r4, #159	; 0x9f
1000a400:	1a23      	subs	r3, r4, r0
1000a402:	2bff      	cmp	r3, #255	; 0xff
1000a404:	d021      	beq.n	1000a44a <__aeabi_ui2f+0x9e>
1000a406:	4812      	ldr	r0, [pc, #72]	; (1000a450 <__aeabi_ui2f+0xa4>)
1000a408:	4002      	ands	r2, r0
1000a40a:	1c59      	adds	r1, r3, #1
1000a40c:	b2cc      	uxtb	r4, r1
1000a40e:	08d2      	lsrs	r2, r2, #3
1000a410:	2c01      	cmp	r4, #1
1000a412:	dd09      	ble.n	1000a428 <__aeabi_ui2f+0x7c>
1000a414:	0250      	lsls	r0, r2, #9
1000a416:	0a41      	lsrs	r1, r0, #9
1000a418:	b2db      	uxtb	r3, r3
1000a41a:	e7d5      	b.n	1000a3c8 <__aeabi_ui2f+0x1c>
1000a41c:	2300      	movs	r3, #0
1000a41e:	2100      	movs	r1, #0
1000a420:	e7d2      	b.n	1000a3c8 <__aeabi_ui2f+0x1c>
1000a422:	1f42      	subs	r2, r0, #5
1000a424:	4094      	lsls	r4, r2
1000a426:	e7e1      	b.n	1000a3ec <__aeabi_ui2f+0x40>
1000a428:	2a00      	cmp	r2, #0
1000a42a:	d00b      	beq.n	1000a444 <__aeabi_ui2f+0x98>
1000a42c:	2b00      	cmp	r3, #0
1000a42e:	d006      	beq.n	1000a43e <__aeabi_ui2f+0x92>
1000a430:	2180      	movs	r1, #128	; 0x80
1000a432:	03cc      	lsls	r4, r1, #15
1000a434:	4322      	orrs	r2, r4
1000a436:	0252      	lsls	r2, r2, #9
1000a438:	0a51      	lsrs	r1, r2, #9
1000a43a:	b2db      	uxtb	r3, r3
1000a43c:	e7c4      	b.n	1000a3c8 <__aeabi_ui2f+0x1c>
1000a43e:	0250      	lsls	r0, r2, #9
1000a440:	0a41      	lsrs	r1, r0, #9
1000a442:	e7c1      	b.n	1000a3c8 <__aeabi_ui2f+0x1c>
1000a444:	b2db      	uxtb	r3, r3
1000a446:	2100      	movs	r1, #0
1000a448:	e7be      	b.n	1000a3c8 <__aeabi_ui2f+0x1c>
1000a44a:	23ff      	movs	r3, #255	; 0xff
1000a44c:	2100      	movs	r1, #0
1000a44e:	e7bb      	b.n	1000a3c8 <__aeabi_ui2f+0x1c>
1000a450:	fbffffff 	.word	0xfbffffff

1000a454 <__clzsi2>:
1000a454:	211c      	movs	r1, #28
1000a456:	2301      	movs	r3, #1
1000a458:	041b      	lsls	r3, r3, #16
1000a45a:	4298      	cmp	r0, r3
1000a45c:	d301      	bcc.n	1000a462 <__clzsi2+0xe>
1000a45e:	0c00      	lsrs	r0, r0, #16
1000a460:	3910      	subs	r1, #16
1000a462:	0a1b      	lsrs	r3, r3, #8
1000a464:	4298      	cmp	r0, r3
1000a466:	d301      	bcc.n	1000a46c <__clzsi2+0x18>
1000a468:	0a00      	lsrs	r0, r0, #8
1000a46a:	3908      	subs	r1, #8
1000a46c:	091b      	lsrs	r3, r3, #4
1000a46e:	4298      	cmp	r0, r3
1000a470:	d301      	bcc.n	1000a476 <__clzsi2+0x22>
1000a472:	0900      	lsrs	r0, r0, #4
1000a474:	3904      	subs	r1, #4
1000a476:	a202      	add	r2, pc, #8	; (adr r2, 1000a480 <__clzsi2+0x2c>)
1000a478:	5c10      	ldrb	r0, [r2, r0]
1000a47a:	1840      	adds	r0, r0, r1
1000a47c:	4770      	bx	lr
1000a47e:	46c0      	nop			; (mov r8, r8)
1000a480:	02020304 	.word	0x02020304
1000a484:	01010101 	.word	0x01010101
	...

1000a490 <memcmp>:
1000a490:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a492:	2a03      	cmp	r2, #3
1000a494:	d932      	bls.n	1000a4fc <memcmp+0x6c>
1000a496:	1c0b      	adds	r3, r1, #0
1000a498:	4303      	orrs	r3, r0
1000a49a:	079c      	lsls	r4, r3, #30
1000a49c:	d130      	bne.n	1000a500 <memcmp+0x70>
1000a49e:	1f15      	subs	r5, r2, #4
1000a4a0:	076c      	lsls	r4, r5, #29
1000a4a2:	0fe6      	lsrs	r6, r4, #31
1000a4a4:	46b4      	mov	ip, r6
1000a4a6:	680f      	ldr	r7, [r1, #0]
1000a4a8:	6806      	ldr	r6, [r0, #0]
1000a4aa:	1d03      	adds	r3, r0, #4
1000a4ac:	1d0c      	adds	r4, r1, #4
1000a4ae:	42be      	cmp	r6, r7
1000a4b0:	d124      	bne.n	1000a4fc <memcmp+0x6c>
1000a4b2:	1e2a      	subs	r2, r5, #0
1000a4b4:	2a03      	cmp	r2, #3
1000a4b6:	d91f      	bls.n	1000a4f8 <memcmp+0x68>
1000a4b8:	4660      	mov	r0, ip
1000a4ba:	2800      	cmp	r0, #0
1000a4bc:	d008      	beq.n	1000a4d0 <memcmp+0x40>
1000a4be:	1c21      	adds	r1, r4, #0
1000a4c0:	1c18      	adds	r0, r3, #0
1000a4c2:	6805      	ldr	r5, [r0, #0]
1000a4c4:	680e      	ldr	r6, [r1, #0]
1000a4c6:	3304      	adds	r3, #4
1000a4c8:	3404      	adds	r4, #4
1000a4ca:	42b5      	cmp	r5, r6
1000a4cc:	d011      	beq.n	1000a4f2 <memcmp+0x62>
1000a4ce:	e015      	b.n	1000a4fc <memcmp+0x6c>
1000a4d0:	1c21      	adds	r1, r4, #0
1000a4d2:	1c18      	adds	r0, r3, #0
1000a4d4:	6807      	ldr	r7, [r0, #0]
1000a4d6:	680d      	ldr	r5, [r1, #0]
1000a4d8:	3304      	adds	r3, #4
1000a4da:	3404      	adds	r4, #4
1000a4dc:	42af      	cmp	r7, r5
1000a4de:	d10d      	bne.n	1000a4fc <memcmp+0x6c>
1000a4e0:	1c21      	adds	r1, r4, #0
1000a4e2:	1c18      	adds	r0, r3, #0
1000a4e4:	6806      	ldr	r6, [r0, #0]
1000a4e6:	680f      	ldr	r7, [r1, #0]
1000a4e8:	3a04      	subs	r2, #4
1000a4ea:	3304      	adds	r3, #4
1000a4ec:	3404      	adds	r4, #4
1000a4ee:	42be      	cmp	r6, r7
1000a4f0:	d104      	bne.n	1000a4fc <memcmp+0x6c>
1000a4f2:	3a04      	subs	r2, #4
1000a4f4:	2a03      	cmp	r2, #3
1000a4f6:	d8eb      	bhi.n	1000a4d0 <memcmp+0x40>
1000a4f8:	1c21      	adds	r1, r4, #0
1000a4fa:	1c18      	adds	r0, r3, #0
1000a4fc:	2a00      	cmp	r2, #0
1000a4fe:	d01e      	beq.n	1000a53e <memcmp+0xae>
1000a500:	7804      	ldrb	r4, [r0, #0]
1000a502:	780d      	ldrb	r5, [r1, #0]
1000a504:	42ac      	cmp	r4, r5
1000a506:	d10a      	bne.n	1000a51e <memcmp+0x8e>
1000a508:	1c43      	adds	r3, r0, #1
1000a50a:	1882      	adds	r2, r0, r2
1000a50c:	1ad0      	subs	r0, r2, r3
1000a50e:	07c6      	lsls	r6, r0, #31
1000a510:	d512      	bpl.n	1000a538 <memcmp+0xa8>
1000a512:	3101      	adds	r1, #1
1000a514:	781c      	ldrb	r4, [r3, #0]
1000a516:	780d      	ldrb	r5, [r1, #0]
1000a518:	3301      	adds	r3, #1
1000a51a:	42ac      	cmp	r4, r5
1000a51c:	d00c      	beq.n	1000a538 <memcmp+0xa8>
1000a51e:	1b60      	subs	r0, r4, r5
1000a520:	e00e      	b.n	1000a540 <memcmp+0xb0>
1000a522:	781c      	ldrb	r4, [r3, #0]
1000a524:	784d      	ldrb	r5, [r1, #1]
1000a526:	1c5f      	adds	r7, r3, #1
1000a528:	42ac      	cmp	r4, r5
1000a52a:	d1f8      	bne.n	1000a51e <memcmp+0x8e>
1000a52c:	785c      	ldrb	r4, [r3, #1]
1000a52e:	7875      	ldrb	r5, [r6, #1]
1000a530:	1c71      	adds	r1, r6, #1
1000a532:	1c7b      	adds	r3, r7, #1
1000a534:	42ac      	cmp	r4, r5
1000a536:	d1f2      	bne.n	1000a51e <memcmp+0x8e>
1000a538:	1c4e      	adds	r6, r1, #1
1000a53a:	4293      	cmp	r3, r2
1000a53c:	d1f1      	bne.n	1000a522 <memcmp+0x92>
1000a53e:	2000      	movs	r0, #0
1000a540:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a542:	46c0      	nop			; (mov r8, r8)

1000a544 <memcpy>:
1000a544:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a546:	464f      	mov	r7, r9
1000a548:	4646      	mov	r6, r8
1000a54a:	b4c0      	push	{r6, r7}
1000a54c:	2a0f      	cmp	r2, #15
1000a54e:	d972      	bls.n	1000a636 <memcpy+0xf2>
1000a550:	1c0b      	adds	r3, r1, #0
1000a552:	4303      	orrs	r3, r0
1000a554:	079c      	lsls	r4, r3, #30
1000a556:	d000      	beq.n	1000a55a <memcpy+0x16>
1000a558:	e090      	b.n	1000a67c <memcpy+0x138>
1000a55a:	1c17      	adds	r7, r2, #0
1000a55c:	3f10      	subs	r7, #16
1000a55e:	093c      	lsrs	r4, r7, #4
1000a560:	3401      	adds	r4, #1
1000a562:	0127      	lsls	r7, r4, #4
1000a564:	680c      	ldr	r4, [r1, #0]
1000a566:	1c3b      	adds	r3, r7, #0
1000a568:	6004      	str	r4, [r0, #0]
1000a56a:	3b10      	subs	r3, #16
1000a56c:	06de      	lsls	r6, r3, #27
1000a56e:	684b      	ldr	r3, [r1, #4]
1000a570:	19cd      	adds	r5, r1, r7
1000a572:	6043      	str	r3, [r0, #4]
1000a574:	688c      	ldr	r4, [r1, #8]
1000a576:	0ff6      	lsrs	r6, r6, #31
1000a578:	6084      	str	r4, [r0, #8]
1000a57a:	68cb      	ldr	r3, [r1, #12]
1000a57c:	1c04      	adds	r4, r0, #0
1000a57e:	60c3      	str	r3, [r0, #12]
1000a580:	1c0b      	adds	r3, r1, #0
1000a582:	3310      	adds	r3, #16
1000a584:	3410      	adds	r4, #16
1000a586:	429d      	cmp	r5, r3
1000a588:	d027      	beq.n	1000a5da <memcpy+0x96>
1000a58a:	2e00      	cmp	r6, #0
1000a58c:	d00b      	beq.n	1000a5a6 <memcpy+0x62>
1000a58e:	6819      	ldr	r1, [r3, #0]
1000a590:	6021      	str	r1, [r4, #0]
1000a592:	685e      	ldr	r6, [r3, #4]
1000a594:	6066      	str	r6, [r4, #4]
1000a596:	6899      	ldr	r1, [r3, #8]
1000a598:	60a1      	str	r1, [r4, #8]
1000a59a:	68de      	ldr	r6, [r3, #12]
1000a59c:	3310      	adds	r3, #16
1000a59e:	60e6      	str	r6, [r4, #12]
1000a5a0:	3410      	adds	r4, #16
1000a5a2:	429d      	cmp	r5, r3
1000a5a4:	d019      	beq.n	1000a5da <memcpy+0x96>
1000a5a6:	6819      	ldr	r1, [r3, #0]
1000a5a8:	6021      	str	r1, [r4, #0]
1000a5aa:	685e      	ldr	r6, [r3, #4]
1000a5ac:	6066      	str	r6, [r4, #4]
1000a5ae:	6899      	ldr	r1, [r3, #8]
1000a5b0:	60a1      	str	r1, [r4, #8]
1000a5b2:	68de      	ldr	r6, [r3, #12]
1000a5b4:	1c19      	adds	r1, r3, #0
1000a5b6:	60e6      	str	r6, [r4, #12]
1000a5b8:	691b      	ldr	r3, [r3, #16]
1000a5ba:	1c26      	adds	r6, r4, #0
1000a5bc:	6123      	str	r3, [r4, #16]
1000a5be:	694c      	ldr	r4, [r1, #20]
1000a5c0:	6174      	str	r4, [r6, #20]
1000a5c2:	698b      	ldr	r3, [r1, #24]
1000a5c4:	61b3      	str	r3, [r6, #24]
1000a5c6:	69cc      	ldr	r4, [r1, #28]
1000a5c8:	3110      	adds	r1, #16
1000a5ca:	61f4      	str	r4, [r6, #28]
1000a5cc:	1c0b      	adds	r3, r1, #0
1000a5ce:	3610      	adds	r6, #16
1000a5d0:	1c34      	adds	r4, r6, #0
1000a5d2:	3310      	adds	r3, #16
1000a5d4:	3410      	adds	r4, #16
1000a5d6:	429d      	cmp	r5, r3
1000a5d8:	d1e5      	bne.n	1000a5a6 <memcpy+0x62>
1000a5da:	183f      	adds	r7, r7, r0
1000a5dc:	210f      	movs	r1, #15
1000a5de:	46b8      	mov	r8, r7
1000a5e0:	4011      	ands	r1, r2
1000a5e2:	2903      	cmp	r1, #3
1000a5e4:	d94d      	bls.n	1000a682 <memcpy+0x13e>
1000a5e6:	3904      	subs	r1, #4
1000a5e8:	088e      	lsrs	r6, r1, #2
1000a5ea:	00b3      	lsls	r3, r6, #2
1000a5ec:	3304      	adds	r3, #4
1000a5ee:	18ec      	adds	r4, r5, r3
1000a5f0:	46a4      	mov	ip, r4
1000a5f2:	3b04      	subs	r3, #4
1000a5f4:	1c2c      	adds	r4, r5, #0
1000a5f6:	075f      	lsls	r7, r3, #29
1000a5f8:	cc08      	ldmia	r4!, {r3}
1000a5fa:	4641      	mov	r1, r8
1000a5fc:	46b1      	mov	r9, r6
1000a5fe:	c108      	stmia	r1!, {r3}
1000a600:	0ffe      	lsrs	r6, r7, #31
1000a602:	4564      	cmp	r4, ip
1000a604:	d00f      	beq.n	1000a626 <memcpy+0xe2>
1000a606:	2e00      	cmp	r6, #0
1000a608:	d003      	beq.n	1000a612 <memcpy+0xce>
1000a60a:	cc80      	ldmia	r4!, {r7}
1000a60c:	c180      	stmia	r1!, {r7}
1000a60e:	4564      	cmp	r4, ip
1000a610:	d009      	beq.n	1000a626 <memcpy+0xe2>
1000a612:	1c27      	adds	r7, r4, #0
1000a614:	cf08      	ldmia	r7!, {r3}
1000a616:	1c0e      	adds	r6, r1, #0
1000a618:	c608      	stmia	r6!, {r3}
1000a61a:	6864      	ldr	r4, [r4, #4]
1000a61c:	604c      	str	r4, [r1, #4]
1000a61e:	1d3c      	adds	r4, r7, #4
1000a620:	1d31      	adds	r1, r6, #4
1000a622:	4564      	cmp	r4, ip
1000a624:	d1f5      	bne.n	1000a612 <memcpy+0xce>
1000a626:	4649      	mov	r1, r9
1000a628:	3101      	adds	r1, #1
1000a62a:	008e      	lsls	r6, r1, #2
1000a62c:	2703      	movs	r7, #3
1000a62e:	19ad      	adds	r5, r5, r6
1000a630:	403a      	ands	r2, r7
1000a632:	4446      	add	r6, r8
1000a634:	e001      	b.n	1000a63a <memcpy+0xf6>
1000a636:	1c0d      	adds	r5, r1, #0
1000a638:	1c06      	adds	r6, r0, #0
1000a63a:	2a00      	cmp	r2, #0
1000a63c:	d01a      	beq.n	1000a674 <memcpy+0x130>
1000a63e:	782f      	ldrb	r7, [r5, #0]
1000a640:	18b2      	adds	r2, r6, r2
1000a642:	43f3      	mvns	r3, r6
1000a644:	18d1      	adds	r1, r2, r3
1000a646:	2401      	movs	r4, #1
1000a648:	7037      	strb	r7, [r6, #0]
1000a64a:	3601      	adds	r6, #1
1000a64c:	400c      	ands	r4, r1
1000a64e:	3501      	adds	r5, #1
1000a650:	4296      	cmp	r6, r2
1000a652:	d00f      	beq.n	1000a674 <memcpy+0x130>
1000a654:	2c00      	cmp	r4, #0
1000a656:	d005      	beq.n	1000a664 <memcpy+0x120>
1000a658:	782b      	ldrb	r3, [r5, #0]
1000a65a:	3501      	adds	r5, #1
1000a65c:	7033      	strb	r3, [r6, #0]
1000a65e:	3601      	adds	r6, #1
1000a660:	4296      	cmp	r6, r2
1000a662:	d007      	beq.n	1000a674 <memcpy+0x130>
1000a664:	7829      	ldrb	r1, [r5, #0]
1000a666:	7031      	strb	r1, [r6, #0]
1000a668:	786c      	ldrb	r4, [r5, #1]
1000a66a:	3502      	adds	r5, #2
1000a66c:	7074      	strb	r4, [r6, #1]
1000a66e:	3602      	adds	r6, #2
1000a670:	4296      	cmp	r6, r2
1000a672:	d1f7      	bne.n	1000a664 <memcpy+0x120>
1000a674:	bc0c      	pop	{r2, r3}
1000a676:	4690      	mov	r8, r2
1000a678:	4699      	mov	r9, r3
1000a67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a67c:	1c06      	adds	r6, r0, #0
1000a67e:	1c0d      	adds	r5, r1, #0
1000a680:	e7dd      	b.n	1000a63e <memcpy+0xfa>
1000a682:	1c3e      	adds	r6, r7, #0
1000a684:	1c0a      	adds	r2, r1, #0
1000a686:	e7d8      	b.n	1000a63a <memcpy+0xf6>

1000a688 <memset>:
1000a688:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a68a:	0783      	lsls	r3, r0, #30
1000a68c:	d100      	bne.n	1000a690 <memset+0x8>
1000a68e:	e081      	b.n	1000a794 <memset+0x10c>
1000a690:	1e54      	subs	r4, r2, #1
1000a692:	2a00      	cmp	r2, #0
1000a694:	d07d      	beq.n	1000a792 <memset+0x10a>
1000a696:	b2cd      	uxtb	r5, r1
1000a698:	1c03      	adds	r3, r0, #0
1000a69a:	2603      	movs	r6, #3
1000a69c:	07e7      	lsls	r7, r4, #31
1000a69e:	d511      	bpl.n	1000a6c4 <memset+0x3c>
1000a6a0:	1c43      	adds	r3, r0, #1
1000a6a2:	7005      	strb	r5, [r0, #0]
1000a6a4:	4233      	tst	r3, r6
1000a6a6:	d011      	beq.n	1000a6cc <memset+0x44>
1000a6a8:	701d      	strb	r5, [r3, #0]
1000a6aa:	3301      	adds	r3, #1
1000a6ac:	1e94      	subs	r4, r2, #2
1000a6ae:	4233      	tst	r3, r6
1000a6b0:	d00c      	beq.n	1000a6cc <memset+0x44>
1000a6b2:	1e62      	subs	r2, r4, #1
1000a6b4:	2c00      	cmp	r4, #0
1000a6b6:	d06c      	beq.n	1000a792 <memset+0x10a>
1000a6b8:	701d      	strb	r5, [r3, #0]
1000a6ba:	3301      	adds	r3, #1
1000a6bc:	1c14      	adds	r4, r2, #0
1000a6be:	4233      	tst	r3, r6
1000a6c0:	d004      	beq.n	1000a6cc <memset+0x44>
1000a6c2:	3c01      	subs	r4, #1
1000a6c4:	701d      	strb	r5, [r3, #0]
1000a6c6:	3301      	adds	r3, #1
1000a6c8:	4233      	tst	r3, r6
1000a6ca:	d1f2      	bne.n	1000a6b2 <memset+0x2a>
1000a6cc:	2c03      	cmp	r4, #3
1000a6ce:	d949      	bls.n	1000a764 <memset+0xdc>
1000a6d0:	22ff      	movs	r2, #255	; 0xff
1000a6d2:	400a      	ands	r2, r1
1000a6d4:	0217      	lsls	r7, r2, #8
1000a6d6:	433a      	orrs	r2, r7
1000a6d8:	0415      	lsls	r5, r2, #16
1000a6da:	432a      	orrs	r2, r5
1000a6dc:	2c0f      	cmp	r4, #15
1000a6de:	d95c      	bls.n	1000a79a <memset+0x112>
1000a6e0:	1c26      	adds	r6, r4, #0
1000a6e2:	3e10      	subs	r6, #16
1000a6e4:	0937      	lsrs	r7, r6, #4
1000a6e6:	3701      	adds	r7, #1
1000a6e8:	013d      	lsls	r5, r7, #4
1000a6ea:	195e      	adds	r6, r3, r5
1000a6ec:	3d10      	subs	r5, #16
1000a6ee:	06ef      	lsls	r7, r5, #27
1000a6f0:	601a      	str	r2, [r3, #0]
1000a6f2:	605a      	str	r2, [r3, #4]
1000a6f4:	609a      	str	r2, [r3, #8]
1000a6f6:	60da      	str	r2, [r3, #12]
1000a6f8:	3310      	adds	r3, #16
1000a6fa:	0ffd      	lsrs	r5, r7, #31
1000a6fc:	429e      	cmp	r6, r3
1000a6fe:	d013      	beq.n	1000a728 <memset+0xa0>
1000a700:	2d00      	cmp	r5, #0
1000a702:	d006      	beq.n	1000a712 <memset+0x8a>
1000a704:	601a      	str	r2, [r3, #0]
1000a706:	605a      	str	r2, [r3, #4]
1000a708:	609a      	str	r2, [r3, #8]
1000a70a:	60da      	str	r2, [r3, #12]
1000a70c:	3310      	adds	r3, #16
1000a70e:	429e      	cmp	r6, r3
1000a710:	d00a      	beq.n	1000a728 <memset+0xa0>
1000a712:	601a      	str	r2, [r3, #0]
1000a714:	605a      	str	r2, [r3, #4]
1000a716:	609a      	str	r2, [r3, #8]
1000a718:	60da      	str	r2, [r3, #12]
1000a71a:	611a      	str	r2, [r3, #16]
1000a71c:	615a      	str	r2, [r3, #20]
1000a71e:	619a      	str	r2, [r3, #24]
1000a720:	61da      	str	r2, [r3, #28]
1000a722:	3320      	adds	r3, #32
1000a724:	429e      	cmp	r6, r3
1000a726:	d1f4      	bne.n	1000a712 <memset+0x8a>
1000a728:	230f      	movs	r3, #15
1000a72a:	401c      	ands	r4, r3
1000a72c:	1c35      	adds	r5, r6, #0
1000a72e:	1c33      	adds	r3, r6, #0
1000a730:	2c03      	cmp	r4, #3
1000a732:	d917      	bls.n	1000a764 <memset+0xdc>
1000a734:	1f26      	subs	r6, r4, #4
1000a736:	08b7      	lsrs	r7, r6, #2
1000a738:	3701      	adds	r7, #1
1000a73a:	00be      	lsls	r6, r7, #2
1000a73c:	19ab      	adds	r3, r5, r6
1000a73e:	3e04      	subs	r6, #4
1000a740:	0777      	lsls	r7, r6, #29
1000a742:	c504      	stmia	r5!, {r2}
1000a744:	0ffe      	lsrs	r6, r7, #31
1000a746:	429d      	cmp	r5, r3
1000a748:	d00a      	beq.n	1000a760 <memset+0xd8>
1000a74a:	2e00      	cmp	r6, #0
1000a74c:	d002      	beq.n	1000a754 <memset+0xcc>
1000a74e:	c504      	stmia	r5!, {r2}
1000a750:	429d      	cmp	r5, r3
1000a752:	d005      	beq.n	1000a760 <memset+0xd8>
1000a754:	1c2f      	adds	r7, r5, #0
1000a756:	c704      	stmia	r7!, {r2}
1000a758:	606a      	str	r2, [r5, #4]
1000a75a:	1d3d      	adds	r5, r7, #4
1000a75c:	429d      	cmp	r5, r3
1000a75e:	d1f9      	bne.n	1000a754 <memset+0xcc>
1000a760:	2203      	movs	r2, #3
1000a762:	4014      	ands	r4, r2
1000a764:	2c00      	cmp	r4, #0
1000a766:	d014      	beq.n	1000a792 <memset+0x10a>
1000a768:	191c      	adds	r4, r3, r4
1000a76a:	43dd      	mvns	r5, r3
1000a76c:	b2c9      	uxtb	r1, r1
1000a76e:	1966      	adds	r6, r4, r5
1000a770:	2701      	movs	r7, #1
1000a772:	7019      	strb	r1, [r3, #0]
1000a774:	3301      	adds	r3, #1
1000a776:	403e      	ands	r6, r7
1000a778:	42a3      	cmp	r3, r4
1000a77a:	d00a      	beq.n	1000a792 <memset+0x10a>
1000a77c:	2e00      	cmp	r6, #0
1000a77e:	d003      	beq.n	1000a788 <memset+0x100>
1000a780:	7019      	strb	r1, [r3, #0]
1000a782:	3301      	adds	r3, #1
1000a784:	42a3      	cmp	r3, r4
1000a786:	d004      	beq.n	1000a792 <memset+0x10a>
1000a788:	7019      	strb	r1, [r3, #0]
1000a78a:	7059      	strb	r1, [r3, #1]
1000a78c:	3302      	adds	r3, #2
1000a78e:	42a3      	cmp	r3, r4
1000a790:	d1fa      	bne.n	1000a788 <memset+0x100>
1000a792:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a794:	1c03      	adds	r3, r0, #0
1000a796:	1c14      	adds	r4, r2, #0
1000a798:	e798      	b.n	1000a6cc <memset+0x44>
1000a79a:	1c1d      	adds	r5, r3, #0
1000a79c:	e7ca      	b.n	1000a734 <memset+0xac>
1000a79e:	46c0      	nop			; (mov r8, r8)

1000a7a0 <strcmp>:
1000a7a0:	7802      	ldrb	r2, [r0, #0]
1000a7a2:	780b      	ldrb	r3, [r1, #0]
1000a7a4:	3001      	adds	r0, #1
1000a7a6:	3101      	adds	r1, #1
1000a7a8:	2a00      	cmp	r2, #0
1000a7aa:	d001      	beq.n	1000a7b0 <strcmp+0x10>
1000a7ac:	429a      	cmp	r2, r3
1000a7ae:	d0f7      	beq.n	1000a7a0 <strcmp>
1000a7b0:	1ad0      	subs	r0, r2, r3
1000a7b2:	4770      	bx	lr

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10003137 	.word	0x10003137
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	100083ed 	.word	0x100083ed
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	100084f1 	.word	0x100084f1
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10008535 	.word	0x10008535
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	1000313f 	.word	0x1000313f
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10003141 	.word	0x10003141
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10003143 	.word	0x10003143
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10003145 	.word	0x10003145
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10003147 	.word	0x10003147
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10003149 	.word	0x10003149
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	1000314b 	.word	0x1000314b
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	10003159 	.word	0x10003159
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	1000315b 	.word	0x1000315b
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	1000315d 	.word	0x1000315d
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	1000315f 	.word	0x1000315f
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	10003161 	.word	0x10003161
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	10003163 	.word	0x10003163
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	1000314d 	.word	0x1000314d
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	1000314f 	.word	0x1000314f
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	10003151 	.word	0x10003151
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	10003153 	.word	0x10003153
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	10003155 	.word	0x10003155
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	10003157 	.word	0x10003157
