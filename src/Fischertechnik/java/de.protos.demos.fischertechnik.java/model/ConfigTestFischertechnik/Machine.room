RoomModel MachineModel {

	import model "../../../de.protos.automation.io/models/ServiceProvider.room"
	import room.basic.types.* from "../../../org.eclipse.etrice.modellib.java/model/Types.room"
	import room.basic.service.timing.* from "../../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import model "GenericLineElements.room"

	LogicalSystem MachineSystem{
		SubSystemRef SubSystem : MachineSubSystem
	}
	SubSystemClass MachineSubSystem {
		ActorRef Controller : MachineController
		ActorRef Services: protos.automation.service.provider.ServiceProvider
		LayerConnection ref Controller satisfied_by Services.dig_in
		LayerConnection ref Controller satisfied_by Services.dig_out
		LayerConnection ref Controller satisfied_by Services.timer
	
		LogicalThread dflt_thread
	}
	
	ActorClass MachineController {
		Structure {
			SAP timeout: PTimer
			Attribute overallLifeTime : int64
			Attribute onlineTime : int32
			Attribute startTimestamp: string
			ActorRef SourceSensor1: GenericLineElements.SourceSensor
			ActorRef BeltStation2: GenericLineElements.BeltStation
			ActorRef PusherStation3: GenericLineElements.PusherStation
			ActorRef ProductionStation4: GenericLineElements.ProductionStation
			ActorRef ProductionStation5: GenericLineElements.ProductionStation
			ActorRef PusherStation6: GenericLineElements.PusherStation
			ActorRef BeltStation7: GenericLineElements.BeltStation
			ActorRef SinkSensor8: GenericLineElements.SinkSensor
			Binding SourceSensor1.next and BeltStation2.prev
			Binding BeltStation2.next and PusherStation3.prev
			Binding PusherStation3.next and ProductionStation4.prev
			Binding ProductionStation4.next and ProductionStation5.prev
			Binding ProductionStation5.next and PusherStation6.prev
			Binding PusherStation6.next and BeltStation7.prev
			Binding BeltStation7.next and SinkSensor8.prev
			
		}
		Behavior { 
			StateMachine{
				Transition t0:initial -> running{
					action{
						"this.setStartTimestamp(new Date());"
					}
				}
				Transition t1:running -> running{
					triggers {
						<timeout: timeout>
					}
					action{
						"int temp = getOnlineTime();"
						"this.setOnlineTime(temp+1);"
						"temp = getOverallLifeTime();"
						"this.setOverallLifeTime(temp+1);"
					}
				}
				State running{
					entry{
						"timeout.startTimeout(60000);"
					}
				}
			}
			
		}
	}
}