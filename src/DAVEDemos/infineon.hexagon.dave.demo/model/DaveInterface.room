RoomModel DaveInterface {

	import room.basic.types.* from "Types.room"

	ProtocolClass PWMSP001 {
		usercode1 {
			"#include <DAVE3.h>"
		}
		incoming {
			Message dummy()
		}
		conjugated PortClass
		{
			Operation setInstance(data: uint32) {
				"Handle=&PWMSP001_Handle0;"
			}
			Operation setDutyCycle(dc: uint8) {
				"PWMSP001_SetDutyCycle(Handle, dc);"
			}
			Attribute Handle: PWMSP001_HandleType ref = "0"
		}
	}

	ProtocolClass PUART001 {
		usercode1 {
			"#include <DAVE3.h>"
		}
		incoming {
			Message dummy()
		}
		conjugated PortClass
		{
			Operation setInstance(data: uint32) {
				"Handle=UART001_HandleArray[data];"
			}
			Operation readDataBytes(buffer: uint8 ref, count: uint32): uint32 {
				"if (Handle != 0){"
				"	return UART001_ReadDataBytes(Handle,buffer,count);}"
				"return 0;"
			}
			Operation writeDataBytes(buffer: uint8 ref, count: uint32): uint32 {
				"if (Handle != 0){"
				"   return UART001_WriteDataBytes(Handle,buffer,count);}"
				"return 0;"
			}
			Attribute Handle: UART001_HandleType ref = "0"
		}
	}

	ProtocolClass PGUI {
		usercode1 {
			"#include <DAVE3.h>"
			"#include <GUI.h>"
		}
		incoming {
			Message dummy()
		}
		conjugated PortClass
		{
			Operation init() {
				"/* Initialize GUI Library */"
				"GUI_Init();"
			}
			Operation clear() {
				"/* Clear screen */"
				"GUI_Clear();"
			}
			Operation drawBitmap(data: DGuiBitmap ref) {
				"GUI_DrawBitmap(data->bitmap,data->xPos, data->yPos);"
			}
			Operation dispStringHCenterAt(data: DGuiString ref) {
				"GUI_DispStringHCenterAt(data->s,data->xPos,data->yPos);"
			}
			Operation setFont(data: GUI_CONST_STORAGE ref) {
				"GUI_SetFont(data);"
			}
			Operation setColor(data: int32) {
				"GUI_SetColor(data);"
			}
			Operation setBkColor(data: uint32) {
				"GUI_SetBkColor(data);"
			}
		}
	}

	DataClass DGuiBitmap {
		usercode1 {
			"#include <GUI.h>"
		}
		Attribute bitmap: GUI_BITMAP ref
		Attribute xPos: uint32
		Attribute yPos: uint32
	}

	DataClass DGuiString {
		usercode1 {
			"#include <GUI.h>"
		}
		Attribute s: char ref
		Attribute xPos: uint32
		Attribute yPos: uint32
	}

	ProtocolClass PIO004 {
		usercode1 {
			"#include <DAVE3.h>"
		}
		incoming {
			Message dummy()
		}
		conjugated PortClass
		{
			Operation setInstance(data: uint32) {
				"switch(data){"
				"    case 0: Handle=IO004_Handle0;"
				"		break;"
				"    case 1: Handle=IO004_Handle1;"
				"		break;"
				"    case 2: Handle=IO004_Handle2;"
				"		break;"
				"    default: break;"
				"    }"
			}
			Operation setPin() {
				"IO004_SetPin(Handle);"
			}
			Operation resetPin() {
				"IO004_ResetPin(Handle);"
			}
			Operation readPin(data: uint8 ref) {
				"*data = IO004_ReadPin(Handle);"
			}
			Attribute Handle: IO004_HandleType = "0"
		}
	}

	ProtocolClass PI2C001 {
		usercode1 {
			"#include <DAVE3.h>"
		}
		incoming { }
		conjugated PortClass
		{
			Operation setInstance(data: uint32) {
				"switch(data){"
				"    case 0: Handle=&I2C001_Handle0;"
				"		break;"
				"    default: break;"
				"    }"
			}
			Operation init() {
				"I2C001_DataType d;"
				"d.Data1.TDF_Type = I2C_TDF_MStart;"
				"d.Data1.Data = (i2cAddr | I2C_WRITE);"
				"while(!I2C001_WriteData(Handle,&d));"
				"// Write data to address the Direction register"
				"d.Data1.TDF_Type = I2C_TDF_MTxData;"
				"d.Data1.Data = 0x50;  // address of  direction register in the GPI expander"
				"while(!I2C001_WriteData(Handle,&d));"
				"// Write data to the Direction register"
				"d.Data1.TDF_Type = I2C_TDF_MTxData;"
				"d.Data1.Data = 0xFF; //  all GPIOs are set as output"
				"while(!I2C001_WriteData(Handle,&d));"
				"// Transmit repeated start condition and slave address"
				"d.Data1.TDF_Type = I2C_TDF_MRStart;"
				"d.Data1.Data = i2cAddr | I2C_WRITE;  // address of the GPI expander PCA 9502"
				"while(!I2C001_WriteData(Handle,&d));"
				"// Write data to address the State register"
				"d.Data1.TDF_Type = I2C_TDF_MTxData;"
				"d.Data1.Data = 0x58; // address of  state register in the GPI expander"
				"while(!I2C001_WriteData(Handle,&d));"
				"// Write data to the sate register to turn some other LED on"
				"d.Data1.TDF_Type = I2C_TDF_MTxData;"
				"d.Data1.Data = 0xFF; //  turn any other LED on, LED is on when writing 0"
				"while(!I2C001_WriteData(Handle,&d));"
			}
			Operation setI2CAddr(data: int32) {
				" i2cAddr = data; "
			}
			Operation writeData(data: int32) {
				"I2C001_DataType d;"
				"d.Data1.TDF_Type = I2C_TDF_MTxData;"
				"d.Data1.Data = (uint8) data;"
				"while(!I2C001_WriteData(Handle,&d));"
			}
			Attribute Handle: I2C001_HandleType ref
			Attribute i2cData: I2C001_DataType
			Attribute i2cAddr: int32
		}
	}

	ProtocolClass PADC001 {
		usercode1 {
			"#include <DAVE3.h> "
		}
		incoming {
			Message dummy()
		}
		conjugated PortClass
		{
			Operation setInstance(data: uint32) {
				" switch ( data ) { "
				" case 0 : Handle = & ADC001_Handle0 ; "
				" break ; "
				" default : break ; "
				"} "
			}
			Operation getResult(data: int32 ref) {
				" ADC001_ResultHandleType Result; "
				" ADC001_GetResult (Handle, &Result); "
				" *data = Result.Result ; "
			}
			Operation generateLoadEvent() {
				" ADC001_GenerateLoadEvent ( Handle ) ; "
			}
			Attribute Handle: ADC001_HandleType ref = " 0 "
		}
	}

	ExternalType I2C001_DataType -> " I2C001_DataType " default "0"
	ExternalType I2C001_HandleType -> " I2C001Handle_type "
	ExternalType ADC001_HandleType -> " ADC001_HandleType "
	ExternalType GUI_CONST_STORAGE -> " GUI_CONST_STORAGE "
	ExternalType GUI_BITMAP -> " GUI_BITMAP "
	ExternalType PWMSP001_HandleType -> " PWMSP001_HandleType "
	ExternalType UART001_HandleType -> " UART001_HandleType "
	ExternalType IO004_HandleType -> " IO004_HandleType "
	ExternalType IO004_InputModeType -> " IO004_InputModeType "
}