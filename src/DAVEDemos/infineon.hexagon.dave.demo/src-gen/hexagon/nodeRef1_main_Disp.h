/**
 * @author generated by eTrice
 *
 * Dispatcher File of Node nodeRef1 with SubSystem main
 * contains a generated message dispatcher (receiveMessage) for each MessageService (Thread)
 */

#include "messaging/etMessageReceiver.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"


/**
 * generated execute function for all cyclic execute calls for the async or datadriven actor instances of thread "PhysicalThread1"
 */
static void MsgDispatcher_PhysicalThread1_poll(void){
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_PhysicalThread1", "execute")
	ATimingService_execute((void*)&_hexagon_main_timingService);
	ET_MSC_LOGGER_SYNC_EXIT
}

/**
 * generated dispatch function for all messages for the thread "PhysicalThread1"
 */
static etBool MsgDispatcher_PhysicalThread1_receiveMessage(const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_PhysicalThread1", "receiveMessage")
	switch(msg->address){
	
		case MESSAGESERVICE_ADDRESS:
			if (msg->evtID == etSystemProtocol_IN_poll) {
				MsgDispatcher_PhysicalThread1_poll();
			}
			else
			if (msg->evtID == etSystemProtocol_IN_terminate)
				return ET_FALSE;
			break;
		
		/* interface items of /hexagon/main/appl */
		case 2+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_const.blinkyPort)->peerInstName,
				PBlinkyControl_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_const.blinkyPort)->myInstName
				)
			Application_receiveMessage((void*)&_hexagon_main_appl,(etPort*)&_hexagon_main_appl_const.blinkyPort, msg);
			break;
		case 3+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_const.buttonControlPort)->peerInstName,
				PButtonControlProtocoll_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_const.buttonControlPort)->myInstName
				)
			Application_receiveMessage((void*)&_hexagon_main_appl,(etPort*)&_hexagon_main_appl_const.buttonControlPort, msg);
			break;
		case 4+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_const.buttonPort)->peerInstName,
				PButtonProtocoll_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_const.buttonPort)->myInstName
				)
			Application_receiveMessage((void*)&_hexagon_main_appl,(etPort*)&_hexagon_main_appl_const.buttonPort, msg);
			break;
		case 5+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_const.adcControlPort)->peerInstName,
				PAdcControlProtocoll_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_const.adcControlPort)->myInstName
				)
			Application_receiveMessage((void*)&_hexagon_main_appl,(etPort*)&_hexagon_main_appl_const.adcControlPort, msg);
			break;
		
		/* interface items of /hexagon/main/appl/blinky */
		case 7+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_blinky_const.controlPort)->peerInstName,
				PBlinkyControl_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_blinky_const.controlPort)->myInstName
				)
			ABlinky_receiveMessage((void*)&_hexagon_main_appl_blinky,(etPort*)&_hexagon_main_appl_blinky_const.controlPort, msg);
			break;
		case 8+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_blinky_const.LED1)->peerInstName,
				PIO004_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_blinky_const.LED1)->myInstName
				)
			ABlinky_receiveMessage((void*)&_hexagon_main_appl_blinky,(etPort*)&_hexagon_main_appl_blinky_const.LED1, msg);
			break;
		case 9+BASE_ADDRESS:
			switch (msg->evtID){
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_hexagon_main_appl_blinky_const.timer,msg,(void*)&_hexagon_main_appl_blinky,ABlinky_receiveMessage);
					break;
				default: ABlinky_receiveMessage((void*)&_hexagon_main_appl_blinky,(etPort*)&_hexagon_main_appl_blinky_const.timer, msg);
					break;
			}
			break;
		
		/* interface items of /hexagon/main/appl/button */
		case 11+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_button_const.ioPort)->peerInstName,
				PButtonProtocoll_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_button_const.ioPort)->myInstName
				)
			AButtonController_receiveMessage((void*)&_hexagon_main_appl_button,(etPort*)&_hexagon_main_appl_button_const.ioPort, msg);
			break;
		case 12+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_button_const.controlPort)->peerInstName,
				PButtonControlProtocoll_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_button_const.controlPort)->myInstName
				)
			AButtonController_receiveMessage((void*)&_hexagon_main_appl_button,(etPort*)&_hexagon_main_appl_button_const.controlPort, msg);
			break;
		case 13+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_button_const.hwPin)->peerInstName,
				PIO004_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_button_const.hwPin)->myInstName
				)
			AButtonController_receiveMessage((void*)&_hexagon_main_appl_button,(etPort*)&_hexagon_main_appl_button_const.hwPin, msg);
			break;
		case 14+BASE_ADDRESS:
			switch (msg->evtID){
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_hexagon_main_appl_button_const.timer,msg,(void*)&_hexagon_main_appl_button,AButtonController_receiveMessage);
					break;
				default: AButtonController_receiveMessage((void*)&_hexagon_main_appl_button,(etPort*)&_hexagon_main_appl_button_const.timer, msg);
					break;
			}
			break;
		
		/* interface items of /hexagon/main/appl/display */
		case 16+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_display_const.control)->peerInstName,
				PAdcProtocoll_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_display_const.control)->myInstName
				)
			ADisplay_receiveMessage((void*)&_hexagon_main_appl_display,(etPort*)&_hexagon_main_appl_display_const.control, msg);
			break;
		case 17+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_display_const.gui)->peerInstName,
				PGUI_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_display_const.gui)->myInstName
				)
			ADisplay_receiveMessage((void*)&_hexagon_main_appl_display,(etPort*)&_hexagon_main_appl_display_const.gui, msg);
			break;
		case 18+BASE_ADDRESS:
			switch (msg->evtID){
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_hexagon_main_appl_display_const.timer,msg,(void*)&_hexagon_main_appl_display,ADisplay_receiveMessage);
					break;
				default: ADisplay_receiveMessage((void*)&_hexagon_main_appl_display,(etPort*)&_hexagon_main_appl_display_const.timer, msg);
					break;
			}
			break;
		case 19+BASE_ADDRESS:
			switch (msg->evtID){
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_hexagon_main_appl_display_const.timerAdc,msg,(void*)&_hexagon_main_appl_display,ADisplay_receiveMessage);
					break;
				default: ADisplay_receiveMessage((void*)&_hexagon_main_appl_display,(etPort*)&_hexagon_main_appl_display_const.timerAdc, msg);
					break;
			}
			break;
		
		/* interface items of /hexagon/main/appl/adc */
		case 21+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_adc_const.control)->peerInstName,
				PAdcControlProtocoll_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_adc_const.control)->myInstName
				)
			AAdc_receiveMessage((void*)&_hexagon_main_appl_adc,(etPort*)&_hexagon_main_appl_adc_const.control, msg);
			break;
		case 22+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				_hexagon_main_appl_adc_const.payload.ports[0].port.peerInstName,
				PAdcProtocoll_getMessageString(msg->evtID),
				_hexagon_main_appl_adc_const.payload.ports[0].port.myInstName
				)
			AAdc_receiveMessage((void*)&_hexagon_main_appl_adc,&_hexagon_main_appl_adc_const.payload.ports[0].port, msg);
		break;
		case 23+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				_hexagon_main_appl_adc_const.payload.ports[1].port.peerInstName,
				PAdcProtocoll_getMessageString(msg->evtID),
				_hexagon_main_appl_adc_const.payload.ports[1].port.myInstName
				)
			AAdc_receiveMessage((void*)&_hexagon_main_appl_adc,&_hexagon_main_appl_adc_const.payload.ports[1].port, msg);
		break;
		case 24+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				_hexagon_main_appl_adc_const.payload.ports[2].port.peerInstName,
				PAdcProtocoll_getMessageString(msg->evtID),
				_hexagon_main_appl_adc_const.payload.ports[2].port.myInstName
				)
			AAdc_receiveMessage((void*)&_hexagon_main_appl_adc,&_hexagon_main_appl_adc_const.payload.ports[2].port, msg);
		break;
		case 25+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_adc_const.adc)->peerInstName,
				PADC001_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_adc_const.adc)->myInstName
				)
			AAdc_receiveMessage((void*)&_hexagon_main_appl_adc,(etPort*)&_hexagon_main_appl_adc_const.adc, msg);
			break;
		case 26+BASE_ADDRESS:
			switch (msg->evtID){
				case PTimer_OUT_timeout:
					PTimerConjPort_timeout_receiveHandler((etPort *)&_hexagon_main_appl_adc_const.timer,msg,(void*)&_hexagon_main_appl_adc,AAdc_receiveMessage);
					break;
				default: AAdc_receiveMessage((void*)&_hexagon_main_appl_adc,(etPort*)&_hexagon_main_appl_adc_const.timer, msg);
					break;
			}
			break;
		
		/* interface items of /hexagon/main/appl/i2c */
		case 28+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_i2c_const.payload)->peerInstName,
				PAdcProtocoll_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_i2c_const.payload)->myInstName
				)
			AI2CController_receiveMessage((void*)&_hexagon_main_appl_i2c,(etPort*)&_hexagon_main_appl_i2c_const.payload, msg);
			break;
		case 29+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_i2c_const.i2c)->peerInstName,
				PI2C001_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_i2c_const.i2c)->myInstName
				)
			AI2CController_receiveMessage((void*)&_hexagon_main_appl_i2c,(etPort*)&_hexagon_main_appl_i2c_const.i2c, msg);
			break;
		
		/* interface items of /hexagon/main/appl/uart */
		case 31+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_uart_const.p0)->peerInstName,
				PAdcProtocoll_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_uart_const.p0)->myInstName
				)
			AUartController_receiveMessage((void*)&_hexagon_main_appl_uart,(etPort*)&_hexagon_main_appl_uart_const.p0, msg);
			break;
		case 32+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				((etPort*)&_hexagon_main_appl_uart_const.uart)->peerInstName,
				PUART001_getMessageString(msg->evtID),
				((etPort*)&_hexagon_main_appl_uart_const.uart)->myInstName
				)
			AUartController_receiveMessage((void*)&_hexagon_main_appl_uart,(etPort*)&_hexagon_main_appl_uart_const.uart, msg);
			break;
		
		/* interface items of /hexagon/main/timingService */
		case 34+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				_hexagon_main_timingService_const.timer.ports[0].port.peerInstName,
				PTimer_getMessageString(msg->evtID),
				_hexagon_main_timingService_const.timer.ports[0].port.myInstName
				)
			ATimingService_receiveMessage((void*)&_hexagon_main_timingService,&_hexagon_main_timingService_const.timer.ports[0].port, msg);
		break;
		case 35+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				_hexagon_main_timingService_const.timer.ports[1].port.peerInstName,
				PTimer_getMessageString(msg->evtID),
				_hexagon_main_timingService_const.timer.ports[1].port.myInstName
				)
			ATimingService_receiveMessage((void*)&_hexagon_main_timingService,&_hexagon_main_timingService_const.timer.ports[1].port, msg);
		break;
		case 36+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				_hexagon_main_timingService_const.timer.ports[2].port.peerInstName,
				PTimer_getMessageString(msg->evtID),
				_hexagon_main_timingService_const.timer.ports[2].port.myInstName
				)
			ATimingService_receiveMessage((void*)&_hexagon_main_timingService,&_hexagon_main_timingService_const.timer.ports[2].port, msg);
		break;
		case 37+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				_hexagon_main_timingService_const.timer.ports[3].port.peerInstName,
				PTimer_getMessageString(msg->evtID),
				_hexagon_main_timingService_const.timer.ports[3].port.myInstName
				)
			ATimingService_receiveMessage((void*)&_hexagon_main_timingService,&_hexagon_main_timingService_const.timer.ports[3].port, msg);
		break;
		case 38+BASE_ADDRESS:
			ET_MSC_LOGGER_ASYNC_IN(
				_hexagon_main_timingService_const.timer.ports[4].port.peerInstName,
				PTimer_getMessageString(msg->evtID),
				_hexagon_main_timingService_const.timer.ports[4].port.myInstName
				)
			ATimingService_receiveMessage((void*)&_hexagon_main_timingService,&_hexagon_main_timingService_const.timer.ports[4].port, msg);
		break;
		
		default:
			etLogger_logErrorF("MessageService_PhysicalThread1_receiveMessage: address %d does not exist ", msg->address);
			break;
	}
	ET_MSC_LOGGER_SYNC_EXIT
	return ET_TRUE;
}
